/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimple8000SeriesManagementClient.
 */
export interface Operations {


    /**
     * Lists all of the available REST API operations of the Microsoft.Storsimple
     * provider
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AvailableProviderOperationList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AvailableProviderOperationList>>;

    /**
     * Lists all of the available REST API operations of the Microsoft.Storsimple
     * provider
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AvailableProviderOperationList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AvailableProviderOperationList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AvailableProviderOperationList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AvailableProviderOperationList>;
    list(callback: ServiceCallback<models.AvailableProviderOperationList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AvailableProviderOperationList>): void;


    /**
     * Lists all of the available REST API operations of the Microsoft.Storsimple
     * provider
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AvailableProviderOperationList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AvailableProviderOperationList>>;

    /**
     * Lists all of the available REST API operations of the Microsoft.Storsimple
     * provider
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AvailableProviderOperationList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AvailableProviderOperationList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AvailableProviderOperationList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AvailableProviderOperationList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.AvailableProviderOperationList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AvailableProviderOperationList>): void;
}

/**
 * @class
 * Managers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimple8000SeriesManagementClient.
 */
export interface Managers {


    /**
     * Retrieves all the managers in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagerList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagerList>>;

    /**
     * Retrieves all the managers in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagerList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagerList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagerList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagerList>;
    list(callback: ServiceCallback<models.ManagerList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagerList>): void;


    /**
     * Retrieves all the managers in a resource group.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagerList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagerList>>;

    /**
     * Retrieves all the managers in a resource group.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagerList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagerList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagerList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagerList>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ManagerList>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagerList>): void;


    /**
     * Returns the properties of the specified manager name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Manager>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Manager>>;

    /**
     * Returns the properties of the specified manager name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Manager} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Manager} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Manager} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Manager>;
    get(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.Manager>): void;
    get(resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Manager>): void;


    /**
     * Creates or updates the manager.
     *
     * @param {object} parameters The manager.
     *
     * @param {object} [parameters.cisIntrinsicSettings] Represents the type of
     * StorSimple Manager.
     *
     * @param {string} parameters.cisIntrinsicSettings.type The type of StorSimple
     * Manager. Possible values include: 'GardaV1', 'HelsinkiV1'
     *
     * @param {string} [parameters.provisioningState] Specifies the state of the
     * resource as it is getting provisioned. Value of "Succeeded" means the
     * Manager was successfully created.
     *
     * @param {string} [parameters.etag] The etag of the manager.
     *
     * @param {string} parameters.location The geo location of the resource.
     *
     * @param {object} [parameters.tags] The tags attached to the resource.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Manager>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(parameters: models.Manager, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Manager>>;

    /**
     * Creates or updates the manager.
     *
     * @param {object} parameters The manager.
     *
     * @param {object} [parameters.cisIntrinsicSettings] Represents the type of
     * StorSimple Manager.
     *
     * @param {string} parameters.cisIntrinsicSettings.type The type of StorSimple
     * Manager. Possible values include: 'GardaV1', 'HelsinkiV1'
     *
     * @param {string} [parameters.provisioningState] Specifies the state of the
     * resource as it is getting provisioned. Value of "Succeeded" means the
     * Manager was successfully created.
     *
     * @param {string} [parameters.etag] The etag of the manager.
     *
     * @param {string} parameters.location The geo location of the resource.
     *
     * @param {object} [parameters.tags] The tags attached to the resource.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Manager} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Manager} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Manager} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(parameters: models.Manager, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Manager>;
    createOrUpdate(parameters: models.Manager, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.Manager>): void;
    createOrUpdate(parameters: models.Manager, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Manager>): void;


    /**
     * Deletes the manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates the StorSimple Manager.
     *
     * @param {object} parameters The manager update parameters.
     *
     * @param {object} [parameters.tags] The tags attached to the Manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Manager>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(parameters: models.ManagerPatch, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Manager>>;

    /**
     * Updates the StorSimple Manager.
     *
     * @param {object} parameters The manager update parameters.
     *
     * @param {object} [parameters.tags] The tags attached to the Manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Manager} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Manager} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Manager} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(parameters: models.ManagerPatch, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Manager>;
    update(parameters: models.ManagerPatch, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.Manager>): void;
    update(parameters: models.ManagerPatch, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Manager>): void;


    /**
     * Returns the public encryption key of the device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PublicKey>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDevicePublicEncryptionKeyWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublicKey>>;

    /**
     * Returns the public encryption key of the device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PublicKey} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PublicKey} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PublicKey} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDevicePublicEncryptionKey(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PublicKey>;
    getDevicePublicEncryptionKey(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.PublicKey>): void;
    getDevicePublicEncryptionKey(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicKey>): void;


    /**
     * Returns the encryption settings of the manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EncryptionSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEncryptionSettingsWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EncryptionSettings>>;

    /**
     * Returns the encryption settings of the manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EncryptionSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EncryptionSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EncryptionSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEncryptionSettings(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EncryptionSettings>;
    getEncryptionSettings(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.EncryptionSettings>): void;
    getEncryptionSettings(resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EncryptionSettings>): void;


    /**
     * Returns the extended information of the specified manager name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagerExtendedInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getExtendedInfoWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagerExtendedInfo>>;

    /**
     * Returns the extended information of the specified manager name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagerExtendedInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagerExtendedInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagerExtendedInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getExtendedInfo(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagerExtendedInfo>;
    getExtendedInfo(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.ManagerExtendedInfo>): void;
    getExtendedInfo(resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagerExtendedInfo>): void;


    /**
     * Creates the extended info of the manager.
     *
     * @param {object} parameters The manager extended information.
     *
     * @param {string} [parameters.version] The version of the extended info being
     * persisted.
     *
     * @param {string} parameters.integrityKey Represents the CIK of the resource.
     *
     * @param {string} [parameters.encryptionKey] Represents the CEK of the
     * resource.
     *
     * @param {string} [parameters.encryptionKeyThumbprint] Represents the Cert
     * thumbprint that was used to encrypt the CEK.
     *
     * @param {string} [parameters.portalCertificateThumbprint] Represents the
     * portal thumbprint which can be used optionally to encrypt the entire data
     * before storing it.
     *
     * @param {string} parameters.algorithm Represents the encryption algorithm
     * used to encrypt the keys. None - if Key is saved in plain text format.
     * Algorithm name - if key is encrypted
     *
     * @param {string} [parameters.etag] The etag of the resource.
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagerExtendedInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createExtendedInfoWithHttpOperationResponse(parameters: models.ManagerExtendedInfo, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagerExtendedInfo>>;

    /**
     * Creates the extended info of the manager.
     *
     * @param {object} parameters The manager extended information.
     *
     * @param {string} [parameters.version] The version of the extended info being
     * persisted.
     *
     * @param {string} parameters.integrityKey Represents the CIK of the resource.
     *
     * @param {string} [parameters.encryptionKey] Represents the CEK of the
     * resource.
     *
     * @param {string} [parameters.encryptionKeyThumbprint] Represents the Cert
     * thumbprint that was used to encrypt the CEK.
     *
     * @param {string} [parameters.portalCertificateThumbprint] Represents the
     * portal thumbprint which can be used optionally to encrypt the entire data
     * before storing it.
     *
     * @param {string} parameters.algorithm Represents the encryption algorithm
     * used to encrypt the keys. None - if Key is saved in plain text format.
     * Algorithm name - if key is encrypted
     *
     * @param {string} [parameters.etag] The etag of the resource.
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagerExtendedInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagerExtendedInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagerExtendedInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createExtendedInfo(parameters: models.ManagerExtendedInfo, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagerExtendedInfo>;
    createExtendedInfo(parameters: models.ManagerExtendedInfo, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.ManagerExtendedInfo>): void;
    createExtendedInfo(parameters: models.ManagerExtendedInfo, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagerExtendedInfo>): void;


    /**
     * Deletes the extended info of the manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteExtendedInfoWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the extended info of the manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteExtendedInfo(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteExtendedInfo(resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    deleteExtendedInfo(resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates the extended info of the manager.
     *
     * @param {object} parameters The manager extended information.
     *
     * @param {string} [parameters.version] The version of the extended info being
     * persisted.
     *
     * @param {string} parameters.integrityKey Represents the CIK of the resource.
     *
     * @param {string} [parameters.encryptionKey] Represents the CEK of the
     * resource.
     *
     * @param {string} [parameters.encryptionKeyThumbprint] Represents the Cert
     * thumbprint that was used to encrypt the CEK.
     *
     * @param {string} [parameters.portalCertificateThumbprint] Represents the
     * portal thumbprint which can be used optionally to encrypt the entire data
     * before storing it.
     *
     * @param {string} parameters.algorithm Represents the encryption algorithm
     * used to encrypt the keys. None - if Key is saved in plain text format.
     * Algorithm name - if key is encrypted
     *
     * @param {string} [parameters.etag] The etag of the resource.
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {string} ifMatch Pass the ETag of ExtendedInfo fetched from GET call
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagerExtendedInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateExtendedInfoWithHttpOperationResponse(parameters: models.ManagerExtendedInfo, resourceGroupName: string, managerName: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagerExtendedInfo>>;

    /**
     * Updates the extended info of the manager.
     *
     * @param {object} parameters The manager extended information.
     *
     * @param {string} [parameters.version] The version of the extended info being
     * persisted.
     *
     * @param {string} parameters.integrityKey Represents the CIK of the resource.
     *
     * @param {string} [parameters.encryptionKey] Represents the CEK of the
     * resource.
     *
     * @param {string} [parameters.encryptionKeyThumbprint] Represents the Cert
     * thumbprint that was used to encrypt the CEK.
     *
     * @param {string} [parameters.portalCertificateThumbprint] Represents the
     * portal thumbprint which can be used optionally to encrypt the entire data
     * before storing it.
     *
     * @param {string} parameters.algorithm Represents the encryption algorithm
     * used to encrypt the keys. None - if Key is saved in plain text format.
     * Algorithm name - if key is encrypted
     *
     * @param {string} [parameters.etag] The etag of the resource.
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {string} ifMatch Pass the ETag of ExtendedInfo fetched from GET call
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagerExtendedInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagerExtendedInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagerExtendedInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateExtendedInfo(parameters: models.ManagerExtendedInfo, resourceGroupName: string, managerName: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagerExtendedInfo>;
    updateExtendedInfo(parameters: models.ManagerExtendedInfo, resourceGroupName: string, managerName: string, ifMatch: string, callback: ServiceCallback<models.ManagerExtendedInfo>): void;
    updateExtendedInfo(parameters: models.ManagerExtendedInfo, resourceGroupName: string, managerName: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagerExtendedInfo>): void;


    /**
     * Lists the features and their support status
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FeatureList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listFeatureSupportStatusWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FeatureList>>;

    /**
     * Lists the features and their support status
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FeatureList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FeatureList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FeatureList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listFeatureSupportStatus(resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.FeatureList>;
    listFeatureSupportStatus(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.FeatureList>): void;
    listFeatureSupportStatus(resourceGroupName: string, managerName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FeatureList>): void;


    /**
     * Returns the activation key of the manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Key>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getActivationKeyWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Key>>;

    /**
     * Returns the activation key of the manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Key} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Key} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Key} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getActivationKey(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Key>;
    getActivationKey(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.Key>): void;
    getActivationKey(resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Key>): void;


    /**
     * Returns the symmetric encrypted public encryption key of the manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SymmetricEncryptedSecret>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPublicEncryptionKeyWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SymmetricEncryptedSecret>>;

    /**
     * Returns the symmetric encrypted public encryption key of the manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SymmetricEncryptedSecret} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SymmetricEncryptedSecret} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SymmetricEncryptedSecret} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getPublicEncryptionKey(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SymmetricEncryptedSecret>;
    getPublicEncryptionKey(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.SymmetricEncryptedSecret>): void;
    getPublicEncryptionKey(resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SymmetricEncryptedSecret>): void;


    /**
     * Gets the metrics for the specified manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {string} filter OData Filter options
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(resourceGroupName: string, managerName: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricList>>;

    /**
     * Gets the metrics for the specified manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {string} filter OData Filter options
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(resourceGroupName: string, managerName: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricList>;
    listMetrics(resourceGroupName: string, managerName: string, filter: string, callback: ServiceCallback<models.MetricList>): void;
    listMetrics(resourceGroupName: string, managerName: string, filter: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricList>): void;


    /**
     * Gets the metric definitions for the specified manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricDefinitionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricDefinitionWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricDefinitionList>>;

    /**
     * Gets the metric definitions for the specified manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricDefinitionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricDefinitionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricDefinitionList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetricDefinition(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricDefinitionList>;
    listMetricDefinition(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.MetricDefinitionList>): void;
    listMetricDefinition(resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinitionList>): void;


    /**
     * Re-generates and returns the activation key of the manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Key>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regenerateActivationKeyWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Key>>;

    /**
     * Re-generates and returns the activation key of the manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Key} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Key} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Key} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regenerateActivationKey(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Key>;
    regenerateActivationKey(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.Key>): void;
    regenerateActivationKey(resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Key>): void;
}

/**
 * @class
 * AccessControlRecords
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimple8000SeriesManagementClient.
 */
export interface AccessControlRecords {


    /**
     * Retrieves all the access control records in a manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AccessControlRecordList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByManagerWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AccessControlRecordList>>;

    /**
     * Retrieves all the access control records in a manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AccessControlRecordList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AccessControlRecordList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AccessControlRecordList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByManager(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AccessControlRecordList>;
    listByManager(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.AccessControlRecordList>): void;
    listByManager(resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AccessControlRecordList>): void;


    /**
     * Returns the properties of the specified access control record name.
     *
     * @param {string} accessControlRecordName Name of access control record to be
     * fetched.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AccessControlRecord>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(accessControlRecordName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AccessControlRecord>>;

    /**
     * Returns the properties of the specified access control record name.
     *
     * @param {string} accessControlRecordName Name of access control record to be
     * fetched.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AccessControlRecord} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AccessControlRecord} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AccessControlRecord} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(accessControlRecordName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AccessControlRecord>;
    get(accessControlRecordName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.AccessControlRecord>): void;
    get(accessControlRecordName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AccessControlRecord>): void;


    /**
     * Creates or Updates an access control record.
     *
     * @param {string} accessControlRecordName The name of the access control
     * record.
     *
     * @param {object} parameters The access control record to be added or updated.
     *
     * @param {string} parameters.initiatorName The iSCSI initiator name (IQN).
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AccessControlRecord>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(accessControlRecordName: string, parameters: models.AccessControlRecord, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AccessControlRecord>>;

    /**
     * Creates or Updates an access control record.
     *
     * @param {string} accessControlRecordName The name of the access control
     * record.
     *
     * @param {object} parameters The access control record to be added or updated.
     *
     * @param {string} parameters.initiatorName The iSCSI initiator name (IQN).
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AccessControlRecord} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AccessControlRecord} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AccessControlRecord} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(accessControlRecordName: string, parameters: models.AccessControlRecord, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AccessControlRecord>;
    createOrUpdate(accessControlRecordName: string, parameters: models.AccessControlRecord, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.AccessControlRecord>): void;
    createOrUpdate(accessControlRecordName: string, parameters: models.AccessControlRecord, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AccessControlRecord>): void;


    /**
     * Deletes the access control record.
     *
     * @param {string} accessControlRecordName The name of the access control
     * record to delete.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(accessControlRecordName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the access control record.
     *
     * @param {string} accessControlRecordName The name of the access control
     * record to delete.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(accessControlRecordName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(accessControlRecordName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(accessControlRecordName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or Updates an access control record.
     *
     * @param {string} accessControlRecordName The name of the access control
     * record.
     *
     * @param {object} parameters The access control record to be added or updated.
     *
     * @param {string} parameters.initiatorName The iSCSI initiator name (IQN).
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AccessControlRecord>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(accessControlRecordName: string, parameters: models.AccessControlRecord, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AccessControlRecord>>;

    /**
     * Creates or Updates an access control record.
     *
     * @param {string} accessControlRecordName The name of the access control
     * record.
     *
     * @param {object} parameters The access control record to be added or updated.
     *
     * @param {string} parameters.initiatorName The iSCSI initiator name (IQN).
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AccessControlRecord} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AccessControlRecord} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AccessControlRecord} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(accessControlRecordName: string, parameters: models.AccessControlRecord, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AccessControlRecord>;
    beginCreateOrUpdate(accessControlRecordName: string, parameters: models.AccessControlRecord, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.AccessControlRecord>): void;
    beginCreateOrUpdate(accessControlRecordName: string, parameters: models.AccessControlRecord, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AccessControlRecord>): void;


    /**
     * Deletes the access control record.
     *
     * @param {string} accessControlRecordName The name of the access control
     * record to delete.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(accessControlRecordName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the access control record.
     *
     * @param {string} accessControlRecordName The name of the access control
     * record to delete.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(accessControlRecordName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(accessControlRecordName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(accessControlRecordName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * Alerts
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimple8000SeriesManagementClient.
 */
export interface Alerts {


    /**
     * Retrieves all the alerts in a manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AlertList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByManagerWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AlertList>>;

    /**
     * Retrieves all the alerts in a manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AlertList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AlertList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AlertList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByManager(resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.AlertList>;
    listByManager(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.AlertList>): void;
    listByManager(resourceGroupName: string, managerName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AlertList>): void;


    /**
     * Clear the alerts.
     *
     * @param {object} parameters The clear alert request.
     *
     * @param {string} [parameters.resolutionMessage] The resolution message while
     * clearing the alert
     *
     * @param {array} parameters.alerts The list of alert IDs to be cleared
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    clearWithHttpOperationResponse(parameters: models.ClearAlertRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Clear the alerts.
     *
     * @param {object} parameters The clear alert request.
     *
     * @param {string} [parameters.resolutionMessage] The resolution message while
     * clearing the alert
     *
     * @param {array} parameters.alerts The list of alert IDs to be cleared
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    clear(parameters: models.ClearAlertRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    clear(parameters: models.ClearAlertRequest, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    clear(parameters: models.ClearAlertRequest, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Sends a test alert email.
     *
     * @param {string} deviceName The device name
     *
     * @param {object} parameters The send test alert email request.
     *
     * @param {array} parameters.emailList The list of email IDs to send the test
     * alert email
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    sendTestEmailWithHttpOperationResponse(deviceName: string, parameters: models.SendTestAlertEmailRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Sends a test alert email.
     *
     * @param {string} deviceName The device name
     *
     * @param {object} parameters The send test alert email request.
     *
     * @param {array} parameters.emailList The list of email IDs to send the test
     * alert email
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    sendTestEmail(deviceName: string, parameters: models.SendTestAlertEmailRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    sendTestEmail(deviceName: string, parameters: models.SendTestAlertEmailRequest, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    sendTestEmail(deviceName: string, parameters: models.SendTestAlertEmailRequest, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Retrieves all the alerts in a manager.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AlertList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByManagerNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AlertList>>;

    /**
     * Retrieves all the alerts in a manager.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AlertList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AlertList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AlertList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByManagerNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AlertList>;
    listByManagerNext(nextPageLink: string, callback: ServiceCallback<models.AlertList>): void;
    listByManagerNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AlertList>): void;
}

/**
 * @class
 * BandwidthSettings
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimple8000SeriesManagementClient.
 */
export interface BandwidthSettings {


    /**
     * Retrieves all the bandwidth setting in a manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BandwidthSettingList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByManagerWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BandwidthSettingList>>;

    /**
     * Retrieves all the bandwidth setting in a manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BandwidthSettingList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BandwidthSettingList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BandwidthSettingList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByManager(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BandwidthSettingList>;
    listByManager(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.BandwidthSettingList>): void;
    listByManager(resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BandwidthSettingList>): void;


    /**
     * Returns the properties of the specified bandwidth setting name.
     *
     * @param {string} bandwidthSettingName The name of bandwidth setting to be
     * fetched.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BandwidthSetting>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(bandwidthSettingName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BandwidthSetting>>;

    /**
     * Returns the properties of the specified bandwidth setting name.
     *
     * @param {string} bandwidthSettingName The name of bandwidth setting to be
     * fetched.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BandwidthSetting} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BandwidthSetting} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BandwidthSetting} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(bandwidthSettingName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BandwidthSetting>;
    get(bandwidthSettingName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.BandwidthSetting>): void;
    get(bandwidthSettingName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BandwidthSetting>): void;


    /**
     * Creates or updates the bandwidth setting
     *
     * @param {string} bandwidthSettingName The bandwidth setting name.
     *
     * @param {object} parameters The bandwidth setting to be added or updated.
     *
     * @param {array} parameters.schedules The schedules.
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BandwidthSetting>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(bandwidthSettingName: string, parameters: models.BandwidthSetting, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BandwidthSetting>>;

    /**
     * Creates or updates the bandwidth setting
     *
     * @param {string} bandwidthSettingName The bandwidth setting name.
     *
     * @param {object} parameters The bandwidth setting to be added or updated.
     *
     * @param {array} parameters.schedules The schedules.
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BandwidthSetting} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BandwidthSetting} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BandwidthSetting} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(bandwidthSettingName: string, parameters: models.BandwidthSetting, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BandwidthSetting>;
    createOrUpdate(bandwidthSettingName: string, parameters: models.BandwidthSetting, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.BandwidthSetting>): void;
    createOrUpdate(bandwidthSettingName: string, parameters: models.BandwidthSetting, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BandwidthSetting>): void;


    /**
     * Deletes the bandwidth setting
     *
     * @param {string} bandwidthSettingName The name of the bandwidth setting.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(bandwidthSettingName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the bandwidth setting
     *
     * @param {string} bandwidthSettingName The name of the bandwidth setting.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(bandwidthSettingName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(bandwidthSettingName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(bandwidthSettingName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates the bandwidth setting
     *
     * @param {string} bandwidthSettingName The bandwidth setting name.
     *
     * @param {object} parameters The bandwidth setting to be added or updated.
     *
     * @param {array} parameters.schedules The schedules.
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BandwidthSetting>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(bandwidthSettingName: string, parameters: models.BandwidthSetting, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BandwidthSetting>>;

    /**
     * Creates or updates the bandwidth setting
     *
     * @param {string} bandwidthSettingName The bandwidth setting name.
     *
     * @param {object} parameters The bandwidth setting to be added or updated.
     *
     * @param {array} parameters.schedules The schedules.
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BandwidthSetting} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BandwidthSetting} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BandwidthSetting} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(bandwidthSettingName: string, parameters: models.BandwidthSetting, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BandwidthSetting>;
    beginCreateOrUpdate(bandwidthSettingName: string, parameters: models.BandwidthSetting, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.BandwidthSetting>): void;
    beginCreateOrUpdate(bandwidthSettingName: string, parameters: models.BandwidthSetting, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BandwidthSetting>): void;


    /**
     * Deletes the bandwidth setting
     *
     * @param {string} bandwidthSettingName The name of the bandwidth setting.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(bandwidthSettingName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the bandwidth setting
     *
     * @param {string} bandwidthSettingName The name of the bandwidth setting.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(bandwidthSettingName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(bandwidthSettingName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(bandwidthSettingName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * CloudAppliances
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimple8000SeriesManagementClient.
 */
export interface CloudAppliances {


    /**
     * Lists supported cloud appliance models and supported configurations.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CloudApplianceConfigurationList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSupportedConfigurationsWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CloudApplianceConfigurationList>>;

    /**
     * Lists supported cloud appliance models and supported configurations.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CloudApplianceConfigurationList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CloudApplianceConfigurationList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CloudApplianceConfigurationList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSupportedConfigurations(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CloudApplianceConfigurationList>;
    listSupportedConfigurations(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.CloudApplianceConfigurationList>): void;
    listSupportedConfigurations(resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CloudApplianceConfigurationList>): void;


    /**
     * Provisions cloud appliance.
     *
     * @param {object} parameters The cloud appliance
     *
     * @param {string} parameters.name The name.
     *
     * @param {string} [parameters.vnetName] The name of the virtual network.
     *
     * @param {string} parameters.vnetRegion The virtual network region.
     *
     * @param {boolean} [parameters.isVnetDnsConfigured] Indicates whether virtual
     * network used is configured with DNS or not.
     *
     * @param {boolean} [parameters.isVnetExpressConfigured] Indicates whether
     * virtual network used is configured with express route or not.
     *
     * @param {string} [parameters.subnetName] The name of the subnet.
     *
     * @param {string} [parameters.storageAccountName] The name of the storage
     * account.
     *
     * @param {string} [parameters.storageAccountType] The type of the storage
     * account.
     *
     * @param {string} [parameters.vmType] The type of the virtual machine.
     *
     * @param {string} [parameters.vmImageName] The name of the virtual machine
     * image.
     *
     * @param {string} [parameters.modelNumber] The model number.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    provisionWithHttpOperationResponse(parameters: models.CloudAppliance, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Provisions cloud appliance.
     *
     * @param {object} parameters The cloud appliance
     *
     * @param {string} parameters.name The name.
     *
     * @param {string} [parameters.vnetName] The name of the virtual network.
     *
     * @param {string} parameters.vnetRegion The virtual network region.
     *
     * @param {boolean} [parameters.isVnetDnsConfigured] Indicates whether virtual
     * network used is configured with DNS or not.
     *
     * @param {boolean} [parameters.isVnetExpressConfigured] Indicates whether
     * virtual network used is configured with express route or not.
     *
     * @param {string} [parameters.subnetName] The name of the subnet.
     *
     * @param {string} [parameters.storageAccountName] The name of the storage
     * account.
     *
     * @param {string} [parameters.storageAccountType] The type of the storage
     * account.
     *
     * @param {string} [parameters.vmType] The type of the virtual machine.
     *
     * @param {string} [parameters.vmImageName] The name of the virtual machine
     * image.
     *
     * @param {string} [parameters.modelNumber] The model number.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    provision(parameters: models.CloudAppliance, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    provision(parameters: models.CloudAppliance, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    provision(parameters: models.CloudAppliance, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Provisions cloud appliance.
     *
     * @param {object} parameters The cloud appliance
     *
     * @param {string} parameters.name The name.
     *
     * @param {string} [parameters.vnetName] The name of the virtual network.
     *
     * @param {string} parameters.vnetRegion The virtual network region.
     *
     * @param {boolean} [parameters.isVnetDnsConfigured] Indicates whether virtual
     * network used is configured with DNS or not.
     *
     * @param {boolean} [parameters.isVnetExpressConfigured] Indicates whether
     * virtual network used is configured with express route or not.
     *
     * @param {string} [parameters.subnetName] The name of the subnet.
     *
     * @param {string} [parameters.storageAccountName] The name of the storage
     * account.
     *
     * @param {string} [parameters.storageAccountType] The type of the storage
     * account.
     *
     * @param {string} [parameters.vmType] The type of the virtual machine.
     *
     * @param {string} [parameters.vmImageName] The name of the virtual machine
     * image.
     *
     * @param {string} [parameters.modelNumber] The model number.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginProvisionWithHttpOperationResponse(parameters: models.CloudAppliance, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Provisions cloud appliance.
     *
     * @param {object} parameters The cloud appliance
     *
     * @param {string} parameters.name The name.
     *
     * @param {string} [parameters.vnetName] The name of the virtual network.
     *
     * @param {string} parameters.vnetRegion The virtual network region.
     *
     * @param {boolean} [parameters.isVnetDnsConfigured] Indicates whether virtual
     * network used is configured with DNS or not.
     *
     * @param {boolean} [parameters.isVnetExpressConfigured] Indicates whether
     * virtual network used is configured with express route or not.
     *
     * @param {string} [parameters.subnetName] The name of the subnet.
     *
     * @param {string} [parameters.storageAccountName] The name of the storage
     * account.
     *
     * @param {string} [parameters.storageAccountType] The type of the storage
     * account.
     *
     * @param {string} [parameters.vmType] The type of the virtual machine.
     *
     * @param {string} [parameters.vmImageName] The name of the virtual machine
     * image.
     *
     * @param {string} [parameters.modelNumber] The model number.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginProvision(parameters: models.CloudAppliance, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginProvision(parameters: models.CloudAppliance, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginProvision(parameters: models.CloudAppliance, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * Devices
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimple8000SeriesManagementClient.
 */
export interface Devices {


    /**
     * Complete minimal setup before using the device.
     *
     * @param {object} parameters The minimal properties to configure a device.
     *
     * @param {string} parameters.friendlyName The friendly name for the device.
     *
     * @param {string} parameters.currentDeviceName The current name of the device.
     *
     * @param {string} parameters.timeZone The device time zone. For eg: "Pacific
     * Standard Time"
     *
     * @param {object} [parameters.dnsSettings] The secondary DNS Settings of the
     * device.
     *
     * @param {array} [parameters.dnsSettings.secondaryDnsServers] The list of
     * secondary DNS Server IP addresses.
     *
     * @param {object} [parameters.networkInterfaceData0Settings] The 'Data 0'
     * network interface card settings.
     *
     * @param {string} [parameters.networkInterfaceData0Settings.controllerZeroIp]
     * The controller 0's IPv4 address.
     *
     * @param {string} [parameters.networkInterfaceData0Settings.controllerOneIp]
     * The controller 1's IPv4 address.
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    configureWithHttpOperationResponse(parameters: models.ConfigureDeviceRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Complete minimal setup before using the device.
     *
     * @param {object} parameters The minimal properties to configure a device.
     *
     * @param {string} parameters.friendlyName The friendly name for the device.
     *
     * @param {string} parameters.currentDeviceName The current name of the device.
     *
     * @param {string} parameters.timeZone The device time zone. For eg: "Pacific
     * Standard Time"
     *
     * @param {object} [parameters.dnsSettings] The secondary DNS Settings of the
     * device.
     *
     * @param {array} [parameters.dnsSettings.secondaryDnsServers] The list of
     * secondary DNS Server IP addresses.
     *
     * @param {object} [parameters.networkInterfaceData0Settings] The 'Data 0'
     * network interface card settings.
     *
     * @param {string} [parameters.networkInterfaceData0Settings.controllerZeroIp]
     * The controller 0's IPv4 address.
     *
     * @param {string} [parameters.networkInterfaceData0Settings.controllerOneIp]
     * The controller 1's IPv4 address.
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    configure(parameters: models.ConfigureDeviceRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    configure(parameters: models.ConfigureDeviceRequest, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    configure(parameters: models.ConfigureDeviceRequest, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns the list of devices for the specified manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify $expand=details to populate
     * additional fields related to the device or $expand=rolloverdetails to
     * populate additional fields related to the service data encryption key
     * rollover on device
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeviceList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByManagerWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeviceList>>;

    /**
     * Returns the list of devices for the specified manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify $expand=details to populate
     * additional fields related to the device or $expand=rolloverdetails to
     * populate additional fields related to the service data encryption key
     * rollover on device
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeviceList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeviceList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeviceList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByManager(resourceGroupName: string, managerName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DeviceList>;
    listByManager(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.DeviceList>): void;
    listByManager(resourceGroupName: string, managerName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeviceList>): void;


    /**
     * Returns the properties of the specified device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify $expand=details to populate
     * additional fields related to the device or $expand=rolloverdetails to
     * populate additional fields related to the service data encryption key
     * rollover on device
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Device>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Device>>;

    /**
     * Returns the properties of the specified device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify $expand=details to populate
     * additional fields related to the device or $expand=rolloverdetails to
     * populate additional fields related to the service data encryption key
     * rollover on device
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Device} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Device} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Device} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(deviceName: string, resourceGroupName: string, managerName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Device>;
    get(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.Device>): void;
    get(deviceName: string, resourceGroupName: string, managerName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Device>): void;


    /**
     * Deletes the device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Patches the device.
     *
     * @param {string} deviceName The device name
     *
     * @param {object} parameters Patch representation of the device.
     *
     * @param {string} [parameters.deviceDescription] Short description given for
     * the device
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Device>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(deviceName: string, parameters: models.DevicePatch, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Device>>;

    /**
     * Patches the device.
     *
     * @param {string} deviceName The device name
     *
     * @param {object} parameters Patch representation of the device.
     *
     * @param {string} [parameters.deviceDescription] Short description given for
     * the device
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Device} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Device} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Device} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(deviceName: string, parameters: models.DevicePatch, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Device>;
    update(deviceName: string, parameters: models.DevicePatch, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.Device>): void;
    update(deviceName: string, parameters: models.DevicePatch, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Device>): void;


    /**
     * Authorizes the specified device for service data encryption key rollover.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    authorizeForServiceEncryptionKeyRolloverWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Authorizes the specified device for service data encryption key rollover.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    authorizeForServiceEncryptionKeyRollover(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    authorizeForServiceEncryptionKeyRollover(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    authorizeForServiceEncryptionKeyRollover(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Deactivates the device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deactivateWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deactivates the device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deactivate(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deactivate(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    deactivate(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Downloads and installs the updates on the device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    installUpdatesWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Downloads and installs the updates on the device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    installUpdates(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    installUpdates(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    installUpdates(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns all failover sets for a given device and their eligibility for
     * participating in a failover. A failover set refers to a set of volume
     * containers that need to be failed-over as a single unit to maintain data
     * integrity.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FailoverSetsList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listFailoverSetsWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FailoverSetsList>>;

    /**
     * Returns all failover sets for a given device and their eligibility for
     * participating in a failover. A failover set refers to a set of volume
     * containers that need to be failed-over as a single unit to maintain data
     * integrity.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FailoverSetsList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FailoverSetsList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FailoverSetsList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listFailoverSets(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FailoverSetsList>;
    listFailoverSets(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.FailoverSetsList>): void;
    listFailoverSets(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FailoverSetsList>): void;


    /**
     * Gets the metrics for the specified device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {string} filter OData Filter options
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricList>>;

    /**
     * Gets the metrics for the specified device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {string} filter OData Filter options
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(deviceName: string, resourceGroupName: string, managerName: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricList>;
    listMetrics(deviceName: string, resourceGroupName: string, managerName: string, filter: string, callback: ServiceCallback<models.MetricList>): void;
    listMetrics(deviceName: string, resourceGroupName: string, managerName: string, filter: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricList>): void;


    /**
     * Gets the metric definitions for the specified device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricDefinitionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricDefinitionWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricDefinitionList>>;

    /**
     * Gets the metric definitions for the specified device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricDefinitionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricDefinitionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricDefinitionList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetricDefinition(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricDefinitionList>;
    listMetricDefinition(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.MetricDefinitionList>): void;
    listMetricDefinition(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinitionList>): void;


    /**
     * Scans for updates on the device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    scanForUpdatesWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Scans for updates on the device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    scanForUpdates(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    scanForUpdates(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    scanForUpdates(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns the update summary of the specified device name.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Updates>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getUpdateSummaryWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Updates>>;

    /**
     * Returns the update summary of the specified device name.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Updates} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Updates} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Updates} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getUpdateSummary(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Updates>;
    getUpdateSummary(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.Updates>): void;
    getUpdateSummary(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Updates>): void;


    /**
     * Failovers a set of volume containers from a specified source device to a
     * target device.
     *
     * @param {string} sourceDeviceName The source device name on which failover is
     * performed.
     *
     * @param {object} parameters FailoverRequest containing the source device and
     * the list of volume containers to be failed over.
     *
     * @param {string} [parameters.targetDeviceId] The ARM path ID of the device
     * which will act as the failover target.
     *
     * @param {array} [parameters.volumeContainers] The list of path IDs of the
     * volume containers which needs to be failed-over to the target device.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    failoverWithHttpOperationResponse(sourceDeviceName: string, parameters: models.FailoverRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Failovers a set of volume containers from a specified source device to a
     * target device.
     *
     * @param {string} sourceDeviceName The source device name on which failover is
     * performed.
     *
     * @param {object} parameters FailoverRequest containing the source device and
     * the list of volume containers to be failed over.
     *
     * @param {string} [parameters.targetDeviceId] The ARM path ID of the device
     * which will act as the failover target.
     *
     * @param {array} [parameters.volumeContainers] The list of path IDs of the
     * volume containers which needs to be failed-over to the target device.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    failover(sourceDeviceName: string, parameters: models.FailoverRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    failover(sourceDeviceName: string, parameters: models.FailoverRequest, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    failover(sourceDeviceName: string, parameters: models.FailoverRequest, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Given a list of volume containers to be failed over from a source device,
     * this method returns the eligibility result, as a failover target, for all
     * devices under that resource.
     *
     * @param {string} sourceDeviceName The source device name on which failover is
     * performed.
     *
     * @param {object} parameters ListFailoverTargetsRequest containing the list of
     * volume containers to be failed over.
     *
     * @param {array} [parameters.volumeContainers] The list of path IDs of the
     * volume containers that needs to be failed-over, for which we want to fetch
     * the eligible targets.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FailoverTargetsList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listFailoverTargetsWithHttpOperationResponse(sourceDeviceName: string, parameters: models.ListFailoverTargetsRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FailoverTargetsList>>;

    /**
     * Given a list of volume containers to be failed over from a source device,
     * this method returns the eligibility result, as a failover target, for all
     * devices under that resource.
     *
     * @param {string} sourceDeviceName The source device name on which failover is
     * performed.
     *
     * @param {object} parameters ListFailoverTargetsRequest containing the list of
     * volume containers to be failed over.
     *
     * @param {array} [parameters.volumeContainers] The list of path IDs of the
     * volume containers that needs to be failed-over, for which we want to fetch
     * the eligible targets.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FailoverTargetsList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FailoverTargetsList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FailoverTargetsList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listFailoverTargets(sourceDeviceName: string, parameters: models.ListFailoverTargetsRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FailoverTargetsList>;
    listFailoverTargets(sourceDeviceName: string, parameters: models.ListFailoverTargetsRequest, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.FailoverTargetsList>): void;
    listFailoverTargets(sourceDeviceName: string, parameters: models.ListFailoverTargetsRequest, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FailoverTargetsList>): void;


    /**
     * Complete minimal setup before using the device.
     *
     * @param {object} parameters The minimal properties to configure a device.
     *
     * @param {string} parameters.friendlyName The friendly name for the device.
     *
     * @param {string} parameters.currentDeviceName The current name of the device.
     *
     * @param {string} parameters.timeZone The device time zone. For eg: "Pacific
     * Standard Time"
     *
     * @param {object} [parameters.dnsSettings] The secondary DNS Settings of the
     * device.
     *
     * @param {array} [parameters.dnsSettings.secondaryDnsServers] The list of
     * secondary DNS Server IP addresses.
     *
     * @param {object} [parameters.networkInterfaceData0Settings] The 'Data 0'
     * network interface card settings.
     *
     * @param {string} [parameters.networkInterfaceData0Settings.controllerZeroIp]
     * The controller 0's IPv4 address.
     *
     * @param {string} [parameters.networkInterfaceData0Settings.controllerOneIp]
     * The controller 1's IPv4 address.
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginConfigureWithHttpOperationResponse(parameters: models.ConfigureDeviceRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Complete minimal setup before using the device.
     *
     * @param {object} parameters The minimal properties to configure a device.
     *
     * @param {string} parameters.friendlyName The friendly name for the device.
     *
     * @param {string} parameters.currentDeviceName The current name of the device.
     *
     * @param {string} parameters.timeZone The device time zone. For eg: "Pacific
     * Standard Time"
     *
     * @param {object} [parameters.dnsSettings] The secondary DNS Settings of the
     * device.
     *
     * @param {array} [parameters.dnsSettings.secondaryDnsServers] The list of
     * secondary DNS Server IP addresses.
     *
     * @param {object} [parameters.networkInterfaceData0Settings] The 'Data 0'
     * network interface card settings.
     *
     * @param {string} [parameters.networkInterfaceData0Settings.controllerZeroIp]
     * The controller 0's IPv4 address.
     *
     * @param {string} [parameters.networkInterfaceData0Settings.controllerOneIp]
     * The controller 1's IPv4 address.
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginConfigure(parameters: models.ConfigureDeviceRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginConfigure(parameters: models.ConfigureDeviceRequest, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginConfigure(parameters: models.ConfigureDeviceRequest, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Deletes the device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Deactivates the device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeactivateWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deactivates the device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeactivate(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeactivate(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginDeactivate(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Downloads and installs the updates on the device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginInstallUpdatesWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Downloads and installs the updates on the device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginInstallUpdates(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginInstallUpdates(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginInstallUpdates(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Scans for updates on the device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginScanForUpdatesWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Scans for updates on the device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginScanForUpdates(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginScanForUpdates(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginScanForUpdates(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Failovers a set of volume containers from a specified source device to a
     * target device.
     *
     * @param {string} sourceDeviceName The source device name on which failover is
     * performed.
     *
     * @param {object} parameters FailoverRequest containing the source device and
     * the list of volume containers to be failed over.
     *
     * @param {string} [parameters.targetDeviceId] The ARM path ID of the device
     * which will act as the failover target.
     *
     * @param {array} [parameters.volumeContainers] The list of path IDs of the
     * volume containers which needs to be failed-over to the target device.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginFailoverWithHttpOperationResponse(sourceDeviceName: string, parameters: models.FailoverRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Failovers a set of volume containers from a specified source device to a
     * target device.
     *
     * @param {string} sourceDeviceName The source device name on which failover is
     * performed.
     *
     * @param {object} parameters FailoverRequest containing the source device and
     * the list of volume containers to be failed over.
     *
     * @param {string} [parameters.targetDeviceId] The ARM path ID of the device
     * which will act as the failover target.
     *
     * @param {array} [parameters.volumeContainers] The list of path IDs of the
     * volume containers which needs to be failed-over to the target device.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginFailover(sourceDeviceName: string, parameters: models.FailoverRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginFailover(sourceDeviceName: string, parameters: models.FailoverRequest, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginFailover(sourceDeviceName: string, parameters: models.FailoverRequest, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * DeviceSettings
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimple8000SeriesManagementClient.
 */
export interface DeviceSettings {


    /**
     * Gets the alert settings of the specified device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AlertSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAlertSettingsWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AlertSettings>>;

    /**
     * Gets the alert settings of the specified device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AlertSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AlertSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AlertSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAlertSettings(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AlertSettings>;
    getAlertSettings(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.AlertSettings>): void;
    getAlertSettings(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AlertSettings>): void;


    /**
     * Creates or updates the alert settings of the specified device.
     *
     * @param {string} deviceName The device name
     *
     * @param {object} parameters The alert settings to be added or updated.
     *
     * @param {string} parameters.emailNotification Indicates whether email
     * notification enabled or not. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.alertNotificationCulture] The alert notification
     * culture.
     *
     * @param {string} [parameters.notificationToServiceOwners] The value
     * indicating whether alert notification enabled for admin or not. Possible
     * values include: 'Enabled', 'Disabled'
     *
     * @param {array} [parameters.additionalRecipientEmailList] The alert
     * notification email list.
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AlertSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateAlertSettingsWithHttpOperationResponse(deviceName: string, parameters: models.AlertSettings, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AlertSettings>>;

    /**
     * Creates or updates the alert settings of the specified device.
     *
     * @param {string} deviceName The device name
     *
     * @param {object} parameters The alert settings to be added or updated.
     *
     * @param {string} parameters.emailNotification Indicates whether email
     * notification enabled or not. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.alertNotificationCulture] The alert notification
     * culture.
     *
     * @param {string} [parameters.notificationToServiceOwners] The value
     * indicating whether alert notification enabled for admin or not. Possible
     * values include: 'Enabled', 'Disabled'
     *
     * @param {array} [parameters.additionalRecipientEmailList] The alert
     * notification email list.
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AlertSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AlertSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AlertSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateAlertSettings(deviceName: string, parameters: models.AlertSettings, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AlertSettings>;
    createOrUpdateAlertSettings(deviceName: string, parameters: models.AlertSettings, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.AlertSettings>): void;
    createOrUpdateAlertSettings(deviceName: string, parameters: models.AlertSettings, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AlertSettings>): void;


    /**
     * Gets the network settings of the specified device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getNetworkSettingsWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkSettings>>;

    /**
     * Gets the network settings of the specified device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getNetworkSettings(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkSettings>;
    getNetworkSettings(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.NetworkSettings>): void;
    getNetworkSettings(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkSettings>): void;


    /**
     * Updates the network settings on the specified device.
     *
     * @param {string} deviceName The device name
     *
     * @param {object} parameters The network settings to be updated.
     *
     * @param {object} [parameters.dnsSettings] The DNS (Domain Name System)
     * settings of device.
     *
     * @param {string} [parameters.dnsSettings.primaryDnsServer] The primary IPv4
     * DNS server for the device
     *
     * @param {string} [parameters.dnsSettings.primaryIpv6DnsServer] The primary
     * IPv6 DNS server for the device
     *
     * @param {array} [parameters.dnsSettings.secondaryDnsServers] The secondary
     * IPv4 DNS server for the device
     *
     * @param {array} [parameters.dnsSettings.secondaryIpv6DnsServers] The
     * secondary IPv6 DNS server for the device
     *
     * @param {object} [parameters.networkAdapters] The network adapter list of
     * device.
     *
     * @param {array} parameters.networkAdapters.value The value.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateNetworkSettingsWithHttpOperationResponse(deviceName: string, parameters: models.NetworkSettingsPatch, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkSettings>>;

    /**
     * Updates the network settings on the specified device.
     *
     * @param {string} deviceName The device name
     *
     * @param {object} parameters The network settings to be updated.
     *
     * @param {object} [parameters.dnsSettings] The DNS (Domain Name System)
     * settings of device.
     *
     * @param {string} [parameters.dnsSettings.primaryDnsServer] The primary IPv4
     * DNS server for the device
     *
     * @param {string} [parameters.dnsSettings.primaryIpv6DnsServer] The primary
     * IPv6 DNS server for the device
     *
     * @param {array} [parameters.dnsSettings.secondaryDnsServers] The secondary
     * IPv4 DNS server for the device
     *
     * @param {array} [parameters.dnsSettings.secondaryIpv6DnsServers] The
     * secondary IPv6 DNS server for the device
     *
     * @param {object} [parameters.networkAdapters] The network adapter list of
     * device.
     *
     * @param {array} parameters.networkAdapters.value The value.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateNetworkSettings(deviceName: string, parameters: models.NetworkSettingsPatch, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkSettings>;
    updateNetworkSettings(deviceName: string, parameters: models.NetworkSettingsPatch, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.NetworkSettings>): void;
    updateNetworkSettings(deviceName: string, parameters: models.NetworkSettingsPatch, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkSettings>): void;


    /**
     * Returns the Security properties of the specified device name.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecuritySettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSecuritySettingsWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecuritySettings>>;

    /**
     * Returns the Security properties of the specified device name.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecuritySettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecuritySettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecuritySettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSecuritySettings(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecuritySettings>;
    getSecuritySettings(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.SecuritySettings>): void;
    getSecuritySettings(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecuritySettings>): void;


    /**
     * Patch Security properties of the specified device name.
     *
     * @param {string} deviceName The device name
     *
     * @param {object} parameters The security settings properties to be patched.
     *
     * @param {object} [parameters.remoteManagementSettings] The remote management
     * settings.
     *
     * @param {string} parameters.remoteManagementSettings.remoteManagementMode The
     * remote management mode. Possible values include: 'Unknown', 'Disabled',
     * 'HttpsEnabled', 'HttpsAndHttpEnabled'
     *
     * @param {object} [parameters.deviceAdminPassword] The device administrator
     * password.
     *
     * @param {object} [parameters.snapshotPassword] The snapshot manager password.
     *
     * @param {object} [parameters.chapSettings] The device CHAP and reverse-CHAP
     * settings.
     *
     * @param {string} [parameters.chapSettings.initiatorUser] The CHAP initiator
     * user.
     *
     * @param {object} [parameters.chapSettings.initiatorSecret] The CHAP initiator
     * secret.
     *
     * @param {string} [parameters.chapSettings.targetUser] The CHAP target user.
     *
     * @param {object} [parameters.chapSettings.targetSecret] The target secret.
     *
     * @param {object} [parameters.cloudApplianceSettings] The cloud appliance
     * settings.
     *
     * @param {object} [parameters.cloudApplianceSettings.serviceDataEncryptionKey]
     * The service data encryption key (encrypted with DAK).
     *
     * @param {object} [parameters.cloudApplianceSettings.channelIntegrityKey] The
     * channel integrity key (encrypted with DAK).
     *
     * @param {string} parameters.cloudApplianceSettings.channelIntegrityKey.value
     * The value of the secret.
     *
     * @param {string}
     * [parameters.cloudApplianceSettings.channelIntegrityKey.encryptionCertThumbprint]
     * Thumbprint certificate that was used to encrypt "Value". If the value in
     * unencrypted, it will be null.
     *
     * @param {string}
     * parameters.cloudApplianceSettings.channelIntegrityKey.encryptionAlgorithm
     * The algorithm used to encrypt "Value". Possible values include: 'None',
     * 'AES256', 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecuritySettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateSecuritySettingsWithHttpOperationResponse(deviceName: string, parameters: models.SecuritySettingsPatch, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecuritySettings>>;

    /**
     * Patch Security properties of the specified device name.
     *
     * @param {string} deviceName The device name
     *
     * @param {object} parameters The security settings properties to be patched.
     *
     * @param {object} [parameters.remoteManagementSettings] The remote management
     * settings.
     *
     * @param {string} parameters.remoteManagementSettings.remoteManagementMode The
     * remote management mode. Possible values include: 'Unknown', 'Disabled',
     * 'HttpsEnabled', 'HttpsAndHttpEnabled'
     *
     * @param {object} [parameters.deviceAdminPassword] The device administrator
     * password.
     *
     * @param {object} [parameters.snapshotPassword] The snapshot manager password.
     *
     * @param {object} [parameters.chapSettings] The device CHAP and reverse-CHAP
     * settings.
     *
     * @param {string} [parameters.chapSettings.initiatorUser] The CHAP initiator
     * user.
     *
     * @param {object} [parameters.chapSettings.initiatorSecret] The CHAP initiator
     * secret.
     *
     * @param {string} [parameters.chapSettings.targetUser] The CHAP target user.
     *
     * @param {object} [parameters.chapSettings.targetSecret] The target secret.
     *
     * @param {object} [parameters.cloudApplianceSettings] The cloud appliance
     * settings.
     *
     * @param {object} [parameters.cloudApplianceSettings.serviceDataEncryptionKey]
     * The service data encryption key (encrypted with DAK).
     *
     * @param {object} [parameters.cloudApplianceSettings.channelIntegrityKey] The
     * channel integrity key (encrypted with DAK).
     *
     * @param {string} parameters.cloudApplianceSettings.channelIntegrityKey.value
     * The value of the secret.
     *
     * @param {string}
     * [parameters.cloudApplianceSettings.channelIntegrityKey.encryptionCertThumbprint]
     * Thumbprint certificate that was used to encrypt "Value". If the value in
     * unencrypted, it will be null.
     *
     * @param {string}
     * parameters.cloudApplianceSettings.channelIntegrityKey.encryptionAlgorithm
     * The algorithm used to encrypt "Value". Possible values include: 'None',
     * 'AES256', 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecuritySettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecuritySettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecuritySettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateSecuritySettings(deviceName: string, parameters: models.SecuritySettingsPatch, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecuritySettings>;
    updateSecuritySettings(deviceName: string, parameters: models.SecuritySettingsPatch, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.SecuritySettings>): void;
    updateSecuritySettings(deviceName: string, parameters: models.SecuritySettingsPatch, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecuritySettings>): void;


    /**
     * sync Remote management Certificate between appliance and Service
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    syncRemotemanagementCertificateWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * sync Remote management Certificate between appliance and Service
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    syncRemotemanagementCertificate(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    syncRemotemanagementCertificate(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    syncRemotemanagementCertificate(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the time settings of the specified device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TimeSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getTimeSettingsWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TimeSettings>>;

    /**
     * Gets the time settings of the specified device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TimeSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TimeSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TimeSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getTimeSettings(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TimeSettings>;
    getTimeSettings(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.TimeSettings>): void;
    getTimeSettings(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TimeSettings>): void;


    /**
     * Creates or updates the time settings of the specified device.
     *
     * @param {string} deviceName The device name
     *
     * @param {object} parameters The time settings to be added or updated.
     *
     * @param {string} parameters.timeZone The timezone of device, like '(UTC
     * -06:00) Central America'
     *
     * @param {string} [parameters.primaryTimeServer] The primary Network Time
     * Protocol (NTP) server name, like 'time.windows.com'.
     *
     * @param {array} [parameters.secondaryTimeServer] The secondary Network Time
     * Protocol (NTP) server name, like 'time.contoso.com'. It's optional.
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TimeSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateTimeSettingsWithHttpOperationResponse(deviceName: string, parameters: models.TimeSettings, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TimeSettings>>;

    /**
     * Creates or updates the time settings of the specified device.
     *
     * @param {string} deviceName The device name
     *
     * @param {object} parameters The time settings to be added or updated.
     *
     * @param {string} parameters.timeZone The timezone of device, like '(UTC
     * -06:00) Central America'
     *
     * @param {string} [parameters.primaryTimeServer] The primary Network Time
     * Protocol (NTP) server name, like 'time.windows.com'.
     *
     * @param {array} [parameters.secondaryTimeServer] The secondary Network Time
     * Protocol (NTP) server name, like 'time.contoso.com'. It's optional.
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TimeSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TimeSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TimeSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateTimeSettings(deviceName: string, parameters: models.TimeSettings, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TimeSettings>;
    createOrUpdateTimeSettings(deviceName: string, parameters: models.TimeSettings, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.TimeSettings>): void;
    createOrUpdateTimeSettings(deviceName: string, parameters: models.TimeSettings, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TimeSettings>): void;


    /**
     * Creates or updates the alert settings of the specified device.
     *
     * @param {string} deviceName The device name
     *
     * @param {object} parameters The alert settings to be added or updated.
     *
     * @param {string} parameters.emailNotification Indicates whether email
     * notification enabled or not. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.alertNotificationCulture] The alert notification
     * culture.
     *
     * @param {string} [parameters.notificationToServiceOwners] The value
     * indicating whether alert notification enabled for admin or not. Possible
     * values include: 'Enabled', 'Disabled'
     *
     * @param {array} [parameters.additionalRecipientEmailList] The alert
     * notification email list.
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AlertSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateAlertSettingsWithHttpOperationResponse(deviceName: string, parameters: models.AlertSettings, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AlertSettings>>;

    /**
     * Creates or updates the alert settings of the specified device.
     *
     * @param {string} deviceName The device name
     *
     * @param {object} parameters The alert settings to be added or updated.
     *
     * @param {string} parameters.emailNotification Indicates whether email
     * notification enabled or not. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.alertNotificationCulture] The alert notification
     * culture.
     *
     * @param {string} [parameters.notificationToServiceOwners] The value
     * indicating whether alert notification enabled for admin or not. Possible
     * values include: 'Enabled', 'Disabled'
     *
     * @param {array} [parameters.additionalRecipientEmailList] The alert
     * notification email list.
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AlertSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AlertSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AlertSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdateAlertSettings(deviceName: string, parameters: models.AlertSettings, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AlertSettings>;
    beginCreateOrUpdateAlertSettings(deviceName: string, parameters: models.AlertSettings, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.AlertSettings>): void;
    beginCreateOrUpdateAlertSettings(deviceName: string, parameters: models.AlertSettings, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AlertSettings>): void;


    /**
     * Updates the network settings on the specified device.
     *
     * @param {string} deviceName The device name
     *
     * @param {object} parameters The network settings to be updated.
     *
     * @param {object} [parameters.dnsSettings] The DNS (Domain Name System)
     * settings of device.
     *
     * @param {string} [parameters.dnsSettings.primaryDnsServer] The primary IPv4
     * DNS server for the device
     *
     * @param {string} [parameters.dnsSettings.primaryIpv6DnsServer] The primary
     * IPv6 DNS server for the device
     *
     * @param {array} [parameters.dnsSettings.secondaryDnsServers] The secondary
     * IPv4 DNS server for the device
     *
     * @param {array} [parameters.dnsSettings.secondaryIpv6DnsServers] The
     * secondary IPv6 DNS server for the device
     *
     * @param {object} [parameters.networkAdapters] The network adapter list of
     * device.
     *
     * @param {array} parameters.networkAdapters.value The value.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateNetworkSettingsWithHttpOperationResponse(deviceName: string, parameters: models.NetworkSettingsPatch, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkSettings>>;

    /**
     * Updates the network settings on the specified device.
     *
     * @param {string} deviceName The device name
     *
     * @param {object} parameters The network settings to be updated.
     *
     * @param {object} [parameters.dnsSettings] The DNS (Domain Name System)
     * settings of device.
     *
     * @param {string} [parameters.dnsSettings.primaryDnsServer] The primary IPv4
     * DNS server for the device
     *
     * @param {string} [parameters.dnsSettings.primaryIpv6DnsServer] The primary
     * IPv6 DNS server for the device
     *
     * @param {array} [parameters.dnsSettings.secondaryDnsServers] The secondary
     * IPv4 DNS server for the device
     *
     * @param {array} [parameters.dnsSettings.secondaryIpv6DnsServers] The
     * secondary IPv6 DNS server for the device
     *
     * @param {object} [parameters.networkAdapters] The network adapter list of
     * device.
     *
     * @param {array} parameters.networkAdapters.value The value.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdateNetworkSettings(deviceName: string, parameters: models.NetworkSettingsPatch, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkSettings>;
    beginUpdateNetworkSettings(deviceName: string, parameters: models.NetworkSettingsPatch, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.NetworkSettings>): void;
    beginUpdateNetworkSettings(deviceName: string, parameters: models.NetworkSettingsPatch, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkSettings>): void;


    /**
     * Patch Security properties of the specified device name.
     *
     * @param {string} deviceName The device name
     *
     * @param {object} parameters The security settings properties to be patched.
     *
     * @param {object} [parameters.remoteManagementSettings] The remote management
     * settings.
     *
     * @param {string} parameters.remoteManagementSettings.remoteManagementMode The
     * remote management mode. Possible values include: 'Unknown', 'Disabled',
     * 'HttpsEnabled', 'HttpsAndHttpEnabled'
     *
     * @param {object} [parameters.deviceAdminPassword] The device administrator
     * password.
     *
     * @param {object} [parameters.snapshotPassword] The snapshot manager password.
     *
     * @param {object} [parameters.chapSettings] The device CHAP and reverse-CHAP
     * settings.
     *
     * @param {string} [parameters.chapSettings.initiatorUser] The CHAP initiator
     * user.
     *
     * @param {object} [parameters.chapSettings.initiatorSecret] The CHAP initiator
     * secret.
     *
     * @param {string} [parameters.chapSettings.targetUser] The CHAP target user.
     *
     * @param {object} [parameters.chapSettings.targetSecret] The target secret.
     *
     * @param {object} [parameters.cloudApplianceSettings] The cloud appliance
     * settings.
     *
     * @param {object} [parameters.cloudApplianceSettings.serviceDataEncryptionKey]
     * The service data encryption key (encrypted with DAK).
     *
     * @param {object} [parameters.cloudApplianceSettings.channelIntegrityKey] The
     * channel integrity key (encrypted with DAK).
     *
     * @param {string} parameters.cloudApplianceSettings.channelIntegrityKey.value
     * The value of the secret.
     *
     * @param {string}
     * [parameters.cloudApplianceSettings.channelIntegrityKey.encryptionCertThumbprint]
     * Thumbprint certificate that was used to encrypt "Value". If the value in
     * unencrypted, it will be null.
     *
     * @param {string}
     * parameters.cloudApplianceSettings.channelIntegrityKey.encryptionAlgorithm
     * The algorithm used to encrypt "Value". Possible values include: 'None',
     * 'AES256', 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SecuritySettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateSecuritySettingsWithHttpOperationResponse(deviceName: string, parameters: models.SecuritySettingsPatch, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SecuritySettings>>;

    /**
     * Patch Security properties of the specified device name.
     *
     * @param {string} deviceName The device name
     *
     * @param {object} parameters The security settings properties to be patched.
     *
     * @param {object} [parameters.remoteManagementSettings] The remote management
     * settings.
     *
     * @param {string} parameters.remoteManagementSettings.remoteManagementMode The
     * remote management mode. Possible values include: 'Unknown', 'Disabled',
     * 'HttpsEnabled', 'HttpsAndHttpEnabled'
     *
     * @param {object} [parameters.deviceAdminPassword] The device administrator
     * password.
     *
     * @param {object} [parameters.snapshotPassword] The snapshot manager password.
     *
     * @param {object} [parameters.chapSettings] The device CHAP and reverse-CHAP
     * settings.
     *
     * @param {string} [parameters.chapSettings.initiatorUser] The CHAP initiator
     * user.
     *
     * @param {object} [parameters.chapSettings.initiatorSecret] The CHAP initiator
     * secret.
     *
     * @param {string} [parameters.chapSettings.targetUser] The CHAP target user.
     *
     * @param {object} [parameters.chapSettings.targetSecret] The target secret.
     *
     * @param {object} [parameters.cloudApplianceSettings] The cloud appliance
     * settings.
     *
     * @param {object} [parameters.cloudApplianceSettings.serviceDataEncryptionKey]
     * The service data encryption key (encrypted with DAK).
     *
     * @param {object} [parameters.cloudApplianceSettings.channelIntegrityKey] The
     * channel integrity key (encrypted with DAK).
     *
     * @param {string} parameters.cloudApplianceSettings.channelIntegrityKey.value
     * The value of the secret.
     *
     * @param {string}
     * [parameters.cloudApplianceSettings.channelIntegrityKey.encryptionCertThumbprint]
     * Thumbprint certificate that was used to encrypt "Value". If the value in
     * unencrypted, it will be null.
     *
     * @param {string}
     * parameters.cloudApplianceSettings.channelIntegrityKey.encryptionAlgorithm
     * The algorithm used to encrypt "Value". Possible values include: 'None',
     * 'AES256', 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SecuritySettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SecuritySettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SecuritySettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdateSecuritySettings(deviceName: string, parameters: models.SecuritySettingsPatch, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SecuritySettings>;
    beginUpdateSecuritySettings(deviceName: string, parameters: models.SecuritySettingsPatch, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.SecuritySettings>): void;
    beginUpdateSecuritySettings(deviceName: string, parameters: models.SecuritySettingsPatch, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SecuritySettings>): void;


    /**
     * sync Remote management Certificate between appliance and Service
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginSyncRemotemanagementCertificateWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * sync Remote management Certificate between appliance and Service
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginSyncRemotemanagementCertificate(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginSyncRemotemanagementCertificate(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginSyncRemotemanagementCertificate(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates the time settings of the specified device.
     *
     * @param {string} deviceName The device name
     *
     * @param {object} parameters The time settings to be added or updated.
     *
     * @param {string} parameters.timeZone The timezone of device, like '(UTC
     * -06:00) Central America'
     *
     * @param {string} [parameters.primaryTimeServer] The primary Network Time
     * Protocol (NTP) server name, like 'time.windows.com'.
     *
     * @param {array} [parameters.secondaryTimeServer] The secondary Network Time
     * Protocol (NTP) server name, like 'time.contoso.com'. It's optional.
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TimeSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateTimeSettingsWithHttpOperationResponse(deviceName: string, parameters: models.TimeSettings, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TimeSettings>>;

    /**
     * Creates or updates the time settings of the specified device.
     *
     * @param {string} deviceName The device name
     *
     * @param {object} parameters The time settings to be added or updated.
     *
     * @param {string} parameters.timeZone The timezone of device, like '(UTC
     * -06:00) Central America'
     *
     * @param {string} [parameters.primaryTimeServer] The primary Network Time
     * Protocol (NTP) server name, like 'time.windows.com'.
     *
     * @param {array} [parameters.secondaryTimeServer] The secondary Network Time
     * Protocol (NTP) server name, like 'time.contoso.com'. It's optional.
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TimeSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TimeSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TimeSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdateTimeSettings(deviceName: string, parameters: models.TimeSettings, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TimeSettings>;
    beginCreateOrUpdateTimeSettings(deviceName: string, parameters: models.TimeSettings, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.TimeSettings>): void;
    beginCreateOrUpdateTimeSettings(deviceName: string, parameters: models.TimeSettings, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TimeSettings>): void;
}

/**
 * @class
 * BackupPolicies
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimple8000SeriesManagementClient.
 */
export interface BackupPolicies {


    /**
     * Gets all the backup policies in a device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupPolicyList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDeviceWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupPolicyList>>;

    /**
     * Gets all the backup policies in a device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupPolicyList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupPolicyList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupPolicyList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupPolicyList>;
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.BackupPolicyList>): void;
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupPolicyList>): void;


    /**
     * Gets the properties of the specified backup policy name.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupPolicyName The name of backup policy to be fetched.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(deviceName: string, backupPolicyName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupPolicy>>;

    /**
     * Gets the properties of the specified backup policy name.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupPolicyName The name of backup policy to be fetched.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupPolicy} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(deviceName: string, backupPolicyName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupPolicy>;
    get(deviceName: string, backupPolicyName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.BackupPolicy>): void;
    get(deviceName: string, backupPolicyName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupPolicy>): void;


    /**
     * Creates or updates the backup policy.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupPolicyName The name of the backup policy to be
     * created/updated.
     *
     * @param {object} parameters The backup policy.
     *
     * @param {array} parameters.volumeIds The path IDs of the volumes which are
     * part of the backup policy.
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(deviceName: string, backupPolicyName: string, parameters: models.BackupPolicy, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupPolicy>>;

    /**
     * Creates or updates the backup policy.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupPolicyName The name of the backup policy to be
     * created/updated.
     *
     * @param {object} parameters The backup policy.
     *
     * @param {array} parameters.volumeIds The path IDs of the volumes which are
     * part of the backup policy.
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupPolicy} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(deviceName: string, backupPolicyName: string, parameters: models.BackupPolicy, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupPolicy>;
    createOrUpdate(deviceName: string, backupPolicyName: string, parameters: models.BackupPolicy, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.BackupPolicy>): void;
    createOrUpdate(deviceName: string, backupPolicyName: string, parameters: models.BackupPolicy, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupPolicy>): void;


    /**
     * Deletes the backup policy.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupPolicyName The name of the backup policy.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(deviceName: string, backupPolicyName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the backup policy.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupPolicyName The name of the backup policy.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(deviceName: string, backupPolicyName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(deviceName: string, backupPolicyName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(deviceName: string, backupPolicyName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Backup the backup policy now.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupPolicyName The backup policy name.
     *
     * @param {string} backupType The backup Type. This can be cloudSnapshot or
     * localSnapshot.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    backupNowWithHttpOperationResponse(deviceName: string, backupPolicyName: string, backupType: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Backup the backup policy now.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupPolicyName The backup policy name.
     *
     * @param {string} backupType The backup Type. This can be cloudSnapshot or
     * localSnapshot.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    backupNow(deviceName: string, backupPolicyName: string, backupType: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    backupNow(deviceName: string, backupPolicyName: string, backupType: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    backupNow(deviceName: string, backupPolicyName: string, backupType: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates the backup policy.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupPolicyName The name of the backup policy to be
     * created/updated.
     *
     * @param {object} parameters The backup policy.
     *
     * @param {array} parameters.volumeIds The path IDs of the volumes which are
     * part of the backup policy.
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(deviceName: string, backupPolicyName: string, parameters: models.BackupPolicy, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupPolicy>>;

    /**
     * Creates or updates the backup policy.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupPolicyName The name of the backup policy to be
     * created/updated.
     *
     * @param {object} parameters The backup policy.
     *
     * @param {array} parameters.volumeIds The path IDs of the volumes which are
     * part of the backup policy.
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupPolicy} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(deviceName: string, backupPolicyName: string, parameters: models.BackupPolicy, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupPolicy>;
    beginCreateOrUpdate(deviceName: string, backupPolicyName: string, parameters: models.BackupPolicy, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.BackupPolicy>): void;
    beginCreateOrUpdate(deviceName: string, backupPolicyName: string, parameters: models.BackupPolicy, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupPolicy>): void;


    /**
     * Deletes the backup policy.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupPolicyName The name of the backup policy.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(deviceName: string, backupPolicyName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the backup policy.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupPolicyName The name of the backup policy.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(deviceName: string, backupPolicyName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(deviceName: string, backupPolicyName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(deviceName: string, backupPolicyName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Backup the backup policy now.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupPolicyName The backup policy name.
     *
     * @param {string} backupType The backup Type. This can be cloudSnapshot or
     * localSnapshot.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginBackupNowWithHttpOperationResponse(deviceName: string, backupPolicyName: string, backupType: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Backup the backup policy now.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupPolicyName The backup policy name.
     *
     * @param {string} backupType The backup Type. This can be cloudSnapshot or
     * localSnapshot.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginBackupNow(deviceName: string, backupPolicyName: string, backupType: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginBackupNow(deviceName: string, backupPolicyName: string, backupType: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginBackupNow(deviceName: string, backupPolicyName: string, backupType: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * BackupSchedules
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimple8000SeriesManagementClient.
 */
export interface BackupSchedules {


    /**
     * Gets all the backup schedules in a backup policy.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupPolicyName The backup policy name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupScheduleList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByBackupPolicyWithHttpOperationResponse(deviceName: string, backupPolicyName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupScheduleList>>;

    /**
     * Gets all the backup schedules in a backup policy.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupPolicyName The backup policy name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupScheduleList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupScheduleList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupScheduleList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByBackupPolicy(deviceName: string, backupPolicyName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupScheduleList>;
    listByBackupPolicy(deviceName: string, backupPolicyName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.BackupScheduleList>): void;
    listByBackupPolicy(deviceName: string, backupPolicyName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupScheduleList>): void;


    /**
     * Gets the properties of the specified backup schedule name.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupPolicyName The backup policy name.
     *
     * @param {string} backupScheduleName The name of the backup schedule to be
     * fetched
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupSchedule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(deviceName: string, backupPolicyName: string, backupScheduleName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupSchedule>>;

    /**
     * Gets the properties of the specified backup schedule name.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupPolicyName The backup policy name.
     *
     * @param {string} backupScheduleName The name of the backup schedule to be
     * fetched
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupSchedule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupSchedule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupSchedule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(deviceName: string, backupPolicyName: string, backupScheduleName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupSchedule>;
    get(deviceName: string, backupPolicyName: string, backupScheduleName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.BackupSchedule>): void;
    get(deviceName: string, backupPolicyName: string, backupScheduleName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupSchedule>): void;


    /**
     * Creates or updates the backup schedule.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupPolicyName The backup policy name.
     *
     * @param {string} backupScheduleName The backup schedule name.
     *
     * @param {object} parameters The backup schedule.
     *
     * @param {object} parameters.scheduleRecurrence The schedule recurrence.
     *
     * @param {string} parameters.scheduleRecurrence.recurrenceType The recurrence
     * type. Possible values include: 'Minutes', 'Hourly', 'Daily', 'Weekly'
     *
     * @param {number} parameters.scheduleRecurrence.recurrenceValue The recurrence
     * value.
     *
     * @param {array} [parameters.scheduleRecurrence.weeklyDaysList] The week days
     * list. Applicable only for schedules of recurrence type 'weekly'.
     *
     * @param {string} parameters.backupType The type of backup which needs to be
     * taken. Possible values include: 'LocalSnapshot', 'CloudSnapshot'
     *
     * @param {number} parameters.retentionCount The number of backups to be
     * retained.
     *
     * @param {date} parameters.startTime The start time of the schedule.
     *
     * @param {string} parameters.scheduleStatus The schedule status. Possible
     * values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupSchedule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(deviceName: string, backupPolicyName: string, backupScheduleName: string, parameters: models.BackupSchedule, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupSchedule>>;

    /**
     * Creates or updates the backup schedule.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupPolicyName The backup policy name.
     *
     * @param {string} backupScheduleName The backup schedule name.
     *
     * @param {object} parameters The backup schedule.
     *
     * @param {object} parameters.scheduleRecurrence The schedule recurrence.
     *
     * @param {string} parameters.scheduleRecurrence.recurrenceType The recurrence
     * type. Possible values include: 'Minutes', 'Hourly', 'Daily', 'Weekly'
     *
     * @param {number} parameters.scheduleRecurrence.recurrenceValue The recurrence
     * value.
     *
     * @param {array} [parameters.scheduleRecurrence.weeklyDaysList] The week days
     * list. Applicable only for schedules of recurrence type 'weekly'.
     *
     * @param {string} parameters.backupType The type of backup which needs to be
     * taken. Possible values include: 'LocalSnapshot', 'CloudSnapshot'
     *
     * @param {number} parameters.retentionCount The number of backups to be
     * retained.
     *
     * @param {date} parameters.startTime The start time of the schedule.
     *
     * @param {string} parameters.scheduleStatus The schedule status. Possible
     * values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupSchedule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupSchedule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupSchedule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(deviceName: string, backupPolicyName: string, backupScheduleName: string, parameters: models.BackupSchedule, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupSchedule>;
    createOrUpdate(deviceName: string, backupPolicyName: string, backupScheduleName: string, parameters: models.BackupSchedule, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.BackupSchedule>): void;
    createOrUpdate(deviceName: string, backupPolicyName: string, backupScheduleName: string, parameters: models.BackupSchedule, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupSchedule>): void;


    /**
     * Deletes the backup schedule.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupPolicyName The backup policy name.
     *
     * @param {string} backupScheduleName The name the backup schedule.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(deviceName: string, backupPolicyName: string, backupScheduleName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the backup schedule.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupPolicyName The backup policy name.
     *
     * @param {string} backupScheduleName The name the backup schedule.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(deviceName: string, backupPolicyName: string, backupScheduleName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(deviceName: string, backupPolicyName: string, backupScheduleName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(deviceName: string, backupPolicyName: string, backupScheduleName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates the backup schedule.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupPolicyName The backup policy name.
     *
     * @param {string} backupScheduleName The backup schedule name.
     *
     * @param {object} parameters The backup schedule.
     *
     * @param {object} parameters.scheduleRecurrence The schedule recurrence.
     *
     * @param {string} parameters.scheduleRecurrence.recurrenceType The recurrence
     * type. Possible values include: 'Minutes', 'Hourly', 'Daily', 'Weekly'
     *
     * @param {number} parameters.scheduleRecurrence.recurrenceValue The recurrence
     * value.
     *
     * @param {array} [parameters.scheduleRecurrence.weeklyDaysList] The week days
     * list. Applicable only for schedules of recurrence type 'weekly'.
     *
     * @param {string} parameters.backupType The type of backup which needs to be
     * taken. Possible values include: 'LocalSnapshot', 'CloudSnapshot'
     *
     * @param {number} parameters.retentionCount The number of backups to be
     * retained.
     *
     * @param {date} parameters.startTime The start time of the schedule.
     *
     * @param {string} parameters.scheduleStatus The schedule status. Possible
     * values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupSchedule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(deviceName: string, backupPolicyName: string, backupScheduleName: string, parameters: models.BackupSchedule, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupSchedule>>;

    /**
     * Creates or updates the backup schedule.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupPolicyName The backup policy name.
     *
     * @param {string} backupScheduleName The backup schedule name.
     *
     * @param {object} parameters The backup schedule.
     *
     * @param {object} parameters.scheduleRecurrence The schedule recurrence.
     *
     * @param {string} parameters.scheduleRecurrence.recurrenceType The recurrence
     * type. Possible values include: 'Minutes', 'Hourly', 'Daily', 'Weekly'
     *
     * @param {number} parameters.scheduleRecurrence.recurrenceValue The recurrence
     * value.
     *
     * @param {array} [parameters.scheduleRecurrence.weeklyDaysList] The week days
     * list. Applicable only for schedules of recurrence type 'weekly'.
     *
     * @param {string} parameters.backupType The type of backup which needs to be
     * taken. Possible values include: 'LocalSnapshot', 'CloudSnapshot'
     *
     * @param {number} parameters.retentionCount The number of backups to be
     * retained.
     *
     * @param {date} parameters.startTime The start time of the schedule.
     *
     * @param {string} parameters.scheduleStatus The schedule status. Possible
     * values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupSchedule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupSchedule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupSchedule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(deviceName: string, backupPolicyName: string, backupScheduleName: string, parameters: models.BackupSchedule, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupSchedule>;
    beginCreateOrUpdate(deviceName: string, backupPolicyName: string, backupScheduleName: string, parameters: models.BackupSchedule, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.BackupSchedule>): void;
    beginCreateOrUpdate(deviceName: string, backupPolicyName: string, backupScheduleName: string, parameters: models.BackupSchedule, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupSchedule>): void;


    /**
     * Deletes the backup schedule.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupPolicyName The backup policy name.
     *
     * @param {string} backupScheduleName The name the backup schedule.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(deviceName: string, backupPolicyName: string, backupScheduleName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the backup schedule.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupPolicyName The backup policy name.
     *
     * @param {string} backupScheduleName The name the backup schedule.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(deviceName: string, backupPolicyName: string, backupScheduleName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(deviceName: string, backupPolicyName: string, backupScheduleName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(deviceName: string, backupPolicyName: string, backupScheduleName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * Backups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimple8000SeriesManagementClient.
 */
export interface Backups {


    /**
     * Retrieves all the backups in a device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDeviceWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupList>>;

    /**
     * Retrieves all the backups in a device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupList>;
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.BackupList>): void;
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupList>): void;


    /**
     * Deletes the backup.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupName The backup name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(deviceName: string, backupName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the backup.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupName The backup name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(deviceName: string, backupName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(deviceName: string, backupName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(deviceName: string, backupName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Clones the backup element as a new volume.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupName The backup name.
     *
     * @param {string} backupElementName The backup element name.
     *
     * @param {object} parameters The clone request object.
     *
     * @param {string} parameters.targetDeviceId The path ID of the device which
     * will act as the clone target.
     *
     * @param {string} parameters.targetVolumeName The name of the new volume which
     * will be created and the backup will be cloned into.
     *
     * @param {array} parameters.targetAccessControlRecordIds The list of path IDs
     * of the access control records to be associated to the new cloned volume.
     *
     * @param {object} parameters.backupElement The backup element that is cloned.
     *
     * @param {string} parameters.backupElement.elementId The path ID that uniquely
     * identifies the backup element.
     *
     * @param {string} parameters.backupElement.elementName The name of the backup
     * element.
     *
     * @param {string} parameters.backupElement.elementType The hierarchical type
     * of the backup element.
     *
     * @param {number} parameters.backupElement.sizeInBytes The size in bytes.
     *
     * @param {string} parameters.backupElement.volumeName The name of the volume.
     *
     * @param {string} parameters.backupElement.volumeContainerId The path ID of
     * the volume container.
     *
     * @param {string} [parameters.backupElement.volumeType] The volume type.
     * Possible values include: 'Tiered', 'Archival', 'LocallyPinned'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    cloneWithHttpOperationResponse(deviceName: string, backupName: string, backupElementName: string, parameters: models.CloneRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Clones the backup element as a new volume.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupName The backup name.
     *
     * @param {string} backupElementName The backup element name.
     *
     * @param {object} parameters The clone request object.
     *
     * @param {string} parameters.targetDeviceId The path ID of the device which
     * will act as the clone target.
     *
     * @param {string} parameters.targetVolumeName The name of the new volume which
     * will be created and the backup will be cloned into.
     *
     * @param {array} parameters.targetAccessControlRecordIds The list of path IDs
     * of the access control records to be associated to the new cloned volume.
     *
     * @param {object} parameters.backupElement The backup element that is cloned.
     *
     * @param {string} parameters.backupElement.elementId The path ID that uniquely
     * identifies the backup element.
     *
     * @param {string} parameters.backupElement.elementName The name of the backup
     * element.
     *
     * @param {string} parameters.backupElement.elementType The hierarchical type
     * of the backup element.
     *
     * @param {number} parameters.backupElement.sizeInBytes The size in bytes.
     *
     * @param {string} parameters.backupElement.volumeName The name of the volume.
     *
     * @param {string} parameters.backupElement.volumeContainerId The path ID of
     * the volume container.
     *
     * @param {string} [parameters.backupElement.volumeType] The volume type.
     * Possible values include: 'Tiered', 'Archival', 'LocallyPinned'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    clone(deviceName: string, backupName: string, backupElementName: string, parameters: models.CloneRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    clone(deviceName: string, backupName: string, backupElementName: string, parameters: models.CloneRequest, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    clone(deviceName: string, backupName: string, backupElementName: string, parameters: models.CloneRequest, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Restores the backup on the device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupName The backupSet name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    restoreWithHttpOperationResponse(deviceName: string, backupName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Restores the backup on the device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupName The backupSet name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    restore(deviceName: string, backupName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    restore(deviceName: string, backupName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    restore(deviceName: string, backupName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Deletes the backup.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupName The backup name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(deviceName: string, backupName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the backup.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupName The backup name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(deviceName: string, backupName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(deviceName: string, backupName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(deviceName: string, backupName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Clones the backup element as a new volume.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupName The backup name.
     *
     * @param {string} backupElementName The backup element name.
     *
     * @param {object} parameters The clone request object.
     *
     * @param {string} parameters.targetDeviceId The path ID of the device which
     * will act as the clone target.
     *
     * @param {string} parameters.targetVolumeName The name of the new volume which
     * will be created and the backup will be cloned into.
     *
     * @param {array} parameters.targetAccessControlRecordIds The list of path IDs
     * of the access control records to be associated to the new cloned volume.
     *
     * @param {object} parameters.backupElement The backup element that is cloned.
     *
     * @param {string} parameters.backupElement.elementId The path ID that uniquely
     * identifies the backup element.
     *
     * @param {string} parameters.backupElement.elementName The name of the backup
     * element.
     *
     * @param {string} parameters.backupElement.elementType The hierarchical type
     * of the backup element.
     *
     * @param {number} parameters.backupElement.sizeInBytes The size in bytes.
     *
     * @param {string} parameters.backupElement.volumeName The name of the volume.
     *
     * @param {string} parameters.backupElement.volumeContainerId The path ID of
     * the volume container.
     *
     * @param {string} [parameters.backupElement.volumeType] The volume type.
     * Possible values include: 'Tiered', 'Archival', 'LocallyPinned'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCloneWithHttpOperationResponse(deviceName: string, backupName: string, backupElementName: string, parameters: models.CloneRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Clones the backup element as a new volume.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupName The backup name.
     *
     * @param {string} backupElementName The backup element name.
     *
     * @param {object} parameters The clone request object.
     *
     * @param {string} parameters.targetDeviceId The path ID of the device which
     * will act as the clone target.
     *
     * @param {string} parameters.targetVolumeName The name of the new volume which
     * will be created and the backup will be cloned into.
     *
     * @param {array} parameters.targetAccessControlRecordIds The list of path IDs
     * of the access control records to be associated to the new cloned volume.
     *
     * @param {object} parameters.backupElement The backup element that is cloned.
     *
     * @param {string} parameters.backupElement.elementId The path ID that uniquely
     * identifies the backup element.
     *
     * @param {string} parameters.backupElement.elementName The name of the backup
     * element.
     *
     * @param {string} parameters.backupElement.elementType The hierarchical type
     * of the backup element.
     *
     * @param {number} parameters.backupElement.sizeInBytes The size in bytes.
     *
     * @param {string} parameters.backupElement.volumeName The name of the volume.
     *
     * @param {string} parameters.backupElement.volumeContainerId The path ID of
     * the volume container.
     *
     * @param {string} [parameters.backupElement.volumeType] The volume type.
     * Possible values include: 'Tiered', 'Archival', 'LocallyPinned'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginClone(deviceName: string, backupName: string, backupElementName: string, parameters: models.CloneRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginClone(deviceName: string, backupName: string, backupElementName: string, parameters: models.CloneRequest, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginClone(deviceName: string, backupName: string, backupElementName: string, parameters: models.CloneRequest, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Restores the backup on the device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupName The backupSet name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginRestoreWithHttpOperationResponse(deviceName: string, backupName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Restores the backup on the device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} backupName The backupSet name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginRestore(deviceName: string, backupName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginRestore(deviceName: string, backupName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginRestore(deviceName: string, backupName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Retrieves all the backups in a device.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDeviceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupList>>;

    /**
     * Retrieves all the backups in a device.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDeviceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupList>;
    listByDeviceNext(nextPageLink: string, callback: ServiceCallback<models.BackupList>): void;
    listByDeviceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupList>): void;
}

/**
 * @class
 * HardwareComponentGroups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimple8000SeriesManagementClient.
 */
export interface HardwareComponentGroups {


    /**
     * Lists the hardware component groups at device-level.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HardwareComponentGroupList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDeviceWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HardwareComponentGroupList>>;

    /**
     * Lists the hardware component groups at device-level.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HardwareComponentGroupList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HardwareComponentGroupList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HardwareComponentGroupList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HardwareComponentGroupList>;
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.HardwareComponentGroupList>): void;
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HardwareComponentGroupList>): void;


    /**
     * Changes the power state of the controller.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} hardwareComponentGroupName The hardware component group
     * name.
     *
     * @param {object} parameters The controller power state change request.
     *
     * @param {string} parameters.action The power state that the request is
     * expecting for the controller of the device. Possible values include:
     * 'Start', 'Restart', 'Shutdown'
     *
     * @param {string} parameters.activeController The active controller that the
     * request is expecting on the device. Possible values include: 'Unknown',
     * 'None', 'Controller0', 'Controller1'
     *
     * @param {string} parameters.controller0State The controller 0's status that
     * the request is expecting on the device. Possible values include:
     * 'NotPresent', 'PoweredOff', 'Ok', 'Recovering', 'Warning', 'Failure'
     *
     * @param {string} parameters.controller1State The controller 1's status that
     * the request is expecting on the device. Possible values include:
     * 'NotPresent', 'PoweredOff', 'Ok', 'Recovering', 'Warning', 'Failure'
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    changeControllerPowerStateWithHttpOperationResponse(deviceName: string, hardwareComponentGroupName: string, parameters: models.ControllerPowerStateChangeRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Changes the power state of the controller.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} hardwareComponentGroupName The hardware component group
     * name.
     *
     * @param {object} parameters The controller power state change request.
     *
     * @param {string} parameters.action The power state that the request is
     * expecting for the controller of the device. Possible values include:
     * 'Start', 'Restart', 'Shutdown'
     *
     * @param {string} parameters.activeController The active controller that the
     * request is expecting on the device. Possible values include: 'Unknown',
     * 'None', 'Controller0', 'Controller1'
     *
     * @param {string} parameters.controller0State The controller 0's status that
     * the request is expecting on the device. Possible values include:
     * 'NotPresent', 'PoweredOff', 'Ok', 'Recovering', 'Warning', 'Failure'
     *
     * @param {string} parameters.controller1State The controller 1's status that
     * the request is expecting on the device. Possible values include:
     * 'NotPresent', 'PoweredOff', 'Ok', 'Recovering', 'Warning', 'Failure'
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    changeControllerPowerState(deviceName: string, hardwareComponentGroupName: string, parameters: models.ControllerPowerStateChangeRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    changeControllerPowerState(deviceName: string, hardwareComponentGroupName: string, parameters: models.ControllerPowerStateChangeRequest, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    changeControllerPowerState(deviceName: string, hardwareComponentGroupName: string, parameters: models.ControllerPowerStateChangeRequest, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Changes the power state of the controller.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} hardwareComponentGroupName The hardware component group
     * name.
     *
     * @param {object} parameters The controller power state change request.
     *
     * @param {string} parameters.action The power state that the request is
     * expecting for the controller of the device. Possible values include:
     * 'Start', 'Restart', 'Shutdown'
     *
     * @param {string} parameters.activeController The active controller that the
     * request is expecting on the device. Possible values include: 'Unknown',
     * 'None', 'Controller0', 'Controller1'
     *
     * @param {string} parameters.controller0State The controller 0's status that
     * the request is expecting on the device. Possible values include:
     * 'NotPresent', 'PoweredOff', 'Ok', 'Recovering', 'Warning', 'Failure'
     *
     * @param {string} parameters.controller1State The controller 1's status that
     * the request is expecting on the device. Possible values include:
     * 'NotPresent', 'PoweredOff', 'Ok', 'Recovering', 'Warning', 'Failure'
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginChangeControllerPowerStateWithHttpOperationResponse(deviceName: string, hardwareComponentGroupName: string, parameters: models.ControllerPowerStateChangeRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Changes the power state of the controller.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} hardwareComponentGroupName The hardware component group
     * name.
     *
     * @param {object} parameters The controller power state change request.
     *
     * @param {string} parameters.action The power state that the request is
     * expecting for the controller of the device. Possible values include:
     * 'Start', 'Restart', 'Shutdown'
     *
     * @param {string} parameters.activeController The active controller that the
     * request is expecting on the device. Possible values include: 'Unknown',
     * 'None', 'Controller0', 'Controller1'
     *
     * @param {string} parameters.controller0State The controller 0's status that
     * the request is expecting on the device. Possible values include:
     * 'NotPresent', 'PoweredOff', 'Ok', 'Recovering', 'Warning', 'Failure'
     *
     * @param {string} parameters.controller1State The controller 1's status that
     * the request is expecting on the device. Possible values include:
     * 'NotPresent', 'PoweredOff', 'Ok', 'Recovering', 'Warning', 'Failure'
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginChangeControllerPowerState(deviceName: string, hardwareComponentGroupName: string, parameters: models.ControllerPowerStateChangeRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginChangeControllerPowerState(deviceName: string, hardwareComponentGroupName: string, parameters: models.ControllerPowerStateChangeRequest, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginChangeControllerPowerState(deviceName: string, hardwareComponentGroupName: string, parameters: models.ControllerPowerStateChangeRequest, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * Jobs
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimple8000SeriesManagementClient.
 */
export interface Jobs {


    /**
     * Gets all the jobs for specified device. With optional OData query
     * parameters, a filtered set of jobs is returned.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDeviceWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobList>>;

    /**
     * Gets all the jobs for specified device. With optional OData query
     * parameters, a filtered set of jobs is returned.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.JobList>;
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.JobList>): void;
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobList>): void;


    /**
     * Gets the details of the specified job name.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} jobName The job Name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Job>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(deviceName: string, jobName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Job>>;

    /**
     * Gets the details of the specified job name.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} jobName The job Name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Job} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Job} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Job} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(deviceName: string, jobName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Job>;
    get(deviceName: string, jobName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.Job>): void;
    get(deviceName: string, jobName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Job>): void;


    /**
     * Cancels a job on the device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} jobName The jobName.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    cancelWithHttpOperationResponse(deviceName: string, jobName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Cancels a job on the device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} jobName The jobName.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    cancel(deviceName: string, jobName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    cancel(deviceName: string, jobName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    cancel(deviceName: string, jobName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets all the jobs for the specified manager. With optional OData query
     * parameters, a filtered set of jobs is returned.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByManagerWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobList>>;

    /**
     * Gets all the jobs for the specified manager. With optional OData query
     * parameters, a filtered set of jobs is returned.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByManager(resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.JobList>;
    listByManager(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.JobList>): void;
    listByManager(resourceGroupName: string, managerName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobList>): void;


    /**
     * Cancels a job on the device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} jobName The jobName.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCancelWithHttpOperationResponse(deviceName: string, jobName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Cancels a job on the device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} jobName The jobName.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCancel(deviceName: string, jobName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginCancel(deviceName: string, jobName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginCancel(deviceName: string, jobName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets all the jobs for specified device. With optional OData query
     * parameters, a filtered set of jobs is returned.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDeviceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobList>>;

    /**
     * Gets all the jobs for specified device. With optional OData query
     * parameters, a filtered set of jobs is returned.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDeviceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobList>;
    listByDeviceNext(nextPageLink: string, callback: ServiceCallback<models.JobList>): void;
    listByDeviceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobList>): void;


    /**
     * Gets all the jobs for the specified manager. With optional OData query
     * parameters, a filtered set of jobs is returned.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByManagerNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobList>>;

    /**
     * Gets all the jobs for the specified manager. With optional OData query
     * parameters, a filtered set of jobs is returned.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByManagerNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobList>;
    listByManagerNext(nextPageLink: string, callback: ServiceCallback<models.JobList>): void;
    listByManagerNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobList>): void;
}

/**
 * @class
 * VolumeContainers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimple8000SeriesManagementClient.
 */
export interface VolumeContainers {


    /**
     * Gets all the volume containers in a device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VolumeContainerList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDeviceWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VolumeContainerList>>;

    /**
     * Gets all the volume containers in a device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VolumeContainerList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VolumeContainerList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VolumeContainerList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VolumeContainerList>;
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.VolumeContainerList>): void;
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VolumeContainerList>): void;


    /**
     * Gets the properties of the specified volume container name.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The name of the volume container.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VolumeContainer>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(deviceName: string, volumeContainerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VolumeContainer>>;

    /**
     * Gets the properties of the specified volume container name.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The name of the volume container.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VolumeContainer} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VolumeContainer} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VolumeContainer} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(deviceName: string, volumeContainerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VolumeContainer>;
    get(deviceName: string, volumeContainerName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.VolumeContainer>): void;
    get(deviceName: string, volumeContainerName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VolumeContainer>): void;


    /**
     * Creates or updates the volume container.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The name of the volume container.
     *
     * @param {object} parameters The volume container to be added or updated.
     *
     * @param {object} [parameters.encryptionKey] The key used to encrypt data in
     * the volume container. It is required when property 'EncryptionStatus' is
     * "Enabled".
     *
     * @param {string} parameters.encryptionKey.value The value of the secret.
     *
     * @param {string} [parameters.encryptionKey.encryptionCertThumbprint]
     * Thumbprint certificate that was used to encrypt "Value". If the value in
     * unencrypted, it will be null.
     *
     * @param {string} parameters.encryptionKey.encryptionAlgorithm The algorithm
     * used to encrypt "Value". Possible values include: 'None', 'AES256',
     * 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} parameters.storageAccountCredentialId The path ID of storage
     * account associated with the volume container.
     *
     * @param {number} [parameters.bandWidthRateInMbps] The bandwidth-rate set on
     * the volume container.
     *
     * @param {string} [parameters.bandwidthSettingId] The ID of the bandwidth
     * setting associated with the volume container.
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VolumeContainer>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(deviceName: string, volumeContainerName: string, parameters: models.VolumeContainer, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VolumeContainer>>;

    /**
     * Creates or updates the volume container.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The name of the volume container.
     *
     * @param {object} parameters The volume container to be added or updated.
     *
     * @param {object} [parameters.encryptionKey] The key used to encrypt data in
     * the volume container. It is required when property 'EncryptionStatus' is
     * "Enabled".
     *
     * @param {string} parameters.encryptionKey.value The value of the secret.
     *
     * @param {string} [parameters.encryptionKey.encryptionCertThumbprint]
     * Thumbprint certificate that was used to encrypt "Value". If the value in
     * unencrypted, it will be null.
     *
     * @param {string} parameters.encryptionKey.encryptionAlgorithm The algorithm
     * used to encrypt "Value". Possible values include: 'None', 'AES256',
     * 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} parameters.storageAccountCredentialId The path ID of storage
     * account associated with the volume container.
     *
     * @param {number} [parameters.bandWidthRateInMbps] The bandwidth-rate set on
     * the volume container.
     *
     * @param {string} [parameters.bandwidthSettingId] The ID of the bandwidth
     * setting associated with the volume container.
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VolumeContainer} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VolumeContainer} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VolumeContainer} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(deviceName: string, volumeContainerName: string, parameters: models.VolumeContainer, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VolumeContainer>;
    createOrUpdate(deviceName: string, volumeContainerName: string, parameters: models.VolumeContainer, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.VolumeContainer>): void;
    createOrUpdate(deviceName: string, volumeContainerName: string, parameters: models.VolumeContainer, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VolumeContainer>): void;


    /**
     * Deletes the volume container.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The name of the volume container.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(deviceName: string, volumeContainerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the volume container.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The name of the volume container.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(deviceName: string, volumeContainerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(deviceName: string, volumeContainerName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(deviceName: string, volumeContainerName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the metrics for the specified volume container.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The volume container name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {string} filter OData Filter options
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(deviceName: string, volumeContainerName: string, resourceGroupName: string, managerName: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricList>>;

    /**
     * Gets the metrics for the specified volume container.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The volume container name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {string} filter OData Filter options
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(deviceName: string, volumeContainerName: string, resourceGroupName: string, managerName: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricList>;
    listMetrics(deviceName: string, volumeContainerName: string, resourceGroupName: string, managerName: string, filter: string, callback: ServiceCallback<models.MetricList>): void;
    listMetrics(deviceName: string, volumeContainerName: string, resourceGroupName: string, managerName: string, filter: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricList>): void;


    /**
     * Gets the metric definitions for the specified volume container.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The volume container name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricDefinitionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricDefinitionWithHttpOperationResponse(deviceName: string, volumeContainerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricDefinitionList>>;

    /**
     * Gets the metric definitions for the specified volume container.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The volume container name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricDefinitionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricDefinitionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricDefinitionList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetricDefinition(deviceName: string, volumeContainerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricDefinitionList>;
    listMetricDefinition(deviceName: string, volumeContainerName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.MetricDefinitionList>): void;
    listMetricDefinition(deviceName: string, volumeContainerName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinitionList>): void;


    /**
     * Creates or updates the volume container.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The name of the volume container.
     *
     * @param {object} parameters The volume container to be added or updated.
     *
     * @param {object} [parameters.encryptionKey] The key used to encrypt data in
     * the volume container. It is required when property 'EncryptionStatus' is
     * "Enabled".
     *
     * @param {string} parameters.encryptionKey.value The value of the secret.
     *
     * @param {string} [parameters.encryptionKey.encryptionCertThumbprint]
     * Thumbprint certificate that was used to encrypt "Value". If the value in
     * unencrypted, it will be null.
     *
     * @param {string} parameters.encryptionKey.encryptionAlgorithm The algorithm
     * used to encrypt "Value". Possible values include: 'None', 'AES256',
     * 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} parameters.storageAccountCredentialId The path ID of storage
     * account associated with the volume container.
     *
     * @param {number} [parameters.bandWidthRateInMbps] The bandwidth-rate set on
     * the volume container.
     *
     * @param {string} [parameters.bandwidthSettingId] The ID of the bandwidth
     * setting associated with the volume container.
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VolumeContainer>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(deviceName: string, volumeContainerName: string, parameters: models.VolumeContainer, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VolumeContainer>>;

    /**
     * Creates or updates the volume container.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The name of the volume container.
     *
     * @param {object} parameters The volume container to be added or updated.
     *
     * @param {object} [parameters.encryptionKey] The key used to encrypt data in
     * the volume container. It is required when property 'EncryptionStatus' is
     * "Enabled".
     *
     * @param {string} parameters.encryptionKey.value The value of the secret.
     *
     * @param {string} [parameters.encryptionKey.encryptionCertThumbprint]
     * Thumbprint certificate that was used to encrypt "Value". If the value in
     * unencrypted, it will be null.
     *
     * @param {string} parameters.encryptionKey.encryptionAlgorithm The algorithm
     * used to encrypt "Value". Possible values include: 'None', 'AES256',
     * 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} parameters.storageAccountCredentialId The path ID of storage
     * account associated with the volume container.
     *
     * @param {number} [parameters.bandWidthRateInMbps] The bandwidth-rate set on
     * the volume container.
     *
     * @param {string} [parameters.bandwidthSettingId] The ID of the bandwidth
     * setting associated with the volume container.
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VolumeContainer} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VolumeContainer} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VolumeContainer} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(deviceName: string, volumeContainerName: string, parameters: models.VolumeContainer, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VolumeContainer>;
    beginCreateOrUpdate(deviceName: string, volumeContainerName: string, parameters: models.VolumeContainer, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.VolumeContainer>): void;
    beginCreateOrUpdate(deviceName: string, volumeContainerName: string, parameters: models.VolumeContainer, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VolumeContainer>): void;


    /**
     * Deletes the volume container.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The name of the volume container.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(deviceName: string, volumeContainerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the volume container.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The name of the volume container.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(deviceName: string, volumeContainerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(deviceName: string, volumeContainerName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(deviceName: string, volumeContainerName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * Volumes
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimple8000SeriesManagementClient.
 */
export interface Volumes {


    /**
     * Retrieves all the volumes in a volume container.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The volume container name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VolumeList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByVolumeContainerWithHttpOperationResponse(deviceName: string, volumeContainerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VolumeList>>;

    /**
     * Retrieves all the volumes in a volume container.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The volume container name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VolumeList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VolumeList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VolumeList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByVolumeContainer(deviceName: string, volumeContainerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VolumeList>;
    listByVolumeContainer(deviceName: string, volumeContainerName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.VolumeList>): void;
    listByVolumeContainer(deviceName: string, volumeContainerName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VolumeList>): void;


    /**
     * Returns the properties of the specified volume name.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The volume container name.
     *
     * @param {string} volumeName The volume name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Volume>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(deviceName: string, volumeContainerName: string, volumeName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Volume>>;

    /**
     * Returns the properties of the specified volume name.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The volume container name.
     *
     * @param {string} volumeName The volume name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Volume} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Volume} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Volume} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(deviceName: string, volumeContainerName: string, volumeName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Volume>;
    get(deviceName: string, volumeContainerName: string, volumeName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.Volume>): void;
    get(deviceName: string, volumeContainerName: string, volumeName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Volume>): void;


    /**
     * Creates or updates the volume.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The volume container name.
     *
     * @param {string} volumeName The volume name.
     *
     * @param {object} parameters Volume to be created or updated.
     *
     * @param {number} parameters.sizeInBytes The size of the volume in bytes.
     *
     * @param {string} parameters.volumeType The type of the volume. Possible
     * values include: 'Tiered', 'Archival', 'LocallyPinned'
     *
     * @param {array} parameters.accessControlRecordIds The IDs of the access
     * control records, associated with the volume.
     *
     * @param {string} parameters.volumeStatus The volume status. Possible values
     * include: 'Online', 'Offline'
     *
     * @param {string} parameters.monitoringStatus The monitoring status of the
     * volume. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Volume>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(deviceName: string, volumeContainerName: string, volumeName: string, parameters: models.Volume, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Volume>>;

    /**
     * Creates or updates the volume.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The volume container name.
     *
     * @param {string} volumeName The volume name.
     *
     * @param {object} parameters Volume to be created or updated.
     *
     * @param {number} parameters.sizeInBytes The size of the volume in bytes.
     *
     * @param {string} parameters.volumeType The type of the volume. Possible
     * values include: 'Tiered', 'Archival', 'LocallyPinned'
     *
     * @param {array} parameters.accessControlRecordIds The IDs of the access
     * control records, associated with the volume.
     *
     * @param {string} parameters.volumeStatus The volume status. Possible values
     * include: 'Online', 'Offline'
     *
     * @param {string} parameters.monitoringStatus The monitoring status of the
     * volume. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Volume} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Volume} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Volume} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(deviceName: string, volumeContainerName: string, volumeName: string, parameters: models.Volume, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Volume>;
    createOrUpdate(deviceName: string, volumeContainerName: string, volumeName: string, parameters: models.Volume, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.Volume>): void;
    createOrUpdate(deviceName: string, volumeContainerName: string, volumeName: string, parameters: models.Volume, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Volume>): void;


    /**
     * Deletes the volume.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The volume container name.
     *
     * @param {string} volumeName The volume name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(deviceName: string, volumeContainerName: string, volumeName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the volume.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The volume container name.
     *
     * @param {string} volumeName The volume name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(deviceName: string, volumeContainerName: string, volumeName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(deviceName: string, volumeContainerName: string, volumeName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(deviceName: string, volumeContainerName: string, volumeName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the metrics for the specified volume.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The volume container name.
     *
     * @param {string} volumeName The volume name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {string} filter OData Filter options
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(deviceName: string, volumeContainerName: string, volumeName: string, resourceGroupName: string, managerName: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricList>>;

    /**
     * Gets the metrics for the specified volume.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The volume container name.
     *
     * @param {string} volumeName The volume name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {string} filter OData Filter options
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(deviceName: string, volumeContainerName: string, volumeName: string, resourceGroupName: string, managerName: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricList>;
    listMetrics(deviceName: string, volumeContainerName: string, volumeName: string, resourceGroupName: string, managerName: string, filter: string, callback: ServiceCallback<models.MetricList>): void;
    listMetrics(deviceName: string, volumeContainerName: string, volumeName: string, resourceGroupName: string, managerName: string, filter: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricList>): void;


    /**
     * Gets the metric definitions for the specified volume.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The volume container name.
     *
     * @param {string} volumeName The volume name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricDefinitionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricDefinitionWithHttpOperationResponse(deviceName: string, volumeContainerName: string, volumeName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricDefinitionList>>;

    /**
     * Gets the metric definitions for the specified volume.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The volume container name.
     *
     * @param {string} volumeName The volume name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricDefinitionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricDefinitionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricDefinitionList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetricDefinition(deviceName: string, volumeContainerName: string, volumeName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricDefinitionList>;
    listMetricDefinition(deviceName: string, volumeContainerName: string, volumeName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.MetricDefinitionList>): void;
    listMetricDefinition(deviceName: string, volumeContainerName: string, volumeName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinitionList>): void;


    /**
     * Retrieves all the volumes in a device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VolumeList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDeviceWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VolumeList>>;

    /**
     * Retrieves all the volumes in a device.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VolumeList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VolumeList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VolumeList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VolumeList>;
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.VolumeList>): void;
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VolumeList>): void;


    /**
     * Creates or updates the volume.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The volume container name.
     *
     * @param {string} volumeName The volume name.
     *
     * @param {object} parameters Volume to be created or updated.
     *
     * @param {number} parameters.sizeInBytes The size of the volume in bytes.
     *
     * @param {string} parameters.volumeType The type of the volume. Possible
     * values include: 'Tiered', 'Archival', 'LocallyPinned'
     *
     * @param {array} parameters.accessControlRecordIds The IDs of the access
     * control records, associated with the volume.
     *
     * @param {string} parameters.volumeStatus The volume status. Possible values
     * include: 'Online', 'Offline'
     *
     * @param {string} parameters.monitoringStatus The monitoring status of the
     * volume. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Volume>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(deviceName: string, volumeContainerName: string, volumeName: string, parameters: models.Volume, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Volume>>;

    /**
     * Creates or updates the volume.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The volume container name.
     *
     * @param {string} volumeName The volume name.
     *
     * @param {object} parameters Volume to be created or updated.
     *
     * @param {number} parameters.sizeInBytes The size of the volume in bytes.
     *
     * @param {string} parameters.volumeType The type of the volume. Possible
     * values include: 'Tiered', 'Archival', 'LocallyPinned'
     *
     * @param {array} parameters.accessControlRecordIds The IDs of the access
     * control records, associated with the volume.
     *
     * @param {string} parameters.volumeStatus The volume status. Possible values
     * include: 'Online', 'Offline'
     *
     * @param {string} parameters.monitoringStatus The monitoring status of the
     * volume. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Volume} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Volume} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Volume} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(deviceName: string, volumeContainerName: string, volumeName: string, parameters: models.Volume, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Volume>;
    beginCreateOrUpdate(deviceName: string, volumeContainerName: string, volumeName: string, parameters: models.Volume, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.Volume>): void;
    beginCreateOrUpdate(deviceName: string, volumeContainerName: string, volumeName: string, parameters: models.Volume, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Volume>): void;


    /**
     * Deletes the volume.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The volume container name.
     *
     * @param {string} volumeName The volume name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(deviceName: string, volumeContainerName: string, volumeName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the volume.
     *
     * @param {string} deviceName The device name
     *
     * @param {string} volumeContainerName The volume container name.
     *
     * @param {string} volumeName The volume name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(deviceName: string, volumeContainerName: string, volumeName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(deviceName: string, volumeContainerName: string, volumeName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(deviceName: string, volumeContainerName: string, volumeName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * StorageAccountCredentials
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimple8000SeriesManagementClient.
 */
export interface StorageAccountCredentials {


    /**
     * Gets all the storage account credentials in a manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StorageAccountCredentialList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByManagerWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageAccountCredentialList>>;

    /**
     * Gets all the storage account credentials in a manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StorageAccountCredentialList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StorageAccountCredentialList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StorageAccountCredentialList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByManager(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageAccountCredentialList>;
    listByManager(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.StorageAccountCredentialList>): void;
    listByManager(resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageAccountCredentialList>): void;


    /**
     * Gets the properties of the specified storage account credential name.
     *
     * @param {string} storageAccountCredentialName The name of storage account
     * credential to be fetched.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StorageAccountCredential>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(storageAccountCredentialName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageAccountCredential>>;

    /**
     * Gets the properties of the specified storage account credential name.
     *
     * @param {string} storageAccountCredentialName The name of storage account
     * credential to be fetched.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StorageAccountCredential} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StorageAccountCredential} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StorageAccountCredential} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(storageAccountCredentialName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageAccountCredential>;
    get(storageAccountCredentialName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.StorageAccountCredential>): void;
    get(storageAccountCredentialName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageAccountCredential>): void;


    /**
     * Creates or updates the storage account credential.
     *
     * @param {string} storageAccountCredentialName The storage account credential
     * name.
     *
     * @param {object} parameters The storage account credential to be added or
     * updated.
     *
     * @param {string} parameters.endPoint The storage endpoint
     *
     * @param {string} parameters.sslStatus Signifies whether SSL needs to be
     * enabled or not. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [parameters.accessKey] The details of the storage account
     * password.
     *
     * @param {string} parameters.accessKey.value The value of the secret.
     *
     * @param {string} [parameters.accessKey.encryptionCertThumbprint] Thumbprint
     * certificate that was used to encrypt "Value". If the value in unencrypted,
     * it will be null.
     *
     * @param {string} parameters.accessKey.encryptionAlgorithm The algorithm used
     * to encrypt "Value". Possible values include: 'None', 'AES256',
     * 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StorageAccountCredential>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(storageAccountCredentialName: string, parameters: models.StorageAccountCredential, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageAccountCredential>>;

    /**
     * Creates or updates the storage account credential.
     *
     * @param {string} storageAccountCredentialName The storage account credential
     * name.
     *
     * @param {object} parameters The storage account credential to be added or
     * updated.
     *
     * @param {string} parameters.endPoint The storage endpoint
     *
     * @param {string} parameters.sslStatus Signifies whether SSL needs to be
     * enabled or not. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [parameters.accessKey] The details of the storage account
     * password.
     *
     * @param {string} parameters.accessKey.value The value of the secret.
     *
     * @param {string} [parameters.accessKey.encryptionCertThumbprint] Thumbprint
     * certificate that was used to encrypt "Value". If the value in unencrypted,
     * it will be null.
     *
     * @param {string} parameters.accessKey.encryptionAlgorithm The algorithm used
     * to encrypt "Value". Possible values include: 'None', 'AES256',
     * 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StorageAccountCredential} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StorageAccountCredential} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StorageAccountCredential} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(storageAccountCredentialName: string, parameters: models.StorageAccountCredential, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageAccountCredential>;
    createOrUpdate(storageAccountCredentialName: string, parameters: models.StorageAccountCredential, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.StorageAccountCredential>): void;
    createOrUpdate(storageAccountCredentialName: string, parameters: models.StorageAccountCredential, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageAccountCredential>): void;


    /**
     * Deletes the storage account credential.
     *
     * @param {string} storageAccountCredentialName The name of the storage account
     * credential.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(storageAccountCredentialName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the storage account credential.
     *
     * @param {string} storageAccountCredentialName The name of the storage account
     * credential.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(storageAccountCredentialName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(storageAccountCredentialName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(storageAccountCredentialName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates the storage account credential.
     *
     * @param {string} storageAccountCredentialName The storage account credential
     * name.
     *
     * @param {object} parameters The storage account credential to be added or
     * updated.
     *
     * @param {string} parameters.endPoint The storage endpoint
     *
     * @param {string} parameters.sslStatus Signifies whether SSL needs to be
     * enabled or not. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [parameters.accessKey] The details of the storage account
     * password.
     *
     * @param {string} parameters.accessKey.value The value of the secret.
     *
     * @param {string} [parameters.accessKey.encryptionCertThumbprint] Thumbprint
     * certificate that was used to encrypt "Value". If the value in unencrypted,
     * it will be null.
     *
     * @param {string} parameters.accessKey.encryptionAlgorithm The algorithm used
     * to encrypt "Value". Possible values include: 'None', 'AES256',
     * 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StorageAccountCredential>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(storageAccountCredentialName: string, parameters: models.StorageAccountCredential, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageAccountCredential>>;

    /**
     * Creates or updates the storage account credential.
     *
     * @param {string} storageAccountCredentialName The storage account credential
     * name.
     *
     * @param {object} parameters The storage account credential to be added or
     * updated.
     *
     * @param {string} parameters.endPoint The storage endpoint
     *
     * @param {string} parameters.sslStatus Signifies whether SSL needs to be
     * enabled or not. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [parameters.accessKey] The details of the storage account
     * password.
     *
     * @param {string} parameters.accessKey.value The value of the secret.
     *
     * @param {string} [parameters.accessKey.encryptionCertThumbprint] Thumbprint
     * certificate that was used to encrypt "Value". If the value in unencrypted,
     * it will be null.
     *
     * @param {string} parameters.accessKey.encryptionAlgorithm The algorithm used
     * to encrypt "Value". Possible values include: 'None', 'AES256',
     * 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} [parameters.kind] The Kind of the object. Currently only
     * Series8000 is supported. Possible values include: 'Series8000'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StorageAccountCredential} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StorageAccountCredential} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StorageAccountCredential} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(storageAccountCredentialName: string, parameters: models.StorageAccountCredential, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageAccountCredential>;
    beginCreateOrUpdate(storageAccountCredentialName: string, parameters: models.StorageAccountCredential, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.StorageAccountCredential>): void;
    beginCreateOrUpdate(storageAccountCredentialName: string, parameters: models.StorageAccountCredential, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageAccountCredential>): void;


    /**
     * Deletes the storage account credential.
     *
     * @param {string} storageAccountCredentialName The name of the storage account
     * credential.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(storageAccountCredentialName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the storage account credential.
     *
     * @param {string} storageAccountCredentialName The name of the storage account
     * credential.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(storageAccountCredentialName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(storageAccountCredentialName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(storageAccountCredentialName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}
