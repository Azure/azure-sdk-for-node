/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Represents the eligibility of a device as a failover target device.
 *
 */
class FailoverTarget {
  /**
   * Create a FailoverTarget.
   * @property {string} [deviceId] The path ID of the device.
   * @property {string} [deviceStatus] The status of the device. Possible
   * values include: 'Unknown', 'Online', 'Offline', 'Deactivated',
   * 'RequiresAttention', 'MaintenanceMode', 'Creating', 'Provisioning',
   * 'Deactivating', 'Deleted', 'ReadyToSetup'
   * @property {string} [modelDescription] The model number of the device.
   * @property {string} [deviceSoftwareVersion] The software version of the
   * device.
   * @property {number} [dataContainersCount] The count of data containers on
   * the device.
   * @property {number} [volumesCount] The count of volumes on the device.
   * @property {number} [availableLocalStorageInBytes] The amount of free local
   * storage available on the device in bytes.
   * @property {number} [availableTieredStorageInBytes] The amount of free
   * tiered storage available for the device in bytes.
   * @property {string} [deviceLocation] The geo location (applicable only for
   * cloud appliances) of the device.
   * @property {string} [friendlyDeviceSoftwareVersion] The friendly name for
   * the current version of software on the device.
   * @property {object} [eligibilityResult] The eligibility result of the
   * device, as a failover target device.
   * @property {string} [eligibilityResult.eligibilityStatus] The eligibility
   * status of device, as a failover target device. Possible values include:
   * 'NotEligible', 'Eligible'
   * @property {array} [eligibilityResult.messages] The list of error messages,
   * if a device does not qualify as a failover target device.
   */
  constructor() {
  }

  /**
   * Defines the metadata of FailoverTarget
   *
   * @returns {object} metadata of FailoverTarget
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'FailoverTarget',
      type: {
        name: 'Composite',
        className: 'FailoverTarget',
        modelProperties: {
          deviceId: {
            required: false,
            serializedName: 'deviceId',
            type: {
              name: 'String'
            }
          },
          deviceStatus: {
            required: false,
            serializedName: 'deviceStatus',
            type: {
              name: 'Enum',
              allowedValues: [ 'Unknown', 'Online', 'Offline', 'Deactivated', 'RequiresAttention', 'MaintenanceMode', 'Creating', 'Provisioning', 'Deactivating', 'Deleted', 'ReadyToSetup' ]
            }
          },
          modelDescription: {
            required: false,
            serializedName: 'modelDescription',
            type: {
              name: 'String'
            }
          },
          deviceSoftwareVersion: {
            required: false,
            serializedName: 'deviceSoftwareVersion',
            type: {
              name: 'String'
            }
          },
          dataContainersCount: {
            required: false,
            serializedName: 'dataContainersCount',
            type: {
              name: 'Number'
            }
          },
          volumesCount: {
            required: false,
            serializedName: 'volumesCount',
            type: {
              name: 'Number'
            }
          },
          availableLocalStorageInBytes: {
            required: false,
            serializedName: 'availableLocalStorageInBytes',
            type: {
              name: 'Number'
            }
          },
          availableTieredStorageInBytes: {
            required: false,
            serializedName: 'availableTieredStorageInBytes',
            type: {
              name: 'Number'
            }
          },
          deviceLocation: {
            required: false,
            serializedName: 'deviceLocation',
            type: {
              name: 'String'
            }
          },
          friendlyDeviceSoftwareVersion: {
            required: false,
            serializedName: 'friendlyDeviceSoftwareVersion',
            type: {
              name: 'String'
            }
          },
          eligibilityResult: {
            required: false,
            serializedName: 'eligibilityResult',
            type: {
              name: 'Composite',
              className: 'TargetEligibilityResult'
            }
          }
        }
      }
    };
  }
}

module.exports = FailoverTarget;
