/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The volume.
 *
 * @extends models['BaseModel']
 */
class Volume extends models['BaseModel'] {
  /**
   * Create a Volume.
   * @member {number} sizeInBytes The size of the volume in bytes.
   * @member {string} volumeType The type of the volume. Possible values
   * include: 'Tiered', 'Archival', 'LocallyPinned'
   * @member {string} [volumeContainerId] The ID of the volume container, in
   * which this volume is created.
   * @member {array} accessControlRecordIds The IDs of the access control
   * records, associated with the volume.
   * @member {string} volumeStatus The volume status. Possible values include:
   * 'Online', 'Offline'
   * @member {string} [operationStatus] The operation status on the volume.
   * Possible values include: 'None', 'Updating', 'Deleting', 'Restoring'
   * @member {string} [backupStatus] The backup status of the volume. Possible
   * values include: 'Enabled', 'Disabled'
   * @member {string} monitoringStatus The monitoring status of the volume.
   * Possible values include: 'Enabled', 'Disabled'
   * @member {array} [backupPolicyIds] The IDs of the backup policies, in which
   * this volume is part of.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Volume
   *
   * @returns {object} metadata of Volume
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Volume',
      type: {
        name: 'Composite',
        className: 'Volume',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          kind: {
            required: false,
            serializedName: 'kind',
            type: {
              name: 'Enum',
              allowedValues: [ 'Series8000' ]
            }
          },
          sizeInBytes: {
            required: true,
            serializedName: 'properties.sizeInBytes',
            type: {
              name: 'Number'
            }
          },
          volumeType: {
            required: true,
            serializedName: 'properties.volumeType',
            type: {
              name: 'Enum',
              allowedValues: [ 'Tiered', 'Archival', 'LocallyPinned' ]
            }
          },
          volumeContainerId: {
            required: false,
            readOnly: true,
            serializedName: 'properties.volumeContainerId',
            type: {
              name: 'String'
            }
          },
          accessControlRecordIds: {
            required: true,
            serializedName: 'properties.accessControlRecordIds',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          volumeStatus: {
            required: true,
            serializedName: 'properties.volumeStatus',
            type: {
              name: 'Enum',
              allowedValues: [ 'Online', 'Offline' ]
            }
          },
          operationStatus: {
            required: false,
            readOnly: true,
            serializedName: 'properties.operationStatus',
            type: {
              name: 'Enum',
              allowedValues: [ 'None', 'Updating', 'Deleting', 'Restoring' ]
            }
          },
          backupStatus: {
            required: false,
            readOnly: true,
            serializedName: 'properties.backupStatus',
            type: {
              name: 'Enum',
              allowedValues: [ 'Enabled', 'Disabled' ]
            }
          },
          monitoringStatus: {
            required: true,
            serializedName: 'properties.monitoringStatus',
            type: {
              name: 'Enum',
              allowedValues: [ 'Enabled', 'Disabled' ]
            }
          },
          backupPolicyIds: {
            required: false,
            readOnly: true,
            serializedName: 'properties.backupPolicyIds',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = Volume;
