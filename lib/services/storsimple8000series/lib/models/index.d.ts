/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError } from "ms-rest-azure";
import * as moment from "moment";

export {

  BaseResource,
  CloudError
};

/**
 * Represents the base class for all other ARM object models
 */
export interface BaseModel {
  /**
   * The path ID that uniquely identifies the object.
   */
  readonly id?: string;
  /**
   * The name of the object.
   */
  readonly name?: string;
  /**
   * The hierarchical type of the object.
   */
  readonly type?: string;
  /**
   * The Kind of the object. Currently only Series8000 is supported. Possible values include:
   * 'Series8000'
   */
  kind?: string;
}

/**
 * The access control record.
 */
export interface AccessControlRecord extends BaseModel {
  /**
   * The iSCSI initiator name (IQN).
   */
  initiatorName: string;
  /**
   * The number of volumes using the access control record.
   */
  readonly volumeCount?: number;
}

/**
 * The ACS configuration.
 */
export interface AcsConfiguration {
  /**
   * The namespace.
   */
  namespace: string;
  /**
   * The realm.
   */
  realm: string;
  /**
   * The service URL.
   */
  serviceUrl: string;
}

/**
 * The source details at which the alert was raised
 */
export interface AlertSource {
  /**
   * The name of the source
   */
  name?: string;
  /**
   * The time zone of the source
   */
  timeZone?: string;
  /**
   * The source type of the alert. Possible values include: 'Resource', 'Device'
   */
  alertSourceType?: string;
}

/**
 * The details of the error for which the alert was raised
 */
export interface AlertErrorDetails {
  /**
   * The error code
   */
  errorCode?: string;
  /**
   * The error message
   */
  errorMessage?: string;
  /**
   * The number of occurrences
   */
  occurences?: number;
}

/**
 * The alert.
 */
export interface Alert extends BaseModel {
  /**
   * The title of the alert
   */
  title: string;
  /**
   * The scope of the alert. Possible values include: 'Resource', 'Device'
   */
  scope: string;
  /**
   * The type of the alert
   */
  alertType: string;
  /**
   * The UTC time at which the alert was raised
   */
  appearedAtTime: Date;
  /**
   * The source time at which the alert was raised
   */
  appearedAtSourceTime: Date;
  /**
   * The UTC time at which the alert was cleared
   */
  clearedAtTime?: Date;
  /**
   * The source time at which the alert was cleared
   */
  clearedAtSourceTime?: Date;
  /**
   * The source at which the alert was raised
   */
  source: AlertSource;
  /**
   * The recommended action for the issue raised in the alert
   */
  recommendation?: string;
  /**
   * The reason for resolving the alert
   */
  resolutionReason?: string;
  /**
   * The severity of the alert. Possible values include: 'Informational', 'Warning', 'Critical'
   */
  severity: string;
  /**
   * The current status of the alert. Possible values include: 'Active', 'Cleared'
   */
  status: string;
  /**
   * The details of the error for which the alert was raised
   */
  errorDetails?: AlertErrorDetails;
  /**
   * More details about the alert
   */
  detailedInformation?: { [propertyName: string]: string };
}

/**
 * The OData filters to be used for Alert
 */
export interface AlertFilter {
  /**
   * Specifies the status of the alerts to be filtered. Only 'Equality' operator is supported for
   * this property. Possible values include: 'Active', 'Cleared'
   */
  status?: string;
  /**
   * Specifies the severity of the alerts to be filtered. Only 'Equality' operator is supported for
   * this property. Possible values include: 'Informational', 'Warning', 'Critical'
   */
  severity?: string;
  /**
   * Specifies the source type of the alerts to be filtered. Only 'Equality' operator is supported
   * for this property. Possible values include: 'Resource', 'Device'
   */
  sourceType?: string;
  /**
   * Specifies the source name of the alerts to be filtered. Only 'Equality' operator is supported
   * for this property.
   */
  sourceName?: string;
  /**
   * Specifies the appeared time (in UTC) of the alerts to be filtered. Only 'Greater-Than' and
   * 'Lesser-Than' operators are supported for this property.
   */
  appearedOnTime?: Date;
}

/**
 * The alert settings.
 */
export interface AlertSettings extends BaseModel {
  /**
   * Indicates whether email notification enabled or not. Possible values include: 'Enabled',
   * 'Disabled'
   */
  emailNotification: string;
  /**
   * The alert notification culture.
   */
  alertNotificationCulture?: string;
  /**
   * The value indicating whether alert notification enabled for admin or not. Possible values
   * include: 'Enabled', 'Disabled'
   */
  notificationToServiceOwners?: string;
  /**
   * The alert notification email list.
   */
  additionalRecipientEmailList?: string[];
}

/**
 * Represent the secrets intended for encryption with asymmetric key pair.
 */
export interface AsymmetricEncryptedSecret {
  /**
   * The value of the secret.
   */
  value: string;
  /**
   * Thumbprint certificate that was used to encrypt "Value". If the value in unencrypted, it will
   * be null.
   */
  encryptionCertThumbprint?: string;
  /**
   * The algorithm used to encrypt "Value". Possible values include: 'None', 'AES256',
   * 'RSAES_PKCS1_v_1_5'
   */
  encryptionAlgorithm: string;
}

/**
 * Contains the localized display information for this particular operation/action. These value
 * will be used by several clients for (a) custom role definitions for RBAC, (b) complex query
 * filters for the event service and (c) audit history/records for management operations.
 */
export interface AvailableProviderOperationDisplay {
  /**
   * The localized friendly form of the resource provider name - it is expected to also include the
   * publisher/company responsible. It should use Title Casing and begin with 'Microsoft' for 1st
   * party services.
   */
  provider?: string;
  /**
   * The localized friendly form of the resource type related to this action/operation - it should
   * match the public documentation for the resource provider. It should use Title Casing - for
   * examples, please refer to the 'name' section.
   */
  resource?: string;
  /**
   * The localized friendly name for the operation, as it should be shown to the user. It should be
   * concise (to fit in drop downs) but clear (i.e. self-documenting). It should use Title Casing
   * and include the entity/resource to which it applies.
   */
  operation?: string;
  /**
   * The localized friendly description for the operation, as it should be shown to the user. It
   * should be thorough, yet concise - it will be used in tool tips and detailed views.
   */
  description?: string;
}

/**
 * Represents available provider operation.
 */
export interface AvailableProviderOperation {
  /**
   * The name of the operation being performed on a particular object. Name format:
   * "{resourceProviderNamespace}/{resourceType}/{read|write|delete|action}". Eg.
   * Microsoft.StorSimple/managers/devices/volumeContainers/read,
   * Microsoft.StorSimple/managers/devices/alerts/clearAlerts/action
   */
  name?: string;
  /**
   * Contains the localized display information for this particular operation/action.
   */
  display?: AvailableProviderOperationDisplay;
  /**
   * The intended executor of the operation; governs the display of the operation in the RBAC UX
   * and the audit logs UX. Default value is "user,system"
   */
  origin?: string;
  /**
   * Reserved for future use.
   */
  properties?: any;
}

/**
 * The backup element.
 */
export interface BackupElement {
  /**
   * The path ID that uniquely identifies the backup element.
   */
  elementId: string;
  /**
   * The name of the backup element.
   */
  elementName: string;
  /**
   * The hierarchical type of the backup element.
   */
  elementType: string;
  /**
   * The size in bytes.
   */
  sizeInBytes: number;
  /**
   * The name of the volume.
   */
  volumeName: string;
  /**
   * The path ID of the volume container.
   */
  volumeContainerId: string;
  /**
   * The volume type. Possible values include: 'Tiered', 'Archival', 'LocallyPinned'
   */
  volumeType?: string;
}

/**
 * The backup.
 */
export interface Backup extends BaseModel {
  /**
   * The time when the backup was created.
   */
  createdOn: Date;
  /**
   * The backup size in bytes.
   */
  sizeInBytes: number;
  /**
   * The type of the backup. Possible values include: 'LocalSnapshot', 'CloudSnapshot'
   */
  backupType?: string;
  /**
   * The backup job creation type. Possible values include: 'Adhoc', 'BySchedule', 'BySSM'
   */
  backupJobCreationType?: string;
  /**
   * The path ID of the backup policy.
   */
  backupPolicyId?: string;
  /**
   * The StorSimple Snapshot Manager host name.
   */
  ssmHostName?: string;
  /**
   * The backup elements.
   */
  elements: BackupElement[];
}

/**
 * The OData filters to be used for backups.
 */
export interface BackupFilter {
  /**
   * Specifies the backupPolicyId of the backups to be filtered. Only 'Equality' operator is
   * supported for this property.
   */
  backupPolicyId?: string;
  /**
   * Specifies the volumeId of the backups to be filtered. Only 'Equality' operator is supported
   * for this property.
   */
  volumeId?: string;
  /**
   * Specifies the creation time of the backups to be filtered. Only 'Greater Than or Equal To' and
   * 'Lesser Than or Equal To' operators are supported for this property.
   */
  createdTime?: Date;
}

/**
 * The backup policy.
 */
export interface BackupPolicy extends BaseModel {
  /**
   * The path IDs of the volumes which are part of the backup policy.
   */
  volumeIds: string[];
  /**
   * The time of the next backup for the backup policy.
   */
  readonly nextBackupTime?: Date;
  /**
   * The time of the last backup for the backup policy.
   */
  readonly lastBackupTime?: Date;
  /**
   * The count of schedules the backup policy contains.
   */
  readonly schedulesCount?: number;
  /**
   * Indicates whether at least one of the schedules in the backup policy is active or not.
   * Possible values include: 'Disabled', 'Enabled'
   */
  readonly scheduledBackupStatus?: string;
  /**
   * The backup policy creation type. Indicates whether this was created through SaaS or through
   * StorSimple Snapshot Manager. Possible values include: 'BySaaS', 'BySSM'
   */
  readonly backupPolicyCreationType?: string;
  /**
   * If the backup policy was created by StorSimple Snapshot Manager, then this field indicates the
   * hostname of the StorSimple Snapshot Manager.
   */
  readonly ssmHostName?: string;
}

/**
 * The schedule recurrence.
 */
export interface ScheduleRecurrence {
  /**
   * The recurrence type. Possible values include: 'Minutes', 'Hourly', 'Daily', 'Weekly'
   */
  recurrenceType: string;
  /**
   * The recurrence value.
   */
  recurrenceValue: number;
  /**
   * The week days list. Applicable only for schedules of recurrence type 'weekly'.
   */
  weeklyDaysList?: string[];
}

/**
 * The backup schedule.
 */
export interface BackupSchedule extends BaseModel {
  /**
   * The schedule recurrence.
   */
  scheduleRecurrence: ScheduleRecurrence;
  /**
   * The type of backup which needs to be taken. Possible values include: 'LocalSnapshot',
   * 'CloudSnapshot'
   */
  backupType: string;
  /**
   * The number of backups to be retained.
   */
  retentionCount: number;
  /**
   * The start time of the schedule.
   */
  startTime: Date;
  /**
   * The schedule status. Possible values include: 'Enabled', 'Disabled'
   */
  scheduleStatus: string;
  /**
   * The last successful backup run which was triggered for the schedule.
   */
  readonly lastSuccessfulRun?: Date;
}

/**
 * The time.
 */
export interface Time {
  /**
   * The hour.
   */
  hours: number;
  /**
   * The minute.
   */
  minutes: number;
  /**
   * The second.
   */
  seconds: number;
}

/**
 * The schedule for bandwidth setting.
 */
export interface BandwidthSchedule {
  /**
   * The start time of the schedule.
   */
  start: Time;
  /**
   * The stop time of the schedule.
   */
  stop: Time;
  /**
   * The rate in Mbps.
   */
  rateInMbps: number;
  /**
   * The days of the week when this schedule is applicable.
   */
  days: string[];
}

/**
 * The bandwidth setting.
 */
export interface BandwidthSetting extends BaseModel {
  /**
   * The schedules.
   */
  schedules: BandwidthSchedule[];
  /**
   * The number of volumes that uses the bandwidth setting.
   */
  readonly volumeCount?: number;
}

/**
 * The Challenge-Handshake Authentication Protocol (CHAP) settings.
 */
export interface ChapSettings {
  /**
   * The CHAP initiator user.
   */
  initiatorUser?: string;
  /**
   * The CHAP initiator secret.
   */
  initiatorSecret?: AsymmetricEncryptedSecret;
  /**
   * The CHAP target user.
   */
  targetUser?: string;
  /**
   * The target secret.
   */
  targetSecret?: AsymmetricEncryptedSecret;
}

/**
 * The request for clearing the alert
 */
export interface ClearAlertRequest {
  /**
   * The resolution message while clearing the alert
   */
  resolutionMessage?: string;
  /**
   * The list of alert IDs to be cleared
   */
  alerts: string[];
}

/**
 * The clone job request.
 */
export interface CloneRequest {
  /**
   * The path ID of the device which will act as the clone target.
   */
  targetDeviceId: string;
  /**
   * The name of the new volume which will be created and the backup will be cloned into.
   */
  targetVolumeName: string;
  /**
   * The list of path IDs of the access control records to be associated to the new cloned volume.
   */
  targetAccessControlRecordIds: string[];
  /**
   * The backup element that is cloned.
   */
  backupElement: BackupElement;
}

/**
 * The cloud appliance.
 */
export interface CloudAppliance {
  /**
   * The name.
   */
  name: string;
  /**
   * The name of the virtual network.
   */
  vnetName?: string;
  /**
   * The virtual network region.
   */
  vnetRegion: string;
  /**
   * Indicates whether virtual network used is configured with DNS or not.
   */
  isVnetDnsConfigured?: boolean;
  /**
   * Indicates whether virtual network used is configured with express route or not.
   */
  isVnetExpressConfigured?: boolean;
  /**
   * The name of the subnet.
   */
  subnetName?: string;
  /**
   * The name of the storage account.
   */
  storageAccountName?: string;
  /**
   * The type of the storage account.
   */
  storageAccountType?: string;
  /**
   * The type of the virtual machine.
   */
  vmType?: string;
  /**
   * The name of the virtual machine image.
   */
  vmImageName?: string;
  /**
   * The model number.
   */
  modelNumber?: string;
}

/**
 * The virtual machine image.
 */
export interface VmImage {
  /**
   * The name.
   */
  name: string;
  /**
   * The version.
   */
  version: string;
  /**
   * The offer.
   */
  offer: string;
  /**
   * The publisher.
   */
  publisher: string;
  /**
   * The SKU.
   */
  sku: string;
}

/**
 * The cloud appliance configuration
 */
export interface CloudApplianceConfiguration extends BaseModel {
  /**
   * The model number.
   */
  modelNumber: string;
  /**
   * The cloud platform.
   */
  cloudPlatform: string;
  /**
   * The ACS configuration.
   */
  acsConfiguration: AcsConfiguration;
  /**
   * The supported storage account types.
   */
  supportedStorageAccountTypes: string[];
  /**
   * The supported regions.
   */
  supportedRegions: string[];
  /**
   * The supported virtual machine types.
   */
  supportedVmTypes: string[];
  /**
   * The supported virtual machine images.
   */
  supportedVmImages: VmImage[];
}

/**
 * The cloud appliance settings.
 */
export interface CloudApplianceSettings {
  /**
   * The service data encryption key (encrypted with DAK).
   */
  serviceDataEncryptionKey?: AsymmetricEncryptedSecret;
  /**
   * The channel integrity key (encrypted with DAK).
   */
  channelIntegrityKey?: AsymmetricEncryptedSecret;
}

/**
 * The secondary DNS settings.
 */
export interface SecondaryDNSSettings {
  /**
   * The list of secondary DNS Server IP addresses.
   */
  secondaryDnsServers?: string[];
}

/**
 * The 'Data 0' network interface card settings.
 */
export interface NetworkInterfaceData0Settings {
  /**
   * The controller 0's IPv4 address.
   */
  controllerZeroIp?: string;
  /**
   * The controller 1's IPv4 address.
   */
  controllerOneIp?: string;
}

/**
 * The mandatory device configuration request.
 */
export interface ConfigureDeviceRequest extends BaseModel {
  /**
   * The friendly name for the device.
   */
  friendlyName: string;
  /**
   * The current name of the device.
   */
  currentDeviceName: string;
  /**
   * The device time zone. For eg: "Pacific Standard Time"
   */
  timeZone: string;
  /**
   * The secondary DNS Settings of the device.
   */
  dnsSettings?: SecondaryDNSSettings;
  /**
   * The 'Data 0' network interface card settings.
   */
  networkInterfaceData0Settings?: NetworkInterfaceData0Settings;
}

/**
 * The controller power state change request.
 */
export interface ControllerPowerStateChangeRequest extends BaseModel {
  /**
   * The power state that the request is expecting for the controller of the device. Possible
   * values include: 'Start', 'Restart', 'Shutdown'
   */
  action: string;
  /**
   * The active controller that the request is expecting on the device. Possible values include:
   * 'Unknown', 'None', 'Controller0', 'Controller1'
   */
  activeController: string;
  /**
   * The controller 0's status that the request is expecting on the device. Possible values
   * include: 'NotPresent', 'PoweredOff', 'Ok', 'Recovering', 'Warning', 'Failure'
   */
  controller0State: string;
  /**
   * The controller 1's status that the request is expecting on the device. Possible values
   * include: 'NotPresent', 'PoweredOff', 'Ok', 'Recovering', 'Warning', 'Failure'
   */
  controller1State: string;
}

/**
 * The additional details related to the data related statistics of a job. Currently applicable
 * only for Backup, Clone and Restore jobs.
 */
export interface DataStatistics {
  /**
   * The total bytes of data to be processed, as part of the job.
   */
  totalData?: number;
  /**
   * The number of bytes of data processed till now, as part of the job.
   */
  processedData?: number;
  /**
   * The number of bytes of data written to cloud, as part of the job.
   */
  cloudData?: number;
  /**
   * The average throughput of data processed(bytes/sec), as part of the job.
   */
  throughput?: number;
}

/**
 * The additional device details regarding the end point count and volume container count.
 */
export interface DeviceDetails {
  /**
   * The total number of endpoints that are currently on the device ( i.e. number of volumes).
   */
  endpointCount?: number;
  /**
   * The total number of volume containers on the device.
   */
  volumeContainerCount?: number;
}

/**
 * The additional device details for the service data encryption key rollover.
 */
export interface DeviceRolloverDetails {
  /**
   * The eligibility status of device for service data encryption key rollover. Possible values
   * include: 'InEligible', 'Eligible'
   */
  authorizationEligibility?: string;
  /**
   * The authorization status of the device for service data encryption key rollover. Possible
   * values include: 'Disabled', 'Enabled'
   */
  authorizationStatus?: string;
  /**
   * The reason for inEligibility of device, in case it's not eligible for service data encryption
   * key rollover. Possible values include: 'DeviceNotOnline', 'NotSupportedAppliance',
   * 'RolloverPending'
   */
  inEligibilityReason?: string;
}

/**
 * The StorSimple device.
 */
export interface Device extends BaseModel {
  /**
   * The friendly name of the device.
   */
  friendlyName: string;
  /**
   * The UTC time at which the device was activated
   */
  activationTime: Date;
  /**
   * The language culture setting on the device. For eg: "en-US"
   */
  culture: string;
  /**
   * The device description.
   */
  deviceDescription: string;
  /**
   * The version number of the software running on the device.
   */
  deviceSoftwareVersion: string;
  /**
   * The friendly name of the software running on the device.
   */
  friendlySoftwareName?: string;
  /**
   * The current configuration status of the device. Possible values include: 'Complete', 'Pending'
   */
  deviceConfigurationStatus: string;
  /**
   * The target IQN.
   */
  targetIqn: string;
  /**
   * The device model.
   */
  modelDescription: string;
  /**
   * The current status of the device. Possible values include: 'Unknown', 'Online', 'Offline',
   * 'Deactivated', 'RequiresAttention', 'MaintenanceMode', 'Creating', 'Provisioning',
   * 'Deactivating', 'Deleted', 'ReadyToSetup'
   */
  status: string;
  /**
   * The serial number.
   */
  serialNumber: string;
  /**
   * The type of the device. Possible values include: 'Invalid', 'Series8000VirtualAppliance',
   * 'Series8000PhysicalAppliance'
   */
  deviceType: string;
  /**
   * The identifier of the active controller of the device. Possible values include: 'Unknown',
   * 'None', 'Controller0', 'Controller1'
   */
  activeController: string;
  /**
   * The device friendly software version.
   */
  friendlySoftwareVersion: string;
  /**
   * The storage in bytes that is available locally on the device.
   */
  availableLocalStorageInBytes?: number;
  /**
   * The storage in bytes that is available on the device for tiered volumes.
   */
  availableTieredStorageInBytes?: number;
  /**
   * The storage in bytes that has been provisioned on the device for tiered volumes.
   */
  provisionedTieredStorageInBytes?: number;
  /**
   * The storage in bytes used for locally pinned volumes on the device (including additional local
   * reservation).
   */
  provisionedLocalStorageInBytes?: number;
  /**
   * Total capacity in bytes of tiered and locally pinned volumes on the device
   */
  provisionedVolumeSizeInBytes?: number;
  /**
   * The storage in bytes that is currently being used on the device, including both local and
   * cloud.
   */
  usingStorageInBytes?: number;
  /**
   * The total tiered storage available on the device in bytes.
   */
  totalTieredStorageInBytes?: number;
  /**
   * The device agent group version.
   */
  agentGroupVersion?: number;
  /**
   * The number of network interface cards
   */
  networkInterfaceCardCount?: number;
  /**
   * The location of the virtual appliance.
   */
  deviceLocation?: string;
  /**
   * The virtual machine API type. Possible values include: 'Classic', 'Arm'
   */
  readonly virtualMachineApiType?: string;
  /**
   * The additional device details regarding the end point count and volume container count.
   */
  details?: DeviceDetails;
  /**
   * The additional device details for the service data encryption key rollover.
   */
  rolloverDetails?: DeviceRolloverDetails;
}

/**
 * The device patch.
 */
export interface DevicePatch {
  /**
   * Short description given for the device
   */
  deviceDescription?: string;
}

/**
 * The dimension filter.
 */
export interface DimensionFilter {
  /**
   * Specifies the dimension name. E.g., NetworkInterface. Valid values are the ones specified in
   * the field "dimensions" in the ListMetricDefinitions call. Only 'Equality' operator is
   * supported for this property.
   */
  name?: string;
  /**
   * Specifies the dimension value. E.g., Data0. Valid values are the ones returned in the field
   * "dimensions" in the ListMetricDefinitions call. Only 'Equality' operator is supported for this
   * property.
   */
  values?: string;
}

/**
 * The DNS(Domain Name Server) settings of a device.
 */
export interface DNSSettings {
  /**
   * The primary IPv4 DNS server for the device
   */
  primaryDnsServer?: string;
  /**
   * The primary IPv6 DNS server for the device
   */
  primaryIpv6DnsServer?: string;
  /**
   * The secondary IPv4 DNS server for the device
   */
  secondaryDnsServers?: string[];
  /**
   * The secondary IPv6 DNS server for the device
   */
  secondaryIpv6DnsServers?: string[];
}

/**
 * The encryption settings.
 */
export interface EncryptionSettings extends BaseModel {
  /**
   * The encryption status to indicates if encryption is enabled or not. Possible values include:
   * 'Enabled', 'Disabled'
   */
  encryptionStatus: string;
  /**
   * The key rollover status to indicates if key rollover is required or not. If secret's
   * encryption has been upgraded, then it requires key rollover. Possible values include:
   * 'Required', 'NotRequired'
   */
  keyRolloverStatus: string;
}

/**
 * The request object for triggering a failover of volume containers, from a source device to a
 * target device.
 */
export interface FailoverRequest {
  /**
   * The ARM path ID of the device which will act as the failover target.
   */
  targetDeviceId?: string;
  /**
   * The list of path IDs of the volume containers which needs to be failed-over to the target
   * device.
   */
  volumeContainers?: string[];
}

/**
 * The metadata of a volume that has valid cloud snapshot.
 */
export interface VolumeFailoverMetadata {
  /**
   * The path ID of the volume.
   */
  volumeId?: string;
  /**
   * The type of the volume. Possible values include: 'Tiered', 'Archival', 'LocallyPinned'
   */
  volumeType?: string;
  /**
   * The size of the volume in bytes at the time the snapshot was taken.
   */
  sizeInBytes?: number;
  /**
   * The date at which the snapshot was taken.
   */
  backupCreatedDate?: Date;
  /**
   * The path ID of the backup-element for this volume, inside the backup set.
   */
  backupElementId?: string;
  /**
   * The path ID of the backup set.
   */
  backupId?: string;
  /**
   * The path ID of the backup policy using which the snapshot was taken.
   */
  backupPolicyId?: string;
}

/**
 * The metadata of the volume container, that is being considered as part of a failover set.
 */
export interface VolumeContainerFailoverMetadata {
  /**
   * The path ID of the volume container.
   */
  volumeContainerId?: string;
  /**
   * The list of metadata of volumes inside the volume container, which contains valid cloud
   * snapshots.
   */
  volumes?: VolumeFailoverMetadata[];
}

/**
 * The eligibility result of failover set, for failover.
 */
export interface FailoverSetEligibilityResult {
  /**
   * Represents if this failover set is eligible for failover or not.
   */
  isEligibleForFailover?: boolean;
  /**
   * The error message, if the failover set is not eligible for failover.
   */
  errorMessage?: string;
}

/**
 * The failover set on a device.
 */
export interface FailoverSet {
  /**
   * The list of meta data of volume containers, which are part of the failover set.
   */
  volumeContainers?: VolumeContainerFailoverMetadata[];
  /**
   * The eligibility result of the failover set, for failover.
   */
  eligibilityResult?: FailoverSetEligibilityResult;
}

/**
 * The error/warning message due to which the device is ineligible as a failover target device.
 */
export interface TargetEligibilityErrorMessage {
  /**
   * The localized error message stating the reason why the device is not eligible as a target
   * device.
   */
  message?: string;
  /**
   * The localized resolution message for the error.
   */
  resolution?: string;
  /**
   * The result code for the error, due to which the device does not qualify as a failover target
   * device. Possible values include: 'TargetAndSourceCannotBeSameError', 'TargetIsNotOnlineError',
   * 'TargetSourceIncompatibleVersionError', 'LocalToTieredVolumesConversionWarning',
   * 'TargetInsufficientCapacityError', 'TargetInsufficientLocalVolumeMemoryError',
   * 'TargetInsufficientTieredVolumeMemoryError'
   */
  resultCode?: string;
}

/**
 * The eligibility result of device, as a failover target device.
 */
export interface TargetEligibilityResult {
  /**
   * The eligibility status of device, as a failover target device. Possible values include:
   * 'NotEligible', 'Eligible'
   */
  eligibilityStatus?: string;
  /**
   * The list of error messages, if a device does not qualify as a failover target device.
   */
  messages?: TargetEligibilityErrorMessage[];
}

/**
 * Represents the eligibility of a device as a failover target device.
 */
export interface FailoverTarget {
  /**
   * The path ID of the device.
   */
  deviceId?: string;
  /**
   * The status of the device. Possible values include: 'Unknown', 'Online', 'Offline',
   * 'Deactivated', 'RequiresAttention', 'MaintenanceMode', 'Creating', 'Provisioning',
   * 'Deactivating', 'Deleted', 'ReadyToSetup'
   */
  deviceStatus?: string;
  /**
   * The model number of the device.
   */
  modelDescription?: string;
  /**
   * The software version of the device.
   */
  deviceSoftwareVersion?: string;
  /**
   * The count of data containers on the device.
   */
  dataContainersCount?: number;
  /**
   * The count of volumes on the device.
   */
  volumesCount?: number;
  /**
   * The amount of free local storage available on the device in bytes.
   */
  availableLocalStorageInBytes?: number;
  /**
   * The amount of free tiered storage available for the device in bytes.
   */
  availableTieredStorageInBytes?: number;
  /**
   * The geo location (applicable only for cloud appliances) of the device.
   */
  deviceLocation?: string;
  /**
   * The friendly name for the current version of software on the device.
   */
  friendlyDeviceSoftwareVersion?: string;
  /**
   * The eligibility result of the device, as a failover target device.
   */
  eligibilityResult?: TargetEligibilityResult;
}

/**
 * The feature.
 */
export interface Feature {
  /**
   * The name of the feature.
   */
  name: string;
  /**
   * The feature support status. Possible values include: 'NotAvailable',
   * 'UnsupportedDeviceVersion', 'Supported'
   */
  status: string;
}

/**
 * The OData filter to be used for features.
 */
export interface FeatureFilter {
  /**
   * Specifies the device ID for which the features are required. Only 'Equality' operator is
   * supported for this property.
   */
  deviceId?: string;
}

/**
 * The hardware component.
 */
export interface HardwareComponent {
  /**
   * The component ID.
   */
  componentId: string;
  /**
   * The display name of the hardware component.
   */
  displayName: string;
  /**
   * The status of the hardware component. Possible values include: 'Unknown', 'NotPresent',
   * 'PoweredOff', 'Ok', 'Recovering', 'Warning', 'Failure'
   */
  status: string;
  /**
   * The display name of the status of hardware component.
   */
  statusDisplayName: string;
}

/**
 * The hardware component group.
 */
export interface HardwareComponentGroup extends BaseModel {
  /**
   * The display name the hardware component group.
   */
  displayName: string;
  /**
   * The last updated time.
   */
  lastUpdatedTime: Date;
  /**
   * The list of hardware components.
   */
  components: HardwareComponent[];
}

/**
 * The job error items.
 */
export interface JobErrorItem {
  /**
   * The recommended actions.
   */
  recommendations?: string[];
  /**
   * The error code intended for programmatic access.
   */
  code: string;
  /**
   * The error message intended to describe the error in detail.
   */
  message: string;
}

/**
 * The job error details. Contains list of job error items.
 */
export interface JobErrorDetails {
  /**
   * The error details.
   */
  errorDetails?: JobErrorItem[];
  /**
   * The error code intended for programmatic access.
   */
  code: string;
  /**
   * The error message intended to describe the error in detail.
   */
  message: string;
}

/**
 * The details about the specific stage of a job.
 */
export interface JobStage {
  /**
   * The message of the job stage.
   */
  message?: string;
  /**
   * The stage status. Possible values include: 'Running', 'Succeeded', 'Failed', 'Canceled'
   */
  stageStatus: string;
  /**
   * The details of the stage.
   */
  detail?: string;
  /**
   * The error code of the stage if any.
   */
  errorCode?: string;
}

/**
 * The job.
 */
export interface Job extends BaseModel {
  /**
   * The current status of the job. Possible values include: 'Running', 'Succeeded', 'Failed',
   * 'Canceled'
   */
  status: string;
  /**
   * The UTC time at which the job was started.
   */
  startTime?: Date;
  /**
   * The UTC time at which the job completed.
   */
  endTime?: Date;
  /**
   * The percentage of the job that is already complete.
   */
  percentComplete: number;
  /**
   * The error details, if any, for the job.
   */
  error?: JobErrorDetails;
  /**
   * The type of the job. Possible values include: 'ScheduledBackup', 'ManualBackup',
   * 'RestoreBackup', 'CloneVolume', 'FailoverVolumeContainers', 'CreateLocallyPinnedVolume',
   * 'ModifyVolume', 'InstallUpdates', 'SupportPackageLogs', 'CreateCloudAppliance'
   */
  jobType: string;
  /**
   * The data statistics properties of the job.
   */
  dataStats?: DataStatistics;
  /**
   * The entity identifier for which the job ran.
   */
  entityLabel?: string;
  /**
   * The entity type for which the job ran.
   */
  entityType?: string;
  /**
   * The job stages.
   */
  jobStages?: JobStage[];
  /**
   * The device ID in which the job ran.
   */
  deviceId?: string;
  /**
   * Represents whether the job is cancellable or not.
   */
  isCancellable?: boolean;
  /**
   * The backup type (CloudSnapshot | LocalSnapshot). Applicable only for backup jobs. Possible
   * values include: 'LocalSnapshot', 'CloudSnapshot'
   */
  backupType?: string;
  /**
   * The source device ID of the failover job.
   */
  sourceDeviceId?: string;
  /**
   * The time of the backup used for the failover.
   */
  backupPointInTime?: Date;
}

/**
 * The OData filter to be used for jobs.
 */
export interface JobFilter {
  /**
   * Specifies the status of the jobs to be filtered. For e.g., "Running", "Succeeded", "Failed" or
   * "Canceled". Only 'Equality' operator is supported for this property.
   */
  status?: string;
  /**
   * Specifies the type of the jobs to be filtered. For e.g., "ScheduledBackup", "ManualBackup",
   * "RestoreBackup", "CloneVolume", "FailoverVolumeContainers", "CreateLocallyPinnedVolume",
   * "ModifyVolume", "InstallUpdates", "SupportPackageLogs", or "CreateCloudAppliance". Only
   * 'Equality' operator can be used for this property.
   */
  jobType?: string;
  /**
   * Specifies the start time of the jobs to be filtered.  Only 'Greater Than or Equal To' and
   * 'Lesser Than or Equal To' operators are supported for this property.
   */
  startTime?: Date;
}

/**
 * The key.
 */
export interface Key {
  /**
   * The activation key for the device.
   */
  activationKey: string;
}

/**
 * The request object for fetching the list of failover targets (eligible devices for failover).
 */
export interface ListFailoverTargetsRequest {
  /**
   * The list of path IDs of the volume containers that needs to be failed-over, for which we want
   * to fetch the eligible targets.
   */
  volumeContainers?: string[];
}

/**
 * Intrinsic settings which refers to the type of the StorSimple Manager.
 */
export interface ManagerIntrinsicSettings {
  /**
   * The type of StorSimple Manager. Possible values include: 'GardaV1', 'HelsinkiV1'
   */
  type: string;
}

/**
 * The Sku.
 */
export interface ManagerSku {
}

/**
 * The Azure Resource.
 */
export interface Resource extends BaseResource {
  /**
   * The resource ID.
   */
  readonly id?: string;
  /**
   * The resource name.
   */
  readonly name?: string;
  /**
   * The resource type.
   */
  readonly type?: string;
  /**
   * The geo location of the resource.
   */
  location: string;
  /**
   * The tags attached to the resource.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The StorSimple Manager.
 */
export interface Manager extends Resource {
  /**
   * Represents the type of StorSimple Manager.
   */
  cisIntrinsicSettings?: ManagerIntrinsicSettings;
  /**
   * Specifies the state of the resource as it is getting provisioned. Value of "Succeeded" means
   * the Manager was successfully created.
   */
  provisioningState?: string;
  /**
   * The etag of the manager.
   */
  etag?: string;
}

/**
 * The extended info of the manager.
 */
export interface ManagerExtendedInfo extends BaseModel {
  /**
   * The version of the extended info being persisted.
   */
  version?: string;
  /**
   * Represents the CIK of the resource.
   */
  integrityKey: string;
  /**
   * Represents the CEK of the resource.
   */
  encryptionKey?: string;
  /**
   * Represents the Cert thumbprint that was used to encrypt the CEK.
   */
  encryptionKeyThumbprint?: string;
  /**
   * Represents the portal thumbprint which can be used optionally to encrypt the entire data
   * before storing it.
   */
  portalCertificateThumbprint?: string;
  /**
   * Represents the encryption algorithm used to encrypt the keys. None - if Key is saved in plain
   * text format. Algorithm name - if key is encrypted
   */
  algorithm: string;
  /**
   * The etag of the resource.
   */
  etag?: string;
}

/**
 * The StorSimple Manager patch.
 */
export interface ManagerPatch {
  /**
   * The tags attached to the Manager.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The metric availability.
 */
export interface MetricAvailablity {
  /**
   * The aggregation interval for the metric.
   */
  timeGrain?: string;
  /**
   * The retention period for the metric at the specified timegrain.
   */
  retention?: string;
}

/**
 * The metric data.
 */
export interface MetricData {
  /**
   * The time stamp of the metric data.
   */
  timeStamp?: Date;
  /**
   * The sum of all samples at the time stamp.
   */
  sum?: number;
  /**
   * The count of all samples at the time stamp.
   */
  count?: number;
  /**
   * The average of all samples at the time stamp.
   */
  average?: number;
  /**
   * The minimum of all samples at the time stamp.
   */
  minimum?: number;
  /**
   * The maximum of all samples at the time stamp.
   */
  maximum?: number;
}

/**
 * The metric name.
 */
export interface MetricName {
  /**
   * The metric name.
   */
  value?: string;
  /**
   * The localized metric name.
   */
  localizedValue?: string;
}

/**
 * The metric dimension. It indicates the source of the metric.
 */
export interface MetricDimension {
  /**
   * The metric dimension name.
   */
  name?: string;
  /**
   * The metric dimension values.
   */
  value?: string;
}

/**
 * The monitoring metric definition.
 */
export interface MetricDefinition {
  /**
   * The metric name.
   */
  name?: MetricName;
  /**
   * The metric unit. Possible values include: 'Bytes', 'BytesPerSecond', 'Count',
   * 'CountPerSecond', 'Percent', 'Seconds'
   */
  unit?: string;
  /**
   * The metric aggregation type. Possible values include: 'Average', 'Last', 'Maximum', 'Minimum',
   * 'None', 'Total'
   */
  primaryAggregationType?: string;
  /**
   * The metric source ID.
   */
  resourceId?: string;
  /**
   * The available metric granularities.
   */
  metricAvailabilities?: MetricAvailablity[];
  /**
   * The available metric dimensions.
   */
  dimensions?: MetricDimension[];
  /**
   * The category of the metric.
   */
  category?: string;
  /**
   * The metric definition type.
   */
  type?: string;
}

/**
 * The metric name filter, specifying the name of the metric to be filtered on.
 */
export interface MetricNameFilter {
  /**
   * Specifies the metric name to be filtered on. E.g., CloudStorageUsed. Valid values are the ones
   * returned in the field "name" in the ListMetricDefinitions call. Only 'Equality' operator is
   * supported for this property.
   */
  value?: string;
}

/**
 * The OData filters to be used for metrics.
 */
export interface MetricFilter {
  /**
   * Specifies the metric name filter specifying the name of the metric to be filtered on. Only
   * 'Equality' operator is supported for this property.
   */
  name?: MetricNameFilter;
  /**
   * Specifies the start time of the time range to be queried. Only 'Greater Than Or Equal To'
   * operator is supported for this property.
   */
  startTime?: Date;
  /**
   * Specifies the end time of the time range to be queried. Only 'Less Than Or Equal To' operator
   * is supported for this property.
   */
  endTime?: Date;
  /**
   * Specifies the time granularity of the metrics to be returned. E.g., "P1D". Valid values are
   * the ones returned as the field "timeGrain" in the ListMetricDefinitions call. Only 'Equality'
   * operator is supported for this property.
   */
  timeGrain?: string;
  /**
   * Specifies the category of the metrics to be filtered. E.g., "CapacityUtilization". Valid
   * values are the ones returned as the field "category" in the ListMetricDefinitions call. Only
   * 'Equality' operator is supported for this property.
   */
  category: string;
  /**
   * Specifies the source(the dimension) of the metrics to be filtered. Only 'Equality' operator is
   * supported for this property.
   */
  dimensions?: DimensionFilter;
}

/**
 * The monitoring metric.
 */
export interface Metrics {
  /**
   * The ID of metric source.
   */
  resourceId?: string;
  /**
   * The start time of the metric data.
   */
  startTime?: Date;
  /**
   * The end time of the metric data.
   */
  endTime?: Date;
  /**
   * The time granularity of the metric data.
   */
  timeGrain?: string;
  /**
   * The metric aggregation type. Possible values include: 'Average', 'Last', 'Maximum', 'Minimum',
   * 'None', 'Total'
   */
  primaryAggregation?: string;
  /**
   * The name of the metric.
   */
  name?: MetricName;
  /**
   * The metric dimensions.
   */
  dimensions?: MetricDimension[];
  /**
   * The unit of the metric data. Possible values include: 'Bytes', 'BytesPerSecond', 'Count',
   * 'CountPerSecond', 'Percent', 'Seconds'
   */
  unit?: string;
  /**
   * The type of the metric data.
   */
  type?: string;
  /**
   * The list of the metric data.
   */
  values?: MetricData[];
}

/**
 * Details related to the IPv4 address configuration.
 */
export interface NicIPv4 {
  /**
   * The IPv4 address of the network adapter.
   */
  ipv4Address?: string;
  /**
   * The IPv4 netmask of the network adapter.
   */
  ipv4Netmask?: string;
  /**
   * The IPv4 gateway of the network adapter.
   */
  ipv4Gateway?: string;
  /**
   * The IPv4 address of Controller0.
   */
  controller0Ipv4Address?: string;
  /**
   * The IPv4 address of Controller1.
   */
  controller1Ipv4Address?: string;
}

/**
 * Details related to the IPv6 address configuration.
 */
export interface NicIPv6 {
  /**
   * The IPv6 address of the network adapter.
   */
  ipv6Address?: string;
  /**
   * The IPv6 prefix of the network adapter.
   */
  ipv6Prefix?: string;
  /**
   * The IPv6 gateway of the network adapter.
   */
  ipv6Gateway?: string;
  /**
   * The IPv6 address of Controller0.
   */
  controller0Ipv6Address?: string;
  /**
   * The IPv6 address of Controller1.
   */
  controller1Ipv6Address?: string;
}

/**
 * Represents the network adapter on device.
 */
export interface NetworkAdapters {
  /**
   * The ID of the network adapter. Possible values include: 'Invalid', 'Data0', 'Data1', 'Data2',
   * 'Data3', 'Data4', 'Data5'
   */
  interfaceId: string;
  /**
   * Value indicating status of network adapter. Possible values include: 'Enabled', 'Disabled'
   */
  netInterfaceStatus: string;
  /**
   * Value indicating whether this instance is default.
   */
  isDefault?: boolean;
  /**
   * Value indicating cloud and ISCSI status of network adapter. Possible values include:
   * 'Disabled', 'IscsiEnabled', 'CloudEnabled', 'IscsiAndCloudEnabled'
   */
  iscsiAndCloudStatus: string;
  /**
   * The speed of the network adapter.
   */
  speed?: number;
  /**
   * The mode of network adapter, either IPv4, IPv6 or both. Possible values include: 'Invalid',
   * 'IPV4', 'IPV6', 'BOTH'
   */
  mode: string;
  /**
   * The IPv4 configuration of the network adapter.
   */
  nicIpv4Settings?: NicIPv4;
  /**
   * The IPv6 configuration of the network adapter.
   */
  nicIpv6Settings?: NicIPv6;
}

/**
 * The collection of network adapters on the device.
 */
export interface NetworkAdapterList {
  /**
   * The value.
   */
  value: NetworkAdapters[];
}

/**
 * The web proxy settings on the device.
 */
export interface WebproxySettings {
  /**
   * The connection URI.
   */
  connectionUri?: string;
  /**
   * The authentication type. Possible values include: 'Invalid', 'None', 'Basic', 'NTLM'
   */
  authentication: string;
  /**
   * The webproxy username.
   */
  username: string;
}

/**
 * Represents the network settings of a device.
 */
export interface NetworkSettings extends BaseModel {
  /**
   * The DNS (Domain Name System) settings of device.
   */
  dnsSettings: DNSSettings;
  /**
   * The network adapter list of device.
   */
  networkAdapters: NetworkAdapterList;
  /**
   * The webproxy settings of device.
   */
  webproxySettings: WebproxySettings;
}

/**
 * Represents the patch request for the network settings of a device.
 */
export interface NetworkSettingsPatch {
  /**
   * The DNS (Domain Name System) settings of device.
   */
  dnsSettings?: DNSSettings;
  /**
   * The network adapter list of device.
   */
  networkAdapters?: NetworkAdapterList;
}

/**
 * The public key.
 */
export interface PublicKey {
  /**
   * The key.
   */
  key: string;
}

/**
 * The settings for remote management of a device.
 */
export interface RemoteManagementSettings {
  /**
   * The remote management mode. Possible values include: 'Unknown', 'Disabled', 'HttpsEnabled',
   * 'HttpsAndHttpEnabled'
   */
  remoteManagementMode: string;
  /**
   * The remote management certificates.
   */
  remoteManagementCertificate?: string;
}

/**
 * The settings for updating remote management mode of the device.
 */
export interface RemoteManagementSettingsPatch {
  /**
   * The remote management mode. Possible values include: 'Unknown', 'Disabled', 'HttpsEnabled',
   * 'HttpsAndHttpEnabled'
   */
  remoteManagementMode: string;
}

/**
 * The security settings of a device.
 */
export interface SecuritySettings extends BaseModel {
  /**
   * The settings for remote management of a device.
   */
  remoteManagementSettings: RemoteManagementSettings;
  /**
   * The Challenge-Handshake Authentication Protocol (CHAP) settings.
   */
  chapSettings: ChapSettings;
}

/**
 * Represents the patch request for the security settings of a device.
 */
export interface SecuritySettingsPatch {
  /**
   * The remote management settings.
   */
  remoteManagementSettings?: RemoteManagementSettingsPatch;
  /**
   * The device administrator password.
   */
  deviceAdminPassword?: AsymmetricEncryptedSecret;
  /**
   * The snapshot manager password.
   */
  snapshotPassword?: AsymmetricEncryptedSecret;
  /**
   * The device CHAP and reverse-CHAP settings.
   */
  chapSettings?: ChapSettings;
  /**
   * The cloud appliance settings.
   */
  cloudApplianceSettings?: CloudApplianceSettings;
}

/**
 * The request for sending test alert email
 */
export interface SendTestAlertEmailRequest {
  /**
   * The list of email IDs to send the test alert email
   */
  emailList: string[];
}

/**
 * The storage account credential.
 */
export interface StorageAccountCredential extends BaseModel {
  /**
   * The storage endpoint
   */
  endPoint: string;
  /**
   * Signifies whether SSL needs to be enabled or not. Possible values include: 'Enabled',
   * 'Disabled'
   */
  sslStatus: string;
  /**
   * The details of the storage account password.
   */
  accessKey?: AsymmetricEncryptedSecret;
  /**
   * The count of volumes using this storage account credential.
   */
  readonly volumesCount?: number;
}

/**
 * Represents the secrets encrypted using Symmetric Encryption Key.
 */
export interface SymmetricEncryptedSecret {
  /**
   * The value of the secret itself. If the secret is in plaintext or null then EncryptionAlgorithm
   * will be none.
   */
  value: string;
  /**
   * The thumbprint of the cert that was used to encrypt "Value".
   */
  valueCertificateThumbprint?: string;
  /**
   * The algorithm used to encrypt the "Value". Possible values include: 'None', 'AES256',
   * 'RSAES_PKCS1_v_1_5'
   */
  encryptionAlgorithm: string;
}

/**
 * The time settings of a device.
 */
export interface TimeSettings extends BaseModel {
  /**
   * The timezone of device, like '(UTC -06:00) Central America'
   */
  timeZone: string;
  /**
   * The primary Network Time Protocol (NTP) server name, like 'time.windows.com'.
   */
  primaryTimeServer?: string;
  /**
   * The secondary Network Time Protocol (NTP) server name, like 'time.contoso.com'. It's optional.
   */
  secondaryTimeServer?: string[];
}

/**
 * The updates profile of a device.
 */
export interface Updates extends BaseModel {
  /**
   * Set to 'true' if regular updates are available for the device.
   */
  regularUpdatesAvailable?: boolean;
  /**
   * Set to 'true' if maintenance mode update available.
   */
  maintenanceModeUpdatesAvailable?: boolean;
  /**
   * Indicates whether an update is in progress or not.
   */
  isUpdateInProgress?: boolean;
  /**
   * The time when the last update was completed.
   */
  lastUpdatedTime?: Date;
}

/**
 * The volume.
 */
export interface Volume extends BaseModel {
  /**
   * The size of the volume in bytes.
   */
  sizeInBytes: number;
  /**
   * The type of the volume. Possible values include: 'Tiered', 'Archival', 'LocallyPinned'
   */
  volumeType: string;
  /**
   * The ID of the volume container, in which this volume is created.
   */
  readonly volumeContainerId?: string;
  /**
   * The IDs of the access control records, associated with the volume.
   */
  accessControlRecordIds: string[];
  /**
   * The volume status. Possible values include: 'Online', 'Offline'
   */
  volumeStatus: string;
  /**
   * The operation status on the volume. Possible values include: 'None', 'Updating', 'Deleting',
   * 'Restoring'
   */
  readonly operationStatus?: string;
  /**
   * The backup status of the volume. Possible values include: 'Enabled', 'Disabled'
   */
  readonly backupStatus?: string;
  /**
   * The monitoring status of the volume. Possible values include: 'Enabled', 'Disabled'
   */
  monitoringStatus: string;
  /**
   * The IDs of the backup policies, in which this volume is part of.
   */
  readonly backupPolicyIds?: string[];
}

/**
 * The volume container.
 */
export interface VolumeContainer extends BaseModel {
  /**
   * The key used to encrypt data in the volume container. It is required when property
   * 'EncryptionStatus' is "Enabled".
   */
  encryptionKey?: AsymmetricEncryptedSecret;
  /**
   * The flag to denote whether encryption is enabled or not. Possible values include: 'Enabled',
   * 'Disabled'
   */
  readonly encryptionStatus?: string;
  /**
   * The number of volumes in the volume Container.
   */
  readonly volumeCount?: number;
  /**
   * The path ID of storage account associated with the volume container.
   */
  storageAccountCredentialId: string;
  /**
   * The owner ship status of the volume container. Only when the status is "NotOwned", the delete
   * operation on the volume container is permitted. Possible values include: 'Owned', 'NotOwned'
   */
  readonly ownerShipStatus?: string;
  /**
   * The bandwidth-rate set on the volume container.
   */
  bandWidthRateInMbps?: number;
  /**
   * The ID of the bandwidth setting associated with the volume container.
   */
  bandwidthSettingId?: string;
  /**
   * The total cloud storage for the volume container.
   */
  readonly totalCloudStorageUsageInBytes?: number;
}

/**
 * List of available provider operations.
 */
export interface AvailableProviderOperationList extends Array<AvailableProviderOperation> {
  /**
   * The NextLink.
   */
  nextLink?: string;
}

/**
 * The list of StorSimple Managers.
 */
export interface ManagerList extends Array<Manager> {
}

/**
 * The collections of features.
 */
export interface FeatureList extends Array<Feature> {
}

/**
 * The metric list.
 */
export interface MetricList extends Array<Metrics> {
}

/**
 * The list of metric definitions.
 */
export interface MetricDefinitionList extends Array<MetricDefinition> {
}

/**
 * The collection of access control records.
 */
export interface AccessControlRecordList extends Array<AccessControlRecord> {
}

/**
 * The collection of alerts.
 */
export interface AlertList extends Array<Alert> {
  /**
   * The URI of the next page of alerts.
   */
  nextLink?: string;
}

/**
 * The collection of bandwidth setting entities.
 */
export interface BandwidthSettingList extends Array<BandwidthSetting> {
}

/**
 * The cloud appliance configuration list
 */
export interface CloudApplianceConfigurationList extends Array<CloudApplianceConfiguration> {
}

/**
 * The collection of devices.
 */
export interface DeviceList extends Array<Device> {
}

/**
 * The list of failover sets.
 */
export interface FailoverSetsList extends Array<FailoverSet> {
}

/**
 * The list of all devices in a resource and their eligibility status as a failover target device.
 */
export interface FailoverTargetsList extends Array<FailoverTarget> {
}

/**
 * The collection of backup policies.
 */
export interface BackupPolicyList extends Array<BackupPolicy> {
}

/**
 * The backup schedule list.
 */
export interface BackupScheduleList extends Array<BackupSchedule> {
}

/**
 * The collection of backups.
 */
export interface BackupList extends Array<Backup> {
  /**
   * The NextLink.
   */
  nextLink?: string;
}

/**
 * The collection of hardware component groups.
 */
export interface HardwareComponentGroupList extends Array<HardwareComponentGroup> {
}

/**
 * The collection of jobs.
 */
export interface JobList extends Array<Job> {
  /**
   * The NextLink.
   */
  nextLink?: string;
}

/**
 * The collection of volume container entities.
 */
export interface VolumeContainerList extends Array<VolumeContainer> {
}

/**
 * The collection of volumes.
 */
export interface VolumeList extends Array<Volume> {
}

/**
 * The collection of storage account credential entities.
 */
export interface StorageAccountCredentialList extends Array<StorageAccountCredential> {
}
