/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The encryption settings.
 *
 * @extends models['BaseModel']
 */
class EncryptionSettings extends models['BaseModel'] {
  /**
   * Create a EncryptionSettings.
   * @member {string} encryptionStatus The encryption status to indicates if
   * encryption is enabled or not. Possible values include: 'Enabled',
   * 'Disabled'
   * @member {string} keyRolloverStatus The key rollover status to indicates if
   * key rollover is required or not. If secret's encryption has been upgraded,
   * then it requires key rollover. Possible values include: 'Required',
   * 'NotRequired'
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of EncryptionSettings
   *
   * @returns {object} metadata of EncryptionSettings
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'EncryptionSettings',
      type: {
        name: 'Composite',
        className: 'EncryptionSettings',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          kind: {
            required: false,
            serializedName: 'kind',
            type: {
              name: 'Enum',
              allowedValues: [ 'Series8000' ]
            }
          },
          encryptionStatus: {
            required: true,
            serializedName: 'properties.encryptionStatus',
            type: {
              name: 'Enum',
              allowedValues: [ 'Enabled', 'Disabled' ]
            }
          },
          keyRolloverStatus: {
            required: true,
            serializedName: 'properties.keyRolloverStatus',
            type: {
              name: 'Enum',
              allowedValues: [ 'Required', 'NotRequired' ]
            }
          }
        }
      }
    };
  }
}

module.exports = EncryptionSettings;
