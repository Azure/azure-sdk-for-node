/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The volume container.
 *
 * @extends models['BaseModel']
 */
class VolumeContainer extends models['BaseModel'] {
  /**
   * Create a VolumeContainer.
   * @member {object} [encryptionKey] The key used to encrypt data in the
   * volume container. It is required when property 'EncryptionStatus' is
   * "Enabled".
   * @member {string} [encryptionKey.value] The value of the secret.
   * @member {string} [encryptionKey.encryptionCertThumbprint] Thumbprint
   * certificate that was used to encrypt "Value". If the value in unencrypted,
   * it will be null.
   * @member {string} [encryptionKey.encryptionAlgorithm] The algorithm used to
   * encrypt "Value". Possible values include: 'None', 'AES256',
   * 'RSAES_PKCS1_v_1_5'
   * @member {string} [encryptionStatus] The flag to denote whether encryption
   * is enabled or not. Possible values include: 'Enabled', 'Disabled'
   * @member {number} [volumeCount] The number of volumes in the volume
   * Container.
   * @member {string} storageAccountCredentialId The path ID of storage account
   * associated with the volume container.
   * @member {string} [ownerShipStatus] The owner ship status of the volume
   * container. Only when the status is "NotOwned", the delete operation on the
   * volume container is permitted. Possible values include: 'Owned',
   * 'NotOwned'
   * @member {number} [bandWidthRateInMbps] The bandwidth-rate set on the
   * volume container.
   * @member {string} [bandwidthSettingId] The ID of the bandwidth setting
   * associated with the volume container.
   * @member {number} [totalCloudStorageUsageInBytes] The total cloud storage
   * for the volume container.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of VolumeContainer
   *
   * @returns {object} metadata of VolumeContainer
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'VolumeContainer',
      type: {
        name: 'Composite',
        className: 'VolumeContainer',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          kind: {
            required: false,
            serializedName: 'kind',
            type: {
              name: 'Enum',
              allowedValues: [ 'Series8000' ]
            }
          },
          encryptionKey: {
            required: false,
            serializedName: 'properties.encryptionKey',
            type: {
              name: 'Composite',
              className: 'AsymmetricEncryptedSecret'
            }
          },
          encryptionStatus: {
            required: false,
            readOnly: true,
            serializedName: 'properties.encryptionStatus',
            type: {
              name: 'Enum',
              allowedValues: [ 'Enabled', 'Disabled' ]
            }
          },
          volumeCount: {
            required: false,
            readOnly: true,
            serializedName: 'properties.volumeCount',
            type: {
              name: 'Number'
            }
          },
          storageAccountCredentialId: {
            required: true,
            serializedName: 'properties.storageAccountCredentialId',
            type: {
              name: 'String'
            }
          },
          ownerShipStatus: {
            required: false,
            readOnly: true,
            serializedName: 'properties.ownerShipStatus',
            type: {
              name: 'Enum',
              allowedValues: [ 'Owned', 'NotOwned' ]
            }
          },
          bandWidthRateInMbps: {
            required: false,
            serializedName: 'properties.bandWidthRateInMbps',
            type: {
              name: 'Number'
            }
          },
          bandwidthSettingId: {
            required: false,
            serializedName: 'properties.bandwidthSettingId',
            type: {
              name: 'String'
            }
          },
          totalCloudStorageUsageInBytes: {
            required: false,
            readOnly: true,
            serializedName: 'properties.totalCloudStorageUsageInBytes',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = VolumeContainer;
