/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Represent the secrets intended for encryption with asymmetric key pair.
 *
 */
class AsymmetricEncryptedSecret {
  /**
   * Create a AsymmetricEncryptedSecret.
   * @member {string} value The value of the secret.
   * @member {string} [encryptionCertThumbprint] Thumbprint certificate that
   * was used to encrypt "Value". If the value in unencrypted, it will be null.
   * @member {string} encryptionAlgorithm The algorithm used to encrypt
   * "Value". Possible values include: 'None', 'AES256', 'RSAES_PKCS1_v_1_5'
   */
  constructor() {
  }

  /**
   * Defines the metadata of AsymmetricEncryptedSecret
   *
   * @returns {object} metadata of AsymmetricEncryptedSecret
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'AsymmetricEncryptedSecret',
      type: {
        name: 'Composite',
        className: 'AsymmetricEncryptedSecret',
        modelProperties: {
          value: {
            required: true,
            serializedName: 'value',
            type: {
              name: 'String'
            }
          },
          encryptionCertThumbprint: {
            required: false,
            serializedName: 'encryptionCertThumbprint',
            type: {
              name: 'String'
            }
          },
          encryptionAlgorithm: {
            required: true,
            serializedName: 'encryptionAlgorithm',
            type: {
              name: 'Enum',
              allowedValues: [ 'None', 'AES256', 'RSAES_PKCS1_v_1_5' ]
            }
          }
        }
      }
    };
  }
}

module.exports = AsymmetricEncryptedSecret;
