/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * IotHubResource
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the IotHubClient.
 */
export interface IotHubResource {

    /**
     * @summary Get an IotHub
     *
     * Get an IotHub
     *
     * @param {string} resourceName
     * 
     * @param {string} subscriptionId
     * 
     * @param {string} resourceGroupName
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getIotHub(resourceName: string, subscriptionId: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IotHubDescription>): void;
    getIotHub(resourceName: string, subscriptionId: string, resourceGroupName: string, callback: ServiceCallback<models.IotHubDescription>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {string} resourceGroupName
     * 
     * @param {string} resourceName
     * 
     * @param {object} iotHubDescription
     * 
     * @param {string} [iotHubDescription.name]
     * 
     * @param {string} [iotHubDescription.location]
     * 
     * @param {string} [iotHubDescription.subscriptionid]
     * 
     * @param {string} [iotHubDescription.resourcegroup]
     * 
     * @param {string} [iotHubDescription.etag]
     * 
     * @param {object} [iotHubDescription.properties]
     * 
     * @param {array} [iotHubDescription.properties.authorizationPolicies]
     * 
     * @param {string} [iotHubDescription.properties.hostName]
     * 
     * @param {object} [iotHubDescription.properties.eventHubEndpoints]
     * 
     * @param {object} [iotHubDescription.properties.storageEndpoints]
     * 
     * @param {object} [iotHubDescription.properties.messagingEndpoints]
     * 
     * @param {boolean}
     * [iotHubDescription.properties.enableFileUploadNotifications]
     * 
     * @param {object} [iotHubDescription.properties.cloudToDevice]
     * 
     * @param {number}
     * [iotHubDescription.properties.cloudToDevice.maxDeliveryCount]
     * 
     * @param {string}
     * [iotHubDescription.properties.cloudToDevice.defaultTtlAsIso8601]
     * 
     * @param {object} [iotHubDescription.properties.cloudToDevice.feedback]
     * 
     * @param {string}
     * [iotHubDescription.properties.cloudToDevice.feedback.lockDurationAsIso8601]
     * 
     * @param {string}
     * [iotHubDescription.properties.cloudToDevice.feedback.ttlAsIso8601]
     * 
     * @param {number}
     * [iotHubDescription.properties.cloudToDevice.feedback.maxDeliveryCount]
     * 
     * @param {string} [iotHubDescription.properties.comments]
     * 
     * @param {object}
     * [iotHubDescription.properties.operationsMonitoringProperties]
     * 
     * @param {object}
     * [iotHubDescription.properties.operationsMonitoringProperties.events]
     * 
     * @param {string} [iotHubDescription.properties.features] Possible values
     * include: 'None', 'DeviceManagement'
     * 
     * @param {object} [iotHubDescription.sku]
     * 
     * @param {string} [iotHubDescription.sku.name] Possible values include: 'F1',
     * 'S1', 'S2'
     * 
     * @param {number} [iotHubDescription.sku.capacity]
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateIotHub(subscriptionId: string, resourceGroupName: string, resourceName: string, iotHubDescription: models.IotHubDescription, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IotHubDescription>): void;
    createOrUpdateIotHub(subscriptionId: string, resourceGroupName: string, resourceName: string, iotHubDescription: models.IotHubDescription, callback: ServiceCallback<models.IotHubDescription>): void;

    /**
     * @summary Delete an IotHub
     *
     * Delete an IotHub
     *
     * @param {string} resourceName
     * 
     * @param {string} subscriptionId
     * 
     * @param {string} resourceGroupName
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteIotHub(resourceName: string, subscriptionId: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IotHubDescription>): void;
    deleteIotHub(resourceName: string, subscriptionId: string, resourceGroupName: string, callback: ServiceCallback<models.IotHubDescription>): void;

    /**
     * @summary Delete EventHub Consumer Group for an IotHub
     *
     * Delete EventHub Consumer Group for an IotHub
     *
     * @param {string} resourceName
     * 
     * @param {string} eventHubEndpointName
     * 
     * @param {string} name
     * 
     * @param {string} subscriptionId
     * 
     * @param {string} resourceGroupName
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteEventHubConsumerGroup(resourceName: string, eventHubEndpointName: string, name: string, subscriptionId: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteEventHubConsumerGroup(resourceName: string, eventHubEndpointName: string, name: string, subscriptionId: string, resourceGroupName: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Get all supported Resource Provider Operations
     *
     * Get all supported Resource Provider Operations
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getResourceProviderOperations(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationIEnumerableResourceProviderOperationInfo>): void;
    getResourceProviderOperations(callback: ServiceCallback<models.ResponseWithContinuationIEnumerableResourceProviderOperationInfo>): void;

    /**
     * @summary Get all IotHubs in a subscription
     *
     * Get all IotHubs in a subscription
     *
     * @param {string} subscriptionId
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getIotHubsForSubscription(subscriptionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationIEnumerableIotHubDescription>): void;
    getIotHubsForSubscription(subscriptionId: string, callback: ServiceCallback<models.ResponseWithContinuationIEnumerableIotHubDescription>): void;

    /**
     * @summary Get all IotHubs in a Resourcegroup
     *
     * Get all IotHubs in a Resourcegroup
     *
     * @param {string} subscriptionId
     * 
     * @param {string} resourceGroupName
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getIotHubsForResourceGroup(subscriptionId: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationIEnumerableIotHubDescription>): void;
    getIotHubsForResourceGroup(subscriptionId: string, resourceGroupName: string, callback: ServiceCallback<models.ResponseWithContinuationIEnumerableIotHubDescription>): void;

    /**
     * @summary Get the result of a long running operation like create or update
     * iothub
     *
     * Get the result of a long running operation like create or update iothub
     *
     * @param {string} operationId
     * 
     * @param {string} subscriptionId
     * 
     * @param {string} resourceGroupName
     * 
     * @param {string} resourceName
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getOperationResult(operationId: string, subscriptionId: string, resourceGroupName: string, resourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AsyncOperationResult>): void;
    getOperationResult(operationId: string, subscriptionId: string, resourceGroupName: string, resourceName: string, callback: ServiceCallback<models.AsyncOperationResult>): void;

    /**
     * @summary Get IotHub Stats
     *
     * Get IotHub Stats
     *
     * @param {string} resourceName
     * 
     * @param {string} subscriptionId
     * 
     * @param {string} resourceGroupName
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getIotHubStats(resourceName: string, subscriptionId: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RegistryStatistics>): void;
    getIotHubStats(resourceName: string, subscriptionId: string, resourceGroupName: string, callback: ServiceCallback<models.RegistryStatistics>): void;

    /**
     * @summary Get Valid Skus
     *
     * Get Valid Skus
     *
     * @param {string} resourceName
     * 
     * @param {string} subscriptionId
     * 
     * @param {string} resourceGroupName
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getValidIotHubSkus(resourceName: string, subscriptionId: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationIEnumerableIotHubSkuDescription>): void;
    getValidIotHubSkus(resourceName: string, subscriptionId: string, resourceGroupName: string, callback: ServiceCallback<models.ResponseWithContinuationIEnumerableIotHubSkuDescription>): void;

    /**
     * @summary Get EventHub Consumer Groups for an IotHub
     *
     * Get EventHub Consumer Groups for an IotHub
     *
     * @param {string} resourceName
     * 
     * @param {string} eventHubEndpointName
     * 
     * @param {string} subscriptionId
     * 
     * @param {string} resourceGroupName
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getEventHubConsumerGroups(resourceName: string, eventHubEndpointName: string, subscriptionId: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationIEnumerableString>): void;
    getEventHubConsumerGroups(resourceName: string, eventHubEndpointName: string, subscriptionId: string, resourceGroupName: string, callback: ServiceCallback<models.ResponseWithContinuationIEnumerableString>): void;

    /**
     * @summary Get EventHub Consumer Group for an IotHub
     *
     * Get EventHub Consumer Group for an IotHub
     *
     * @param {string} resourceName
     * 
     * @param {string} eventHubEndpointName
     * 
     * @param {string} groupName
     * 
     * @param {string} subscriptionId
     * 
     * @param {string} resourceGroupName
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getEventHubConsumerGroup(resourceName: string, eventHubEndpointName: string, groupName: string, subscriptionId: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventHubConsumerGroupInfo>): void;
    getEventHubConsumerGroup(resourceName: string, eventHubEndpointName: string, groupName: string, subscriptionId: string, resourceGroupName: string, callback: ServiceCallback<models.EventHubConsumerGroupInfo>): void;

    /**
     * @summary Add an EventHub Consumer Group to an IotHub
     *
     * Add an EventHub Consumer Group to an IotHub
     *
     * @param {string} resourceName
     * 
     * @param {string} eventHubEndpointName
     * 
     * @param {string} groupName
     * 
     * @param {string} subscriptionId
     * 
     * @param {string} resourceGroupName
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    addEventHubConsumerGroup(resourceName: string, eventHubEndpointName: string, groupName: string, subscriptionId: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventHubConsumerGroupInfo>): void;
    addEventHubConsumerGroup(resourceName: string, eventHubEndpointName: string, groupName: string, subscriptionId: string, resourceGroupName: string, callback: ServiceCallback<models.EventHubConsumerGroupInfo>): void;

    /**
     * @summary Get all the jobs in an IotHub
     *
     * Get all the jobs in an IotHub
     *
     * @param {string} resourceName
     * 
     * @param {string} subscriptionId
     * 
     * @param {string} resourceGroupName
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getJobs(resourceName: string, subscriptionId: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationIEnumerableJobResponse>): void;
    getJobs(resourceName: string, subscriptionId: string, resourceGroupName: string, callback: ServiceCallback<models.ResponseWithContinuationIEnumerableJobResponse>): void;

    /**
     * @summary Get a job in an IotHub
     *
     * Get a job in an IotHub
     *
     * @param {string} resourceName
     * 
     * @param {string} jobId
     * 
     * @param {string} subscriptionId
     * 
     * @param {string} resourceGroupName
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getJob(resourceName: string, jobId: string, subscriptionId: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobResponse>): void;
    getJob(resourceName: string, jobId: string, subscriptionId: string, resourceGroupName: string, callback: ServiceCallback<models.JobResponse>): void;

    /**
     * @summary Get quota metrics for an IotHub
     *
     * Get quota metrics for an IotHub
     *
     * @param {string} resourceName
     * 
     * @param {string} subscriptionId
     * 
     * @param {string} resourceGroupName
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getQuotaMetrics(resourceName: string, subscriptionId: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationIEnumerableIotHubQuotaMetricInfo>): void;
    getQuotaMetrics(resourceName: string, subscriptionId: string, resourceGroupName: string, callback: ServiceCallback<models.ResponseWithContinuationIEnumerableIotHubQuotaMetricInfo>): void;

    /**
     * @param {string} subscriptionId
     * 
     * @param {object} operationInputs
     * 
     * @param {string} [operationInputs.name]
     * 
     * @param {string} [operationInputs.resourceType]
     * 
     * @param {string} [operationInputs.key]
     * 
     * @param {number} [operationInputs.tokenLifeTimeInMinutes]
     * 
     * @param {string} [operationInputs.connectionString]
     * 
     * @param {object} [operationInputs.iotHubDescription]
     * 
     * @param {string} [operationInputs.iotHubDescription.name]
     * 
     * @param {string} [operationInputs.iotHubDescription.location]
     * 
     * @param {string} [operationInputs.iotHubDescription.subscriptionid]
     * 
     * @param {string} [operationInputs.iotHubDescription.resourcegroup]
     * 
     * @param {string} [operationInputs.iotHubDescription.etag]
     * 
     * @param {object} [operationInputs.iotHubDescription.properties]
     * 
     * @param {array}
     * [operationInputs.iotHubDescription.properties.authorizationPolicies]
     * 
     * @param {string} [operationInputs.iotHubDescription.properties.hostName]
     * 
     * @param {object}
     * [operationInputs.iotHubDescription.properties.eventHubEndpoints]
     * 
     * @param {object}
     * [operationInputs.iotHubDescription.properties.storageEndpoints]
     * 
     * @param {object}
     * [operationInputs.iotHubDescription.properties.messagingEndpoints]
     * 
     * @param {boolean}
     * [operationInputs.iotHubDescription.properties.enableFileUploadNotifications]
     * 
     * @param {object}
     * [operationInputs.iotHubDescription.properties.cloudToDevice]
     * 
     * @param {number}
     * [operationInputs.iotHubDescription.properties.cloudToDevice.maxDeliveryCount]
     * 
     * @param {string}
     * [operationInputs.iotHubDescription.properties.cloudToDevice.defaultTtlAsIso8601]
     * 
     * @param {object}
     * [operationInputs.iotHubDescription.properties.cloudToDevice.feedback]
     * 
     * @param {string}
     * [operationInputs.iotHubDescription.properties.cloudToDevice.feedback.lockDurationAsIso8601]
     * 
     * @param {string}
     * [operationInputs.iotHubDescription.properties.cloudToDevice.feedback.ttlAsIso8601]
     * 
     * @param {number}
     * [operationInputs.iotHubDescription.properties.cloudToDevice.feedback.maxDeliveryCount]
     * 
     * @param {string} [operationInputs.iotHubDescription.properties.comments]
     * 
     * @param {object}
     * [operationInputs.iotHubDescription.properties.operationsMonitoringProperties]
     * 
     * @param {object}
     * [operationInputs.iotHubDescription.properties.operationsMonitoringProperties.events]
     * 
     * @param {string} [operationInputs.iotHubDescription.properties.features]
     * Possible values include: 'None', 'DeviceManagement'
     * 
     * @param {object} [operationInputs.iotHubDescription.sku]
     * 
     * @param {string} [operationInputs.iotHubDescription.sku.name] Possible
     * values include: 'F1', 'S1', 'S2'
     * 
     * @param {number} [operationInputs.iotHubDescription.sku.capacity]
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    checkIotHubNameAvailability(subscriptionId: string, operationInputs: models.OperationInputs, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IotHubNameAvailabilityInfo>): void;
    checkIotHubNameAvailability(subscriptionId: string, operationInputs: models.OperationInputs, callback: ServiceCallback<models.IotHubNameAvailabilityInfo>): void;

    /**
     * @summary Get all Shared Access Policies for an IotHub
     *
     * Get all Shared Access Policies for an IotHub
     *
     * @param {string} resourceName
     * 
     * @param {string} subscriptionId
     * 
     * @param {string} resourceGroupName
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAllIotHubKeys(resourceName: string, subscriptionId: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationIEnumerableSharedAccessSignatureAuthorizationRule>): void;
    getAllIotHubKeys(resourceName: string, subscriptionId: string, resourceGroupName: string, callback: ServiceCallback<models.ResponseWithContinuationIEnumerableSharedAccessSignatureAuthorizationRule>): void;

    /**
     * @summary Get the Key given a specific KeyName for an IotHub
     *
     * Get the Key given a specific KeyName for an IotHub
     *
     * @param {string} resourceName
     * 
     * @param {string} keyName
     * 
     * @param {string} subscriptionId
     * 
     * @param {string} resourceGroupName
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getIotHubKeysForKeyName(resourceName: string, keyName: string, subscriptionId: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SharedAccessSignatureAuthorizationRule>): void;
    getIotHubKeysForKeyName(resourceName: string, keyName: string, subscriptionId: string, resourceGroupName: string, callback: ServiceCallback<models.SharedAccessSignatureAuthorizationRule>): void;

    /**
     * @summary Export all the Devices in an IotHub
     *
     * Export all the Devices in an IotHub
     *
     * @param {string} resourceName
     * 
     * @param {object} exportDevicesRequest
     * 
     * @param {string} [exportDevicesRequest.exportBlobContainerUri]
     * 
     * @param {boolean} [exportDevicesRequest.excludeKeys]
     * 
     * @param {string} subscriptionId
     * 
     * @param {string} resourceGroupName
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    exportDevices(resourceName: string, exportDevicesRequest: models.ExportDevicesRequest, subscriptionId: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobResponse>): void;
    exportDevices(resourceName: string, exportDevicesRequest: models.ExportDevicesRequest, subscriptionId: string, resourceGroupName: string, callback: ServiceCallback<models.JobResponse>): void;

    /**
     * @summary Import all the Devices in an IotHub
     *
     * Import all the Devices in an IotHub
     *
     * @param {string} resourceName
     * 
     * @param {object} importDevicesRequest
     * 
     * @param {string} [importDevicesRequest.inputBlobContainerUri]
     * 
     * @param {string} [importDevicesRequest.outputBlobContainerUri]
     * 
     * @param {string} subscriptionId
     * 
     * @param {string} resourceGroupName
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    importDevices(resourceName: string, importDevicesRequest: models.ImportDevicesRequest, subscriptionId: string, resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobResponse>): void;
    importDevices(resourceName: string, importDevicesRequest: models.ImportDevicesRequest, subscriptionId: string, resourceGroupName: string, callback: ServiceCallback<models.JobResponse>): void;
}
