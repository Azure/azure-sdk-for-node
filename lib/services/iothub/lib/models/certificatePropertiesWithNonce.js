/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * The description of an X509 CA Certificate including the challenge nonce
 * issued for the Proof-Of-Possession flow.
 *
 */
class CertificatePropertiesWithNonce {
  /**
   * Create a CertificatePropertiesWithNonce.
   * @property {string} [subject] The certificate's subject name.
   * @property {date} [expiry] The certificate's expiration date and time.
   * @property {string} [thumbprint] The certificate's thumbprint.
   * @property {boolean} [isVerified] Determines whether certificate has been
   * verified.
   * @property {date} [created] The certificate's create date and time.
   * @property {date} [updated] The certificate's last update date and time.
   * @property {string} [verificationCode] The certificate's verification code
   * that will be used for proof of possession.
   * @property {string} [certificate] The certificate content
   */
  constructor() {
  }

  /**
   * Defines the metadata of CertificatePropertiesWithNonce
   *
   * @returns {object} metadata of CertificatePropertiesWithNonce
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'CertificatePropertiesWithNonce',
      type: {
        name: 'Composite',
        className: 'CertificatePropertiesWithNonce',
        modelProperties: {
          subject: {
            required: false,
            readOnly: true,
            serializedName: 'subject',
            type: {
              name: 'String'
            }
          },
          expiry: {
            required: false,
            readOnly: true,
            serializedName: 'expiry',
            type: {
              name: 'DateTimeRfc1123'
            }
          },
          thumbprint: {
            required: false,
            readOnly: true,
            serializedName: 'thumbprint',
            type: {
              name: 'String'
            }
          },
          isVerified: {
            required: false,
            readOnly: true,
            serializedName: 'isVerified',
            type: {
              name: 'Boolean'
            }
          },
          created: {
            required: false,
            readOnly: true,
            serializedName: 'created',
            type: {
              name: 'DateTimeRfc1123'
            }
          },
          updated: {
            required: false,
            readOnly: true,
            serializedName: 'updated',
            type: {
              name: 'DateTimeRfc1123'
            }
          },
          verificationCode: {
            required: false,
            readOnly: true,
            serializedName: 'verificationCode',
            type: {
              name: 'String'
            }
          },
          certificate: {
            required: false,
            readOnly: true,
            serializedName: 'certificate',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = CertificatePropertiesWithNonce;
