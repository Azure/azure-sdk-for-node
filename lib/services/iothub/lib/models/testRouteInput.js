/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Input for testing route
 *
 */
class TestRouteInput {
  /**
   * Create a TestRouteInput.
   * @member {object} [message] Routing message
   * @member {string} [message.body] Body of routing message
   * @member {object} [message.appProperties] App properties
   * @member {object} [message.systemProperties] System properties
   * @member {object} route Route properties
   * @member {string} [route.name] The name of the route. The name can only
   * include alphanumeric characters, periods, underscores, hyphens, has a
   * maximum length of 64 characters, and must be unique.
   * @member {string} [route.source] The source that the routing rule is to be
   * applied to, such as DeviceMessages. Possible values include: 'Invalid',
   * 'DeviceMessages', 'TwinChangeEvents', 'DeviceLifecycleEvents',
   * 'DeviceJobLifecycleEvents'
   * @member {string} [route.condition] The condition that is evaluated to
   * apply the routing rule. If no condition is provided, it evaluates to true
   * by default. For grammar, see:
   * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language
   * @member {array} [route.endpointNames] The list of endpoints to which
   * messages that satisfy the condition are routed. Currently only one
   * endpoint is allowed.
   * @member {boolean} [route.isEnabled] Used to specify whether a route is
   * enabled.
   * @member {object} [twin] Routing Twin Reference
   * @member {object} [twin.tags] Twin Tags
   * @member {object} [twin.properties]
   * @member {object} [twin.properties.desired] Twin desired properties
   * @member {object} [twin.properties.reported] Twin desired properties
   */
  constructor() {
  }

  /**
   * Defines the metadata of TestRouteInput
   *
   * @returns {object} metadata of TestRouteInput
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'TestRouteInput',
      type: {
        name: 'Composite',
        className: 'TestRouteInput',
        modelProperties: {
          message: {
            required: false,
            serializedName: 'message',
            type: {
              name: 'Composite',
              className: 'RoutingMessage'
            }
          },
          route: {
            required: true,
            serializedName: 'route',
            type: {
              name: 'Composite',
              className: 'RouteProperties'
            }
          },
          twin: {
            required: false,
            serializedName: 'twin',
            type: {
              name: 'Composite',
              className: 'RoutingTwin'
            }
          }
        }
      }
    };
  }
}

module.exports = TestRouteInput;
