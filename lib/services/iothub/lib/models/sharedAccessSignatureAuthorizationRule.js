/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * The properties of an IoT hub shared access policy.
 *
 */
class SharedAccessSignatureAuthorizationRule {
  /**
   * Create a SharedAccessSignatureAuthorizationRule.
   * @property {string} keyName The name of the shared access policy.
   * @property {string} [primaryKey] The primary key.
   * @property {string} [secondaryKey] The secondary key.
   * @property {string} rights The permissions assigned to the shared access
   * policy. Possible values include: 'RegistryRead', 'RegistryWrite',
   * 'ServiceConnect', 'DeviceConnect', 'RegistryRead, RegistryWrite',
   * 'RegistryRead, ServiceConnect', 'RegistryRead, DeviceConnect',
   * 'RegistryWrite, ServiceConnect', 'RegistryWrite, DeviceConnect',
   * 'ServiceConnect, DeviceConnect', 'RegistryRead, RegistryWrite,
   * ServiceConnect', 'RegistryRead, RegistryWrite, DeviceConnect',
   * 'RegistryRead, ServiceConnect, DeviceConnect', 'RegistryWrite,
   * ServiceConnect, DeviceConnect', 'RegistryRead, RegistryWrite,
   * ServiceConnect, DeviceConnect'
   */
  constructor() {
  }

  /**
   * Defines the metadata of SharedAccessSignatureAuthorizationRule
   *
   * @returns {object} metadata of SharedAccessSignatureAuthorizationRule
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'SharedAccessSignatureAuthorizationRule',
      type: {
        name: 'Composite',
        className: 'SharedAccessSignatureAuthorizationRule',
        modelProperties: {
          keyName: {
            required: true,
            serializedName: 'keyName',
            type: {
              name: 'String'
            }
          },
          primaryKey: {
            required: false,
            serializedName: 'primaryKey',
            type: {
              name: 'String'
            }
          },
          secondaryKey: {
            required: false,
            serializedName: 'secondaryKey',
            type: {
              name: 'String'
            }
          },
          rights: {
            required: true,
            serializedName: 'rights',
            type: {
              name: 'Enum',
              allowedValues: [ 'RegistryRead', 'RegistryWrite', 'ServiceConnect', 'DeviceConnect', 'RegistryRead, RegistryWrite', 'RegistryRead, ServiceConnect', 'RegistryRead, DeviceConnect', 'RegistryWrite, ServiceConnect', 'RegistryWrite, DeviceConnect', 'ServiceConnect, DeviceConnect', 'RegistryRead, RegistryWrite, ServiceConnect', 'RegistryRead, RegistryWrite, DeviceConnect', 'RegistryRead, ServiceConnect, DeviceConnect', 'RegistryWrite, ServiceConnect, DeviceConnect', 'RegistryRead, RegistryWrite, ServiceConnect, DeviceConnect' ]
            }
          }
        }
      }
    };
  }
}

module.exports = SharedAccessSignatureAuthorizationRule;
