/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the SharedAccessSignatureAuthorizationRule class.
 * @constructor
 * The properties that describe the keys to access the IotHub artifacts.
 * @member {string} [keyName] The name of the key.
 * 
 * @member {string} [primaryKey] The primary key.
 * 
 * @member {string} [secondaryKey] The secondary key.
 * 
 * @member {string} [rights] The access rights. Possible values include:
 * 'RegistryRead', 'RegistryWrite', 'ServiceConnect', 'DeviceConnect',
 * 'RegistryRead, RegistryWrite', 'RegistryRead, ServiceConnect',
 * 'RegistryRead, DeviceConnect', 'RegistryWrite, ServiceConnect',
 * 'RegistryWrite, DeviceConnect', 'ServiceConnect, DeviceConnect',
 * 'RegistryRead, RegistryWrite, ServiceConnect', 'RegistryRead,
 * RegistryWrite, DeviceConnect', 'RegistryRead, ServiceConnect,
 * DeviceConnect', 'RegistryWrite, ServiceConnect, DeviceConnect',
 * 'RegistryRead, RegistryWrite, ServiceConnect, DeviceConnect'
 * 
 */
function SharedAccessSignatureAuthorizationRule() {
}

/**
 * Defines the metadata of SharedAccessSignatureAuthorizationRule
 *
 * @returns {object} metadata of SharedAccessSignatureAuthorizationRule
 *
 */
SharedAccessSignatureAuthorizationRule.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'SharedAccessSignatureAuthorizationRule',
    type: {
      name: 'Composite',
      className: 'SharedAccessSignatureAuthorizationRule',
      modelProperties: {
        keyName: {
          required: false,
          serializedName: 'keyName',
          type: {
            name: 'String'
          }
        },
        primaryKey: {
          required: false,
          serializedName: 'primaryKey',
          type: {
            name: 'String'
          }
        },
        secondaryKey: {
          required: false,
          serializedName: 'secondaryKey',
          type: {
            name: 'String'
          }
        },
        rights: {
          required: false,
          serializedName: 'rights',
          type: {
            name: 'Enum',
            allowedValues: [ 'RegistryRead', 'RegistryWrite', 'ServiceConnect', 'DeviceConnect', 'RegistryRead, RegistryWrite', 'RegistryRead, ServiceConnect', 'RegistryRead, DeviceConnect', 'RegistryWrite, ServiceConnect', 'RegistryWrite, DeviceConnect', 'ServiceConnect, DeviceConnect', 'RegistryRead, RegistryWrite, ServiceConnect', 'RegistryRead, RegistryWrite, DeviceConnect', 'RegistryRead, ServiceConnect, DeviceConnect', 'RegistryWrite, ServiceConnect, DeviceConnect', 'RegistryRead, RegistryWrite, ServiceConnect, DeviceConnect' ]
          }
        }
      }
    }
  };
};

module.exports = SharedAccessSignatureAuthorizationRule;
