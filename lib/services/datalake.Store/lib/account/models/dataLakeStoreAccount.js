/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Data Lake Store account information.
 *
 * @extends models['Resource']
 */
class DataLakeStoreAccount extends models['Resource'] {
  /**
   * Create a DataLakeStoreAccount.
   * @member {object} [identity] The Key Vault encryption identity, if any.
   * @member {uuid} [identity.principalId] The principal identifier associated
   * with the encryption.
   * @member {uuid} [identity.tenantId] The tenant identifier associated with
   * the encryption.
   * @member {uuid} [accountId] The unique identifier associated with this Data
   * Lake Store account.
   * @member {string} [provisioningState] The provisioning status of the Data
   * Lake Store account. Possible values include: 'Failed', 'Creating',
   * 'Running', 'Succeeded', 'Patching', 'Suspending', 'Resuming', 'Deleting',
   * 'Deleted', 'Undeleting', 'Canceled'
   * @member {string} [state] The state of the Data Lake Store account.
   * Possible values include: 'Active', 'Suspended'
   * @member {date} [creationTime] The account creation time.
   * @member {date} [lastModifiedTime] The account last modified time.
   * @member {string} [endpoint] The full CName endpoint for this account.
   * @member {string} [defaultGroup] The default owner group for all new
   * folders and files created in the Data Lake Store account.
   * @member {object} [encryptionConfig] The Key Vault encryption
   * configuration.
   * @member {string} [encryptionConfig.type] The type of encryption
   * configuration being used. Currently the only supported types are
   * 'UserManaged' and 'ServiceManaged'. Possible values include:
   * 'UserManaged', 'ServiceManaged'
   * @member {object} [encryptionConfig.keyVaultMetaInfo] The Key Vault
   * information for connecting to user managed encryption keys.
   * @member {string} [encryptionConfig.keyVaultMetaInfo.keyVaultResourceId]
   * The resource identifier for the user managed Key Vault being used to
   * encrypt.
   * @member {string} [encryptionConfig.keyVaultMetaInfo.encryptionKeyName] The
   * name of the user managed encryption key.
   * @member {string} [encryptionConfig.keyVaultMetaInfo.encryptionKeyVersion]
   * The version of the user managed encryption key.
   * @member {string} [encryptionState] The current state of encryption for
   * this Data Lake Store account. Possible values include: 'Enabled',
   * 'Disabled'
   * @member {string} [encryptionProvisioningState] The current state of
   * encryption provisioning for this Data Lake Store account. Possible values
   * include: 'Creating', 'Succeeded'
   * @member {array} [firewallRules] The list of firewall rules associated with
   * this Data Lake Store account.
   * @member {array} [virtualNetworkRules] The list of virtual network rules
   * associated with this Data Lake Store account.
   * @member {string} [firewallState] The current state of the IP address
   * firewall for this Data Lake Store account. Possible values include:
   * 'Enabled', 'Disabled'
   * @member {string} [firewallAllowAzureIps] The current state of allowing or
   * disallowing IPs originating within Azure through the firewall. If the
   * firewall is disabled, this is not enforced. Possible values include:
   * 'Enabled', 'Disabled'
   * @member {array} [trustedIdProviders] The list of trusted identity
   * providers associated with this Data Lake Store account.
   * @member {string} [trustedIdProviderState] The current state of the trusted
   * identity provider feature for this Data Lake Store account. Possible
   * values include: 'Enabled', 'Disabled'
   * @member {string} [newTier] The commitment tier to use for next month.
   * Possible values include: 'Consumption', 'Commitment_1TB',
   * 'Commitment_10TB', 'Commitment_100TB', 'Commitment_500TB',
   * 'Commitment_1PB', 'Commitment_5PB'
   * @member {string} [currentTier] The commitment tier in use for the current
   * month. Possible values include: 'Consumption', 'Commitment_1TB',
   * 'Commitment_10TB', 'Commitment_100TB', 'Commitment_500TB',
   * 'Commitment_1PB', 'Commitment_5PB'
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of DataLakeStoreAccount
   *
   * @returns {object} metadata of DataLakeStoreAccount
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DataLakeStoreAccount',
      type: {
        name: 'Composite',
        className: 'DataLakeStoreAccount',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            readOnly: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            readOnly: true,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          identity: {
            required: false,
            readOnly: true,
            serializedName: 'identity',
            type: {
              name: 'Composite',
              className: 'EncryptionIdentity'
            }
          },
          accountId: {
            required: false,
            readOnly: true,
            serializedName: 'properties.accountId',
            type: {
              name: 'String'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'Enum',
              allowedValues: [ 'Failed', 'Creating', 'Running', 'Succeeded', 'Patching', 'Suspending', 'Resuming', 'Deleting', 'Deleted', 'Undeleting', 'Canceled' ]
            }
          },
          state: {
            required: false,
            readOnly: true,
            serializedName: 'properties.state',
            type: {
              name: 'Enum',
              allowedValues: [ 'Active', 'Suspended' ]
            }
          },
          creationTime: {
            required: false,
            readOnly: true,
            serializedName: 'properties.creationTime',
            type: {
              name: 'DateTime'
            }
          },
          lastModifiedTime: {
            required: false,
            readOnly: true,
            serializedName: 'properties.lastModifiedTime',
            type: {
              name: 'DateTime'
            }
          },
          endpoint: {
            required: false,
            readOnly: true,
            serializedName: 'properties.endpoint',
            type: {
              name: 'String'
            }
          },
          defaultGroup: {
            required: false,
            readOnly: true,
            serializedName: 'properties.defaultGroup',
            type: {
              name: 'String'
            }
          },
          encryptionConfig: {
            required: false,
            readOnly: true,
            serializedName: 'properties.encryptionConfig',
            type: {
              name: 'Composite',
              className: 'EncryptionConfig'
            }
          },
          encryptionState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.encryptionState',
            type: {
              name: 'Enum',
              allowedValues: [ 'Enabled', 'Disabled' ]
            }
          },
          encryptionProvisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.encryptionProvisioningState',
            type: {
              name: 'Enum',
              allowedValues: [ 'Creating', 'Succeeded' ]
            }
          },
          firewallRules: {
            required: false,
            readOnly: true,
            serializedName: 'properties.firewallRules',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'FirewallRuleElementType',
                  type: {
                    name: 'Composite',
                    className: 'FirewallRule'
                  }
              }
            }
          },
          virtualNetworkRules: {
            required: false,
            readOnly: true,
            serializedName: 'properties.virtualNetworkRules',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'VirtualNetworkRuleElementType',
                  type: {
                    name: 'Composite',
                    className: 'VirtualNetworkRule'
                  }
              }
            }
          },
          firewallState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.firewallState',
            type: {
              name: 'Enum',
              allowedValues: [ 'Enabled', 'Disabled' ]
            }
          },
          firewallAllowAzureIps: {
            required: false,
            readOnly: true,
            serializedName: 'properties.firewallAllowAzureIps',
            type: {
              name: 'Enum',
              allowedValues: [ 'Enabled', 'Disabled' ]
            }
          },
          trustedIdProviders: {
            required: false,
            readOnly: true,
            serializedName: 'properties.trustedIdProviders',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'TrustedIdProviderElementType',
                  type: {
                    name: 'Composite',
                    className: 'TrustedIdProvider'
                  }
              }
            }
          },
          trustedIdProviderState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.trustedIdProviderState',
            type: {
              name: 'Enum',
              allowedValues: [ 'Enabled', 'Disabled' ]
            }
          },
          newTier: {
            required: false,
            readOnly: true,
            serializedName: 'properties.newTier',
            type: {
              name: 'Enum',
              allowedValues: [ 'Consumption', 'Commitment_1TB', 'Commitment_10TB', 'Commitment_100TB', 'Commitment_500TB', 'Commitment_1PB', 'Commitment_5PB' ]
            }
          },
          currentTier: {
            required: false,
            readOnly: true,
            serializedName: 'properties.currentTier',
            type: {
              name: 'Enum',
              allowedValues: [ 'Consumption', 'Commitment_1TB', 'Commitment_10TB', 'Commitment_100TB', 'Commitment_500TB', 'Commitment_1PB', 'Commitment_5PB' ]
            }
          }
        }
      }
    };
  }
}

module.exports = DataLakeStoreAccount;
