/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Identity for the cluster.
 *
 */
class ClusterIdentity {
  /**
   * Create a ClusterIdentity.
   * @property {string} [principalId] The principal id of cluster identity.
   * This property will only be provided for a system assigned identity.
   * @property {string} [tenantId] The tenant id associated with the cluster.
   * This property will only be provided for a system assigned identity.
   * @property {string} [type] The type of identity used for the cluster. The
   * type 'SystemAssigned, UserAssigned' includes both an implicitly created
   * identity and a set of user assigned identities. Possible values include:
   * 'SystemAssigned', 'UserAssigned', 'SystemAssigned, UserAssigned', 'None'
   * @property {object} [userAssignedIdentities] The list of user identities
   * associated with the cluster. The user identity dictionary key references
   * will be ARM resource ids in the form:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ClusterIdentity
   *
   * @returns {object} metadata of ClusterIdentity
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ClusterIdentity',
      type: {
        name: 'Composite',
        className: 'ClusterIdentity',
        modelProperties: {
          principalId: {
            required: false,
            readOnly: true,
            serializedName: 'principalId',
            type: {
              name: 'String'
            }
          },
          tenantId: {
            required: false,
            readOnly: true,
            serializedName: 'tenantId',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            serializedName: 'type',
            type: {
              name: 'Enum',
              allowedValues: [ 'SystemAssigned', 'UserAssigned', 'SystemAssigned, UserAssigned', 'None' ]
            }
          },
          userAssignedIdentities: {
            required: false,
            serializedName: 'userAssignedIdentities',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'ClusterIdentityUserAssignedIdentitiesValueElementType',
                  type: {
                    name: 'Composite',
                    className: 'ClusterIdentityUserAssignedIdentitiesValue'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = ClusterIdentity;
