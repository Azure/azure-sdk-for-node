/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Clusters
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the HDInsightManagementClient.
 */
export interface Clusters {


    /**
     * Creates a new HDInsight cluster with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} parameters The cluster create request.
     *
     * @param {string} [parameters.location] The location of the cluster.
     *
     * @param {object} [parameters.tags] The resource tags.
     *
     * @param {object} [parameters.properties] The cluster create parameters.
     *
     * @param {string} [parameters.properties.clusterVersion] The version of the
     * cluster.
     *
     * @param {string} [parameters.properties.osType] The type of operating system.
     * Possible values include: 'Windows', 'Linux'
     *
     * @param {string} [parameters.properties.tier] The cluster tier. Possible
     * values include: 'Standard', 'Premium'
     *
     * @param {object} [parameters.properties.clusterDefinition] The cluster
     * definition.
     *
     * @param {string} [parameters.properties.clusterDefinition.blueprint] The link
     * to the blueprint.
     *
     * @param {string} [parameters.properties.clusterDefinition.kind] The type of
     * cluster.
     *
     * @param {object} [parameters.properties.clusterDefinition.componentVersion]
     * The versions of different services in the cluster.
     *
     * @param {object} [parameters.properties.clusterDefinition.configurations] The
     * cluster configurations.
     *
     * @param {object} [parameters.properties.securityProfile] The security
     * profile.
     *
     * @param {string} [parameters.properties.securityProfile.directoryType] The
     * directory type. Possible values include: 'ActiveDirectory'
     *
     * @param {string} [parameters.properties.securityProfile.domain] The
     * organization's active directory domain.
     *
     * @param {string} [parameters.properties.securityProfile.organizationalUnitDN]
     * The organizational unit within the Active Directory to place the cluster and
     * service accounts.
     *
     * @param {array} [parameters.properties.securityProfile.ldapsUrls] The LDAPS
     * protocol URLs to communicate with the Active Directory.
     *
     * @param {string} [parameters.properties.securityProfile.domainUsername] The
     * domain user account that will have admin privileges on the cluster.
     *
     * @param {string} [parameters.properties.securityProfile.domainUserPassword]
     * The domain admin password.
     *
     * @param {array} [parameters.properties.securityProfile.clusterUsersGroupDNs]
     * Optional. The Distinguished Names for cluster user groups
     *
     * @param {string} [parameters.properties.securityProfile.aaddsResourceId] The
     * resource ID of the user's Azure Active Directory Domain Service.
     *
     * @param {string} [parameters.properties.securityProfile.msiResourceId] User
     * assigned identity that has permissions to read and create cluster-related
     * artifacts in the user's AADDS.
     *
     * @param {object} [parameters.properties.computeProfile] The compute profile.
     *
     * @param {array} [parameters.properties.computeProfile.roles] The list of
     * roles in the cluster.
     *
     * @param {object} [parameters.properties.storageProfile] The storage profile.
     *
     * @param {array} [parameters.properties.storageProfile.storageaccounts] The
     * list of storage accounts in the cluster.
     *
     * @param {object} [parameters.properties.diskEncryptionProperties] The disk
     * encryption properties.
     *
     * @param {string} [parameters.properties.diskEncryptionProperties.vaultUri]
     * Base key vault URI where the customers key is located eg.
     * https://myvault.vault.azure.net
     *
     * @param {string} [parameters.properties.diskEncryptionProperties.keyName] Key
     * name that is used for enabling disk encryption.
     *
     * @param {string} [parameters.properties.diskEncryptionProperties.keyVersion]
     * Specific key version that is used for enabling disk encryption.
     *
     * @param {string}
     * [parameters.properties.diskEncryptionProperties.encryptionAlgorithm]
     * Algorithm identifier for encryption, default RSA-OAEP. Possible values
     * include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'
     *
     * @param {string}
     * [parameters.properties.diskEncryptionProperties.msiResourceId] Resource ID
     * of Managed Identity that is used to access the key vault.
     *
     * @param {object} [parameters.identity] The identity of the cluster, if
     * configured.
     *
     * @param {string} [parameters.identity.type] The type of identity used for the
     * cluster. The type 'SystemAssigned, UserAssigned' includes both an implicitly
     * created identity and a set of user assigned identities. Possible values
     * include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned, UserAssigned',
     * 'None'
     *
     * @param {object} [parameters.identity.userAssignedIdentities] The list of
     * user identities associated with the cluster. The user identity dictionary
     * key references will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, clusterName: string, parameters: models.ClusterCreateParametersExtended, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Cluster>>;

    /**
     * Creates a new HDInsight cluster with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} parameters The cluster create request.
     *
     * @param {string} [parameters.location] The location of the cluster.
     *
     * @param {object} [parameters.tags] The resource tags.
     *
     * @param {object} [parameters.properties] The cluster create parameters.
     *
     * @param {string} [parameters.properties.clusterVersion] The version of the
     * cluster.
     *
     * @param {string} [parameters.properties.osType] The type of operating system.
     * Possible values include: 'Windows', 'Linux'
     *
     * @param {string} [parameters.properties.tier] The cluster tier. Possible
     * values include: 'Standard', 'Premium'
     *
     * @param {object} [parameters.properties.clusterDefinition] The cluster
     * definition.
     *
     * @param {string} [parameters.properties.clusterDefinition.blueprint] The link
     * to the blueprint.
     *
     * @param {string} [parameters.properties.clusterDefinition.kind] The type of
     * cluster.
     *
     * @param {object} [parameters.properties.clusterDefinition.componentVersion]
     * The versions of different services in the cluster.
     *
     * @param {object} [parameters.properties.clusterDefinition.configurations] The
     * cluster configurations.
     *
     * @param {object} [parameters.properties.securityProfile] The security
     * profile.
     *
     * @param {string} [parameters.properties.securityProfile.directoryType] The
     * directory type. Possible values include: 'ActiveDirectory'
     *
     * @param {string} [parameters.properties.securityProfile.domain] The
     * organization's active directory domain.
     *
     * @param {string} [parameters.properties.securityProfile.organizationalUnitDN]
     * The organizational unit within the Active Directory to place the cluster and
     * service accounts.
     *
     * @param {array} [parameters.properties.securityProfile.ldapsUrls] The LDAPS
     * protocol URLs to communicate with the Active Directory.
     *
     * @param {string} [parameters.properties.securityProfile.domainUsername] The
     * domain user account that will have admin privileges on the cluster.
     *
     * @param {string} [parameters.properties.securityProfile.domainUserPassword]
     * The domain admin password.
     *
     * @param {array} [parameters.properties.securityProfile.clusterUsersGroupDNs]
     * Optional. The Distinguished Names for cluster user groups
     *
     * @param {string} [parameters.properties.securityProfile.aaddsResourceId] The
     * resource ID of the user's Azure Active Directory Domain Service.
     *
     * @param {string} [parameters.properties.securityProfile.msiResourceId] User
     * assigned identity that has permissions to read and create cluster-related
     * artifacts in the user's AADDS.
     *
     * @param {object} [parameters.properties.computeProfile] The compute profile.
     *
     * @param {array} [parameters.properties.computeProfile.roles] The list of
     * roles in the cluster.
     *
     * @param {object} [parameters.properties.storageProfile] The storage profile.
     *
     * @param {array} [parameters.properties.storageProfile.storageaccounts] The
     * list of storage accounts in the cluster.
     *
     * @param {object} [parameters.properties.diskEncryptionProperties] The disk
     * encryption properties.
     *
     * @param {string} [parameters.properties.diskEncryptionProperties.vaultUri]
     * Base key vault URI where the customers key is located eg.
     * https://myvault.vault.azure.net
     *
     * @param {string} [parameters.properties.diskEncryptionProperties.keyName] Key
     * name that is used for enabling disk encryption.
     *
     * @param {string} [parameters.properties.diskEncryptionProperties.keyVersion]
     * Specific key version that is used for enabling disk encryption.
     *
     * @param {string}
     * [parameters.properties.diskEncryptionProperties.encryptionAlgorithm]
     * Algorithm identifier for encryption, default RSA-OAEP. Possible values
     * include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'
     *
     * @param {string}
     * [parameters.properties.diskEncryptionProperties.msiResourceId] Resource ID
     * of Managed Identity that is used to access the key vault.
     *
     * @param {object} [parameters.identity] The identity of the cluster, if
     * configured.
     *
     * @param {string} [parameters.identity.type] The type of identity used for the
     * cluster. The type 'SystemAssigned, UserAssigned' includes both an implicitly
     * created identity and a set of user assigned identities. Possible values
     * include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned, UserAssigned',
     * 'None'
     *
     * @param {object} [parameters.identity.userAssignedIdentities] The list of
     * user identities associated with the cluster. The user identity dictionary
     * key references will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Cluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Cluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Cluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, clusterName: string, parameters: models.ClusterCreateParametersExtended, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Cluster>;
    create(resourceGroupName: string, clusterName: string, parameters: models.ClusterCreateParametersExtended, callback: ServiceCallback<models.Cluster>): void;
    create(resourceGroupName: string, clusterName: string, parameters: models.ClusterCreateParametersExtended, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Cluster>): void;


    /**
     * Patch HDInsight cluster with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} parameters The cluster patch request.
     *
     * @param {object} [parameters.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, clusterName: string, parameters: models.ClusterPatchParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Cluster>>;

    /**
     * Patch HDInsight cluster with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} parameters The cluster patch request.
     *
     * @param {object} [parameters.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Cluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Cluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Cluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, clusterName: string, parameters: models.ClusterPatchParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Cluster>;
    update(resourceGroupName: string, clusterName: string, parameters: models.ClusterPatchParameters, callback: ServiceCallback<models.Cluster>): void;
    update(resourceGroupName: string, clusterName: string, parameters: models.ClusterPatchParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Cluster>): void;


    /**
     * Deletes the specified HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, clusterName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the specified cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Cluster>>;

    /**
     * Gets the specified cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Cluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Cluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Cluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Cluster>;
    get(resourceGroupName: string, clusterName: string, callback: ServiceCallback<models.Cluster>): void;
    get(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Cluster>): void;


    /**
     * Lists the HDInsight clusters in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterListResult>>;

    /**
     * Lists the HDInsight clusters in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ClusterListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterListResult>): void;


    /**
     * Resizes the specified HDInsight cluster to the specified size.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} parameters The parameters for the resize operation.
     *
     * @param {number} [parameters.targetInstanceCount] The target instance count
     * for the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    resizeWithHttpOperationResponse(resourceGroupName: string, clusterName: string, parameters: models.ClusterResizeParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Resizes the specified HDInsight cluster to the specified size.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} parameters The parameters for the resize operation.
     *
     * @param {number} [parameters.targetInstanceCount] The target instance count
     * for the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    resize(resourceGroupName: string, clusterName: string, parameters: models.ClusterResizeParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    resize(resourceGroupName: string, clusterName: string, parameters: models.ClusterResizeParameters, callback: ServiceCallback<void>): void;
    resize(resourceGroupName: string, clusterName: string, parameters: models.ClusterResizeParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all the HDInsight clusters under the subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterListResult>>;

    /**
     * Lists all the HDInsight clusters under the subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterListResult>;
    list(callback: ServiceCallback<models.ClusterListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterListResult>): void;


    /**
     * Rotate disk encryption key of the specified HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} parameters The parameters for the disk encryption operation.
     *
     * @param {string} [parameters.vaultUri] Base key vault URI where the customers
     * key is located eg. https://myvault.vault.azure.net
     *
     * @param {string} [parameters.keyName] Key name that is used for enabling disk
     * encryption.
     *
     * @param {string} [parameters.keyVersion] Specific key version that is used
     * for enabling disk encryption.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    rotateDiskEncryptionKeyWithHttpOperationResponse(resourceGroupName: string, clusterName: string, parameters: models.ClusterDiskEncryptionParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Rotate disk encryption key of the specified HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} parameters The parameters for the disk encryption operation.
     *
     * @param {string} [parameters.vaultUri] Base key vault URI where the customers
     * key is located eg. https://myvault.vault.azure.net
     *
     * @param {string} [parameters.keyName] Key name that is used for enabling disk
     * encryption.
     *
     * @param {string} [parameters.keyVersion] Specific key version that is used
     * for enabling disk encryption.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    rotateDiskEncryptionKey(resourceGroupName: string, clusterName: string, parameters: models.ClusterDiskEncryptionParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    rotateDiskEncryptionKey(resourceGroupName: string, clusterName: string, parameters: models.ClusterDiskEncryptionParameters, callback: ServiceCallback<void>): void;
    rotateDiskEncryptionKey(resourceGroupName: string, clusterName: string, parameters: models.ClusterDiskEncryptionParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Executes script actions on the specified HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} parameters The parameters for executing script actions.
     *
     * @param {array} [parameters.scriptActions] The list of run time script
     * actions.
     *
     * @param {boolean} parameters.persistOnSuccess Gets or sets if the scripts
     * needs to be persisted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    executeScriptActionsWithHttpOperationResponse(resourceGroupName: string, clusterName: string, parameters: models.ExecuteScriptActionParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Executes script actions on the specified HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} parameters The parameters for executing script actions.
     *
     * @param {array} [parameters.scriptActions] The list of run time script
     * actions.
     *
     * @param {boolean} parameters.persistOnSuccess Gets or sets if the scripts
     * needs to be persisted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    executeScriptActions(resourceGroupName: string, clusterName: string, parameters: models.ExecuteScriptActionParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    executeScriptActions(resourceGroupName: string, clusterName: string, parameters: models.ExecuteScriptActionParameters, callback: ServiceCallback<void>): void;
    executeScriptActions(resourceGroupName: string, clusterName: string, parameters: models.ExecuteScriptActionParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates a new HDInsight cluster with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} parameters The cluster create request.
     *
     * @param {string} [parameters.location] The location of the cluster.
     *
     * @param {object} [parameters.tags] The resource tags.
     *
     * @param {object} [parameters.properties] The cluster create parameters.
     *
     * @param {string} [parameters.properties.clusterVersion] The version of the
     * cluster.
     *
     * @param {string} [parameters.properties.osType] The type of operating system.
     * Possible values include: 'Windows', 'Linux'
     *
     * @param {string} [parameters.properties.tier] The cluster tier. Possible
     * values include: 'Standard', 'Premium'
     *
     * @param {object} [parameters.properties.clusterDefinition] The cluster
     * definition.
     *
     * @param {string} [parameters.properties.clusterDefinition.blueprint] The link
     * to the blueprint.
     *
     * @param {string} [parameters.properties.clusterDefinition.kind] The type of
     * cluster.
     *
     * @param {object} [parameters.properties.clusterDefinition.componentVersion]
     * The versions of different services in the cluster.
     *
     * @param {object} [parameters.properties.clusterDefinition.configurations] The
     * cluster configurations.
     *
     * @param {object} [parameters.properties.securityProfile] The security
     * profile.
     *
     * @param {string} [parameters.properties.securityProfile.directoryType] The
     * directory type. Possible values include: 'ActiveDirectory'
     *
     * @param {string} [parameters.properties.securityProfile.domain] The
     * organization's active directory domain.
     *
     * @param {string} [parameters.properties.securityProfile.organizationalUnitDN]
     * The organizational unit within the Active Directory to place the cluster and
     * service accounts.
     *
     * @param {array} [parameters.properties.securityProfile.ldapsUrls] The LDAPS
     * protocol URLs to communicate with the Active Directory.
     *
     * @param {string} [parameters.properties.securityProfile.domainUsername] The
     * domain user account that will have admin privileges on the cluster.
     *
     * @param {string} [parameters.properties.securityProfile.domainUserPassword]
     * The domain admin password.
     *
     * @param {array} [parameters.properties.securityProfile.clusterUsersGroupDNs]
     * Optional. The Distinguished Names for cluster user groups
     *
     * @param {string} [parameters.properties.securityProfile.aaddsResourceId] The
     * resource ID of the user's Azure Active Directory Domain Service.
     *
     * @param {string} [parameters.properties.securityProfile.msiResourceId] User
     * assigned identity that has permissions to read and create cluster-related
     * artifacts in the user's AADDS.
     *
     * @param {object} [parameters.properties.computeProfile] The compute profile.
     *
     * @param {array} [parameters.properties.computeProfile.roles] The list of
     * roles in the cluster.
     *
     * @param {object} [parameters.properties.storageProfile] The storage profile.
     *
     * @param {array} [parameters.properties.storageProfile.storageaccounts] The
     * list of storage accounts in the cluster.
     *
     * @param {object} [parameters.properties.diskEncryptionProperties] The disk
     * encryption properties.
     *
     * @param {string} [parameters.properties.diskEncryptionProperties.vaultUri]
     * Base key vault URI where the customers key is located eg.
     * https://myvault.vault.azure.net
     *
     * @param {string} [parameters.properties.diskEncryptionProperties.keyName] Key
     * name that is used for enabling disk encryption.
     *
     * @param {string} [parameters.properties.diskEncryptionProperties.keyVersion]
     * Specific key version that is used for enabling disk encryption.
     *
     * @param {string}
     * [parameters.properties.diskEncryptionProperties.encryptionAlgorithm]
     * Algorithm identifier for encryption, default RSA-OAEP. Possible values
     * include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'
     *
     * @param {string}
     * [parameters.properties.diskEncryptionProperties.msiResourceId] Resource ID
     * of Managed Identity that is used to access the key vault.
     *
     * @param {object} [parameters.identity] The identity of the cluster, if
     * configured.
     *
     * @param {string} [parameters.identity.type] The type of identity used for the
     * cluster. The type 'SystemAssigned, UserAssigned' includes both an implicitly
     * created identity and a set of user assigned identities. Possible values
     * include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned, UserAssigned',
     * 'None'
     *
     * @param {object} [parameters.identity.userAssignedIdentities] The list of
     * user identities associated with the cluster. The user identity dictionary
     * key references will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, clusterName: string, parameters: models.ClusterCreateParametersExtended, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Cluster>>;

    /**
     * Creates a new HDInsight cluster with the specified parameters.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} parameters The cluster create request.
     *
     * @param {string} [parameters.location] The location of the cluster.
     *
     * @param {object} [parameters.tags] The resource tags.
     *
     * @param {object} [parameters.properties] The cluster create parameters.
     *
     * @param {string} [parameters.properties.clusterVersion] The version of the
     * cluster.
     *
     * @param {string} [parameters.properties.osType] The type of operating system.
     * Possible values include: 'Windows', 'Linux'
     *
     * @param {string} [parameters.properties.tier] The cluster tier. Possible
     * values include: 'Standard', 'Premium'
     *
     * @param {object} [parameters.properties.clusterDefinition] The cluster
     * definition.
     *
     * @param {string} [parameters.properties.clusterDefinition.blueprint] The link
     * to the blueprint.
     *
     * @param {string} [parameters.properties.clusterDefinition.kind] The type of
     * cluster.
     *
     * @param {object} [parameters.properties.clusterDefinition.componentVersion]
     * The versions of different services in the cluster.
     *
     * @param {object} [parameters.properties.clusterDefinition.configurations] The
     * cluster configurations.
     *
     * @param {object} [parameters.properties.securityProfile] The security
     * profile.
     *
     * @param {string} [parameters.properties.securityProfile.directoryType] The
     * directory type. Possible values include: 'ActiveDirectory'
     *
     * @param {string} [parameters.properties.securityProfile.domain] The
     * organization's active directory domain.
     *
     * @param {string} [parameters.properties.securityProfile.organizationalUnitDN]
     * The organizational unit within the Active Directory to place the cluster and
     * service accounts.
     *
     * @param {array} [parameters.properties.securityProfile.ldapsUrls] The LDAPS
     * protocol URLs to communicate with the Active Directory.
     *
     * @param {string} [parameters.properties.securityProfile.domainUsername] The
     * domain user account that will have admin privileges on the cluster.
     *
     * @param {string} [parameters.properties.securityProfile.domainUserPassword]
     * The domain admin password.
     *
     * @param {array} [parameters.properties.securityProfile.clusterUsersGroupDNs]
     * Optional. The Distinguished Names for cluster user groups
     *
     * @param {string} [parameters.properties.securityProfile.aaddsResourceId] The
     * resource ID of the user's Azure Active Directory Domain Service.
     *
     * @param {string} [parameters.properties.securityProfile.msiResourceId] User
     * assigned identity that has permissions to read and create cluster-related
     * artifacts in the user's AADDS.
     *
     * @param {object} [parameters.properties.computeProfile] The compute profile.
     *
     * @param {array} [parameters.properties.computeProfile.roles] The list of
     * roles in the cluster.
     *
     * @param {object} [parameters.properties.storageProfile] The storage profile.
     *
     * @param {array} [parameters.properties.storageProfile.storageaccounts] The
     * list of storage accounts in the cluster.
     *
     * @param {object} [parameters.properties.diskEncryptionProperties] The disk
     * encryption properties.
     *
     * @param {string} [parameters.properties.diskEncryptionProperties.vaultUri]
     * Base key vault URI where the customers key is located eg.
     * https://myvault.vault.azure.net
     *
     * @param {string} [parameters.properties.diskEncryptionProperties.keyName] Key
     * name that is used for enabling disk encryption.
     *
     * @param {string} [parameters.properties.diskEncryptionProperties.keyVersion]
     * Specific key version that is used for enabling disk encryption.
     *
     * @param {string}
     * [parameters.properties.diskEncryptionProperties.encryptionAlgorithm]
     * Algorithm identifier for encryption, default RSA-OAEP. Possible values
     * include: 'RSA-OAEP', 'RSA-OAEP-256', 'RSA1_5'
     *
     * @param {string}
     * [parameters.properties.diskEncryptionProperties.msiResourceId] Resource ID
     * of Managed Identity that is used to access the key vault.
     *
     * @param {object} [parameters.identity] The identity of the cluster, if
     * configured.
     *
     * @param {string} [parameters.identity.type] The type of identity used for the
     * cluster. The type 'SystemAssigned, UserAssigned' includes both an implicitly
     * created identity and a set of user assigned identities. Possible values
     * include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned, UserAssigned',
     * 'None'
     *
     * @param {object} [parameters.identity.userAssignedIdentities] The list of
     * user identities associated with the cluster. The user identity dictionary
     * key references will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Cluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Cluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Cluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, clusterName: string, parameters: models.ClusterCreateParametersExtended, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Cluster>;
    beginCreate(resourceGroupName: string, clusterName: string, parameters: models.ClusterCreateParametersExtended, callback: ServiceCallback<models.Cluster>): void;
    beginCreate(resourceGroupName: string, clusterName: string, parameters: models.ClusterCreateParametersExtended, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Cluster>): void;


    /**
     * Deletes the specified HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, clusterName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Resizes the specified HDInsight cluster to the specified size.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} parameters The parameters for the resize operation.
     *
     * @param {number} [parameters.targetInstanceCount] The target instance count
     * for the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginResizeWithHttpOperationResponse(resourceGroupName: string, clusterName: string, parameters: models.ClusterResizeParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Resizes the specified HDInsight cluster to the specified size.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} parameters The parameters for the resize operation.
     *
     * @param {number} [parameters.targetInstanceCount] The target instance count
     * for the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginResize(resourceGroupName: string, clusterName: string, parameters: models.ClusterResizeParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginResize(resourceGroupName: string, clusterName: string, parameters: models.ClusterResizeParameters, callback: ServiceCallback<void>): void;
    beginResize(resourceGroupName: string, clusterName: string, parameters: models.ClusterResizeParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Rotate disk encryption key of the specified HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} parameters The parameters for the disk encryption operation.
     *
     * @param {string} [parameters.vaultUri] Base key vault URI where the customers
     * key is located eg. https://myvault.vault.azure.net
     *
     * @param {string} [parameters.keyName] Key name that is used for enabling disk
     * encryption.
     *
     * @param {string} [parameters.keyVersion] Specific key version that is used
     * for enabling disk encryption.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginRotateDiskEncryptionKeyWithHttpOperationResponse(resourceGroupName: string, clusterName: string, parameters: models.ClusterDiskEncryptionParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Rotate disk encryption key of the specified HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} parameters The parameters for the disk encryption operation.
     *
     * @param {string} [parameters.vaultUri] Base key vault URI where the customers
     * key is located eg. https://myvault.vault.azure.net
     *
     * @param {string} [parameters.keyName] Key name that is used for enabling disk
     * encryption.
     *
     * @param {string} [parameters.keyVersion] Specific key version that is used
     * for enabling disk encryption.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginRotateDiskEncryptionKey(resourceGroupName: string, clusterName: string, parameters: models.ClusterDiskEncryptionParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginRotateDiskEncryptionKey(resourceGroupName: string, clusterName: string, parameters: models.ClusterDiskEncryptionParameters, callback: ServiceCallback<void>): void;
    beginRotateDiskEncryptionKey(resourceGroupName: string, clusterName: string, parameters: models.ClusterDiskEncryptionParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Executes script actions on the specified HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} parameters The parameters for executing script actions.
     *
     * @param {array} [parameters.scriptActions] The list of run time script
     * actions.
     *
     * @param {boolean} parameters.persistOnSuccess Gets or sets if the scripts
     * needs to be persisted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginExecuteScriptActionsWithHttpOperationResponse(resourceGroupName: string, clusterName: string, parameters: models.ExecuteScriptActionParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Executes script actions on the specified HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} parameters The parameters for executing script actions.
     *
     * @param {array} [parameters.scriptActions] The list of run time script
     * actions.
     *
     * @param {boolean} parameters.persistOnSuccess Gets or sets if the scripts
     * needs to be persisted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginExecuteScriptActions(resourceGroupName: string, clusterName: string, parameters: models.ExecuteScriptActionParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginExecuteScriptActions(resourceGroupName: string, clusterName: string, parameters: models.ExecuteScriptActionParameters, callback: ServiceCallback<void>): void;
    beginExecuteScriptActions(resourceGroupName: string, clusterName: string, parameters: models.ExecuteScriptActionParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists the HDInsight clusters in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterListResult>>;

    /**
     * Lists the HDInsight clusters in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.ClusterListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterListResult>): void;


    /**
     * Lists all the HDInsight clusters under the subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterListResult>>;

    /**
     * Lists all the HDInsight clusters under the subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ClusterListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterListResult>): void;
}

/**
 * @class
 * Applications
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the HDInsightManagementClient.
 */
export interface Applications {


    /**
     * Lists all of the applications for the HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByClusterWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationListResult>>;

    /**
     * Lists all of the applications for the HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByCluster(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationListResult>;
    listByCluster(resourceGroupName: string, clusterName: string, callback: ServiceCallback<models.ApplicationListResult>): void;
    listByCluster(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationListResult>): void;


    /**
     * Gets properties of the specified application.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} applicationName The constant value for the application name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Application>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, clusterName: string, applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Application>>;

    /**
     * Gets properties of the specified application.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} applicationName The constant value for the application name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Application} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Application} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Application} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, clusterName: string, applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Application>;
    get(resourceGroupName: string, clusterName: string, applicationName: string, callback: ServiceCallback<models.Application>): void;
    get(resourceGroupName: string, clusterName: string, applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Application>): void;


    /**
     * Creates applications for the HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} applicationName The constant value for the application name.
     *
     * @param {object} parameters The application create request.
     *
     * @param {string} [parameters.etag] The ETag for the application
     *
     * @param {object} [parameters.tags] The tags for the application.
     *
     * @param {object} [parameters.properties] The properties of the application.
     *
     * @param {object} [parameters.properties.computeProfile] The list of roles in
     * the cluster.
     *
     * @param {array} [parameters.properties.computeProfile.roles] The list of
     * roles in the cluster.
     *
     * @param {array} [parameters.properties.installScriptActions] The list of
     * install script actions.
     *
     * @param {array} [parameters.properties.uninstallScriptActions] The list of
     * uninstall script actions.
     *
     * @param {array} [parameters.properties.httpsEndpoints] The list of
     * application HTTPS endpoints.
     *
     * @param {array} [parameters.properties.sshEndpoints] The list of application
     * SSH endpoints.
     *
     * @param {string} [parameters.properties.applicationType] The application
     * type.
     *
     * @param {array} [parameters.properties.errors] The list of errors.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Application>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, clusterName: string, applicationName: string, parameters: models.Application, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Application>>;

    /**
     * Creates applications for the HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} applicationName The constant value for the application name.
     *
     * @param {object} parameters The application create request.
     *
     * @param {string} [parameters.etag] The ETag for the application
     *
     * @param {object} [parameters.tags] The tags for the application.
     *
     * @param {object} [parameters.properties] The properties of the application.
     *
     * @param {object} [parameters.properties.computeProfile] The list of roles in
     * the cluster.
     *
     * @param {array} [parameters.properties.computeProfile.roles] The list of
     * roles in the cluster.
     *
     * @param {array} [parameters.properties.installScriptActions] The list of
     * install script actions.
     *
     * @param {array} [parameters.properties.uninstallScriptActions] The list of
     * uninstall script actions.
     *
     * @param {array} [parameters.properties.httpsEndpoints] The list of
     * application HTTPS endpoints.
     *
     * @param {array} [parameters.properties.sshEndpoints] The list of application
     * SSH endpoints.
     *
     * @param {string} [parameters.properties.applicationType] The application
     * type.
     *
     * @param {array} [parameters.properties.errors] The list of errors.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Application} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Application} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Application} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, clusterName: string, applicationName: string, parameters: models.Application, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Application>;
    create(resourceGroupName: string, clusterName: string, applicationName: string, parameters: models.Application, callback: ServiceCallback<models.Application>): void;
    create(resourceGroupName: string, clusterName: string, applicationName: string, parameters: models.Application, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Application>): void;


    /**
     * Deletes the specified application on the HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} applicationName The constant value for the application name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, clusterName: string, applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified application on the HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} applicationName The constant value for the application name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, clusterName: string, applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, clusterName: string, applicationName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, clusterName: string, applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates applications for the HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} applicationName The constant value for the application name.
     *
     * @param {object} parameters The application create request.
     *
     * @param {string} [parameters.etag] The ETag for the application
     *
     * @param {object} [parameters.tags] The tags for the application.
     *
     * @param {object} [parameters.properties] The properties of the application.
     *
     * @param {object} [parameters.properties.computeProfile] The list of roles in
     * the cluster.
     *
     * @param {array} [parameters.properties.computeProfile.roles] The list of
     * roles in the cluster.
     *
     * @param {array} [parameters.properties.installScriptActions] The list of
     * install script actions.
     *
     * @param {array} [parameters.properties.uninstallScriptActions] The list of
     * uninstall script actions.
     *
     * @param {array} [parameters.properties.httpsEndpoints] The list of
     * application HTTPS endpoints.
     *
     * @param {array} [parameters.properties.sshEndpoints] The list of application
     * SSH endpoints.
     *
     * @param {string} [parameters.properties.applicationType] The application
     * type.
     *
     * @param {array} [parameters.properties.errors] The list of errors.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Application>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, clusterName: string, applicationName: string, parameters: models.Application, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Application>>;

    /**
     * Creates applications for the HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} applicationName The constant value for the application name.
     *
     * @param {object} parameters The application create request.
     *
     * @param {string} [parameters.etag] The ETag for the application
     *
     * @param {object} [parameters.tags] The tags for the application.
     *
     * @param {object} [parameters.properties] The properties of the application.
     *
     * @param {object} [parameters.properties.computeProfile] The list of roles in
     * the cluster.
     *
     * @param {array} [parameters.properties.computeProfile.roles] The list of
     * roles in the cluster.
     *
     * @param {array} [parameters.properties.installScriptActions] The list of
     * install script actions.
     *
     * @param {array} [parameters.properties.uninstallScriptActions] The list of
     * uninstall script actions.
     *
     * @param {array} [parameters.properties.httpsEndpoints] The list of
     * application HTTPS endpoints.
     *
     * @param {array} [parameters.properties.sshEndpoints] The list of application
     * SSH endpoints.
     *
     * @param {string} [parameters.properties.applicationType] The application
     * type.
     *
     * @param {array} [parameters.properties.errors] The list of errors.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Application} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Application} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Application} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, clusterName: string, applicationName: string, parameters: models.Application, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Application>;
    beginCreate(resourceGroupName: string, clusterName: string, applicationName: string, parameters: models.Application, callback: ServiceCallback<models.Application>): void;
    beginCreate(resourceGroupName: string, clusterName: string, applicationName: string, parameters: models.Application, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Application>): void;


    /**
     * Deletes the specified application on the HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} applicationName The constant value for the application name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, clusterName: string, applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified application on the HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} applicationName The constant value for the application name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, clusterName: string, applicationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, clusterName: string, applicationName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, clusterName: string, applicationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all of the applications for the HDInsight cluster.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByClusterNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationListResult>>;

    /**
     * Lists all of the applications for the HDInsight cluster.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByClusterNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationListResult>;
    listByClusterNext(nextPageLink: string, callback: ServiceCallback<models.ApplicationListResult>): void;
    listByClusterNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationListResult>): void;
}

/**
 * @class
 * Locations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the HDInsightManagementClient.
 */
export interface Locations {


    /**
     * Lists the usages for the specified location.
     *
     * @param {string} location The location to get capabilities for.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UsagesListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listUsagesWithHttpOperationResponse(location: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UsagesListResult>>;

    /**
     * Lists the usages for the specified location.
     *
     * @param {string} location The location to get capabilities for.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UsagesListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UsagesListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UsagesListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listUsages(location: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UsagesListResult>;
    listUsages(location: string, callback: ServiceCallback<models.UsagesListResult>): void;
    listUsages(location: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UsagesListResult>): void;
}

/**
 * @class
 * Configurations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the HDInsightManagementClient.
 */
export interface Configurations {


    /**
     * Configures the configuration on the specified cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} configurationName The name of the cluster configuration.
     *
     * @param {object} parameters The cluster configurations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, clusterName: string, configurationName: string, parameters: { [propertyName: string]: string }, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Configures the configuration on the specified cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} configurationName The name of the cluster configuration.
     *
     * @param {object} parameters The cluster configurations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, clusterName: string, configurationName: string, parameters: { [propertyName: string]: string }, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(resourceGroupName: string, clusterName: string, configurationName: string, parameters: { [propertyName: string]: string }, callback: ServiceCallback<void>): void;
    update(resourceGroupName: string, clusterName: string, configurationName: string, parameters: { [propertyName: string]: string }, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * The configuration object for the specified cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} configurationName The name of the cluster configuration.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, clusterName: string, configurationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<{ [propertyName: string]: string }>>;

    /**
     * The configuration object for the specified cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} configurationName The name of the cluster configuration.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, clusterName: string, configurationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<{ [propertyName: string]: string }>;
    get(resourceGroupName: string, clusterName: string, configurationName: string, callback: ServiceCallback<{ [propertyName: string]: string }>): void;
    get(resourceGroupName: string, clusterName: string, configurationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<{ [propertyName: string]: string }>): void;


    /**
     * Configures the configuration on the specified cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} configurationName The name of the cluster configuration.
     *
     * @param {object} parameters The cluster configurations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, clusterName: string, configurationName: string, parameters: { [propertyName: string]: string }, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Configures the configuration on the specified cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} configurationName The name of the cluster configuration.
     *
     * @param {object} parameters The cluster configurations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, clusterName: string, configurationName: string, parameters: { [propertyName: string]: string }, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginUpdate(resourceGroupName: string, clusterName: string, configurationName: string, parameters: { [propertyName: string]: string }, callback: ServiceCallback<void>): void;
    beginUpdate(resourceGroupName: string, clusterName: string, configurationName: string, parameters: { [propertyName: string]: string }, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * Extensions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the HDInsightManagementClient.
 */
export interface Extensions {


    /**
     * Enables the Operations Management Suite (OMS) on the HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} parameters The Operations Management Suite (OMS) workspace
     * parameters.
     *
     * @param {string} [parameters.workspaceId] The Operations Management Suite
     * (OMS) workspace ID.
     *
     * @param {string} [parameters.primaryKey] The Operations Management Suite
     * (OMS) workspace key.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    enableMonitoringWithHttpOperationResponse(resourceGroupName: string, clusterName: string, parameters: models.ClusterMonitoringRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Enables the Operations Management Suite (OMS) on the HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} parameters The Operations Management Suite (OMS) workspace
     * parameters.
     *
     * @param {string} [parameters.workspaceId] The Operations Management Suite
     * (OMS) workspace ID.
     *
     * @param {string} [parameters.primaryKey] The Operations Management Suite
     * (OMS) workspace key.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    enableMonitoring(resourceGroupName: string, clusterName: string, parameters: models.ClusterMonitoringRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    enableMonitoring(resourceGroupName: string, clusterName: string, parameters: models.ClusterMonitoringRequest, callback: ServiceCallback<void>): void;
    enableMonitoring(resourceGroupName: string, clusterName: string, parameters: models.ClusterMonitoringRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the status of Operations Management Suite (OMS) on the HDInsight
     * cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterMonitoringResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMonitoringStatusWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterMonitoringResponse>>;

    /**
     * Gets the status of Operations Management Suite (OMS) on the HDInsight
     * cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterMonitoringResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterMonitoringResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterMonitoringResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMonitoringStatus(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterMonitoringResponse>;
    getMonitoringStatus(resourceGroupName: string, clusterName: string, callback: ServiceCallback<models.ClusterMonitoringResponse>): void;
    getMonitoringStatus(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterMonitoringResponse>): void;


    /**
     * Disables the Operations Management Suite (OMS) on the HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    disableMonitoringWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Disables the Operations Management Suite (OMS) on the HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    disableMonitoring(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    disableMonitoring(resourceGroupName: string, clusterName: string, callback: ServiceCallback<void>): void;
    disableMonitoring(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates an HDInsight cluster extension.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} extensionName The name of the cluster extension.
     *
     * @param {object} parameters The cluster extensions create request.
     *
     * @param {string} [parameters.workspaceId] The workspace ID for the cluster
     * monitoring extension.
     *
     * @param {string} [parameters.primaryKey] The certificate for the cluster
     * monitoring extensions.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, clusterName: string, extensionName: string, parameters: models.Extension, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Creates an HDInsight cluster extension.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} extensionName The name of the cluster extension.
     *
     * @param {object} parameters The cluster extensions create request.
     *
     * @param {string} [parameters.workspaceId] The workspace ID for the cluster
     * monitoring extension.
     *
     * @param {string} [parameters.primaryKey] The certificate for the cluster
     * monitoring extensions.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, clusterName: string, extensionName: string, parameters: models.Extension, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    create(resourceGroupName: string, clusterName: string, extensionName: string, parameters: models.Extension, callback: ServiceCallback<void>): void;
    create(resourceGroupName: string, clusterName: string, extensionName: string, parameters: models.Extension, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the extension properties for the specified HDInsight cluster extension.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} extensionName The name of the cluster extension.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Extension>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, clusterName: string, extensionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Extension>>;

    /**
     * Gets the extension properties for the specified HDInsight cluster extension.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} extensionName The name of the cluster extension.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Extension} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Extension} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Extension} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, clusterName: string, extensionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Extension>;
    get(resourceGroupName: string, clusterName: string, extensionName: string, callback: ServiceCallback<models.Extension>): void;
    get(resourceGroupName: string, clusterName: string, extensionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Extension>): void;


    /**
     * Deletes the specified extension for HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} extensionName The name of the cluster extension.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, clusterName: string, extensionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified extension for HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} extensionName The name of the cluster extension.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, clusterName: string, extensionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, clusterName: string, extensionName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, clusterName: string, extensionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Enables the Operations Management Suite (OMS) on the HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} parameters The Operations Management Suite (OMS) workspace
     * parameters.
     *
     * @param {string} [parameters.workspaceId] The Operations Management Suite
     * (OMS) workspace ID.
     *
     * @param {string} [parameters.primaryKey] The Operations Management Suite
     * (OMS) workspace key.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginEnableMonitoringWithHttpOperationResponse(resourceGroupName: string, clusterName: string, parameters: models.ClusterMonitoringRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Enables the Operations Management Suite (OMS) on the HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} parameters The Operations Management Suite (OMS) workspace
     * parameters.
     *
     * @param {string} [parameters.workspaceId] The Operations Management Suite
     * (OMS) workspace ID.
     *
     * @param {string} [parameters.primaryKey] The Operations Management Suite
     * (OMS) workspace key.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginEnableMonitoring(resourceGroupName: string, clusterName: string, parameters: models.ClusterMonitoringRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginEnableMonitoring(resourceGroupName: string, clusterName: string, parameters: models.ClusterMonitoringRequest, callback: ServiceCallback<void>): void;
    beginEnableMonitoring(resourceGroupName: string, clusterName: string, parameters: models.ClusterMonitoringRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Disables the Operations Management Suite (OMS) on the HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDisableMonitoringWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Disables the Operations Management Suite (OMS) on the HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDisableMonitoring(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDisableMonitoring(resourceGroupName: string, clusterName: string, callback: ServiceCallback<void>): void;
    beginDisableMonitoring(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates an HDInsight cluster extension.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} extensionName The name of the cluster extension.
     *
     * @param {object} parameters The cluster extensions create request.
     *
     * @param {string} [parameters.workspaceId] The workspace ID for the cluster
     * monitoring extension.
     *
     * @param {string} [parameters.primaryKey] The certificate for the cluster
     * monitoring extensions.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, clusterName: string, extensionName: string, parameters: models.Extension, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Creates an HDInsight cluster extension.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} extensionName The name of the cluster extension.
     *
     * @param {object} parameters The cluster extensions create request.
     *
     * @param {string} [parameters.workspaceId] The workspace ID for the cluster
     * monitoring extension.
     *
     * @param {string} [parameters.primaryKey] The certificate for the cluster
     * monitoring extensions.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, clusterName: string, extensionName: string, parameters: models.Extension, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginCreate(resourceGroupName: string, clusterName: string, extensionName: string, parameters: models.Extension, callback: ServiceCallback<void>): void;
    beginCreate(resourceGroupName: string, clusterName: string, extensionName: string, parameters: models.Extension, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Deletes the specified extension for HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} extensionName The name of the cluster extension.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, clusterName: string, extensionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified extension for HDInsight cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} extensionName The name of the cluster extension.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, clusterName: string, extensionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, clusterName: string, extensionName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, clusterName: string, extensionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * ScriptActions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the HDInsightManagementClient.
 */
export interface ScriptActions {


    /**
     * Deletes a specified persisted script action of the cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} scriptName The name of the script.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, clusterName: string, scriptName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a specified persisted script action of the cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} scriptName The name of the script.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, clusterName: string, scriptName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, clusterName: string, scriptName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, clusterName: string, scriptName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all the persisted script actions for the specified cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ScriptActionsList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByClusterWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ScriptActionsList>>;

    /**
     * Lists all the persisted script actions for the specified cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ScriptActionsList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ScriptActionsList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ScriptActionsList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByCluster(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ScriptActionsList>;
    listByCluster(resourceGroupName: string, clusterName: string, callback: ServiceCallback<models.ScriptActionsList>): void;
    listByCluster(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ScriptActionsList>): void;


    /**
     * Gets the script execution detail for the given script execution ID.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} scriptExecutionId The script execution Id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RuntimeScriptActionDetail>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getExecutionDetailWithHttpOperationResponse(resourceGroupName: string, clusterName: string, scriptExecutionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RuntimeScriptActionDetail>>;

    /**
     * Gets the script execution detail for the given script execution ID.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} scriptExecutionId The script execution Id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RuntimeScriptActionDetail} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RuntimeScriptActionDetail} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RuntimeScriptActionDetail} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getExecutionDetail(resourceGroupName: string, clusterName: string, scriptExecutionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RuntimeScriptActionDetail>;
    getExecutionDetail(resourceGroupName: string, clusterName: string, scriptExecutionId: string, callback: ServiceCallback<models.RuntimeScriptActionDetail>): void;
    getExecutionDetail(resourceGroupName: string, clusterName: string, scriptExecutionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RuntimeScriptActionDetail>): void;


    /**
     * Lists all the persisted script actions for the specified cluster.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ScriptActionsList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByClusterNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ScriptActionsList>>;

    /**
     * Lists all the persisted script actions for the specified cluster.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ScriptActionsList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ScriptActionsList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ScriptActionsList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByClusterNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ScriptActionsList>;
    listByClusterNext(nextPageLink: string, callback: ServiceCallback<models.ScriptActionsList>): void;
    listByClusterNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ScriptActionsList>): void;
}

/**
 * @class
 * ScriptExecutionHistory
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the HDInsightManagementClient.
 */
export interface ScriptExecutionHistory {


    /**
     * Lists all scripts' execution history for the specified cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ScriptActionExecutionHistoryList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByClusterWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ScriptActionExecutionHistoryList>>;

    /**
     * Lists all scripts' execution history for the specified cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ScriptActionExecutionHistoryList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ScriptActionExecutionHistoryList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ScriptActionExecutionHistoryList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByCluster(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ScriptActionExecutionHistoryList>;
    listByCluster(resourceGroupName: string, clusterName: string, callback: ServiceCallback<models.ScriptActionExecutionHistoryList>): void;
    listByCluster(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ScriptActionExecutionHistoryList>): void;


    /**
     * Promotes the specified ad-hoc script execution to a persisted script.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} scriptExecutionId The script execution Id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    promoteWithHttpOperationResponse(resourceGroupName: string, clusterName: string, scriptExecutionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Promotes the specified ad-hoc script execution to a persisted script.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster.
     *
     * @param {string} scriptExecutionId The script execution Id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    promote(resourceGroupName: string, clusterName: string, scriptExecutionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    promote(resourceGroupName: string, clusterName: string, scriptExecutionId: string, callback: ServiceCallback<void>): void;
    promote(resourceGroupName: string, clusterName: string, scriptExecutionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all scripts' execution history for the specified cluster.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ScriptActionExecutionHistoryList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByClusterNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ScriptActionExecutionHistoryList>>;

    /**
     * Lists all scripts' execution history for the specified cluster.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ScriptActionExecutionHistoryList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ScriptActionExecutionHistoryList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ScriptActionExecutionHistoryList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByClusterNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ScriptActionExecutionHistoryList>;
    listByClusterNext(nextPageLink: string, callback: ServiceCallback<models.ScriptActionExecutionHistoryList>): void;
    listByClusterNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ScriptActionExecutionHistoryList>): void;
}

/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the HDInsightManagementClient.
 */
export interface Operations {


    /**
     * Lists all of the available HDInsight REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available HDInsight REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(callback: ServiceCallback<models.OperationListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;


    /**
     * Lists all of the available HDInsight REST API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available HDInsight REST API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}
