/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError } from "ms-rest-azure";
import * as moment from "moment";

export {

  BaseResource,
  CloudError
};

/**
 * Raw certificate data.
 */
export interface RawCertificateData {
  /**
   * Specifies the authentication type. Possible values include: 'Invalid', 'ACS', 'AAD',
   * 'AccessControlService', 'AzureActiveDirectory'
   */
  authType?: string;
  /**
   * The base64 encoded certificate raw data string
   */
  certificate?: Buffer;
}

/**
 * Details of the certificate to be uploaded to the vault.
 */
export interface CertificateRequest {
  properties?: RawCertificateData;
}

/**
 * Certificate details representing the Vault credentials.
*/
export interface ResourceCertificateDetails {
  /**
   * The base64 encoded certificate raw data string.
  */
  certificate?: Buffer;
  /**
   * Certificate friendly name.
  */
  friendlyName?: string;
  /**
   * Certificate issuer.
  */
  issuer?: string;
  /**
   * Resource ID of the vault.
  */
  resourceId?: number;
  /**
   * Certificate Subject Name.
  */
  subject?: string;
  /**
   * Certificate thumbprint.
  */
  thumbprint?: string;
  /**
   * Certificate Validity start Date time.
  */
  validFrom?: Date;
  /**
   * Certificate Validity End Date time.
  */
  validTo?: Date;
  /**
   * Polymorphic Discriminator
  */
  authType: string;
}

/**
 * Certificate details representing the Vault credentials for AAD.
*/
export interface ResourceCertificateAndAadDetails extends ResourceCertificateDetails {
  /**
   * AAD tenant authority.
  */
  aadAuthority: string;
  /**
   * AAD tenant Id.
  */
  aadTenantId: string;
  /**
   * AAD service principal clientId.
  */
  servicePrincipalClientId: string;
  /**
   * AAD service principal ObjectId.
  */
  servicePrincipalObjectId: string;
  /**
   * Azure Management Endpoint Audience.
  */
  azureManagementEndpointAudience: string;
}

/**
 * Certificate details representing the Vault credentials for ACS.
*/
export interface ResourceCertificateAndAcsDetails extends ResourceCertificateDetails {
  /**
   * ACS namespace name - tenant for our service.
  */
  globalAcsNamespace: string;
  /**
   * Acs mgmt host name to connect to.
  */
  globalAcsHostName: string;
  /**
   * Global ACS namespace RP realm.
  */
  globalAcsRPRealm: string;
}

/**
 * Certificate corresponding to a vault that can be used by clients to register themselves with the
 * vault.
*/
export interface VaultCertificateResponse extends BaseResource {
  /**
   * Resource name associated with the resource.
  */
  readonly name?: string;
  /**
   * Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/...
  */
  readonly type?: string;
  /**
   * Resource Id represents the complete path to the resource.
  */
  readonly id?: string;
  properties?: ResourceCertificateDetails;
}

/**
 * Summary of the replication job data for this vault.
*/
export interface JobsSummary {
  /**
   * Count of failed jobs.
  */
  failedJobs?: number;
  /**
   * Count of suspended jobs.
  */
  suspendedJobs?: number;
  /**
   * Count of in-progress jobs.
  */
  inProgressJobs?: number;
}

/**
 * Summary of the replication monitoring data for this vault.
*/
export interface MonitoringSummary {
  /**
   * Count of unhealthy VMs.
  */
  unHealthyVmCount?: number;
  /**
   * Count of unhealthy replication providers.
  */
  unHealthyProviderCount?: number;
  /**
   * Count of all critical warnings.
  */
  eventsCount?: number;
  /**
   * Count of all deprecated recovery service providers.
  */
  deprecatedProviderCount?: number;
  /**
   * Count of all the supported recovery service providers.
  */
  supportedProviderCount?: number;
  /**
   * Count of all the unsupported recovery service providers.
  */
  unsupportedProviderCount?: number;
}

/**
 * Replication usages of a vault.
*/
export interface ReplicationUsage {
  /**
   * Summary of the replication monitoring data for this vault.
  */
  monitoringSummary?: MonitoringSummary;
  /**
   * Summary of the replication jobs data for this vault.
  */
  jobsSummary?: JobsSummary;
  /**
   * Number of replication protected items for this vault.
  */
  protectedItemCount?: number;
  /**
   * Number of replication recovery plans for this vault.
  */
  recoveryPlanCount?: number;
  /**
   * Number of servers registered to this vault.
  */
  registeredServersCount?: number;
  /**
   * The authentication type of recovery service providers in the vault.
  */
  recoveryServicesProviderAuthType?: number;
}

/**
 * Localized display information of an operation.
*/
export interface ClientDiscoveryDisplay {
  /**
   * Name of the provider for display purposes
  */
  provider?: string;
  /**
   * ResourceType for which this Operation can be performed.
  */
  resource?: string;
  /**
   * Operations Name itself.
  */
  operation?: string;
  /**
   * Description of the operation having details of what operation is about.
  */
  description?: string;
}

/**
 * Class to represent shoebox log specification in json client discovery.
*/
export interface ClientDiscoveryForLogSpecification {
  /**
   * Name of the log.
  */
  name?: string;
  /**
   * Localized display name
  */
  displayName?: string;
  /**
   * Blobs created in customer storage account per hour
  */
  blobDuration?: string;
}

/**
 * Class to represent shoebox service specification in json client discovery.
*/
export interface ClientDiscoveryForServiceSpecification {
  /**
   * List of log specifications of this operation.
  */
  logSpecifications?: ClientDiscoveryForLogSpecification[];
}

/**
 * Class to represent shoebox properties in json client discovery.
*/
export interface ClientDiscoveryForProperties {
  /**
   * Operation properties.
  */
  serviceSpecification?: ClientDiscoveryForServiceSpecification;
}

/**
 * Available operation details.
*/
export interface ClientDiscoveryValueForSingleApi {
  /**
   * Name of the Operation.
  */
  name?: string;
  /**
   * Contains the localized display information for this particular operation
  */
  display?: ClientDiscoveryDisplay;
  /**
   * The intended executor of the operation;governs the display of the operation in the RBAC UX and
   * the audit logs UX
  */
  origin?: string;
  /**
   * ShoeBox properties for the given operation.
  */
  properties?: ClientDiscoveryForProperties;
}

/**
 * ARM Resource.
*/
export interface Resource extends BaseResource {
  /**
   * Resource Id represents the complete path to the resource.
  */
  readonly id?: string;
  /**
   * Resource name associated with the resource.
  */
  readonly name?: string;
  /**
   * Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/...
  */
  readonly type?: string;
  /**
   * Optional ETag.
  */
  eTag?: string;
}

/**
 * Identifies the unique system identifier for each Azure resource.
*/
export interface Sku {
  /**
   * The Sku name. Possible values include: 'Standard', 'RS0'
  */
  name: string;
}

/**
 * Tracked resource with location.
*/
export interface TrackedResource extends Resource {
  /**
   * Resource location.
  */
  location: string;
  /**
   * Resource tags.
  */
  tags?: { [propertyName: string]: string };
}

/**
 * Tracked resource with location.
*/
export interface PatchTrackedResource extends Resource {
  /**
   * Resource location.
  */
  location?: string;
  /**
   * Resource tags.
  */
  tags?: { [propertyName: string]: string };
}

/**
 * Details for upgrading vault.
*/
export interface UpgradeDetails {
  /**
   * ID of the vault upgrade operation.
  */
  readonly operationId?: string;
  /**
   * UTC time at which the upgrade operation has started.
  */
  readonly startTimeUtc?: Date;
  /**
   * UTC time at which the upgrade operation status was last updated.
  */
  readonly lastUpdatedTimeUtc?: Date;
  /**
   * UTC time at which the upgrade operation has ended.
  */
  readonly endTimeUtc?: Date;
  /**
   * Status of the vault upgrade operation. Possible values include: 'Unknown', 'InProgress',
   * 'Upgraded', 'Failed'
  */
  readonly status?: string;
  /**
   * Message to the user containing information about the upgrade operation.
  */
  readonly message?: string;
  /**
   * The way the vault upgrade was triggered. Possible values include: 'UserTriggered',
   * 'ForcedUpgrade'
  */
  readonly triggerType?: string;
  /**
   * Resource ID of the upgraded vault.
  */
  readonly upgradedResourceId?: string;
  /**
   * Resource ID of the vault before the upgrade.
  */
  readonly previousResourceId?: string;
}

/**
 * Properties of the vault.
*/
export interface VaultProperties {
  /**
   * Provisioning State.
  */
  readonly provisioningState?: string;
  upgradeDetails?: UpgradeDetails;
}

/**
 * Resource information, as returned by the resource provider.
*/
export interface Vault extends TrackedResource {
  properties?: VaultProperties;
  sku?: Sku;
}

/**
 * Patch Resource information, as returned by the resource provider.
*/
export interface PatchVault extends PatchTrackedResource {
  properties?: VaultProperties;
  sku?: Sku;
}

/**
 * Vault extended information.
*/
export interface VaultExtendedInfoResource extends Resource {
  /**
   * Integrity key.
  */
  integrityKey?: string;
  /**
   * Encryption key.
  */
  encryptionKey?: string;
  /**
   * Encryption key thumbprint.
  */
  encryptionKeyThumbprint?: string;
  /**
   * Algorithm for Vault ExtendedInfo
  */
  algorithm?: string;
}

/**
 * The name of usage.
*/
export interface NameInfo {
  /**
   * Value of usage.
  */
  value?: string;
  /**
   * Localized value of usage.
  */
  localizedValue?: string;
}

/**
 * Usages of a vault.
*/
export interface VaultUsage {
  /**
   * Unit of the usage. Possible values include: 'Count', 'Bytes', 'Seconds', 'Percent',
   * 'CountPerSecond', 'BytesPerSecond'
  */
  unit?: string;
  /**
   * Quota period of usage.
  */
  quotaPeriod?: string;
  /**
   * Next reset time of usage.
  */
  nextResetTime?: Date;
  /**
   * Current value of usage.
  */
  currentValue?: number;
  /**
   * Limit of usage.
  */
  limit?: number;
  /**
   * Name of usage.
  */
  name?: NameInfo;
}

/**
 * Replication usages for vault.
*/
export interface ReplicationUsageList extends Array<ReplicationUsage> {
}

/**
 * The response model for a list of Vaults.
*/
export interface VaultList extends Array<Vault> {
  readonly nextLink?: string;
}

/**
 * Operations List response which contains list of available APIs.
*/
export interface ClientDiscoveryResponse extends Array<ClientDiscoveryValueForSingleApi> {
  /**
   * Link to the next chunk of the response
  */
  nextLink?: string;
}

/**
 * Usage for vault.
*/
export interface VaultUsageList extends Array<VaultUsage> {
}
