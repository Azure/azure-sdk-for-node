/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The backup storage config.
 *
 * @extends models['Resource']
 */
class BackupStorageConfig extends models['Resource'] {
  /**
   * Create a BackupStorageConfig.
   * @member {string} [storageModelType] Storage model type. Possible values
   * include: 'Invalid', 'GeoRedundant', 'LocallyRedundant'
   * @member {string} [storageType] Storage type. Possible values include:
   * 'Invalid', 'GeoRedundant', 'LocallyRedundant'
   * @member {string} [storageTypeState] Locked or Unlocked. Once a machine is
   * registered against a resource, the storageTypeState is always Locked.
   * Possible values include: 'Invalid', 'Locked', 'Unlocked'
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of BackupStorageConfig
   *
   * @returns {object} metadata of BackupStorageConfig
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'BackupStorageConfig',
      type: {
        name: 'Composite',
        className: 'BackupStorageConfig',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          eTag: {
            required: false,
            serializedName: 'eTag',
            type: {
              name: 'String'
            }
          },
          storageModelType: {
            required: false,
            serializedName: 'properties.storageModelType',
            type: {
              name: 'String'
            }
          },
          storageType: {
            required: false,
            serializedName: 'properties.storageType',
            type: {
              name: 'String'
            }
          },
          storageTypeState: {
            required: false,
            serializedName: 'properties.storageTypeState',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = BackupStorageConfig;
