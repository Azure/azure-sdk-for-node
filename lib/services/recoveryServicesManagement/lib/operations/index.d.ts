/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * BackupVaultConfigs
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the RecoveryServicesClient.
 */
export interface BackupVaultConfigs {


    /**
     * Fetches vault config.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupVaultConfig>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, vaultName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupVaultConfig>>;

    /**
     * Fetches vault config.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupVaultConfig} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupVaultConfig} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupVaultConfig} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, vaultName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupVaultConfig>;
    get(resourceGroupName: string, vaultName: string, callback: ServiceCallback<models.BackupVaultConfig>): void;
    get(resourceGroupName: string, vaultName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupVaultConfig>): void;


    /**
     * Updates vault config model type.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {object} backupVaultConfig Backup vault config.
     *
     * @param {string} [backupVaultConfig.storageType] Storage type. Possible
     * values include: 'Invalid', 'GeoRedundant', 'LocallyRedundant'
     *
     * @param {string} [backupVaultConfig.storageTypeState] Locked or Unlocked.
     * Once a machine is registered against a resource, the storageTypeState is
     * always Locked. Possible values include: 'Invalid', 'Locked', 'Unlocked'
     *
     * @param {string} [backupVaultConfig.enhancedSecurityState] Enabled or
     * Disabled. Possible values include: 'Invalid', 'Enabled', 'Disabled'
     *
     * @param {string} [backupVaultConfig.eTag] Optional ETag.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupVaultConfig>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, vaultName: string, backupVaultConfig: models.BackupVaultConfig, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupVaultConfig>>;

    /**
     * Updates vault config model type.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {object} backupVaultConfig Backup vault config.
     *
     * @param {string} [backupVaultConfig.storageType] Storage type. Possible
     * values include: 'Invalid', 'GeoRedundant', 'LocallyRedundant'
     *
     * @param {string} [backupVaultConfig.storageTypeState] Locked or Unlocked.
     * Once a machine is registered against a resource, the storageTypeState is
     * always Locked. Possible values include: 'Invalid', 'Locked', 'Unlocked'
     *
     * @param {string} [backupVaultConfig.enhancedSecurityState] Enabled or
     * Disabled. Possible values include: 'Invalid', 'Enabled', 'Disabled'
     *
     * @param {string} [backupVaultConfig.eTag] Optional ETag.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupVaultConfig} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupVaultConfig} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupVaultConfig} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, vaultName: string, backupVaultConfig: models.BackupVaultConfig, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupVaultConfig>;
    update(resourceGroupName: string, vaultName: string, backupVaultConfig: models.BackupVaultConfig, callback: ServiceCallback<models.BackupVaultConfig>): void;
    update(resourceGroupName: string, vaultName: string, backupVaultConfig: models.BackupVaultConfig, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupVaultConfig>): void;
}

/**
 * @class
 * BackupStorageConfigs
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the RecoveryServicesClient.
 */
export interface BackupStorageConfigs {


    /**
     * Fetches resource storage config.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupStorageConfig>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, vaultName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupStorageConfig>>;

    /**
     * Fetches resource storage config.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupStorageConfig} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupStorageConfig} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupStorageConfig} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, vaultName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupStorageConfig>;
    get(resourceGroupName: string, vaultName: string, callback: ServiceCallback<models.BackupStorageConfig>): void;
    get(resourceGroupName: string, vaultName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupStorageConfig>): void;


    /**
     * Updates vault storage model type.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {object} backupStorageConfig Backup storage config.
     *
     * @param {string} [backupStorageConfig.storageModelType] Storage model type.
     * Possible values include: 'Invalid', 'GeoRedundant', 'LocallyRedundant'
     *
     * @param {string} [backupStorageConfig.storageType] Storage type. Possible
     * values include: 'Invalid', 'GeoRedundant', 'LocallyRedundant'
     *
     * @param {string} [backupStorageConfig.storageTypeState] Locked or Unlocked.
     * Once a machine is registered against a resource, the storageTypeState is
     * always Locked. Possible values include: 'Invalid', 'Locked', 'Unlocked'
     *
     * @param {string} [backupStorageConfig.eTag] Optional ETag.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, vaultName: string, backupStorageConfig: models.BackupStorageConfig, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Updates vault storage model type.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {object} backupStorageConfig Backup storage config.
     *
     * @param {string} [backupStorageConfig.storageModelType] Storage model type.
     * Possible values include: 'Invalid', 'GeoRedundant', 'LocallyRedundant'
     *
     * @param {string} [backupStorageConfig.storageType] Storage type. Possible
     * values include: 'Invalid', 'GeoRedundant', 'LocallyRedundant'
     *
     * @param {string} [backupStorageConfig.storageTypeState] Locked or Unlocked.
     * Once a machine is registered against a resource, the storageTypeState is
     * always Locked. Possible values include: 'Invalid', 'Locked', 'Unlocked'
     *
     * @param {string} [backupStorageConfig.eTag] Optional ETag.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, vaultName: string, backupStorageConfig: models.BackupStorageConfig, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(resourceGroupName: string, vaultName: string, backupStorageConfig: models.BackupStorageConfig, callback: ServiceCallback<void>): void;
    update(resourceGroupName: string, vaultName: string, backupStorageConfig: models.BackupStorageConfig, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * VaultCertificates
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the RecoveryServicesClient.
 */
export interface VaultCertificates {


    /**
     * Upload a certificate for a resource.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {string} certificateName Certificate friendly name.
     *
     * @param {object} certificateRequest Input parameters for uploading the vault
     * certificate.
     *
     * @param {object} [certificateRequest.properties]
     *
     * @param {string} [certificateRequest.properties.authType] Specifies the
     * authentication type. Possible values include: 'Invalid', 'ACS', 'AAD',
     * 'AccessControlService', 'AzureActiveDirectory'
     *
     * @param {buffer} [certificateRequest.properties.certificate] The base64
     * encoded certificate raw data string
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VaultCertificateResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, vaultName: string, certificateName: string, certificateRequest: models.CertificateRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VaultCertificateResponse>>;

    /**
     * Upload a certificate for a resource.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {string} certificateName Certificate friendly name.
     *
     * @param {object} certificateRequest Input parameters for uploading the vault
     * certificate.
     *
     * @param {object} [certificateRequest.properties]
     *
     * @param {string} [certificateRequest.properties.authType] Specifies the
     * authentication type. Possible values include: 'Invalid', 'ACS', 'AAD',
     * 'AccessControlService', 'AzureActiveDirectory'
     *
     * @param {buffer} [certificateRequest.properties.certificate] The base64
     * encoded certificate raw data string
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VaultCertificateResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VaultCertificateResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VaultCertificateResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, vaultName: string, certificateName: string, certificateRequest: models.CertificateRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VaultCertificateResponse>;
    create(resourceGroupName: string, vaultName: string, certificateName: string, certificateRequest: models.CertificateRequest, callback: ServiceCallback<models.VaultCertificateResponse>): void;
    create(resourceGroupName: string, vaultName: string, certificateName: string, certificateRequest: models.CertificateRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VaultCertificateResponse>): void;
}

/**
 * @class
 * RegisteredIdentities
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the RecoveryServicesClient.
 */
export interface RegisteredIdentities {


    /**
     * Unregisters the given container from your Recovery Services vault.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {string} identityName Name of the protection container to unregister.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, vaultName: string, identityName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Unregisters the given container from your Recovery Services vault.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {string} identityName Name of the protection container to unregister.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, vaultName: string, identityName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, vaultName: string, identityName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, vaultName: string, identityName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * ReplicationUsages
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the RecoveryServicesClient.
 */
export interface ReplicationUsages {


    /**
     * Fetches the replication usages of the vault.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReplicationUsageList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, vaultName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReplicationUsageList>>;

    /**
     * Fetches the replication usages of the vault.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReplicationUsageList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReplicationUsageList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReplicationUsageList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, vaultName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReplicationUsageList>;
    list(resourceGroupName: string, vaultName: string, callback: ServiceCallback<models.ReplicationUsageList>): void;
    list(resourceGroupName: string, vaultName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReplicationUsageList>): void;
}

/**
 * @class
 * Vaults
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the RecoveryServicesClient.
 */
export interface Vaults {


    /**
     * Fetches all the resources of the specified type in the subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VaultList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionIdWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VaultList>>;

    /**
     * Fetches all the resources of the specified type in the subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VaultList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VaultList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VaultList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscriptionId(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VaultList>;
    listBySubscriptionId(callback: ServiceCallback<models.VaultList>): void;
    listBySubscriptionId(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VaultList>): void;


    /**
     * Retrieve a list of Vaults.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VaultList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VaultList>>;

    /**
     * Retrieve a list of Vaults.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VaultList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VaultList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VaultList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VaultList>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.VaultList>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VaultList>): void;


    /**
     * Get the Vault details.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Vault>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, vaultName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Vault>>;

    /**
     * Get the Vault details.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Vault} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Vault} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Vault} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, vaultName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Vault>;
    get(resourceGroupName: string, vaultName: string, callback: ServiceCallback<models.Vault>): void;
    get(resourceGroupName: string, vaultName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Vault>): void;


    /**
     * Creates or updates a Recovery Services vault.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {object} vault Recovery Services Vault to be created.
     *
     * @param {object} [vault.properties]
     *
     * @param {object} [vault.properties.upgradeDetails]
     *
     * @param {object} [vault.sku]
     *
     * @param {string} vault.sku.name The Sku name. Possible values include:
     * 'Standard', 'RS0'
     *
     * @param {string} vault.location Resource location.
     *
     * @param {object} [vault.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Vault>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, vaultName: string, vault: models.Vault, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Vault>>;

    /**
     * Creates or updates a Recovery Services vault.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {object} vault Recovery Services Vault to be created.
     *
     * @param {object} [vault.properties]
     *
     * @param {object} [vault.properties.upgradeDetails]
     *
     * @param {object} [vault.sku]
     *
     * @param {string} vault.sku.name The Sku name. Possible values include:
     * 'Standard', 'RS0'
     *
     * @param {string} vault.location Resource location.
     *
     * @param {object} [vault.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Vault} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Vault} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Vault} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, vaultName: string, vault: models.Vault, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Vault>;
    createOrUpdate(resourceGroupName: string, vaultName: string, vault: models.Vault, callback: ServiceCallback<models.Vault>): void;
    createOrUpdate(resourceGroupName: string, vaultName: string, vault: models.Vault, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Vault>): void;


    /**
     * Deletes a vault.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, vaultName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a vault.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, vaultName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, vaultName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, vaultName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates the vault.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {object} vault Recovery Services Vault to be created.
     *
     * @param {object} [vault.properties]
     *
     * @param {object} [vault.properties.upgradeDetails]
     *
     * @param {object} [vault.sku]
     *
     * @param {string} vault.sku.name The Sku name. Possible values include:
     * 'Standard', 'RS0'
     *
     * @param {string} vault.location Resource location.
     *
     * @param {object} [vault.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Vault>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, vaultName: string, vault: models.Vault, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Vault>>;

    /**
     * Updates the vault.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {object} vault Recovery Services Vault to be created.
     *
     * @param {object} [vault.properties]
     *
     * @param {object} [vault.properties.upgradeDetails]
     *
     * @param {object} [vault.sku]
     *
     * @param {string} vault.sku.name The Sku name. Possible values include:
     * 'Standard', 'RS0'
     *
     * @param {string} vault.location Resource location.
     *
     * @param {object} [vault.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Vault} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Vault} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Vault} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, vaultName: string, vault: models.Vault, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Vault>;
    update(resourceGroupName: string, vaultName: string, vault: models.Vault, callback: ServiceCallback<models.Vault>): void;
    update(resourceGroupName: string, vaultName: string, vault: models.Vault, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Vault>): void;
}

/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the RecoveryServicesClient.
 */
export interface Operations {


    /**
     * Returns the list of available operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClientDiscoveryResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClientDiscoveryResponse>>;

    /**
     * Returns the list of available operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClientDiscoveryResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClientDiscoveryResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClientDiscoveryResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClientDiscoveryResponse>;
    list(callback: ServiceCallback<models.ClientDiscoveryResponse>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClientDiscoveryResponse>): void;


    /**
     * Returns the list of available operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClientDiscoveryResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClientDiscoveryResponse>>;

    /**
     * Returns the list of available operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClientDiscoveryResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClientDiscoveryResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClientDiscoveryResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClientDiscoveryResponse>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ClientDiscoveryResponse>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClientDiscoveryResponse>): void;
}

/**
 * @class
 * VaultExtendedInfoOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the RecoveryServicesClient.
 */
export interface VaultExtendedInfoOperations {


    /**
     * Get the vault extended info.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VaultExtendedInfoResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, vaultName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VaultExtendedInfoResource>>;

    /**
     * Get the vault extended info.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VaultExtendedInfoResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VaultExtendedInfoResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VaultExtendedInfoResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, vaultName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VaultExtendedInfoResource>;
    get(resourceGroupName: string, vaultName: string, callback: ServiceCallback<models.VaultExtendedInfoResource>): void;
    get(resourceGroupName: string, vaultName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VaultExtendedInfoResource>): void;


    /**
     * Create vault extended info.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {object} resourceResourceExtendedInfoDetails
     * resourceResourceExtendedInfoDetails
     *
     * @param {string} [resourceResourceExtendedInfoDetails.integrityKey] Integrity
     * key.
     *
     * @param {string} [resourceResourceExtendedInfoDetails.encryptionKey]
     * Encryption key.
     *
     * @param {string}
     * [resourceResourceExtendedInfoDetails.encryptionKeyThumbprint] Encryption key
     * thumbprint.
     *
     * @param {string} [resourceResourceExtendedInfoDetails.algorithm] Algorithm.
     *
     * @param {string} [resourceResourceExtendedInfoDetails.eTag] Optional ETag.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VaultExtendedInfoResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, vaultName: string, resourceResourceExtendedInfoDetails: models.VaultExtendedInfoResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VaultExtendedInfoResource>>;

    /**
     * Create vault extended info.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {object} resourceResourceExtendedInfoDetails
     * resourceResourceExtendedInfoDetails
     *
     * @param {string} [resourceResourceExtendedInfoDetails.integrityKey] Integrity
     * key.
     *
     * @param {string} [resourceResourceExtendedInfoDetails.encryptionKey]
     * Encryption key.
     *
     * @param {string}
     * [resourceResourceExtendedInfoDetails.encryptionKeyThumbprint] Encryption key
     * thumbprint.
     *
     * @param {string} [resourceResourceExtendedInfoDetails.algorithm] Algorithm.
     *
     * @param {string} [resourceResourceExtendedInfoDetails.eTag] Optional ETag.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VaultExtendedInfoResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VaultExtendedInfoResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VaultExtendedInfoResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, vaultName: string, resourceResourceExtendedInfoDetails: models.VaultExtendedInfoResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VaultExtendedInfoResource>;
    createOrUpdate(resourceGroupName: string, vaultName: string, resourceResourceExtendedInfoDetails: models.VaultExtendedInfoResource, callback: ServiceCallback<models.VaultExtendedInfoResource>): void;
    createOrUpdate(resourceGroupName: string, vaultName: string, resourceResourceExtendedInfoDetails: models.VaultExtendedInfoResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VaultExtendedInfoResource>): void;


    /**
     * Update vault extended info.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {object} resourceResourceExtendedInfoDetails
     * resourceResourceExtendedInfoDetails
     *
     * @param {string} [resourceResourceExtendedInfoDetails.integrityKey] Integrity
     * key.
     *
     * @param {string} [resourceResourceExtendedInfoDetails.encryptionKey]
     * Encryption key.
     *
     * @param {string}
     * [resourceResourceExtendedInfoDetails.encryptionKeyThumbprint] Encryption key
     * thumbprint.
     *
     * @param {string} [resourceResourceExtendedInfoDetails.algorithm] Algorithm.
     *
     * @param {string} [resourceResourceExtendedInfoDetails.eTag] Optional ETag.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VaultExtendedInfoResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, vaultName: string, resourceResourceExtendedInfoDetails: models.VaultExtendedInfoResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VaultExtendedInfoResource>>;

    /**
     * Update vault extended info.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {object} resourceResourceExtendedInfoDetails
     * resourceResourceExtendedInfoDetails
     *
     * @param {string} [resourceResourceExtendedInfoDetails.integrityKey] Integrity
     * key.
     *
     * @param {string} [resourceResourceExtendedInfoDetails.encryptionKey]
     * Encryption key.
     *
     * @param {string}
     * [resourceResourceExtendedInfoDetails.encryptionKeyThumbprint] Encryption key
     * thumbprint.
     *
     * @param {string} [resourceResourceExtendedInfoDetails.algorithm] Algorithm.
     *
     * @param {string} [resourceResourceExtendedInfoDetails.eTag] Optional ETag.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VaultExtendedInfoResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VaultExtendedInfoResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VaultExtendedInfoResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, vaultName: string, resourceResourceExtendedInfoDetails: models.VaultExtendedInfoResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VaultExtendedInfoResource>;
    update(resourceGroupName: string, vaultName: string, resourceResourceExtendedInfoDetails: models.VaultExtendedInfoResource, callback: ServiceCallback<models.VaultExtendedInfoResource>): void;
    update(resourceGroupName: string, vaultName: string, resourceResourceExtendedInfoDetails: models.VaultExtendedInfoResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VaultExtendedInfoResource>): void;
}

/**
 * @class
 * Usages
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the RecoveryServicesClient.
 */
export interface Usages {


    /**
     * Fetches the usages of the vault.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VaultUsageList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByVaultsWithHttpOperationResponse(resourceGroupName: string, vaultName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VaultUsageList>>;

    /**
     * Fetches the usages of the vault.
     *
     * @param {string} resourceGroupName The name of the resource group where the
     * recovery services vault is present.
     *
     * @param {string} vaultName The name of the recovery services vault.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VaultUsageList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VaultUsageList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VaultUsageList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByVaults(resourceGroupName: string, vaultName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VaultUsageList>;
    listByVaults(resourceGroupName: string, vaultName: string, callback: ServiceCallback<models.VaultUsageList>): void;
    listByVaults(resourceGroupName: string, vaultName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VaultUsageList>): void;
}
