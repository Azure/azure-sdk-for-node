/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * AppCollections
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileEngagementClient.
 */
export interface AppCollections {


    /**
     * Lists app collections in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppCollectionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppCollectionListResult>>;

    /**
     * Lists app collections in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppCollectionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppCollectionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppCollectionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppCollectionListResult>;
    list(callback: ServiceCallback<models.AppCollectionListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppCollectionListResult>): void;


    /**
     * Checks availability of an app collection name in the Engagement domain.
     *
     * @param {object} parameters
     *
     * @param {string} [parameters.name] Name.
     *
     * @param {boolean} [parameters.available] Available.
     *
     * @param {string} [parameters.unavailabilityReason] UnavailabilityReason.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppCollectionNameAvailability>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkNameAvailabilityWithHttpOperationResponse(parameters: models.AppCollectionNameAvailability, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppCollectionNameAvailability>>;

    /**
     * Checks availability of an app collection name in the Engagement domain.
     *
     * @param {object} parameters
     *
     * @param {string} [parameters.name] Name.
     *
     * @param {boolean} [parameters.available] Available.
     *
     * @param {string} [parameters.unavailabilityReason] UnavailabilityReason.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppCollectionNameAvailability} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppCollectionNameAvailability} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppCollectionNameAvailability} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkNameAvailability(parameters: models.AppCollectionNameAvailability, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppCollectionNameAvailability>;
    checkNameAvailability(parameters: models.AppCollectionNameAvailability, callback: ServiceCallback<models.AppCollectionNameAvailability>): void;
    checkNameAvailability(parameters: models.AppCollectionNameAvailability, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppCollectionNameAvailability>): void;


    /**
     * Lists app collections in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppCollectionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppCollectionListResult>>;

    /**
     * Lists app collections in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppCollectionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppCollectionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppCollectionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppCollectionListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.AppCollectionListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppCollectionListResult>): void;
}

/**
 * @class
 * Apps
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileEngagementClient.
 */
export interface Apps {


    /**
     * Lists apps in an appCollection.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, appCollection: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppListResult>>;

    /**
     * Lists apps in an appCollection.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, appCollection: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppListResult>;
    list(resourceGroupName: string, appCollection: string, callback: ServiceCallback<models.AppListResult>): void;
    list(resourceGroupName: string, appCollection: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppListResult>): void;


    /**
     * Lists apps in an appCollection.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppListResult>>;

    /**
     * Lists apps in an appCollection.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.AppListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppListResult>): void;
}

/**
 * @class
 * SupportedPlatforms
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileEngagementClient.
 */
export interface SupportedPlatforms {


    /**
     * Lists supported platforms for Engagement applications.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SupportedPlatformsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SupportedPlatformsListResult>>;

    /**
     * Lists supported platforms for Engagement applications.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SupportedPlatformsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SupportedPlatformsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SupportedPlatformsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SupportedPlatformsListResult>;
    list(callback: ServiceCallback<models.SupportedPlatformsListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SupportedPlatformsListResult>): void;
}

/**
 * @class
 * Campaigns
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileEngagementClient.
 */
export interface Campaigns {


    /**
     * Get the list of campaigns.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {string} kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] Control paging of campaigns, start results at
     * the given offset, defaults to 0 (1st page of data).
     *
     * @param {number} [options.top] Control paging of campaigns, number of
     * campaigns to return with each call. It returns all campaigns by default.
     * When specifying $top parameter, the response contains a `nextLink` property
     * describing the path to get the next page if there are more results.
     *
     * @param {string} [options.filter] Filter can be used to restrict the results
     * to campaigns matching a specific state. The syntax is `$filter=state eq
     * 'draft'`. Valid state values are: draft, scheduled, in-progress, and
     * finished. Only the eq operator and the state property are supported.
     *
     * @param {string} [options.orderby] Sort results by an expression which looks
     * like `$orderby=id asc` (this example is actually the default behavior). The
     * syntax is orderby={property} {direction} or just orderby={property}. The
     * available sorting properties are id, name, state, activatedDate, and
     * finishedDate. The available directions are asc (for ascending order) and
     * desc (for descending order). When not specified the asc direction is used.
     * Only one property at a time can be used for sorting.
     *
     * @param {string} [options.search] Restrict results to campaigns matching the
     * optional `search` expression. This currently performs the search based on
     * the name on the campaign only, case insensitive. If the campaign contains
     * the value of the `search` parameter anywhere in the name, it matches.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CampaignsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, appCollection: string, appName: string, kind: string, options?: { skip? : number, top? : number, filter? : string, orderby? : string, search? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CampaignsListResult>>;

    /**
     * Get the list of campaigns.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {string} kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] Control paging of campaigns, start results at
     * the given offset, defaults to 0 (1st page of data).
     *
     * @param {number} [options.top] Control paging of campaigns, number of
     * campaigns to return with each call. It returns all campaigns by default.
     * When specifying $top parameter, the response contains a `nextLink` property
     * describing the path to get the next page if there are more results.
     *
     * @param {string} [options.filter] Filter can be used to restrict the results
     * to campaigns matching a specific state. The syntax is `$filter=state eq
     * 'draft'`. Valid state values are: draft, scheduled, in-progress, and
     * finished. Only the eq operator and the state property are supported.
     *
     * @param {string} [options.orderby] Sort results by an expression which looks
     * like `$orderby=id asc` (this example is actually the default behavior). The
     * syntax is orderby={property} {direction} or just orderby={property}. The
     * available sorting properties are id, name, state, activatedDate, and
     * finishedDate. The available directions are asc (for ascending order) and
     * desc (for descending order). When not specified the asc direction is used.
     * Only one property at a time can be used for sorting.
     *
     * @param {string} [options.search] Restrict results to campaigns matching the
     * optional `search` expression. This currently performs the search based on
     * the name on the campaign only, case insensitive. If the campaign contains
     * the value of the `search` parameter anywhere in the name, it matches.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CampaignsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CampaignsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CampaignsListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, appCollection: string, appName: string, kind: string, options?: { skip? : number, top? : number, filter? : string, orderby? : string, search? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.CampaignsListResult>;
    list(resourceGroupName: string, appCollection: string, appName: string, kind: string, callback: ServiceCallback<models.CampaignsListResult>): void;
    list(resourceGroupName: string, appCollection: string, appName: string, kind: string, options: { skip? : number, top? : number, filter? : string, orderby? : string, search? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CampaignsListResult>): void;


    /**
     * Create a push campaign (announcement, poll, data push or native push).
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {string} kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     *
     * @param {object} parameters Parameters supplied to the Update Campaign
     * operation.
     *
     * @param {string} [parameters.name] Unique name of the campaign.
     *
     * @param {object} [parameters.audience] Specify which users will be targeted
     * by this campaign. By default, all users will be targeted. If you set
     * `pushMode` property to `manual`, the only thing you can specify in the
     * audience is the push quota filter. An audience is a boolean expression made
     * of criteria (variables) operators (`not`, `and` or `or`) and parenthesis.
     * Additionally, a set of filters can be added to an audience. 65535 bytes max
     * as per JSON encoding.
     *
     *
     * @param {string} [parameters.audience.expression] Boolean expression made of
     * criteria (variables) operators (`not`, `and` or `or`) and parenthesis.
     * Criterion names in the audience expression must start with a capital letter
     * and can only contain alphanumeric (A-Z,a-z,0-9) and underscore (_)
     * characters.
     *
     *
     * @param {object} [parameters.audience.criteria] Criteria by name.
     *
     * @param {array} [parameters.audience.filters] Global filters applied to all
     * devices.
     *
     * @param {string} [parameters.category] Category of the campaign. Categories
     * can be used on the application side to customize campaigns.
     *
     * @param {string} [parameters.pushMode] Announcements/polls only. Defines how
     * the campaign is pushed. Valid values are: * `real-time`: Never ending
     * campaign, the campaign will be delivered  to your existing users and also to
     * your new users. * `one-shot`: In this mode, the campaign will be delivered
     * only to your existing users (campaign will stop after that). * `manual`: In
     * this mode, the campaign will not be pushed automatically to devices. You
     * will have to use the Push campaign command to push the campaign to your
     * end-users. Campaigns can be pushed multiple times to the same device.
     * . Possible values include: 'real-time', 'one-shot', 'manual'
     *
     * @param {string} [parameters.type] Applicable only to announcements and data
     * pushes. Type of announcement. Valid values are: * `text/plain`: Text-only
     * announcement: `body` property should only contain plain text. * `text/html`:
     * HTML announcement: `body` attribute can contain HTML code. * `only_notif`:
     * Notification-only announcement. With this kind of announcements, the `body`,
     * `title`, `actionButtonText` and `exitButtonText` are ignored. Type of data
     * push. Valid values are: * `text/plain`: Text only data push: `body` property
     * must be plain text. * `text/base64`: Base 64 data push: `body` property must
     * be encoded in base 64.
     * . Possible values include: 'text/plain', 'text/html', 'only_notif',
     * 'text/base64'
     *
     * @param {string} [parameters.deliveryTime] Announcements/polls only. Defines
     * when the campaign should be delivered. Valid values are: * `any`: Campaign
     * will be delivered as soon as possible. * `background`: iOS only. Campaign
     * will be only delivered when the application is in background (out of app). *
     * `session`: Campaign will be delivered when the application is running.
     * . Possible values include: 'any', 'background', 'session'
     *
     * @param {array} [parameters.deliveryActivities] Announcements/polls only.
     * Array containing the list of activities in which the campaign can be
     * delivered. deliveryTime must be set to session. If the platform is iOS, this
     * option can also be set if deliveryTime is set to any. In that case, if the
     * campaign is received when the application is launched, it will be delivered
     * only in the specified list of activities.
     *
     *
     * @param {string} [parameters.startTime] The date at which the campaign should
     * be started. The date shall conform to the following format:
     * `yyyy-MM-ddTHH:mm:ssZ`. * If you set pushMode property to manual, this
     * attribute will be ignored. * If you set pushMode property to one-shot, then
     * the timezone attribute must be specified. Example: `2011-11-21 15:23Z`
     *
     *
     * @param {string} [parameters.endTime] The date at which the campaign should
     * be finished. The date shall conform to the following format:
     * `yyyy-MM-ddTHH:mm:ssZ`. Example: `2011-11-21 15:23Z`
     *
     *
     * @param {string} [parameters.timezone] The id of the time zone to use for the
     * startTime and endTime dates. If not provided, the two date attributes will
     * be expressed using the device timezone. Example: America/Los_Angeles
     *
     *
     * @param {string} [parameters.notificationType] Android only. Defines how the
     * notification should be displayed. Valid values are: * `system`: Display the
     * notification using a standard system notification. * `popup`: Display the
     * notification using a in-app banner notification.
     * . Possible values include: 'system', 'popup'
     *
     * @param {boolean} [parameters.notificationIcon] A flag indicating whether or
     * not you want to display the resource icon in notification content.
     *
     * @param {boolean} [parameters.notificationCloseable] A flag indicating
     * whether or not you want the notification to be closeable.
     *
     * @param {boolean} [parameters.notificationVibrate] Android only. A flag
     * indicating whether or not you want the system notification to make a
     * vibration. The notificationType property must be set to system.
     *
     * @param {boolean} [parameters.notificationSound] * `Android`: A flag
     * indicating whether or not you want the system notification to make a sound.
     * The `notificationType` property must be set to `system`. * `iOS`: A flag
     * indicating whether or not you want the native Apple Push notification to
     * make a sound. The `deliveryTime` property must be set to `any` or
     * `background`. This will play the 'default' sound. If you want to play a
     * custom sound, see the `notificationOptions` property. * `Windows`: A flag
     * indicating whether or not you want the native Windows Notification Service
     * to make a sound. The `deliveryTime` property must be set to `any`.
     *
     *
     * @param {boolean} [parameters.notificationBadge] A flag indicating whether or
     * not you want the native Apple Push notification to update the badge icon to
     * the number of unread messages. The `deliveryTime` property must be set to
     * `any` or `background`.
     *
     *
     * @param {object} [parameters.localization] Push campaigns can be localized
     * using an optional JSON object. The JSON key is a two-character language code
     * as specified by the ISO 639-1 standard. The corresponding value is an object
     * containing the localizable properties.
     *
     *
     * @param {array} [parameters.questions] Poll questions.
     *
     * @param {string} [parameters.notificationTitle] Title of the notification.
     * This field supports appInfo markers.
     *
     * @param {string} [parameters.notificationMessage] Message of the
     * notification. This field supports appInfo markers.
     *
     * @param {buffer} [parameters.notificationImage] Optional image encoded in
     * base 64. Usually included in the right part of in app notifications (or as a
     * banner if there is neither text nor content icon). For Android system
     * notifications, the image is used as the large icon (displayed only on
     * Android 3+).
     *
     *
     * @param {object} [parameters.notificationOptions] Additional platform
     * specific options.
     *
     * @param {string} [parameters.notificationOptions.bigText] Android 4.1+ only.
     * Multi line message shown in expanded notifications on Android 4.1+ devices.
     * The `notificationType` property must be set to `system`.
     *
     *
     * @param {string} [parameters.notificationOptions.bigPicture] URL of a remote
     * image displayed in expanded notifications on
     * Android 4.1+ devices with the following constraints:
     * * The URL length is limited to 2000 characters.
     * * The image size must be less than 4 MiB.
     * * The following MIME types are supported:
     * ** image/png
     * ** image/jpeg
     * ** image/gif
     * ** image/webp
     * ** image/bmp
     * ** image/x-bmp
     * ** image/x-ms-bmp
     * * URL scheme must be HTTP or HTTPS (with valid SSL certificate).
     * * Incompatible with `bigText`, only one of the fields can be set.
     * * The `notificationType` property must be set to `system`.
     *
     *
     * @param {string} [parameters.notificationOptions.sound] iOS only. The name of
     * a sound file in the application bundle. The sound in this file is played as
     * an alert. If the sound file doesn’t exist or default is specified as the
     * value, the default alert sound is played. The audio must be in one of the
     * audio data formats that are compatible with system sounds. The
     * `deliveryTime` property must be set to `any` or `background`.
     *
     *
     * @param {string} [parameters.notificationOptions.actionText] The action text
     * is the title of the right button of the alert or the value of the unlock
     * slider, where the value replaces 'unlock' in 'slide to unlock'. 'View'
     * (localized to the preferred language) is used as the default value. The
     * `deliveryTime` property must be set to `any` or `background`.
     *
     *
     * @param {string} [parameters.title] Title of the announcement or poll. This
     * field supports appInfo markers.
     *
     * @param {string} [parameters.body] Body of the text/web announcement, poll or
     * data push. This field supports appInfo markers.
     *
     * @param {string} [parameters.actionButtonText] Text of the action button for
     * text/web announcements and polls (answer button).
     *
     * @param {string} [parameters.exitButtonText] Text of the exit button for
     * text/web announcements and polls.
     *
     * @param {string} [parameters.actionUrl] URL to launch when the announcement
     * is actioned.
     *
     * @param {object} [parameters.payload] Native push payload.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CampaignStateResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, appCollection: string, appName: string, kind: string, parameters: models.Campaign, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CampaignStateResult>>;

    /**
     * Create a push campaign (announcement, poll, data push or native push).
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {string} kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     *
     * @param {object} parameters Parameters supplied to the Update Campaign
     * operation.
     *
     * @param {string} [parameters.name] Unique name of the campaign.
     *
     * @param {object} [parameters.audience] Specify which users will be targeted
     * by this campaign. By default, all users will be targeted. If you set
     * `pushMode` property to `manual`, the only thing you can specify in the
     * audience is the push quota filter. An audience is a boolean expression made
     * of criteria (variables) operators (`not`, `and` or `or`) and parenthesis.
     * Additionally, a set of filters can be added to an audience. 65535 bytes max
     * as per JSON encoding.
     *
     *
     * @param {string} [parameters.audience.expression] Boolean expression made of
     * criteria (variables) operators (`not`, `and` or `or`) and parenthesis.
     * Criterion names in the audience expression must start with a capital letter
     * and can only contain alphanumeric (A-Z,a-z,0-9) and underscore (_)
     * characters.
     *
     *
     * @param {object} [parameters.audience.criteria] Criteria by name.
     *
     * @param {array} [parameters.audience.filters] Global filters applied to all
     * devices.
     *
     * @param {string} [parameters.category] Category of the campaign. Categories
     * can be used on the application side to customize campaigns.
     *
     * @param {string} [parameters.pushMode] Announcements/polls only. Defines how
     * the campaign is pushed. Valid values are: * `real-time`: Never ending
     * campaign, the campaign will be delivered  to your existing users and also to
     * your new users. * `one-shot`: In this mode, the campaign will be delivered
     * only to your existing users (campaign will stop after that). * `manual`: In
     * this mode, the campaign will not be pushed automatically to devices. You
     * will have to use the Push campaign command to push the campaign to your
     * end-users. Campaigns can be pushed multiple times to the same device.
     * . Possible values include: 'real-time', 'one-shot', 'manual'
     *
     * @param {string} [parameters.type] Applicable only to announcements and data
     * pushes. Type of announcement. Valid values are: * `text/plain`: Text-only
     * announcement: `body` property should only contain plain text. * `text/html`:
     * HTML announcement: `body` attribute can contain HTML code. * `only_notif`:
     * Notification-only announcement. With this kind of announcements, the `body`,
     * `title`, `actionButtonText` and `exitButtonText` are ignored. Type of data
     * push. Valid values are: * `text/plain`: Text only data push: `body` property
     * must be plain text. * `text/base64`: Base 64 data push: `body` property must
     * be encoded in base 64.
     * . Possible values include: 'text/plain', 'text/html', 'only_notif',
     * 'text/base64'
     *
     * @param {string} [parameters.deliveryTime] Announcements/polls only. Defines
     * when the campaign should be delivered. Valid values are: * `any`: Campaign
     * will be delivered as soon as possible. * `background`: iOS only. Campaign
     * will be only delivered when the application is in background (out of app). *
     * `session`: Campaign will be delivered when the application is running.
     * . Possible values include: 'any', 'background', 'session'
     *
     * @param {array} [parameters.deliveryActivities] Announcements/polls only.
     * Array containing the list of activities in which the campaign can be
     * delivered. deliveryTime must be set to session. If the platform is iOS, this
     * option can also be set if deliveryTime is set to any. In that case, if the
     * campaign is received when the application is launched, it will be delivered
     * only in the specified list of activities.
     *
     *
     * @param {string} [parameters.startTime] The date at which the campaign should
     * be started. The date shall conform to the following format:
     * `yyyy-MM-ddTHH:mm:ssZ`. * If you set pushMode property to manual, this
     * attribute will be ignored. * If you set pushMode property to one-shot, then
     * the timezone attribute must be specified. Example: `2011-11-21 15:23Z`
     *
     *
     * @param {string} [parameters.endTime] The date at which the campaign should
     * be finished. The date shall conform to the following format:
     * `yyyy-MM-ddTHH:mm:ssZ`. Example: `2011-11-21 15:23Z`
     *
     *
     * @param {string} [parameters.timezone] The id of the time zone to use for the
     * startTime and endTime dates. If not provided, the two date attributes will
     * be expressed using the device timezone. Example: America/Los_Angeles
     *
     *
     * @param {string} [parameters.notificationType] Android only. Defines how the
     * notification should be displayed. Valid values are: * `system`: Display the
     * notification using a standard system notification. * `popup`: Display the
     * notification using a in-app banner notification.
     * . Possible values include: 'system', 'popup'
     *
     * @param {boolean} [parameters.notificationIcon] A flag indicating whether or
     * not you want to display the resource icon in notification content.
     *
     * @param {boolean} [parameters.notificationCloseable] A flag indicating
     * whether or not you want the notification to be closeable.
     *
     * @param {boolean} [parameters.notificationVibrate] Android only. A flag
     * indicating whether or not you want the system notification to make a
     * vibration. The notificationType property must be set to system.
     *
     * @param {boolean} [parameters.notificationSound] * `Android`: A flag
     * indicating whether or not you want the system notification to make a sound.
     * The `notificationType` property must be set to `system`. * `iOS`: A flag
     * indicating whether or not you want the native Apple Push notification to
     * make a sound. The `deliveryTime` property must be set to `any` or
     * `background`. This will play the 'default' sound. If you want to play a
     * custom sound, see the `notificationOptions` property. * `Windows`: A flag
     * indicating whether or not you want the native Windows Notification Service
     * to make a sound. The `deliveryTime` property must be set to `any`.
     *
     *
     * @param {boolean} [parameters.notificationBadge] A flag indicating whether or
     * not you want the native Apple Push notification to update the badge icon to
     * the number of unread messages. The `deliveryTime` property must be set to
     * `any` or `background`.
     *
     *
     * @param {object} [parameters.localization] Push campaigns can be localized
     * using an optional JSON object. The JSON key is a two-character language code
     * as specified by the ISO 639-1 standard. The corresponding value is an object
     * containing the localizable properties.
     *
     *
     * @param {array} [parameters.questions] Poll questions.
     *
     * @param {string} [parameters.notificationTitle] Title of the notification.
     * This field supports appInfo markers.
     *
     * @param {string} [parameters.notificationMessage] Message of the
     * notification. This field supports appInfo markers.
     *
     * @param {buffer} [parameters.notificationImage] Optional image encoded in
     * base 64. Usually included in the right part of in app notifications (or as a
     * banner if there is neither text nor content icon). For Android system
     * notifications, the image is used as the large icon (displayed only on
     * Android 3+).
     *
     *
     * @param {object} [parameters.notificationOptions] Additional platform
     * specific options.
     *
     * @param {string} [parameters.notificationOptions.bigText] Android 4.1+ only.
     * Multi line message shown in expanded notifications on Android 4.1+ devices.
     * The `notificationType` property must be set to `system`.
     *
     *
     * @param {string} [parameters.notificationOptions.bigPicture] URL of a remote
     * image displayed in expanded notifications on
     * Android 4.1+ devices with the following constraints:
     * * The URL length is limited to 2000 characters.
     * * The image size must be less than 4 MiB.
     * * The following MIME types are supported:
     * ** image/png
     * ** image/jpeg
     * ** image/gif
     * ** image/webp
     * ** image/bmp
     * ** image/x-bmp
     * ** image/x-ms-bmp
     * * URL scheme must be HTTP or HTTPS (with valid SSL certificate).
     * * Incompatible with `bigText`, only one of the fields can be set.
     * * The `notificationType` property must be set to `system`.
     *
     *
     * @param {string} [parameters.notificationOptions.sound] iOS only. The name of
     * a sound file in the application bundle. The sound in this file is played as
     * an alert. If the sound file doesn’t exist or default is specified as the
     * value, the default alert sound is played. The audio must be in one of the
     * audio data formats that are compatible with system sounds. The
     * `deliveryTime` property must be set to `any` or `background`.
     *
     *
     * @param {string} [parameters.notificationOptions.actionText] The action text
     * is the title of the right button of the alert or the value of the unlock
     * slider, where the value replaces 'unlock' in 'slide to unlock'. 'View'
     * (localized to the preferred language) is used as the default value. The
     * `deliveryTime` property must be set to `any` or `background`.
     *
     *
     * @param {string} [parameters.title] Title of the announcement or poll. This
     * field supports appInfo markers.
     *
     * @param {string} [parameters.body] Body of the text/web announcement, poll or
     * data push. This field supports appInfo markers.
     *
     * @param {string} [parameters.actionButtonText] Text of the action button for
     * text/web announcements and polls (answer button).
     *
     * @param {string} [parameters.exitButtonText] Text of the exit button for
     * text/web announcements and polls.
     *
     * @param {string} [parameters.actionUrl] URL to launch when the announcement
     * is actioned.
     *
     * @param {object} [parameters.payload] Native push payload.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CampaignStateResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CampaignStateResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CampaignStateResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, appCollection: string, appName: string, kind: string, parameters: models.Campaign, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CampaignStateResult>;
    create(resourceGroupName: string, appCollection: string, appName: string, kind: string, parameters: models.Campaign, callback: ServiceCallback<models.CampaignStateResult>): void;
    create(resourceGroupName: string, appCollection: string, appName: string, kind: string, parameters: models.Campaign, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CampaignStateResult>): void;


    /**
     * The Get campaign operation retrieves information about a previously created
     * campaign.
     *
     * @param {string} kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     *
     * @param {number} id Campaign identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CampaignResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(kind: string, id: number, resourceGroupName: string, appCollection: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CampaignResult>>;

    /**
     * The Get campaign operation retrieves information about a previously created
     * campaign.
     *
     * @param {string} kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     *
     * @param {number} id Campaign identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CampaignResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CampaignResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CampaignResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(kind: string, id: number, resourceGroupName: string, appCollection: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CampaignResult>;
    get(kind: string, id: number, resourceGroupName: string, appCollection: string, appName: string, callback: ServiceCallback<models.CampaignResult>): void;
    get(kind: string, id: number, resourceGroupName: string, appCollection: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CampaignResult>): void;


    /**
     * Update an existing push campaign (announcement, poll, data push or native
     * push).
     *
     * @param {string} kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     *
     * @param {number} id Campaign identifier.
     *
     * @param {object} parameters Parameters supplied to the Update Campaign
     * operation.
     *
     * @param {string} [parameters.name] Unique name of the campaign.
     *
     * @param {object} [parameters.audience] Specify which users will be targeted
     * by this campaign. By default, all users will be targeted. If you set
     * `pushMode` property to `manual`, the only thing you can specify in the
     * audience is the push quota filter. An audience is a boolean expression made
     * of criteria (variables) operators (`not`, `and` or `or`) and parenthesis.
     * Additionally, a set of filters can be added to an audience. 65535 bytes max
     * as per JSON encoding.
     *
     *
     * @param {string} [parameters.audience.expression] Boolean expression made of
     * criteria (variables) operators (`not`, `and` or `or`) and parenthesis.
     * Criterion names in the audience expression must start with a capital letter
     * and can only contain alphanumeric (A-Z,a-z,0-9) and underscore (_)
     * characters.
     *
     *
     * @param {object} [parameters.audience.criteria] Criteria by name.
     *
     * @param {array} [parameters.audience.filters] Global filters applied to all
     * devices.
     *
     * @param {string} [parameters.category] Category of the campaign. Categories
     * can be used on the application side to customize campaigns.
     *
     * @param {string} [parameters.pushMode] Announcements/polls only. Defines how
     * the campaign is pushed. Valid values are: * `real-time`: Never ending
     * campaign, the campaign will be delivered  to your existing users and also to
     * your new users. * `one-shot`: In this mode, the campaign will be delivered
     * only to your existing users (campaign will stop after that). * `manual`: In
     * this mode, the campaign will not be pushed automatically to devices. You
     * will have to use the Push campaign command to push the campaign to your
     * end-users. Campaigns can be pushed multiple times to the same device.
     * . Possible values include: 'real-time', 'one-shot', 'manual'
     *
     * @param {string} [parameters.type] Applicable only to announcements and data
     * pushes. Type of announcement. Valid values are: * `text/plain`: Text-only
     * announcement: `body` property should only contain plain text. * `text/html`:
     * HTML announcement: `body` attribute can contain HTML code. * `only_notif`:
     * Notification-only announcement. With this kind of announcements, the `body`,
     * `title`, `actionButtonText` and `exitButtonText` are ignored. Type of data
     * push. Valid values are: * `text/plain`: Text only data push: `body` property
     * must be plain text. * `text/base64`: Base 64 data push: `body` property must
     * be encoded in base 64.
     * . Possible values include: 'text/plain', 'text/html', 'only_notif',
     * 'text/base64'
     *
     * @param {string} [parameters.deliveryTime] Announcements/polls only. Defines
     * when the campaign should be delivered. Valid values are: * `any`: Campaign
     * will be delivered as soon as possible. * `background`: iOS only. Campaign
     * will be only delivered when the application is in background (out of app). *
     * `session`: Campaign will be delivered when the application is running.
     * . Possible values include: 'any', 'background', 'session'
     *
     * @param {array} [parameters.deliveryActivities] Announcements/polls only.
     * Array containing the list of activities in which the campaign can be
     * delivered. deliveryTime must be set to session. If the platform is iOS, this
     * option can also be set if deliveryTime is set to any. In that case, if the
     * campaign is received when the application is launched, it will be delivered
     * only in the specified list of activities.
     *
     *
     * @param {string} [parameters.startTime] The date at which the campaign should
     * be started. The date shall conform to the following format:
     * `yyyy-MM-ddTHH:mm:ssZ`. * If you set pushMode property to manual, this
     * attribute will be ignored. * If you set pushMode property to one-shot, then
     * the timezone attribute must be specified. Example: `2011-11-21 15:23Z`
     *
     *
     * @param {string} [parameters.endTime] The date at which the campaign should
     * be finished. The date shall conform to the following format:
     * `yyyy-MM-ddTHH:mm:ssZ`. Example: `2011-11-21 15:23Z`
     *
     *
     * @param {string} [parameters.timezone] The id of the time zone to use for the
     * startTime and endTime dates. If not provided, the two date attributes will
     * be expressed using the device timezone. Example: America/Los_Angeles
     *
     *
     * @param {string} [parameters.notificationType] Android only. Defines how the
     * notification should be displayed. Valid values are: * `system`: Display the
     * notification using a standard system notification. * `popup`: Display the
     * notification using a in-app banner notification.
     * . Possible values include: 'system', 'popup'
     *
     * @param {boolean} [parameters.notificationIcon] A flag indicating whether or
     * not you want to display the resource icon in notification content.
     *
     * @param {boolean} [parameters.notificationCloseable] A flag indicating
     * whether or not you want the notification to be closeable.
     *
     * @param {boolean} [parameters.notificationVibrate] Android only. A flag
     * indicating whether or not you want the system notification to make a
     * vibration. The notificationType property must be set to system.
     *
     * @param {boolean} [parameters.notificationSound] * `Android`: A flag
     * indicating whether or not you want the system notification to make a sound.
     * The `notificationType` property must be set to `system`. * `iOS`: A flag
     * indicating whether or not you want the native Apple Push notification to
     * make a sound. The `deliveryTime` property must be set to `any` or
     * `background`. This will play the 'default' sound. If you want to play a
     * custom sound, see the `notificationOptions` property. * `Windows`: A flag
     * indicating whether or not you want the native Windows Notification Service
     * to make a sound. The `deliveryTime` property must be set to `any`.
     *
     *
     * @param {boolean} [parameters.notificationBadge] A flag indicating whether or
     * not you want the native Apple Push notification to update the badge icon to
     * the number of unread messages. The `deliveryTime` property must be set to
     * `any` or `background`.
     *
     *
     * @param {object} [parameters.localization] Push campaigns can be localized
     * using an optional JSON object. The JSON key is a two-character language code
     * as specified by the ISO 639-1 standard. The corresponding value is an object
     * containing the localizable properties.
     *
     *
     * @param {array} [parameters.questions] Poll questions.
     *
     * @param {string} [parameters.notificationTitle] Title of the notification.
     * This field supports appInfo markers.
     *
     * @param {string} [parameters.notificationMessage] Message of the
     * notification. This field supports appInfo markers.
     *
     * @param {buffer} [parameters.notificationImage] Optional image encoded in
     * base 64. Usually included in the right part of in app notifications (or as a
     * banner if there is neither text nor content icon). For Android system
     * notifications, the image is used as the large icon (displayed only on
     * Android 3+).
     *
     *
     * @param {object} [parameters.notificationOptions] Additional platform
     * specific options.
     *
     * @param {string} [parameters.notificationOptions.bigText] Android 4.1+ only.
     * Multi line message shown in expanded notifications on Android 4.1+ devices.
     * The `notificationType` property must be set to `system`.
     *
     *
     * @param {string} [parameters.notificationOptions.bigPicture] URL of a remote
     * image displayed in expanded notifications on
     * Android 4.1+ devices with the following constraints:
     * * The URL length is limited to 2000 characters.
     * * The image size must be less than 4 MiB.
     * * The following MIME types are supported:
     * ** image/png
     * ** image/jpeg
     * ** image/gif
     * ** image/webp
     * ** image/bmp
     * ** image/x-bmp
     * ** image/x-ms-bmp
     * * URL scheme must be HTTP or HTTPS (with valid SSL certificate).
     * * Incompatible with `bigText`, only one of the fields can be set.
     * * The `notificationType` property must be set to `system`.
     *
     *
     * @param {string} [parameters.notificationOptions.sound] iOS only. The name of
     * a sound file in the application bundle. The sound in this file is played as
     * an alert. If the sound file doesn’t exist or default is specified as the
     * value, the default alert sound is played. The audio must be in one of the
     * audio data formats that are compatible with system sounds. The
     * `deliveryTime` property must be set to `any` or `background`.
     *
     *
     * @param {string} [parameters.notificationOptions.actionText] The action text
     * is the title of the right button of the alert or the value of the unlock
     * slider, where the value replaces 'unlock' in 'slide to unlock'. 'View'
     * (localized to the preferred language) is used as the default value. The
     * `deliveryTime` property must be set to `any` or `background`.
     *
     *
     * @param {string} [parameters.title] Title of the announcement or poll. This
     * field supports appInfo markers.
     *
     * @param {string} [parameters.body] Body of the text/web announcement, poll or
     * data push. This field supports appInfo markers.
     *
     * @param {string} [parameters.actionButtonText] Text of the action button for
     * text/web announcements and polls (answer button).
     *
     * @param {string} [parameters.exitButtonText] Text of the exit button for
     * text/web announcements and polls.
     *
     * @param {string} [parameters.actionUrl] URL to launch when the announcement
     * is actioned.
     *
     * @param {object} [parameters.payload] Native push payload.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CampaignStateResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(kind: string, id: number, parameters: models.Campaign, resourceGroupName: string, appCollection: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CampaignStateResult>>;

    /**
     * Update an existing push campaign (announcement, poll, data push or native
     * push).
     *
     * @param {string} kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     *
     * @param {number} id Campaign identifier.
     *
     * @param {object} parameters Parameters supplied to the Update Campaign
     * operation.
     *
     * @param {string} [parameters.name] Unique name of the campaign.
     *
     * @param {object} [parameters.audience] Specify which users will be targeted
     * by this campaign. By default, all users will be targeted. If you set
     * `pushMode` property to `manual`, the only thing you can specify in the
     * audience is the push quota filter. An audience is a boolean expression made
     * of criteria (variables) operators (`not`, `and` or `or`) and parenthesis.
     * Additionally, a set of filters can be added to an audience. 65535 bytes max
     * as per JSON encoding.
     *
     *
     * @param {string} [parameters.audience.expression] Boolean expression made of
     * criteria (variables) operators (`not`, `and` or `or`) and parenthesis.
     * Criterion names in the audience expression must start with a capital letter
     * and can only contain alphanumeric (A-Z,a-z,0-9) and underscore (_)
     * characters.
     *
     *
     * @param {object} [parameters.audience.criteria] Criteria by name.
     *
     * @param {array} [parameters.audience.filters] Global filters applied to all
     * devices.
     *
     * @param {string} [parameters.category] Category of the campaign. Categories
     * can be used on the application side to customize campaigns.
     *
     * @param {string} [parameters.pushMode] Announcements/polls only. Defines how
     * the campaign is pushed. Valid values are: * `real-time`: Never ending
     * campaign, the campaign will be delivered  to your existing users and also to
     * your new users. * `one-shot`: In this mode, the campaign will be delivered
     * only to your existing users (campaign will stop after that). * `manual`: In
     * this mode, the campaign will not be pushed automatically to devices. You
     * will have to use the Push campaign command to push the campaign to your
     * end-users. Campaigns can be pushed multiple times to the same device.
     * . Possible values include: 'real-time', 'one-shot', 'manual'
     *
     * @param {string} [parameters.type] Applicable only to announcements and data
     * pushes. Type of announcement. Valid values are: * `text/plain`: Text-only
     * announcement: `body` property should only contain plain text. * `text/html`:
     * HTML announcement: `body` attribute can contain HTML code. * `only_notif`:
     * Notification-only announcement. With this kind of announcements, the `body`,
     * `title`, `actionButtonText` and `exitButtonText` are ignored. Type of data
     * push. Valid values are: * `text/plain`: Text only data push: `body` property
     * must be plain text. * `text/base64`: Base 64 data push: `body` property must
     * be encoded in base 64.
     * . Possible values include: 'text/plain', 'text/html', 'only_notif',
     * 'text/base64'
     *
     * @param {string} [parameters.deliveryTime] Announcements/polls only. Defines
     * when the campaign should be delivered. Valid values are: * `any`: Campaign
     * will be delivered as soon as possible. * `background`: iOS only. Campaign
     * will be only delivered when the application is in background (out of app). *
     * `session`: Campaign will be delivered when the application is running.
     * . Possible values include: 'any', 'background', 'session'
     *
     * @param {array} [parameters.deliveryActivities] Announcements/polls only.
     * Array containing the list of activities in which the campaign can be
     * delivered. deliveryTime must be set to session. If the platform is iOS, this
     * option can also be set if deliveryTime is set to any. In that case, if the
     * campaign is received when the application is launched, it will be delivered
     * only in the specified list of activities.
     *
     *
     * @param {string} [parameters.startTime] The date at which the campaign should
     * be started. The date shall conform to the following format:
     * `yyyy-MM-ddTHH:mm:ssZ`. * If you set pushMode property to manual, this
     * attribute will be ignored. * If you set pushMode property to one-shot, then
     * the timezone attribute must be specified. Example: `2011-11-21 15:23Z`
     *
     *
     * @param {string} [parameters.endTime] The date at which the campaign should
     * be finished. The date shall conform to the following format:
     * `yyyy-MM-ddTHH:mm:ssZ`. Example: `2011-11-21 15:23Z`
     *
     *
     * @param {string} [parameters.timezone] The id of the time zone to use for the
     * startTime and endTime dates. If not provided, the two date attributes will
     * be expressed using the device timezone. Example: America/Los_Angeles
     *
     *
     * @param {string} [parameters.notificationType] Android only. Defines how the
     * notification should be displayed. Valid values are: * `system`: Display the
     * notification using a standard system notification. * `popup`: Display the
     * notification using a in-app banner notification.
     * . Possible values include: 'system', 'popup'
     *
     * @param {boolean} [parameters.notificationIcon] A flag indicating whether or
     * not you want to display the resource icon in notification content.
     *
     * @param {boolean} [parameters.notificationCloseable] A flag indicating
     * whether or not you want the notification to be closeable.
     *
     * @param {boolean} [parameters.notificationVibrate] Android only. A flag
     * indicating whether or not you want the system notification to make a
     * vibration. The notificationType property must be set to system.
     *
     * @param {boolean} [parameters.notificationSound] * `Android`: A flag
     * indicating whether or not you want the system notification to make a sound.
     * The `notificationType` property must be set to `system`. * `iOS`: A flag
     * indicating whether or not you want the native Apple Push notification to
     * make a sound. The `deliveryTime` property must be set to `any` or
     * `background`. This will play the 'default' sound. If you want to play a
     * custom sound, see the `notificationOptions` property. * `Windows`: A flag
     * indicating whether or not you want the native Windows Notification Service
     * to make a sound. The `deliveryTime` property must be set to `any`.
     *
     *
     * @param {boolean} [parameters.notificationBadge] A flag indicating whether or
     * not you want the native Apple Push notification to update the badge icon to
     * the number of unread messages. The `deliveryTime` property must be set to
     * `any` or `background`.
     *
     *
     * @param {object} [parameters.localization] Push campaigns can be localized
     * using an optional JSON object. The JSON key is a two-character language code
     * as specified by the ISO 639-1 standard. The corresponding value is an object
     * containing the localizable properties.
     *
     *
     * @param {array} [parameters.questions] Poll questions.
     *
     * @param {string} [parameters.notificationTitle] Title of the notification.
     * This field supports appInfo markers.
     *
     * @param {string} [parameters.notificationMessage] Message of the
     * notification. This field supports appInfo markers.
     *
     * @param {buffer} [parameters.notificationImage] Optional image encoded in
     * base 64. Usually included in the right part of in app notifications (or as a
     * banner if there is neither text nor content icon). For Android system
     * notifications, the image is used as the large icon (displayed only on
     * Android 3+).
     *
     *
     * @param {object} [parameters.notificationOptions] Additional platform
     * specific options.
     *
     * @param {string} [parameters.notificationOptions.bigText] Android 4.1+ only.
     * Multi line message shown in expanded notifications on Android 4.1+ devices.
     * The `notificationType` property must be set to `system`.
     *
     *
     * @param {string} [parameters.notificationOptions.bigPicture] URL of a remote
     * image displayed in expanded notifications on
     * Android 4.1+ devices with the following constraints:
     * * The URL length is limited to 2000 characters.
     * * The image size must be less than 4 MiB.
     * * The following MIME types are supported:
     * ** image/png
     * ** image/jpeg
     * ** image/gif
     * ** image/webp
     * ** image/bmp
     * ** image/x-bmp
     * ** image/x-ms-bmp
     * * URL scheme must be HTTP or HTTPS (with valid SSL certificate).
     * * Incompatible with `bigText`, only one of the fields can be set.
     * * The `notificationType` property must be set to `system`.
     *
     *
     * @param {string} [parameters.notificationOptions.sound] iOS only. The name of
     * a sound file in the application bundle. The sound in this file is played as
     * an alert. If the sound file doesn’t exist or default is specified as the
     * value, the default alert sound is played. The audio must be in one of the
     * audio data formats that are compatible with system sounds. The
     * `deliveryTime` property must be set to `any` or `background`.
     *
     *
     * @param {string} [parameters.notificationOptions.actionText] The action text
     * is the title of the right button of the alert or the value of the unlock
     * slider, where the value replaces 'unlock' in 'slide to unlock'. 'View'
     * (localized to the preferred language) is used as the default value. The
     * `deliveryTime` property must be set to `any` or `background`.
     *
     *
     * @param {string} [parameters.title] Title of the announcement or poll. This
     * field supports appInfo markers.
     *
     * @param {string} [parameters.body] Body of the text/web announcement, poll or
     * data push. This field supports appInfo markers.
     *
     * @param {string} [parameters.actionButtonText] Text of the action button for
     * text/web announcements and polls (answer button).
     *
     * @param {string} [parameters.exitButtonText] Text of the exit button for
     * text/web announcements and polls.
     *
     * @param {string} [parameters.actionUrl] URL to launch when the announcement
     * is actioned.
     *
     * @param {object} [parameters.payload] Native push payload.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CampaignStateResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CampaignStateResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CampaignStateResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(kind: string, id: number, parameters: models.Campaign, resourceGroupName: string, appCollection: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CampaignStateResult>;
    update(kind: string, id: number, parameters: models.Campaign, resourceGroupName: string, appCollection: string, appName: string, callback: ServiceCallback<models.CampaignStateResult>): void;
    update(kind: string, id: number, parameters: models.Campaign, resourceGroupName: string, appCollection: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CampaignStateResult>): void;


    /**
     * Delete a campaign previously created by a call to Create campaign.
     *
     * @param {string} kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     *
     * @param {number} id Campaign identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(kind: string, id: number, resourceGroupName: string, appCollection: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete a campaign previously created by a call to Create campaign.
     *
     * @param {string} kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     *
     * @param {number} id Campaign identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(kind: string, id: number, resourceGroupName: string, appCollection: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(kind: string, id: number, resourceGroupName: string, appCollection: string, appName: string, callback: ServiceCallback<void>): void;
    deleteMethod(kind: string, id: number, resourceGroupName: string, appCollection: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * The Get campaign operation retrieves information about a previously created
     * campaign.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {string} kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     *
     * @param {string} name Campaign name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CampaignResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getByNameWithHttpOperationResponse(resourceGroupName: string, appCollection: string, appName: string, kind: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CampaignResult>>;

    /**
     * The Get campaign operation retrieves information about a previously created
     * campaign.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {string} kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     *
     * @param {string} name Campaign name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CampaignResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CampaignResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CampaignResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getByName(resourceGroupName: string, appCollection: string, appName: string, kind: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CampaignResult>;
    getByName(resourceGroupName: string, appCollection: string, appName: string, kind: string, name: string, callback: ServiceCallback<models.CampaignResult>): void;
    getByName(resourceGroupName: string, appCollection: string, appName: string, kind: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CampaignResult>): void;


    /**
     * Test an existing campaign (created with Create campaign) on a set of
     * devices.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {string} kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     *
     * @param {number} id Campaign identifier.
     *
     * @param {object} parameters Parameters supplied to the Test Campaign
     * operation.
     *
     * @param {string} parameters.deviceId Device identifier (as returned by the
     * SDK).
     *
     * @param {string} [parameters.lang] The language to test expressed using ISO
     * 639-1 code. The default language of the campaign will be used if the
     * parameter is not provided.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CampaignStateResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    testSavedWithHttpOperationResponse(resourceGroupName: string, appCollection: string, appName: string, kind: string, id: number, parameters: models.CampaignTestSavedParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CampaignStateResult>>;

    /**
     * Test an existing campaign (created with Create campaign) on a set of
     * devices.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {string} kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     *
     * @param {number} id Campaign identifier.
     *
     * @param {object} parameters Parameters supplied to the Test Campaign
     * operation.
     *
     * @param {string} parameters.deviceId Device identifier (as returned by the
     * SDK).
     *
     * @param {string} [parameters.lang] The language to test expressed using ISO
     * 639-1 code. The default language of the campaign will be used if the
     * parameter is not provided.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CampaignStateResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CampaignStateResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CampaignStateResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    testSaved(resourceGroupName: string, appCollection: string, appName: string, kind: string, id: number, parameters: models.CampaignTestSavedParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CampaignStateResult>;
    testSaved(resourceGroupName: string, appCollection: string, appName: string, kind: string, id: number, parameters: models.CampaignTestSavedParameters, callback: ServiceCallback<models.CampaignStateResult>): void;
    testSaved(resourceGroupName: string, appCollection: string, appName: string, kind: string, id: number, parameters: models.CampaignTestSavedParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CampaignStateResult>): void;


    /**
     * Test a new campaign on a set of devices.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {string} kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     *
     * @param {object} parameters Parameters supplied to the Test Campaign
     * operation.
     *
     * @param {object} parameters.data
     *
     * @param {string} [parameters.data.name] Unique name of the campaign.
     *
     * @param {object} [parameters.data.audience] Specify which users will be
     * targeted by this campaign. By default, all users will be targeted. If you
     * set `pushMode` property to `manual`, the only thing you can specify in the
     * audience is the push quota filter. An audience is a boolean expression made
     * of criteria (variables) operators (`not`, `and` or `or`) and parenthesis.
     * Additionally, a set of filters can be added to an audience. 65535 bytes max
     * as per JSON encoding.
     *
     *
     * @param {string} [parameters.data.audience.expression] Boolean expression
     * made of criteria (variables) operators (`not`, `and` or `or`) and
     * parenthesis. Criterion names in the audience expression must start with a
     * capital letter and can only contain alphanumeric (A-Z,a-z,0-9) and
     * underscore (_) characters.
     *
     *
     * @param {object} [parameters.data.audience.criteria] Criteria by name.
     *
     * @param {array} [parameters.data.audience.filters] Global filters applied to
     * all devices.
     *
     * @param {string} [parameters.data.category] Category of the campaign.
     * Categories can be used on the application side to customize campaigns.
     *
     * @param {string} [parameters.data.pushMode] Announcements/polls only. Defines
     * how the campaign is pushed. Valid values are: * `real-time`: Never ending
     * campaign, the campaign will be delivered  to your existing users and also to
     * your new users. * `one-shot`: In this mode, the campaign will be delivered
     * only to your existing users (campaign will stop after that). * `manual`: In
     * this mode, the campaign will not be pushed automatically to devices. You
     * will have to use the Push campaign command to push the campaign to your
     * end-users. Campaigns can be pushed multiple times to the same device.
     * . Possible values include: 'real-time', 'one-shot', 'manual'
     *
     * @param {string} [parameters.data.type] Applicable only to announcements and
     * data pushes. Type of announcement. Valid values are: * `text/plain`:
     * Text-only announcement: `body` property should only contain plain text. *
     * `text/html`: HTML announcement: `body` attribute can contain HTML code. *
     * `only_notif`: Notification-only announcement. With this kind of
     * announcements, the `body`, `title`, `actionButtonText` and `exitButtonText`
     * are ignored. Type of data push. Valid values are: * `text/plain`: Text only
     * data push: `body` property must be plain text. * `text/base64`: Base 64 data
     * push: `body` property must be encoded in base 64.
     * . Possible values include: 'text/plain', 'text/html', 'only_notif',
     * 'text/base64'
     *
     * @param {string} [parameters.data.deliveryTime] Announcements/polls only.
     * Defines when the campaign should be delivered. Valid values are: * `any`:
     * Campaign will be delivered as soon as possible. * `background`: iOS only.
     * Campaign will be only delivered when the application is in background (out
     * of app). * `session`: Campaign will be delivered when the application is
     * running.
     * . Possible values include: 'any', 'background', 'session'
     *
     * @param {array} [parameters.data.deliveryActivities] Announcements/polls
     * only. Array containing the list of activities in which the campaign can be
     * delivered. deliveryTime must be set to session. If the platform is iOS, this
     * option can also be set if deliveryTime is set to any. In that case, if the
     * campaign is received when the application is launched, it will be delivered
     * only in the specified list of activities.
     *
     *
     * @param {string} [parameters.data.startTime] The date at which the campaign
     * should be started. The date shall conform to the following format:
     * `yyyy-MM-ddTHH:mm:ssZ`. * If you set pushMode property to manual, this
     * attribute will be ignored. * If you set pushMode property to one-shot, then
     * the timezone attribute must be specified. Example: `2011-11-21 15:23Z`
     *
     *
     * @param {string} [parameters.data.endTime] The date at which the campaign
     * should be finished. The date shall conform to the following format:
     * `yyyy-MM-ddTHH:mm:ssZ`. Example: `2011-11-21 15:23Z`
     *
     *
     * @param {string} [parameters.data.timezone] The id of the time zone to use
     * for the startTime and endTime dates. If not provided, the two date
     * attributes will be expressed using the device timezone. Example:
     * America/Los_Angeles
     *
     *
     * @param {string} [parameters.data.notificationType] Android only. Defines how
     * the notification should be displayed. Valid values are: * `system`: Display
     * the notification using a standard system notification. * `popup`: Display
     * the notification using a in-app banner notification.
     * . Possible values include: 'system', 'popup'
     *
     * @param {boolean} [parameters.data.notificationIcon] A flag indicating
     * whether or not you want to display the resource icon in notification
     * content.
     *
     * @param {boolean} [parameters.data.notificationCloseable] A flag indicating
     * whether or not you want the notification to be closeable.
     *
     * @param {boolean} [parameters.data.notificationVibrate] Android only. A flag
     * indicating whether or not you want the system notification to make a
     * vibration. The notificationType property must be set to system.
     *
     * @param {boolean} [parameters.data.notificationSound] * `Android`: A flag
     * indicating whether or not you want the system notification to make a sound.
     * The `notificationType` property must be set to `system`. * `iOS`: A flag
     * indicating whether or not you want the native Apple Push notification to
     * make a sound. The `deliveryTime` property must be set to `any` or
     * `background`. This will play the 'default' sound. If you want to play a
     * custom sound, see the `notificationOptions` property. * `Windows`: A flag
     * indicating whether or not you want the native Windows Notification Service
     * to make a sound. The `deliveryTime` property must be set to `any`.
     *
     *
     * @param {boolean} [parameters.data.notificationBadge] A flag indicating
     * whether or not you want the native Apple Push notification to update the
     * badge icon to the number of unread messages. The `deliveryTime` property
     * must be set to `any` or `background`.
     *
     *
     * @param {object} [parameters.data.localization] Push campaigns can be
     * localized using an optional JSON object. The JSON key is a two-character
     * language code as specified by the ISO 639-1 standard. The corresponding
     * value is an object containing the localizable properties.
     *
     *
     * @param {array} [parameters.data.questions] Poll questions.
     *
     * @param {string} [parameters.data.notificationTitle] Title of the
     * notification. This field supports appInfo markers.
     *
     * @param {string} [parameters.data.notificationMessage] Message of the
     * notification. This field supports appInfo markers.
     *
     * @param {buffer} [parameters.data.notificationImage] Optional image encoded
     * in base 64. Usually included in the right part of in app notifications (or
     * as a banner if there is neither text nor content icon). For Android system
     * notifications, the image is used as the large icon (displayed only on
     * Android 3+).
     *
     *
     * @param {object} [parameters.data.notificationOptions] Additional platform
     * specific options.
     *
     * @param {string} [parameters.data.notificationOptions.bigText] Android 4.1+
     * only. Multi line message shown in expanded notifications on Android 4.1+
     * devices. The `notificationType` property must be set to `system`.
     *
     *
     * @param {string} [parameters.data.notificationOptions.bigPicture] URL of a
     * remote image displayed in expanded notifications on
     * Android 4.1+ devices with the following constraints:
     * * The URL length is limited to 2000 characters.
     * * The image size must be less than 4 MiB.
     * * The following MIME types are supported:
     * ** image/png
     * ** image/jpeg
     * ** image/gif
     * ** image/webp
     * ** image/bmp
     * ** image/x-bmp
     * ** image/x-ms-bmp
     * * URL scheme must be HTTP or HTTPS (with valid SSL certificate).
     * * Incompatible with `bigText`, only one of the fields can be set.
     * * The `notificationType` property must be set to `system`.
     *
     *
     * @param {string} [parameters.data.notificationOptions.sound] iOS only. The
     * name of a sound file in the application bundle. The sound in this file is
     * played as an alert. If the sound file doesn’t exist or default is specified
     * as the value, the default alert sound is played. The audio must be in one of
     * the audio data formats that are compatible with system sounds. The
     * `deliveryTime` property must be set to `any` or `background`.
     *
     *
     * @param {string} [parameters.data.notificationOptions.actionText] The action
     * text is the title of the right button of the alert or the value of the
     * unlock slider, where the value replaces 'unlock' in 'slide to unlock'.
     * 'View' (localized to the preferred language) is used as the default value.
     * The `deliveryTime` property must be set to `any` or `background`.
     *
     *
     * @param {string} [parameters.data.title] Title of the announcement or poll.
     * This field supports appInfo markers.
     *
     * @param {string} [parameters.data.body] Body of the text/web announcement,
     * poll or data push. This field supports appInfo markers.
     *
     * @param {string} [parameters.data.actionButtonText] Text of the action button
     * for text/web announcements and polls (answer button).
     *
     * @param {string} [parameters.data.exitButtonText] Text of the exit button for
     * text/web announcements and polls.
     *
     * @param {string} [parameters.data.actionUrl] URL to launch when the
     * announcement is actioned.
     *
     * @param {object} [parameters.data.payload] Native push payload.
     *
     * @param {string} parameters.deviceId Device identifier (as returned by the
     * SDK).
     *
     * @param {string} [parameters.lang] The language to test expressed using ISO
     * 639-1 code. The default language of the campaign will be used if the
     * parameter is not provided.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CampaignState>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    testNewWithHttpOperationResponse(resourceGroupName: string, appCollection: string, appName: string, kind: string, parameters: models.CampaignTestNewParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CampaignState>>;

    /**
     * Test a new campaign on a set of devices.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {string} kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     *
     * @param {object} parameters Parameters supplied to the Test Campaign
     * operation.
     *
     * @param {object} parameters.data
     *
     * @param {string} [parameters.data.name] Unique name of the campaign.
     *
     * @param {object} [parameters.data.audience] Specify which users will be
     * targeted by this campaign. By default, all users will be targeted. If you
     * set `pushMode` property to `manual`, the only thing you can specify in the
     * audience is the push quota filter. An audience is a boolean expression made
     * of criteria (variables) operators (`not`, `and` or `or`) and parenthesis.
     * Additionally, a set of filters can be added to an audience. 65535 bytes max
     * as per JSON encoding.
     *
     *
     * @param {string} [parameters.data.audience.expression] Boolean expression
     * made of criteria (variables) operators (`not`, `and` or `or`) and
     * parenthesis. Criterion names in the audience expression must start with a
     * capital letter and can only contain alphanumeric (A-Z,a-z,0-9) and
     * underscore (_) characters.
     *
     *
     * @param {object} [parameters.data.audience.criteria] Criteria by name.
     *
     * @param {array} [parameters.data.audience.filters] Global filters applied to
     * all devices.
     *
     * @param {string} [parameters.data.category] Category of the campaign.
     * Categories can be used on the application side to customize campaigns.
     *
     * @param {string} [parameters.data.pushMode] Announcements/polls only. Defines
     * how the campaign is pushed. Valid values are: * `real-time`: Never ending
     * campaign, the campaign will be delivered  to your existing users and also to
     * your new users. * `one-shot`: In this mode, the campaign will be delivered
     * only to your existing users (campaign will stop after that). * `manual`: In
     * this mode, the campaign will not be pushed automatically to devices. You
     * will have to use the Push campaign command to push the campaign to your
     * end-users. Campaigns can be pushed multiple times to the same device.
     * . Possible values include: 'real-time', 'one-shot', 'manual'
     *
     * @param {string} [parameters.data.type] Applicable only to announcements and
     * data pushes. Type of announcement. Valid values are: * `text/plain`:
     * Text-only announcement: `body` property should only contain plain text. *
     * `text/html`: HTML announcement: `body` attribute can contain HTML code. *
     * `only_notif`: Notification-only announcement. With this kind of
     * announcements, the `body`, `title`, `actionButtonText` and `exitButtonText`
     * are ignored. Type of data push. Valid values are: * `text/plain`: Text only
     * data push: `body` property must be plain text. * `text/base64`: Base 64 data
     * push: `body` property must be encoded in base 64.
     * . Possible values include: 'text/plain', 'text/html', 'only_notif',
     * 'text/base64'
     *
     * @param {string} [parameters.data.deliveryTime] Announcements/polls only.
     * Defines when the campaign should be delivered. Valid values are: * `any`:
     * Campaign will be delivered as soon as possible. * `background`: iOS only.
     * Campaign will be only delivered when the application is in background (out
     * of app). * `session`: Campaign will be delivered when the application is
     * running.
     * . Possible values include: 'any', 'background', 'session'
     *
     * @param {array} [parameters.data.deliveryActivities] Announcements/polls
     * only. Array containing the list of activities in which the campaign can be
     * delivered. deliveryTime must be set to session. If the platform is iOS, this
     * option can also be set if deliveryTime is set to any. In that case, if the
     * campaign is received when the application is launched, it will be delivered
     * only in the specified list of activities.
     *
     *
     * @param {string} [parameters.data.startTime] The date at which the campaign
     * should be started. The date shall conform to the following format:
     * `yyyy-MM-ddTHH:mm:ssZ`. * If you set pushMode property to manual, this
     * attribute will be ignored. * If you set pushMode property to one-shot, then
     * the timezone attribute must be specified. Example: `2011-11-21 15:23Z`
     *
     *
     * @param {string} [parameters.data.endTime] The date at which the campaign
     * should be finished. The date shall conform to the following format:
     * `yyyy-MM-ddTHH:mm:ssZ`. Example: `2011-11-21 15:23Z`
     *
     *
     * @param {string} [parameters.data.timezone] The id of the time zone to use
     * for the startTime and endTime dates. If not provided, the two date
     * attributes will be expressed using the device timezone. Example:
     * America/Los_Angeles
     *
     *
     * @param {string} [parameters.data.notificationType] Android only. Defines how
     * the notification should be displayed. Valid values are: * `system`: Display
     * the notification using a standard system notification. * `popup`: Display
     * the notification using a in-app banner notification.
     * . Possible values include: 'system', 'popup'
     *
     * @param {boolean} [parameters.data.notificationIcon] A flag indicating
     * whether or not you want to display the resource icon in notification
     * content.
     *
     * @param {boolean} [parameters.data.notificationCloseable] A flag indicating
     * whether or not you want the notification to be closeable.
     *
     * @param {boolean} [parameters.data.notificationVibrate] Android only. A flag
     * indicating whether or not you want the system notification to make a
     * vibration. The notificationType property must be set to system.
     *
     * @param {boolean} [parameters.data.notificationSound] * `Android`: A flag
     * indicating whether or not you want the system notification to make a sound.
     * The `notificationType` property must be set to `system`. * `iOS`: A flag
     * indicating whether or not you want the native Apple Push notification to
     * make a sound. The `deliveryTime` property must be set to `any` or
     * `background`. This will play the 'default' sound. If you want to play a
     * custom sound, see the `notificationOptions` property. * `Windows`: A flag
     * indicating whether or not you want the native Windows Notification Service
     * to make a sound. The `deliveryTime` property must be set to `any`.
     *
     *
     * @param {boolean} [parameters.data.notificationBadge] A flag indicating
     * whether or not you want the native Apple Push notification to update the
     * badge icon to the number of unread messages. The `deliveryTime` property
     * must be set to `any` or `background`.
     *
     *
     * @param {object} [parameters.data.localization] Push campaigns can be
     * localized using an optional JSON object. The JSON key is a two-character
     * language code as specified by the ISO 639-1 standard. The corresponding
     * value is an object containing the localizable properties.
     *
     *
     * @param {array} [parameters.data.questions] Poll questions.
     *
     * @param {string} [parameters.data.notificationTitle] Title of the
     * notification. This field supports appInfo markers.
     *
     * @param {string} [parameters.data.notificationMessage] Message of the
     * notification. This field supports appInfo markers.
     *
     * @param {buffer} [parameters.data.notificationImage] Optional image encoded
     * in base 64. Usually included in the right part of in app notifications (or
     * as a banner if there is neither text nor content icon). For Android system
     * notifications, the image is used as the large icon (displayed only on
     * Android 3+).
     *
     *
     * @param {object} [parameters.data.notificationOptions] Additional platform
     * specific options.
     *
     * @param {string} [parameters.data.notificationOptions.bigText] Android 4.1+
     * only. Multi line message shown in expanded notifications on Android 4.1+
     * devices. The `notificationType` property must be set to `system`.
     *
     *
     * @param {string} [parameters.data.notificationOptions.bigPicture] URL of a
     * remote image displayed in expanded notifications on
     * Android 4.1+ devices with the following constraints:
     * * The URL length is limited to 2000 characters.
     * * The image size must be less than 4 MiB.
     * * The following MIME types are supported:
     * ** image/png
     * ** image/jpeg
     * ** image/gif
     * ** image/webp
     * ** image/bmp
     * ** image/x-bmp
     * ** image/x-ms-bmp
     * * URL scheme must be HTTP or HTTPS (with valid SSL certificate).
     * * Incompatible with `bigText`, only one of the fields can be set.
     * * The `notificationType` property must be set to `system`.
     *
     *
     * @param {string} [parameters.data.notificationOptions.sound] iOS only. The
     * name of a sound file in the application bundle. The sound in this file is
     * played as an alert. If the sound file doesn’t exist or default is specified
     * as the value, the default alert sound is played. The audio must be in one of
     * the audio data formats that are compatible with system sounds. The
     * `deliveryTime` property must be set to `any` or `background`.
     *
     *
     * @param {string} [parameters.data.notificationOptions.actionText] The action
     * text is the title of the right button of the alert or the value of the
     * unlock slider, where the value replaces 'unlock' in 'slide to unlock'.
     * 'View' (localized to the preferred language) is used as the default value.
     * The `deliveryTime` property must be set to `any` or `background`.
     *
     *
     * @param {string} [parameters.data.title] Title of the announcement or poll.
     * This field supports appInfo markers.
     *
     * @param {string} [parameters.data.body] Body of the text/web announcement,
     * poll or data push. This field supports appInfo markers.
     *
     * @param {string} [parameters.data.actionButtonText] Text of the action button
     * for text/web announcements and polls (answer button).
     *
     * @param {string} [parameters.data.exitButtonText] Text of the exit button for
     * text/web announcements and polls.
     *
     * @param {string} [parameters.data.actionUrl] URL to launch when the
     * announcement is actioned.
     *
     * @param {object} [parameters.data.payload] Native push payload.
     *
     * @param {string} parameters.deviceId Device identifier (as returned by the
     * SDK).
     *
     * @param {string} [parameters.lang] The language to test expressed using ISO
     * 639-1 code. The default language of the campaign will be used if the
     * parameter is not provided.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CampaignState} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CampaignState} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CampaignState} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    testNew(resourceGroupName: string, appCollection: string, appName: string, kind: string, parameters: models.CampaignTestNewParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CampaignState>;
    testNew(resourceGroupName: string, appCollection: string, appName: string, kind: string, parameters: models.CampaignTestNewParameters, callback: ServiceCallback<models.CampaignState>): void;
    testNew(resourceGroupName: string, appCollection: string, appName: string, kind: string, parameters: models.CampaignTestNewParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CampaignState>): void;


    /**
     * Activate a campaign previously created by a call to Create campaign.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {string} kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     *
     * @param {number} id Campaign identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CampaignStateResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    activateWithHttpOperationResponse(resourceGroupName: string, appCollection: string, appName: string, kind: string, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CampaignStateResult>>;

    /**
     * Activate a campaign previously created by a call to Create campaign.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {string} kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     *
     * @param {number} id Campaign identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CampaignStateResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CampaignStateResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CampaignStateResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    activate(resourceGroupName: string, appCollection: string, appName: string, kind: string, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CampaignStateResult>;
    activate(resourceGroupName: string, appCollection: string, appName: string, kind: string, id: number, callback: ServiceCallback<models.CampaignStateResult>): void;
    activate(resourceGroupName: string, appCollection: string, appName: string, kind: string, id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CampaignStateResult>): void;


    /**
     * Suspend a push campaign previously activated by a call to Activate campaign.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {string} kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     *
     * @param {number} id Campaign identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CampaignStateResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    suspendWithHttpOperationResponse(resourceGroupName: string, appCollection: string, appName: string, kind: string, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CampaignStateResult>>;

    /**
     * Suspend a push campaign previously activated by a call to Activate campaign.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {string} kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     *
     * @param {number} id Campaign identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CampaignStateResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CampaignStateResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CampaignStateResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    suspend(resourceGroupName: string, appCollection: string, appName: string, kind: string, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CampaignStateResult>;
    suspend(resourceGroupName: string, appCollection: string, appName: string, kind: string, id: number, callback: ServiceCallback<models.CampaignStateResult>): void;
    suspend(resourceGroupName: string, appCollection: string, appName: string, kind: string, id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CampaignStateResult>): void;


    /**
     * Push a previously saved campaign (created with Create campaign) to a set of
     * devices.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {string} kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     *
     * @param {number} id Campaign identifier.
     *
     * @param {object} parameters Parameters supplied to the Push Campaign
     * operation.
     *
     * @param {array} parameters.deviceIds Device identifiers to push as a JSON
     * array of strings. Note that if you want to push the same campaign several
     * times to the same device, you need to make several API calls.
     *
     *
     * @param {object} [parameters.data] Alternative campaign's content to use
     * instead of the referenced campaign. All campaign's properties can be
     * overridden except for the following: `name`, `manualPush`, `audience`,
     * `startTime` and `timezone`. `endTime` can be overridden while keeping
     * original `timezone` parameter. The effect is to change the client side
     * expiration of the received campaign for the specific devices. If your
     * campaign is a *poll*, the provided data should contain the same number of
     * questions and choices that the one you created with the create command.
     * Please note that all the push messages created using this parameter will
     * expire after 4 weeks at maximum (`endTime` property of the campaign will be
     * used if lower than 4 weeks in the future).
     *
     * @param {string} [parameters.data.name] Unique name of the campaign.
     *
     * @param {object} [parameters.data.audience] Specify which users will be
     * targeted by this campaign. By default, all users will be targeted. If you
     * set `pushMode` property to `manual`, the only thing you can specify in the
     * audience is the push quota filter. An audience is a boolean expression made
     * of criteria (variables) operators (`not`, `and` or `or`) and parenthesis.
     * Additionally, a set of filters can be added to an audience. 65535 bytes max
     * as per JSON encoding.
     *
     *
     * @param {string} [parameters.data.audience.expression] Boolean expression
     * made of criteria (variables) operators (`not`, `and` or `or`) and
     * parenthesis. Criterion names in the audience expression must start with a
     * capital letter and can only contain alphanumeric (A-Z,a-z,0-9) and
     * underscore (_) characters.
     *
     *
     * @param {object} [parameters.data.audience.criteria] Criteria by name.
     *
     * @param {array} [parameters.data.audience.filters] Global filters applied to
     * all devices.
     *
     * @param {string} [parameters.data.category] Category of the campaign.
     * Categories can be used on the application side to customize campaigns.
     *
     * @param {string} [parameters.data.pushMode] Announcements/polls only. Defines
     * how the campaign is pushed. Valid values are: * `real-time`: Never ending
     * campaign, the campaign will be delivered  to your existing users and also to
     * your new users. * `one-shot`: In this mode, the campaign will be delivered
     * only to your existing users (campaign will stop after that). * `manual`: In
     * this mode, the campaign will not be pushed automatically to devices. You
     * will have to use the Push campaign command to push the campaign to your
     * end-users. Campaigns can be pushed multiple times to the same device.
     * . Possible values include: 'real-time', 'one-shot', 'manual'
     *
     * @param {string} [parameters.data.type] Applicable only to announcements and
     * data pushes. Type of announcement. Valid values are: * `text/plain`:
     * Text-only announcement: `body` property should only contain plain text. *
     * `text/html`: HTML announcement: `body` attribute can contain HTML code. *
     * `only_notif`: Notification-only announcement. With this kind of
     * announcements, the `body`, `title`, `actionButtonText` and `exitButtonText`
     * are ignored. Type of data push. Valid values are: * `text/plain`: Text only
     * data push: `body` property must be plain text. * `text/base64`: Base 64 data
     * push: `body` property must be encoded in base 64.
     * . Possible values include: 'text/plain', 'text/html', 'only_notif',
     * 'text/base64'
     *
     * @param {string} [parameters.data.deliveryTime] Announcements/polls only.
     * Defines when the campaign should be delivered. Valid values are: * `any`:
     * Campaign will be delivered as soon as possible. * `background`: iOS only.
     * Campaign will be only delivered when the application is in background (out
     * of app). * `session`: Campaign will be delivered when the application is
     * running.
     * . Possible values include: 'any', 'background', 'session'
     *
     * @param {array} [parameters.data.deliveryActivities] Announcements/polls
     * only. Array containing the list of activities in which the campaign can be
     * delivered. deliveryTime must be set to session. If the platform is iOS, this
     * option can also be set if deliveryTime is set to any. In that case, if the
     * campaign is received when the application is launched, it will be delivered
     * only in the specified list of activities.
     *
     *
     * @param {string} [parameters.data.startTime] The date at which the campaign
     * should be started. The date shall conform to the following format:
     * `yyyy-MM-ddTHH:mm:ssZ`. * If you set pushMode property to manual, this
     * attribute will be ignored. * If you set pushMode property to one-shot, then
     * the timezone attribute must be specified. Example: `2011-11-21 15:23Z`
     *
     *
     * @param {string} [parameters.data.endTime] The date at which the campaign
     * should be finished. The date shall conform to the following format:
     * `yyyy-MM-ddTHH:mm:ssZ`. Example: `2011-11-21 15:23Z`
     *
     *
     * @param {string} [parameters.data.timezone] The id of the time zone to use
     * for the startTime and endTime dates. If not provided, the two date
     * attributes will be expressed using the device timezone. Example:
     * America/Los_Angeles
     *
     *
     * @param {string} [parameters.data.notificationType] Android only. Defines how
     * the notification should be displayed. Valid values are: * `system`: Display
     * the notification using a standard system notification. * `popup`: Display
     * the notification using a in-app banner notification.
     * . Possible values include: 'system', 'popup'
     *
     * @param {boolean} [parameters.data.notificationIcon] A flag indicating
     * whether or not you want to display the resource icon in notification
     * content.
     *
     * @param {boolean} [parameters.data.notificationCloseable] A flag indicating
     * whether or not you want the notification to be closeable.
     *
     * @param {boolean} [parameters.data.notificationVibrate] Android only. A flag
     * indicating whether or not you want the system notification to make a
     * vibration. The notificationType property must be set to system.
     *
     * @param {boolean} [parameters.data.notificationSound] * `Android`: A flag
     * indicating whether or not you want the system notification to make a sound.
     * The `notificationType` property must be set to `system`. * `iOS`: A flag
     * indicating whether or not you want the native Apple Push notification to
     * make a sound. The `deliveryTime` property must be set to `any` or
     * `background`. This will play the 'default' sound. If you want to play a
     * custom sound, see the `notificationOptions` property. * `Windows`: A flag
     * indicating whether or not you want the native Windows Notification Service
     * to make a sound. The `deliveryTime` property must be set to `any`.
     *
     *
     * @param {boolean} [parameters.data.notificationBadge] A flag indicating
     * whether or not you want the native Apple Push notification to update the
     * badge icon to the number of unread messages. The `deliveryTime` property
     * must be set to `any` or `background`.
     *
     *
     * @param {object} [parameters.data.localization] Push campaigns can be
     * localized using an optional JSON object. The JSON key is a two-character
     * language code as specified by the ISO 639-1 standard. The corresponding
     * value is an object containing the localizable properties.
     *
     *
     * @param {array} [parameters.data.questions] Poll questions.
     *
     * @param {string} [parameters.data.notificationTitle] Title of the
     * notification. This field supports appInfo markers.
     *
     * @param {string} [parameters.data.notificationMessage] Message of the
     * notification. This field supports appInfo markers.
     *
     * @param {buffer} [parameters.data.notificationImage] Optional image encoded
     * in base 64. Usually included in the right part of in app notifications (or
     * as a banner if there is neither text nor content icon). For Android system
     * notifications, the image is used as the large icon (displayed only on
     * Android 3+).
     *
     *
     * @param {object} [parameters.data.notificationOptions] Additional platform
     * specific options.
     *
     * @param {string} [parameters.data.notificationOptions.bigText] Android 4.1+
     * only. Multi line message shown in expanded notifications on Android 4.1+
     * devices. The `notificationType` property must be set to `system`.
     *
     *
     * @param {string} [parameters.data.notificationOptions.bigPicture] URL of a
     * remote image displayed in expanded notifications on
     * Android 4.1+ devices with the following constraints:
     * * The URL length is limited to 2000 characters.
     * * The image size must be less than 4 MiB.
     * * The following MIME types are supported:
     * ** image/png
     * ** image/jpeg
     * ** image/gif
     * ** image/webp
     * ** image/bmp
     * ** image/x-bmp
     * ** image/x-ms-bmp
     * * URL scheme must be HTTP or HTTPS (with valid SSL certificate).
     * * Incompatible with `bigText`, only one of the fields can be set.
     * * The `notificationType` property must be set to `system`.
     *
     *
     * @param {string} [parameters.data.notificationOptions.sound] iOS only. The
     * name of a sound file in the application bundle. The sound in this file is
     * played as an alert. If the sound file doesn’t exist or default is specified
     * as the value, the default alert sound is played. The audio must be in one of
     * the audio data formats that are compatible with system sounds. The
     * `deliveryTime` property must be set to `any` or `background`.
     *
     *
     * @param {string} [parameters.data.notificationOptions.actionText] The action
     * text is the title of the right button of the alert or the value of the
     * unlock slider, where the value replaces 'unlock' in 'slide to unlock'.
     * 'View' (localized to the preferred language) is used as the default value.
     * The `deliveryTime` property must be set to `any` or `background`.
     *
     *
     * @param {string} [parameters.data.title] Title of the announcement or poll.
     * This field supports appInfo markers.
     *
     * @param {string} [parameters.data.body] Body of the text/web announcement,
     * poll or data push. This field supports appInfo markers.
     *
     * @param {string} [parameters.data.actionButtonText] Text of the action button
     * for text/web announcements and polls (answer button).
     *
     * @param {string} [parameters.data.exitButtonText] Text of the exit button for
     * text/web announcements and polls.
     *
     * @param {string} [parameters.data.actionUrl] URL to launch when the
     * announcement is actioned.
     *
     * @param {object} [parameters.data.payload] Native push payload.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CampaignPushResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    pushWithHttpOperationResponse(resourceGroupName: string, appCollection: string, appName: string, kind: string, id: number, parameters: models.CampaignPushParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CampaignPushResult>>;

    /**
     * Push a previously saved campaign (created with Create campaign) to a set of
     * devices.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {string} kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     *
     * @param {number} id Campaign identifier.
     *
     * @param {object} parameters Parameters supplied to the Push Campaign
     * operation.
     *
     * @param {array} parameters.deviceIds Device identifiers to push as a JSON
     * array of strings. Note that if you want to push the same campaign several
     * times to the same device, you need to make several API calls.
     *
     *
     * @param {object} [parameters.data] Alternative campaign's content to use
     * instead of the referenced campaign. All campaign's properties can be
     * overridden except for the following: `name`, `manualPush`, `audience`,
     * `startTime` and `timezone`. `endTime` can be overridden while keeping
     * original `timezone` parameter. The effect is to change the client side
     * expiration of the received campaign for the specific devices. If your
     * campaign is a *poll*, the provided data should contain the same number of
     * questions and choices that the one you created with the create command.
     * Please note that all the push messages created using this parameter will
     * expire after 4 weeks at maximum (`endTime` property of the campaign will be
     * used if lower than 4 weeks in the future).
     *
     * @param {string} [parameters.data.name] Unique name of the campaign.
     *
     * @param {object} [parameters.data.audience] Specify which users will be
     * targeted by this campaign. By default, all users will be targeted. If you
     * set `pushMode` property to `manual`, the only thing you can specify in the
     * audience is the push quota filter. An audience is a boolean expression made
     * of criteria (variables) operators (`not`, `and` or `or`) and parenthesis.
     * Additionally, a set of filters can be added to an audience. 65535 bytes max
     * as per JSON encoding.
     *
     *
     * @param {string} [parameters.data.audience.expression] Boolean expression
     * made of criteria (variables) operators (`not`, `and` or `or`) and
     * parenthesis. Criterion names in the audience expression must start with a
     * capital letter and can only contain alphanumeric (A-Z,a-z,0-9) and
     * underscore (_) characters.
     *
     *
     * @param {object} [parameters.data.audience.criteria] Criteria by name.
     *
     * @param {array} [parameters.data.audience.filters] Global filters applied to
     * all devices.
     *
     * @param {string} [parameters.data.category] Category of the campaign.
     * Categories can be used on the application side to customize campaigns.
     *
     * @param {string} [parameters.data.pushMode] Announcements/polls only. Defines
     * how the campaign is pushed. Valid values are: * `real-time`: Never ending
     * campaign, the campaign will be delivered  to your existing users and also to
     * your new users. * `one-shot`: In this mode, the campaign will be delivered
     * only to your existing users (campaign will stop after that). * `manual`: In
     * this mode, the campaign will not be pushed automatically to devices. You
     * will have to use the Push campaign command to push the campaign to your
     * end-users. Campaigns can be pushed multiple times to the same device.
     * . Possible values include: 'real-time', 'one-shot', 'manual'
     *
     * @param {string} [parameters.data.type] Applicable only to announcements and
     * data pushes. Type of announcement. Valid values are: * `text/plain`:
     * Text-only announcement: `body` property should only contain plain text. *
     * `text/html`: HTML announcement: `body` attribute can contain HTML code. *
     * `only_notif`: Notification-only announcement. With this kind of
     * announcements, the `body`, `title`, `actionButtonText` and `exitButtonText`
     * are ignored. Type of data push. Valid values are: * `text/plain`: Text only
     * data push: `body` property must be plain text. * `text/base64`: Base 64 data
     * push: `body` property must be encoded in base 64.
     * . Possible values include: 'text/plain', 'text/html', 'only_notif',
     * 'text/base64'
     *
     * @param {string} [parameters.data.deliveryTime] Announcements/polls only.
     * Defines when the campaign should be delivered. Valid values are: * `any`:
     * Campaign will be delivered as soon as possible. * `background`: iOS only.
     * Campaign will be only delivered when the application is in background (out
     * of app). * `session`: Campaign will be delivered when the application is
     * running.
     * . Possible values include: 'any', 'background', 'session'
     *
     * @param {array} [parameters.data.deliveryActivities] Announcements/polls
     * only. Array containing the list of activities in which the campaign can be
     * delivered. deliveryTime must be set to session. If the platform is iOS, this
     * option can also be set if deliveryTime is set to any. In that case, if the
     * campaign is received when the application is launched, it will be delivered
     * only in the specified list of activities.
     *
     *
     * @param {string} [parameters.data.startTime] The date at which the campaign
     * should be started. The date shall conform to the following format:
     * `yyyy-MM-ddTHH:mm:ssZ`. * If you set pushMode property to manual, this
     * attribute will be ignored. * If you set pushMode property to one-shot, then
     * the timezone attribute must be specified. Example: `2011-11-21 15:23Z`
     *
     *
     * @param {string} [parameters.data.endTime] The date at which the campaign
     * should be finished. The date shall conform to the following format:
     * `yyyy-MM-ddTHH:mm:ssZ`. Example: `2011-11-21 15:23Z`
     *
     *
     * @param {string} [parameters.data.timezone] The id of the time zone to use
     * for the startTime and endTime dates. If not provided, the two date
     * attributes will be expressed using the device timezone. Example:
     * America/Los_Angeles
     *
     *
     * @param {string} [parameters.data.notificationType] Android only. Defines how
     * the notification should be displayed. Valid values are: * `system`: Display
     * the notification using a standard system notification. * `popup`: Display
     * the notification using a in-app banner notification.
     * . Possible values include: 'system', 'popup'
     *
     * @param {boolean} [parameters.data.notificationIcon] A flag indicating
     * whether or not you want to display the resource icon in notification
     * content.
     *
     * @param {boolean} [parameters.data.notificationCloseable] A flag indicating
     * whether or not you want the notification to be closeable.
     *
     * @param {boolean} [parameters.data.notificationVibrate] Android only. A flag
     * indicating whether or not you want the system notification to make a
     * vibration. The notificationType property must be set to system.
     *
     * @param {boolean} [parameters.data.notificationSound] * `Android`: A flag
     * indicating whether or not you want the system notification to make a sound.
     * The `notificationType` property must be set to `system`. * `iOS`: A flag
     * indicating whether or not you want the native Apple Push notification to
     * make a sound. The `deliveryTime` property must be set to `any` or
     * `background`. This will play the 'default' sound. If you want to play a
     * custom sound, see the `notificationOptions` property. * `Windows`: A flag
     * indicating whether or not you want the native Windows Notification Service
     * to make a sound. The `deliveryTime` property must be set to `any`.
     *
     *
     * @param {boolean} [parameters.data.notificationBadge] A flag indicating
     * whether or not you want the native Apple Push notification to update the
     * badge icon to the number of unread messages. The `deliveryTime` property
     * must be set to `any` or `background`.
     *
     *
     * @param {object} [parameters.data.localization] Push campaigns can be
     * localized using an optional JSON object. The JSON key is a two-character
     * language code as specified by the ISO 639-1 standard. The corresponding
     * value is an object containing the localizable properties.
     *
     *
     * @param {array} [parameters.data.questions] Poll questions.
     *
     * @param {string} [parameters.data.notificationTitle] Title of the
     * notification. This field supports appInfo markers.
     *
     * @param {string} [parameters.data.notificationMessage] Message of the
     * notification. This field supports appInfo markers.
     *
     * @param {buffer} [parameters.data.notificationImage] Optional image encoded
     * in base 64. Usually included in the right part of in app notifications (or
     * as a banner if there is neither text nor content icon). For Android system
     * notifications, the image is used as the large icon (displayed only on
     * Android 3+).
     *
     *
     * @param {object} [parameters.data.notificationOptions] Additional platform
     * specific options.
     *
     * @param {string} [parameters.data.notificationOptions.bigText] Android 4.1+
     * only. Multi line message shown in expanded notifications on Android 4.1+
     * devices. The `notificationType` property must be set to `system`.
     *
     *
     * @param {string} [parameters.data.notificationOptions.bigPicture] URL of a
     * remote image displayed in expanded notifications on
     * Android 4.1+ devices with the following constraints:
     * * The URL length is limited to 2000 characters.
     * * The image size must be less than 4 MiB.
     * * The following MIME types are supported:
     * ** image/png
     * ** image/jpeg
     * ** image/gif
     * ** image/webp
     * ** image/bmp
     * ** image/x-bmp
     * ** image/x-ms-bmp
     * * URL scheme must be HTTP or HTTPS (with valid SSL certificate).
     * * Incompatible with `bigText`, only one of the fields can be set.
     * * The `notificationType` property must be set to `system`.
     *
     *
     * @param {string} [parameters.data.notificationOptions.sound] iOS only. The
     * name of a sound file in the application bundle. The sound in this file is
     * played as an alert. If the sound file doesn’t exist or default is specified
     * as the value, the default alert sound is played. The audio must be in one of
     * the audio data formats that are compatible with system sounds. The
     * `deliveryTime` property must be set to `any` or `background`.
     *
     *
     * @param {string} [parameters.data.notificationOptions.actionText] The action
     * text is the title of the right button of the alert or the value of the
     * unlock slider, where the value replaces 'unlock' in 'slide to unlock'.
     * 'View' (localized to the preferred language) is used as the default value.
     * The `deliveryTime` property must be set to `any` or `background`.
     *
     *
     * @param {string} [parameters.data.title] Title of the announcement or poll.
     * This field supports appInfo markers.
     *
     * @param {string} [parameters.data.body] Body of the text/web announcement,
     * poll or data push. This field supports appInfo markers.
     *
     * @param {string} [parameters.data.actionButtonText] Text of the action button
     * for text/web announcements and polls (answer button).
     *
     * @param {string} [parameters.data.exitButtonText] Text of the exit button for
     * text/web announcements and polls.
     *
     * @param {string} [parameters.data.actionUrl] URL to launch when the
     * announcement is actioned.
     *
     * @param {object} [parameters.data.payload] Native push payload.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CampaignPushResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CampaignPushResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CampaignPushResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    push(resourceGroupName: string, appCollection: string, appName: string, kind: string, id: number, parameters: models.CampaignPushParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CampaignPushResult>;
    push(resourceGroupName: string, appCollection: string, appName: string, kind: string, id: number, parameters: models.CampaignPushParameters, callback: ServiceCallback<models.CampaignPushResult>): void;
    push(resourceGroupName: string, appCollection: string, appName: string, kind: string, id: number, parameters: models.CampaignPushParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CampaignPushResult>): void;


    /**
     * Get all the campaign statistics.
     *
     * @param {string} kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     *
     * @param {number} id Campaign identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CampaignStatisticsResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getStatisticsWithHttpOperationResponse(kind: string, id: number, resourceGroupName: string, appCollection: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CampaignStatisticsResult>>;

    /**
     * Get all the campaign statistics.
     *
     * @param {string} kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     *
     * @param {number} id Campaign identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CampaignStatisticsResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CampaignStatisticsResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CampaignStatisticsResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getStatistics(kind: string, id: number, resourceGroupName: string, appCollection: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CampaignStatisticsResult>;
    getStatistics(kind: string, id: number, resourceGroupName: string, appCollection: string, appName: string, callback: ServiceCallback<models.CampaignStatisticsResult>): void;
    getStatistics(kind: string, id: number, resourceGroupName: string, appCollection: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CampaignStatisticsResult>): void;


    /**
     * Finish a push campaign previously activated by a call to Activate campaign.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {string} kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     *
     * @param {number} id Campaign identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CampaignStateResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    finishWithHttpOperationResponse(resourceGroupName: string, appCollection: string, appName: string, kind: string, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CampaignStateResult>>;

    /**
     * Finish a push campaign previously activated by a call to Activate campaign.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {string} kind Campaign kind. Possible values include:
     * 'announcements', 'polls', 'dataPushes', 'nativePushes'
     *
     * @param {number} id Campaign identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CampaignStateResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CampaignStateResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CampaignStateResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    finish(resourceGroupName: string, appCollection: string, appName: string, kind: string, id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CampaignStateResult>;
    finish(resourceGroupName: string, appCollection: string, appName: string, kind: string, id: number, callback: ServiceCallback<models.CampaignStateResult>): void;
    finish(resourceGroupName: string, appCollection: string, appName: string, kind: string, id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CampaignStateResult>): void;


    /**
     * Get the list of campaigns.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CampaignsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CampaignsListResult>>;

    /**
     * Get the list of campaigns.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CampaignsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CampaignsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CampaignsListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CampaignsListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.CampaignsListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CampaignsListResult>): void;
}

/**
 * @class
 * Devices
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileEngagementClient.
 */
export interface Devices {


    /**
     * Query the information associated to the devices running an application.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] Number of devices to return with each call.
     * Defaults to 100 and cannot return more. Passing a greater value is ignored.
     * The response contains a `nextLink` property describing the URI path to get
     * the next page of results if not all results could be returned at once.
     *
     * @param {string} [options.select] By default all `meta` and `appInfo`
     * properties are returned, this property is used to restrict the output to the
     * desired properties. It also excludes all devices from the output that have
     * none of the selected properties. In other terms, only devices having at
     * least one of the selected property being set is part of the results.
     * Examples: - `$select=appInfo` : select all devices having at least 1
     * appInfo, return them all and don’t return any meta property. -
     * `$select=meta` : return only meta properties in the output. -
     * `$select=appInfo,meta/firstSeen,meta/lastSeen` : return all `appInfo`, plus
     * meta object containing only firstSeen and lastSeen properties. The format is
     * thus a comma separated list of properties to select. Use `appInfo` to select
     * all appInfo properties, `meta` to select all meta properties. Use
     * `appInfo/{key}` and `meta/{key}` to select specific appInfo and meta
     * properties.
     *
     * @param {string} [options.filter] Filter can be used to reduce the number of
     * results. Filter is a boolean expression that can look like the following
     * examples: * `$filter=deviceId gt 'abcdef0123456789abcdef0123456789'` *
     * `$filter=lastModified le 1447284263690L` * `$filter=(deviceId ge
     * 'abcdef0123456789abcdef0123456789') and (deviceId lt
     * 'bacdef0123456789abcdef0123456789') and (lastModified gt 1447284263690L)`
     * The first example is used automatically for paging when returning the
     * `nextLink` property. The filter expression is a combination of checks on
     * some properties that can be compared to their value. The available operators
     * are: * `gt`  : greater than * `ge`  : greater than or equals * `lt`  : less
     * than * `le`  : less than or equals * `and` : to add multiple checks (all
     * checks must pass), optional parentheses can be used. The properties that can
     * be used in the expression are the following: * `deviceId {operator}
     * '{deviceIdValue}'` : a lexicographical comparison is made on the deviceId
     * value, use single quotes for the value. * `lastModified {operator}
     * {number}L` : returns only meta properties or appInfo properties whose last
     * value modification timestamp compared to the specified value is matching
     * (value is milliseconds since January 1st, 1970 UTC). Please note the `L`
     * character after the number of milliseconds, its required when the number of
     * milliseconds exceeds `2^31 - 1` (which is always the case for recent
     * timestamps). Using `lastModified` excludes all devices from the output that
     * have no property matching the timestamp criteria, like `$select`. Please
     * note that the internal value of `lastModified` timestamp for a given
     * property is never part of the results.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DevicesQueryResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, appCollection: string, appName: string, options?: { top? : number, select? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DevicesQueryResult>>;

    /**
     * Query the information associated to the devices running an application.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] Number of devices to return with each call.
     * Defaults to 100 and cannot return more. Passing a greater value is ignored.
     * The response contains a `nextLink` property describing the URI path to get
     * the next page of results if not all results could be returned at once.
     *
     * @param {string} [options.select] By default all `meta` and `appInfo`
     * properties are returned, this property is used to restrict the output to the
     * desired properties. It also excludes all devices from the output that have
     * none of the selected properties. In other terms, only devices having at
     * least one of the selected property being set is part of the results.
     * Examples: - `$select=appInfo` : select all devices having at least 1
     * appInfo, return them all and don’t return any meta property. -
     * `$select=meta` : return only meta properties in the output. -
     * `$select=appInfo,meta/firstSeen,meta/lastSeen` : return all `appInfo`, plus
     * meta object containing only firstSeen and lastSeen properties. The format is
     * thus a comma separated list of properties to select. Use `appInfo` to select
     * all appInfo properties, `meta` to select all meta properties. Use
     * `appInfo/{key}` and `meta/{key}` to select specific appInfo and meta
     * properties.
     *
     * @param {string} [options.filter] Filter can be used to reduce the number of
     * results. Filter is a boolean expression that can look like the following
     * examples: * `$filter=deviceId gt 'abcdef0123456789abcdef0123456789'` *
     * `$filter=lastModified le 1447284263690L` * `$filter=(deviceId ge
     * 'abcdef0123456789abcdef0123456789') and (deviceId lt
     * 'bacdef0123456789abcdef0123456789') and (lastModified gt 1447284263690L)`
     * The first example is used automatically for paging when returning the
     * `nextLink` property. The filter expression is a combination of checks on
     * some properties that can be compared to their value. The available operators
     * are: * `gt`  : greater than * `ge`  : greater than or equals * `lt`  : less
     * than * `le`  : less than or equals * `and` : to add multiple checks (all
     * checks must pass), optional parentheses can be used. The properties that can
     * be used in the expression are the following: * `deviceId {operator}
     * '{deviceIdValue}'` : a lexicographical comparison is made on the deviceId
     * value, use single quotes for the value. * `lastModified {operator}
     * {number}L` : returns only meta properties or appInfo properties whose last
     * value modification timestamp compared to the specified value is matching
     * (value is milliseconds since January 1st, 1970 UTC). Please note the `L`
     * character after the number of milliseconds, its required when the number of
     * milliseconds exceeds `2^31 - 1` (which is always the case for recent
     * timestamps). Using `lastModified` excludes all devices from the output that
     * have no property matching the timestamp criteria, like `$select`. Please
     * note that the internal value of `lastModified` timestamp for a given
     * property is never part of the results.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DevicesQueryResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DevicesQueryResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DevicesQueryResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, appCollection: string, appName: string, options?: { top? : number, select? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DevicesQueryResult>;
    list(resourceGroupName: string, appCollection: string, appName: string, callback: ServiceCallback<models.DevicesQueryResult>): void;
    list(resourceGroupName: string, appCollection: string, appName: string, options: { top? : number, select? : string, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DevicesQueryResult>): void;


    /**
     * Get the information associated to a device running an application.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {string} deviceId Device identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Device>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getByDeviceIdWithHttpOperationResponse(resourceGroupName: string, appCollection: string, appName: string, deviceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Device>>;

    /**
     * Get the information associated to a device running an application.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {string} deviceId Device identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Device} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Device} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Device} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getByDeviceId(resourceGroupName: string, appCollection: string, appName: string, deviceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Device>;
    getByDeviceId(resourceGroupName: string, appCollection: string, appName: string, deviceId: string, callback: ServiceCallback<models.Device>): void;
    getByDeviceId(resourceGroupName: string, appCollection: string, appName: string, deviceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Device>): void;


    /**
     * Get the information associated to a device running an application using the
     * user identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {string} userId User identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Device>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getByUserIdWithHttpOperationResponse(resourceGroupName: string, appCollection: string, appName: string, userId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Device>>;

    /**
     * Get the information associated to a device running an application using the
     * user identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {string} userId User identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Device} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Device} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Device} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getByUserId(resourceGroupName: string, appCollection: string, appName: string, userId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Device>;
    getByUserId(resourceGroupName: string, appCollection: string, appName: string, userId: string, callback: ServiceCallback<models.Device>): void;
    getByUserId(resourceGroupName: string, appCollection: string, appName: string, userId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Device>): void;


    /**
     * Update the tags registered for a set of devices running an application.
     * Updates are performed asynchronously, meaning that a few seconds are needed
     * before the modifications appear in the results of the Get device command.
     *
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} parameters
     *
     * @param {object} parameters.tags A JSON object describing the set of tags to
     * record for a set of users. Each key is a device/user identifier, each value
     * is itself a key/value set: the tags to set for the specified device/user
     * identifier.
     *
     *
     * @param {boolean} [parameters.deleteOnNull] If this parameter is `true`, tags
     * with a null value will be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeviceTagsResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    tagByDeviceIdWithHttpOperationResponse(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DeviceTagsParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeviceTagsResult>>;

    /**
     * Update the tags registered for a set of devices running an application.
     * Updates are performed asynchronously, meaning that a few seconds are needed
     * before the modifications appear in the results of the Get device command.
     *
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} parameters
     *
     * @param {object} parameters.tags A JSON object describing the set of tags to
     * record for a set of users. Each key is a device/user identifier, each value
     * is itself a key/value set: the tags to set for the specified device/user
     * identifier.
     *
     *
     * @param {boolean} [parameters.deleteOnNull] If this parameter is `true`, tags
     * with a null value will be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeviceTagsResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeviceTagsResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeviceTagsResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    tagByDeviceId(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DeviceTagsParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeviceTagsResult>;
    tagByDeviceId(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DeviceTagsParameters, callback: ServiceCallback<models.DeviceTagsResult>): void;
    tagByDeviceId(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DeviceTagsParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeviceTagsResult>): void;


    /**
     * Update the tags registered for a set of users running an application.
     * Updates are performed asynchronously, meaning that a few seconds are needed
     * before the modifications appear in the results of the Get device command.
     *
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} parameters
     *
     * @param {object} parameters.tags A JSON object describing the set of tags to
     * record for a set of users. Each key is a device/user identifier, each value
     * is itself a key/value set: the tags to set for the specified device/user
     * identifier.
     *
     *
     * @param {boolean} [parameters.deleteOnNull] If this parameter is `true`, tags
     * with a null value will be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeviceTagsResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    tagByUserIdWithHttpOperationResponse(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DeviceTagsParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeviceTagsResult>>;

    /**
     * Update the tags registered for a set of users running an application.
     * Updates are performed asynchronously, meaning that a few seconds are needed
     * before the modifications appear in the results of the Get device command.
     *
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} parameters
     *
     * @param {object} parameters.tags A JSON object describing the set of tags to
     * record for a set of users. Each key is a device/user identifier, each value
     * is itself a key/value set: the tags to set for the specified device/user
     * identifier.
     *
     *
     * @param {boolean} [parameters.deleteOnNull] If this parameter is `true`, tags
     * with a null value will be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeviceTagsResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeviceTagsResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeviceTagsResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    tagByUserId(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DeviceTagsParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeviceTagsResult>;
    tagByUserId(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DeviceTagsParameters, callback: ServiceCallback<models.DeviceTagsResult>): void;
    tagByUserId(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DeviceTagsParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeviceTagsResult>): void;


    /**
     * Query the information associated to the devices running an application.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DevicesQueryResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DevicesQueryResult>>;

    /**
     * Query the information associated to the devices running an application.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DevicesQueryResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DevicesQueryResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DevicesQueryResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DevicesQueryResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.DevicesQueryResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DevicesQueryResult>): void;
}

/**
 * @class
 * ExportTasks
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileEngagementClient.
 */
export interface ExportTasks {


    /**
     * Get the list of export tasks.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] Control paging of export tasks, start results
     * at the given offset, defaults to 0 (1st page of data).
     *
     * @param {number} [options.top] Control paging of export tasks, number of
     * export tasks to return with each call. By default, it returns all export
     * tasks with a default paging of 20.
     * The response contains a `nextLink` property describing the path to get the
     * next page if there are more results.
     * The maximum paging limit for $top is 40.
     *
     * @param {string} [options.orderby] Sort results by an expression which looks
     * like `$orderby=taskId asc` (default when not specified).
     * The syntax is orderby={property} {direction} or just orderby={property}.
     * Properties that can be specified for sorting: taskId, errorDetails,
     * dateCreated, taskStatus, and dateCreated.
     * The available directions are asc (for ascending order) and desc (for
     * descending order).
     * When not specified the asc direction is used.
     * Only one orderby property can be specified.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExportTaskListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, appCollection: string, appName: string, options?: { skip? : number, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExportTaskListResult>>;

    /**
     * Get the list of export tasks.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] Control paging of export tasks, start results
     * at the given offset, defaults to 0 (1st page of data).
     *
     * @param {number} [options.top] Control paging of export tasks, number of
     * export tasks to return with each call. By default, it returns all export
     * tasks with a default paging of 20.
     * The response contains a `nextLink` property describing the path to get the
     * next page if there are more results.
     * The maximum paging limit for $top is 40.
     *
     * @param {string} [options.orderby] Sort results by an expression which looks
     * like `$orderby=taskId asc` (default when not specified).
     * The syntax is orderby={property} {direction} or just orderby={property}.
     * Properties that can be specified for sorting: taskId, errorDetails,
     * dateCreated, taskStatus, and dateCreated.
     * The available directions are asc (for ascending order) and desc (for
     * descending order).
     * When not specified the asc direction is used.
     * Only one orderby property can be specified.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExportTaskListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExportTaskListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExportTaskListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, appCollection: string, appName: string, options?: { skip? : number, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ExportTaskListResult>;
    list(resourceGroupName: string, appCollection: string, appName: string, callback: ServiceCallback<models.ExportTaskListResult>): void;
    list(resourceGroupName: string, appCollection: string, appName: string, options: { skip? : number, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExportTaskListResult>): void;


    /**
     * Retrieves information about a previously created export task.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {string} id Export task identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExportTaskResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, appCollection: string, appName: string, id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExportTaskResult>>;

    /**
     * Retrieves information about a previously created export task.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {string} id Export task identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExportTaskResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExportTaskResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExportTaskResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, appCollection: string, appName: string, id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExportTaskResult>;
    get(resourceGroupName: string, appCollection: string, appName: string, id: string, callback: ServiceCallback<models.ExportTaskResult>): void;
    get(resourceGroupName: string, appCollection: string, appName: string, id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExportTaskResult>): void;


    /**
     * Creates a task to export activities.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} parameters
     *
     * @param {string} parameters.containerUrl
     *
     * @param {string} [parameters.description] A description of the export task.
     *
     * @param {date} parameters.startDate The RFC3339 full-date of the start of the
     * period for which data is exported.
     *
     * @param {date} parameters.endDate The RFC3339 full-date of the end of the
     * period for which data is exported.
     *
     * @param {string} parameters.exportFormat The format of the exported data.
     * Possible values include: 'JsonBlob', 'CsvBlob'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExportTaskResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createActivitiesTaskWithHttpOperationResponse(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DateRangeExportTaskParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExportTaskResult>>;

    /**
     * Creates a task to export activities.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} parameters
     *
     * @param {string} parameters.containerUrl
     *
     * @param {string} [parameters.description] A description of the export task.
     *
     * @param {date} parameters.startDate The RFC3339 full-date of the start of the
     * period for which data is exported.
     *
     * @param {date} parameters.endDate The RFC3339 full-date of the end of the
     * period for which data is exported.
     *
     * @param {string} parameters.exportFormat The format of the exported data.
     * Possible values include: 'JsonBlob', 'CsvBlob'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExportTaskResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExportTaskResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExportTaskResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createActivitiesTask(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DateRangeExportTaskParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExportTaskResult>;
    createActivitiesTask(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DateRangeExportTaskParameter, callback: ServiceCallback<models.ExportTaskResult>): void;
    createActivitiesTask(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DateRangeExportTaskParameter, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExportTaskResult>): void;


    /**
     * Creates a task to export crashes.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} parameters
     *
     * @param {string} parameters.containerUrl
     *
     * @param {string} [parameters.description] A description of the export task.
     *
     * @param {date} parameters.startDate The RFC3339 full-date of the start of the
     * period for which data is exported.
     *
     * @param {date} parameters.endDate The RFC3339 full-date of the end of the
     * period for which data is exported.
     *
     * @param {string} parameters.exportFormat The format of the exported data.
     * Possible values include: 'JsonBlob', 'CsvBlob'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExportTaskResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createCrashesTaskWithHttpOperationResponse(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DateRangeExportTaskParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExportTaskResult>>;

    /**
     * Creates a task to export crashes.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} parameters
     *
     * @param {string} parameters.containerUrl
     *
     * @param {string} [parameters.description] A description of the export task.
     *
     * @param {date} parameters.startDate The RFC3339 full-date of the start of the
     * period for which data is exported.
     *
     * @param {date} parameters.endDate The RFC3339 full-date of the end of the
     * period for which data is exported.
     *
     * @param {string} parameters.exportFormat The format of the exported data.
     * Possible values include: 'JsonBlob', 'CsvBlob'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExportTaskResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExportTaskResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExportTaskResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createCrashesTask(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DateRangeExportTaskParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExportTaskResult>;
    createCrashesTask(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DateRangeExportTaskParameter, callback: ServiceCallback<models.ExportTaskResult>): void;
    createCrashesTask(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DateRangeExportTaskParameter, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExportTaskResult>): void;


    /**
     * Creates a task to export errors.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} parameters
     *
     * @param {string} parameters.containerUrl
     *
     * @param {string} [parameters.description] A description of the export task.
     *
     * @param {date} parameters.startDate The RFC3339 full-date of the start of the
     * period for which data is exported.
     *
     * @param {date} parameters.endDate The RFC3339 full-date of the end of the
     * period for which data is exported.
     *
     * @param {string} parameters.exportFormat The format of the exported data.
     * Possible values include: 'JsonBlob', 'CsvBlob'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExportTaskResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createErrorsTaskWithHttpOperationResponse(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DateRangeExportTaskParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExportTaskResult>>;

    /**
     * Creates a task to export errors.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} parameters
     *
     * @param {string} parameters.containerUrl
     *
     * @param {string} [parameters.description] A description of the export task.
     *
     * @param {date} parameters.startDate The RFC3339 full-date of the start of the
     * period for which data is exported.
     *
     * @param {date} parameters.endDate The RFC3339 full-date of the end of the
     * period for which data is exported.
     *
     * @param {string} parameters.exportFormat The format of the exported data.
     * Possible values include: 'JsonBlob', 'CsvBlob'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExportTaskResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExportTaskResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExportTaskResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createErrorsTask(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DateRangeExportTaskParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExportTaskResult>;
    createErrorsTask(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DateRangeExportTaskParameter, callback: ServiceCallback<models.ExportTaskResult>): void;
    createErrorsTask(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DateRangeExportTaskParameter, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExportTaskResult>): void;


    /**
     * Creates a task to export events.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} parameters
     *
     * @param {string} parameters.containerUrl
     *
     * @param {string} [parameters.description] A description of the export task.
     *
     * @param {date} parameters.startDate The RFC3339 full-date of the start of the
     * period for which data is exported.
     *
     * @param {date} parameters.endDate The RFC3339 full-date of the end of the
     * period for which data is exported.
     *
     * @param {string} parameters.exportFormat The format of the exported data.
     * Possible values include: 'JsonBlob', 'CsvBlob'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExportTaskResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createEventsTaskWithHttpOperationResponse(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DateRangeExportTaskParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExportTaskResult>>;

    /**
     * Creates a task to export events.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} parameters
     *
     * @param {string} parameters.containerUrl
     *
     * @param {string} [parameters.description] A description of the export task.
     *
     * @param {date} parameters.startDate The RFC3339 full-date of the start of the
     * period for which data is exported.
     *
     * @param {date} parameters.endDate The RFC3339 full-date of the end of the
     * period for which data is exported.
     *
     * @param {string} parameters.exportFormat The format of the exported data.
     * Possible values include: 'JsonBlob', 'CsvBlob'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExportTaskResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExportTaskResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExportTaskResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createEventsTask(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DateRangeExportTaskParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExportTaskResult>;
    createEventsTask(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DateRangeExportTaskParameter, callback: ServiceCallback<models.ExportTaskResult>): void;
    createEventsTask(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DateRangeExportTaskParameter, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExportTaskResult>): void;


    /**
     * Creates a task to export jobs.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} parameters
     *
     * @param {string} parameters.containerUrl
     *
     * @param {string} [parameters.description] A description of the export task.
     *
     * @param {date} parameters.startDate The RFC3339 full-date of the start of the
     * period for which data is exported.
     *
     * @param {date} parameters.endDate The RFC3339 full-date of the end of the
     * period for which data is exported.
     *
     * @param {string} parameters.exportFormat The format of the exported data.
     * Possible values include: 'JsonBlob', 'CsvBlob'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExportTaskResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createJobsTaskWithHttpOperationResponse(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DateRangeExportTaskParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExportTaskResult>>;

    /**
     * Creates a task to export jobs.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} parameters
     *
     * @param {string} parameters.containerUrl
     *
     * @param {string} [parameters.description] A description of the export task.
     *
     * @param {date} parameters.startDate The RFC3339 full-date of the start of the
     * period for which data is exported.
     *
     * @param {date} parameters.endDate The RFC3339 full-date of the end of the
     * period for which data is exported.
     *
     * @param {string} parameters.exportFormat The format of the exported data.
     * Possible values include: 'JsonBlob', 'CsvBlob'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExportTaskResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExportTaskResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExportTaskResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createJobsTask(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DateRangeExportTaskParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExportTaskResult>;
    createJobsTask(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DateRangeExportTaskParameter, callback: ServiceCallback<models.ExportTaskResult>): void;
    createJobsTask(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DateRangeExportTaskParameter, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExportTaskResult>): void;


    /**
     * Creates a task to export sessions.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} parameters
     *
     * @param {string} parameters.containerUrl
     *
     * @param {string} [parameters.description] A description of the export task.
     *
     * @param {date} parameters.startDate The RFC3339 full-date of the start of the
     * period for which data is exported.
     *
     * @param {date} parameters.endDate The RFC3339 full-date of the end of the
     * period for which data is exported.
     *
     * @param {string} parameters.exportFormat The format of the exported data.
     * Possible values include: 'JsonBlob', 'CsvBlob'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExportTaskResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createSessionsTaskWithHttpOperationResponse(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DateRangeExportTaskParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExportTaskResult>>;

    /**
     * Creates a task to export sessions.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} parameters
     *
     * @param {string} parameters.containerUrl
     *
     * @param {string} [parameters.description] A description of the export task.
     *
     * @param {date} parameters.startDate The RFC3339 full-date of the start of the
     * period for which data is exported.
     *
     * @param {date} parameters.endDate The RFC3339 full-date of the end of the
     * period for which data is exported.
     *
     * @param {string} parameters.exportFormat The format of the exported data.
     * Possible values include: 'JsonBlob', 'CsvBlob'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExportTaskResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExportTaskResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExportTaskResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createSessionsTask(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DateRangeExportTaskParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExportTaskResult>;
    createSessionsTask(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DateRangeExportTaskParameter, callback: ServiceCallback<models.ExportTaskResult>): void;
    createSessionsTask(resourceGroupName: string, appCollection: string, appName: string, parameters: models.DateRangeExportTaskParameter, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExportTaskResult>): void;


    /**
     * Creates a task to export tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} parameters
     *
     * @param {string} parameters.containerUrl
     *
     * @param {string} [parameters.description] A description of the export task.
     *
     * @param {string} parameters.exportFormat The format of the exported data.
     * Possible values include: 'JsonBlob', 'CsvBlob'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExportTaskResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createTagsTaskWithHttpOperationResponse(resourceGroupName: string, appCollection: string, appName: string, parameters: models.ExportTaskParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExportTaskResult>>;

    /**
     * Creates a task to export tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} parameters
     *
     * @param {string} parameters.containerUrl
     *
     * @param {string} [parameters.description] A description of the export task.
     *
     * @param {string} parameters.exportFormat The format of the exported data.
     * Possible values include: 'JsonBlob', 'CsvBlob'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExportTaskResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExportTaskResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExportTaskResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createTagsTask(resourceGroupName: string, appCollection: string, appName: string, parameters: models.ExportTaskParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExportTaskResult>;
    createTagsTask(resourceGroupName: string, appCollection: string, appName: string, parameters: models.ExportTaskParameter, callback: ServiceCallback<models.ExportTaskResult>): void;
    createTagsTask(resourceGroupName: string, appCollection: string, appName: string, parameters: models.ExportTaskParameter, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExportTaskResult>): void;


    /**
     * Creates a task to export tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} parameters
     *
     * @param {string} parameters.containerUrl
     *
     * @param {string} [parameters.description] A description of the export task.
     *
     * @param {string} parameters.exportFormat The format of the exported data.
     * Possible values include: 'JsonBlob', 'CsvBlob'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExportTaskResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createTokensTaskWithHttpOperationResponse(resourceGroupName: string, appCollection: string, appName: string, parameters: models.ExportTaskParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExportTaskResult>>;

    /**
     * Creates a task to export tags.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} parameters
     *
     * @param {string} parameters.containerUrl
     *
     * @param {string} [parameters.description] A description of the export task.
     *
     * @param {string} parameters.exportFormat The format of the exported data.
     * Possible values include: 'JsonBlob', 'CsvBlob'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExportTaskResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExportTaskResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExportTaskResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createTokensTask(resourceGroupName: string, appCollection: string, appName: string, parameters: models.ExportTaskParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExportTaskResult>;
    createTokensTask(resourceGroupName: string, appCollection: string, appName: string, parameters: models.ExportTaskParameter, callback: ServiceCallback<models.ExportTaskResult>): void;
    createTokensTask(resourceGroupName: string, appCollection: string, appName: string, parameters: models.ExportTaskParameter, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExportTaskResult>): void;


    /**
     * Creates a task to export push campaign data for a date range.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} parameters
     *
     * @param {string} parameters.containerUrl
     *
     * @param {string} [parameters.description] A description of the export task.
     *
     * @param {string} parameters.campaignType Possible values include:
     * 'Announcement', 'DataPush', 'NativePush', 'Poll'
     *
     * @param {date} parameters.campaignWindowStart The RFC3339 date-time start of
     * the period for inclusion of active campaigns.
     *
     * @param {date} parameters.campaignWindowEnd The RFC3339 date-time end of the
     * period for inclusion of active campaigns.
     *
     * @param {string} parameters.exportFormat The format of the exported data.
     * Possible values include: 'JsonBlob', 'CsvBlob'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExportTaskResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createFeedbackTaskByDateRangeWithHttpOperationResponse(resourceGroupName: string, appCollection: string, appName: string, parameters: models.FeedbackByDateRangeParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExportTaskResult>>;

    /**
     * Creates a task to export push campaign data for a date range.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} parameters
     *
     * @param {string} parameters.containerUrl
     *
     * @param {string} [parameters.description] A description of the export task.
     *
     * @param {string} parameters.campaignType Possible values include:
     * 'Announcement', 'DataPush', 'NativePush', 'Poll'
     *
     * @param {date} parameters.campaignWindowStart The RFC3339 date-time start of
     * the period for inclusion of active campaigns.
     *
     * @param {date} parameters.campaignWindowEnd The RFC3339 date-time end of the
     * period for inclusion of active campaigns.
     *
     * @param {string} parameters.exportFormat The format of the exported data.
     * Possible values include: 'JsonBlob', 'CsvBlob'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExportTaskResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExportTaskResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExportTaskResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createFeedbackTaskByDateRange(resourceGroupName: string, appCollection: string, appName: string, parameters: models.FeedbackByDateRangeParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExportTaskResult>;
    createFeedbackTaskByDateRange(resourceGroupName: string, appCollection: string, appName: string, parameters: models.FeedbackByDateRangeParameter, callback: ServiceCallback<models.ExportTaskResult>): void;
    createFeedbackTaskByDateRange(resourceGroupName: string, appCollection: string, appName: string, parameters: models.FeedbackByDateRangeParameter, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExportTaskResult>): void;


    /**
     * Creates a task to export push campaign data for a set of campaigns.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} parameters
     *
     * @param {string} parameters.containerUrl
     *
     * @param {string} [parameters.description] A description of the export task.
     *
     * @param {string} parameters.campaignType Possible values include:
     * 'Announcement', 'DataPush', 'NativePush', 'Poll'
     *
     * @param {array} parameters.campaignIds A list of campaign identifiers.
     *
     * @param {string} parameters.exportFormat The format of the exported data.
     * Possible values include: 'JsonBlob', 'CsvBlob'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExportTaskResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createFeedbackTaskByCampaignWithHttpOperationResponse(resourceGroupName: string, appCollection: string, appName: string, parameters: models.FeedbackByCampaignParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExportTaskResult>>;

    /**
     * Creates a task to export push campaign data for a set of campaigns.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} parameters
     *
     * @param {string} parameters.containerUrl
     *
     * @param {string} [parameters.description] A description of the export task.
     *
     * @param {string} parameters.campaignType Possible values include:
     * 'Announcement', 'DataPush', 'NativePush', 'Poll'
     *
     * @param {array} parameters.campaignIds A list of campaign identifiers.
     *
     * @param {string} parameters.exportFormat The format of the exported data.
     * Possible values include: 'JsonBlob', 'CsvBlob'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExportTaskResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExportTaskResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExportTaskResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createFeedbackTaskByCampaign(resourceGroupName: string, appCollection: string, appName: string, parameters: models.FeedbackByCampaignParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExportTaskResult>;
    createFeedbackTaskByCampaign(resourceGroupName: string, appCollection: string, appName: string, parameters: models.FeedbackByCampaignParameter, callback: ServiceCallback<models.ExportTaskResult>): void;
    createFeedbackTaskByCampaign(resourceGroupName: string, appCollection: string, appName: string, parameters: models.FeedbackByCampaignParameter, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExportTaskResult>): void;


    /**
     * Get the list of export tasks.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExportTaskListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExportTaskListResult>>;

    /**
     * Get the list of export tasks.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExportTaskListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExportTaskListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExportTaskListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExportTaskListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ExportTaskListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExportTaskListResult>): void;
}

/**
 * @class
 * ImportTasks
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MobileEngagementClient.
 */
export interface ImportTasks {


    /**
     * Get the list of import jobs.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] Control paging of import jobs, start results
     * at the given offset, defaults to 0 (1st page of data).
     *
     * @param {number} [options.top] Control paging of import jobs, number of
     * import jobs to return with each call. By default, it returns all import jobs
     * with a default paging of 20.
     * The response contains a `nextLink` property describing the path to get the
     * next page if there are more results.
     * The maximum paging limit for $top is 40.
     *
     * @param {string} [options.orderby] Sort results by an expression which looks
     * like `$orderby=jobId asc` (default when not specified).
     * The syntax is orderby={property} {direction} or just orderby={property}.
     * Properties that can be specified for sorting: jobId, errorDetails,
     * dateCreated, jobStatus, and dateCreated.
     * The available directions are asc (for ascending order) and desc (for
     * descending order).
     * When not specified the asc direction is used.
     * Only one orderby property can be specified.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ImportTaskListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, appCollection: string, appName: string, options?: { skip? : number, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImportTaskListResult>>;

    /**
     * Get the list of import jobs.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] Control paging of import jobs, start results
     * at the given offset, defaults to 0 (1st page of data).
     *
     * @param {number} [options.top] Control paging of import jobs, number of
     * import jobs to return with each call. By default, it returns all import jobs
     * with a default paging of 20.
     * The response contains a `nextLink` property describing the path to get the
     * next page if there are more results.
     * The maximum paging limit for $top is 40.
     *
     * @param {string} [options.orderby] Sort results by an expression which looks
     * like `$orderby=jobId asc` (default when not specified).
     * The syntax is orderby={property} {direction} or just orderby={property}.
     * Properties that can be specified for sorting: jobId, errorDetails,
     * dateCreated, jobStatus, and dateCreated.
     * The available directions are asc (for ascending order) and desc (for
     * descending order).
     * When not specified the asc direction is used.
     * Only one orderby property can be specified.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ImportTaskListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ImportTaskListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ImportTaskListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, appCollection: string, appName: string, options?: { skip? : number, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ImportTaskListResult>;
    list(resourceGroupName: string, appCollection: string, appName: string, callback: ServiceCallback<models.ImportTaskListResult>): void;
    list(resourceGroupName: string, appCollection: string, appName: string, options: { skip? : number, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImportTaskListResult>): void;


    /**
     * Creates a job to import the specified data to a storageUrl.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} parameters
     *
     * @param {string} [parameters.storageUrl] A shared Access Signature (SAS)
     * Storage URI where the job results will be retrieved from.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ImportTaskResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, appCollection: string, appName: string, parameters: models.ImportTask, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImportTaskResult>>;

    /**
     * Creates a job to import the specified data to a storageUrl.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} parameters
     *
     * @param {string} [parameters.storageUrl] A shared Access Signature (SAS)
     * Storage URI where the job results will be retrieved from.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ImportTaskResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ImportTaskResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ImportTaskResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, appCollection: string, appName: string, parameters: models.ImportTask, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImportTaskResult>;
    create(resourceGroupName: string, appCollection: string, appName: string, parameters: models.ImportTask, callback: ServiceCallback<models.ImportTaskResult>): void;
    create(resourceGroupName: string, appCollection: string, appName: string, parameters: models.ImportTask, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImportTaskResult>): void;


    /**
     * The Get import job operation retrieves information about a previously
     * created import job.
     *
     * @param {string} id Import job identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ImportTaskResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(id: string, resourceGroupName: string, appCollection: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImportTaskResult>>;

    /**
     * The Get import job operation retrieves information about a previously
     * created import job.
     *
     * @param {string} id Import job identifier.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} appCollection Application collection.
     *
     * @param {string} appName Application resource name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ImportTaskResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ImportTaskResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ImportTaskResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(id: string, resourceGroupName: string, appCollection: string, appName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImportTaskResult>;
    get(id: string, resourceGroupName: string, appCollection: string, appName: string, callback: ServiceCallback<models.ImportTaskResult>): void;
    get(id: string, resourceGroupName: string, appCollection: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImportTaskResult>): void;


    /**
     * Get the list of import jobs.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ImportTaskListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImportTaskListResult>>;

    /**
     * Get the list of import jobs.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ImportTaskListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ImportTaskListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ImportTaskListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImportTaskListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ImportTaskListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImportTaskListResult>): void;
}
