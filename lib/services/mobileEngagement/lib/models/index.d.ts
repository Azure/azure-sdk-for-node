/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource } from 'ms-rest-azure';
import { CloudError } from 'ms-rest-azure';
import * as moment from 'moment';

export { BaseResource } from 'ms-rest-azure';
export { CloudError } from 'ms-rest-azure';


/**
 * @class
 * Initializes a new instance of the ApiErrorError class.
 * @constructor
 * @member {string} [code]
 * @member {string} [message]
 */
export interface ApiErrorError {
  code?: string;
  message?: string;
}

/**
 * @class
 * Initializes a new instance of the ApiError class.
 * @constructor
 * @member {object} [error]
 * @member {string} [error.code]
 * @member {string} [error.message]
 */
export interface ApiError {
  error?: ApiErrorError;
}

/**
 * @class
 * Initializes a new instance of the Resource class.
 * @constructor
 * @member {string} [id] Resource Id
 * @member {string} [name] Resource name
 * @member {string} [type] Resource type
 * @member {string} location Resource location
 * @member {object} [tags] Resource tags
 */
export interface Resource extends BaseResource {
  readonly id?: string;
  readonly name?: string;
  readonly type?: string;
  location: string;
  tags?: { [propertyName: string]: string };
}

/**
 * @class
 * Initializes a new instance of the App class.
 * @constructor
 * The Mobile Engagement App resource.
 *
 * @member {string} [backendId] The application unique identifier.
 * @member {string} [platform] The platform of the app.
 * @member {string} [appState] The state of the application.
 */
export interface App extends Resource {
  backendId?: string;
  platform?: string;
  appState?: string;
}

/**
 * @class
 * Initializes a new instance of the AppCollection class.
 * @constructor
 * The AppCollection resource.
 *
 * @member {string} [provisioningState] Mobile Engagement AppCollection
 * Properties. Possible values include: 'Creating', 'Succeeded'
 */
export interface AppCollection extends Resource {
  provisioningState?: string;
}

/**
 * @class
 * Initializes a new instance of the AppCollectionNameAvailability class.
 * @constructor
 * @member {string} [name] Name.
 * @member {boolean} [available] Available.
 * @member {string} [unavailabilityReason] UnavailabilityReason.
 */
export interface AppCollectionNameAvailability {
  name?: string;
  available?: boolean;
  unavailabilityReason?: string;
}

/**
 * @class
 * Initializes a new instance of the SupportedPlatformsListResult class.
 * @constructor
 * @member {array} [platforms] List of supported platforms.
 */
export interface SupportedPlatformsListResult {
  platforms?: string[];
}

/**
 * @class
 * Initializes a new instance of the CampaignTestSavedParameters class.
 * @constructor
 * @member {string} deviceId Device identifier (as returned by the SDK).
 * @member {string} [lang] The language to test expressed using ISO 639-1 code.
 * The default language of the campaign will be used if the parameter is not
 * provided.
 */
export interface CampaignTestSavedParameters {
  deviceId: string;
  lang?: string;
}

/**
 * @class
 * Initializes a new instance of the Criterion class.
 * @constructor
 * @member {string} type Polymorphic Discriminator
 */
export interface Criterion {
  type: string;
}

/**
 * @class
 * Initializes a new instance of the Filter class.
 * @constructor
 * @member {string} type Polymorphic Discriminator
 */
export interface Filter {
  type: string;
}

/**
 * @class
 * Initializes a new instance of the CampaignAudience class.
 * @constructor
 * Specify which users will be targeted by this campaign. By default, all users
 * will be targeted. If you set `pushMode` property to `manual`, the only thing
 * you can specify in the audience is the push quota filter. An audience is a
 * boolean expression made of criteria (variables) operators (`not`, `and` or
 * `or`) and parenthesis. Additionally, a set of filters can be added to an
 * audience. 65535 bytes max as per JSON encoding.
 *
 *
 * @member {string} [expression] Boolean expression made of criteria
 * (variables) operators (`not`, `and` or `or`) and parenthesis. Criterion
 * names in the audience expression must start with a capital letter and can
 * only contain alphanumeric (A-Z,a-z,0-9) and underscore (_) characters.
 * @member {object} [criteria] Criteria by name.
 * @member {array} [filters] Global filters applied to all devices.
 */
export interface CampaignAudience {
  expression?: string;
  criteria?: { [propertyName: string]: Criterion };
  filters?: Filter[];
}

/**
 * @class
 * Initializes a new instance of the NotificationOptions class.
 * @constructor
 * @member {string} [bigText] Android 4.1+ only. Multi line message shown in
 * expanded notifications on Android 4.1+ devices. The `notificationType`
 * property must be set to `system`.
 * @member {string} [bigPicture] URL of a remote image displayed in expanded
 * notifications on
 * Android 4.1+ devices with the following constraints:
 * * The URL length is limited to 2000 characters.
 * * The image size must be less than 4 MiB.
 * * The following MIME types are supported:
 * ** image/png
 * ** image/jpeg
 * ** image/gif
 * ** image/webp
 * ** image/bmp
 * ** image/x-bmp
 * ** image/x-ms-bmp
 * * URL scheme must be HTTP or HTTPS (with valid SSL certificate).
 * * Incompatible with `bigText`, only one of the fields can be set.
 * * The `notificationType` property must be set to `system`.
 * @member {string} [sound] iOS only. The name of a sound file in the
 * application bundle. The sound in this file is played as an alert. If the
 * sound file doesn’t exist or default is specified as the value, the default
 * alert sound is played. The audio must be in one of the audio data formats
 * that are compatible with system sounds. The `deliveryTime` property must be
 * set to `any` or `background`.
 * @member {string} [actionText] The action text is the title of the right
 * button of the alert or the value of the unlock slider, where the value
 * replaces 'unlock' in 'slide to unlock'. 'View' (localized to the preferred
 * language) is used as the default value. The `deliveryTime` property must be
 * set to `any` or `background`.
 */
export interface NotificationOptions {
  bigText?: string;
  bigPicture?: string;
  sound?: string;
  actionText?: string;
}

/**
 * @class
 * Initializes a new instance of the CampaignLocalization class.
 * @constructor
 * @member {string} [notificationTitle] Title of the notification. This field
 * supports appInfo markers.
 * @member {string} [notificationMessage] Message of the notification. This
 * field supports appInfo markers.
 * @member {buffer} [notificationImage] Optional image encoded in base 64.
 * Usually included in the right part of in app notifications (or as a banner
 * if there is neither text nor content icon). For Android system
 * notifications, the image is used as the large icon (displayed only on
 * Android 3+).
 * @member {object} [notificationOptions] Additional platform specific options.
 * @member {string} [notificationOptions.bigText] Android 4.1+ only. Multi line
 * message shown in expanded notifications on Android 4.1+ devices. The
 * `notificationType` property must be set to `system`.
 * @member {string} [notificationOptions.bigPicture] URL of a remote image
 * displayed in expanded notifications on
 * Android 4.1+ devices with the following constraints:
 * * The URL length is limited to 2000 characters.
 * * The image size must be less than 4 MiB.
 * * The following MIME types are supported:
 * ** image/png
 * ** image/jpeg
 * ** image/gif
 * ** image/webp
 * ** image/bmp
 * ** image/x-bmp
 * ** image/x-ms-bmp
 * * URL scheme must be HTTP or HTTPS (with valid SSL certificate).
 * * Incompatible with `bigText`, only one of the fields can be set.
 * * The `notificationType` property must be set to `system`.
 * @member {string} [notificationOptions.sound] iOS only. The name of a sound
 * file in the application bundle. The sound in this file is played as an
 * alert. If the sound file doesn’t exist or default is specified as the value,
 * the default alert sound is played. The audio must be in one of the audio
 * data formats that are compatible with system sounds. The `deliveryTime`
 * property must be set to `any` or `background`.
 * @member {string} [notificationOptions.actionText] The action text is the
 * title of the right button of the alert or the value of the unlock slider,
 * where the value replaces 'unlock' in 'slide to unlock'. 'View' (localized to
 * the preferred language) is used as the default value. The `deliveryTime`
 * property must be set to `any` or `background`.
 * @member {string} [title] Title of the announcement or poll. This field
 * supports appInfo markers.
 * @member {string} [body] Body of the text/web announcement, poll or data
 * push. This field supports appInfo markers.
 * @member {string} [actionButtonText] Text of the action button for text/web
 * announcements and polls (answer button).
 * @member {string} [exitButtonText] Text of the exit button for text/web
 * announcements and polls.
 * @member {string} [actionUrl] URL to launch when the announcement is
 * actioned.
 * @member {object} [payload] Native push payload.
 */
export interface CampaignLocalization {
  notificationTitle?: string;
  notificationMessage?: string;
  notificationImage?: Buffer;
  notificationOptions?: NotificationOptions;
  title?: string;
  body?: string;
  actionButtonText?: string;
  exitButtonText?: string;
  actionUrl?: string;
  payload?: any;
}

/**
 * @class
 * Initializes a new instance of the PollQuestionLocalization class.
 * @constructor
 * @member {string} [title] Title of the question.
 */
export interface PollQuestionLocalization {
  title?: string;
}

/**
 * @class
 * Initializes a new instance of the PollQuestionChoiceLocalization class.
 * @constructor
 * @member {string} [title] Title of the choice.
 */
export interface PollQuestionChoiceLocalization {
  title?: string;
}

/**
 * @class
 * Initializes a new instance of the PollQuestionChoice class.
 * @constructor
 * @member {number} [id] Unique identifier of the choice.
 * @member {object} [localization] Poll choices can be localized using an
 * optional JSON object. The JSON key is a two-character language code as
 * specified by the ISO 639-1 standard. The corresponding value is an object
 * containing the localizable property title.
 * @member {boolean} [isDefault] A flag indicating if this choice is the
 * default choice for the associated question. Only one choice in the array can
 * have this value set to true. Default value: false .
 */
export interface PollQuestionChoice extends PollQuestionChoiceLocalization {
  id?: number;
  localization?: { [propertyName: string]: PollQuestionChoiceLocalization };
  isDefault?: boolean;
}

/**
 * @class
 * Initializes a new instance of the PollQuestion class.
 * @constructor
 * @member {number} [id] Unique identifier of the question.
 * @member {object} [localization] Poll questions can be localized using an
 * optional JSON object. The JSON key is a two-character language code as
 * specified by the ISO 639-1 standard. The corresponding value is an object
 * containing the localizable property title.
 * @member {array} [choices] List of possible choices for this question.
 */
export interface PollQuestion extends PollQuestionLocalization {
  id?: number;
  localization?: { [propertyName: string]: PollQuestionLocalization };
  choices?: PollQuestionChoice[];
}

/**
 * @class
 * Initializes a new instance of the Campaign class.
 * @constructor
 * @member {string} [name] Unique name of the campaign.
 * @member {object} [audience] Specify which users will be targeted by this
 * campaign. By default, all users will be targeted. If you set `pushMode`
 * property to `manual`, the only thing you can specify in the audience is the
 * push quota filter. An audience is a boolean expression made of criteria
 * (variables) operators (`not`, `and` or `or`) and parenthesis. Additionally,
 * a set of filters can be added to an audience. 65535 bytes max as per JSON
 * encoding.
 * @member {string} [audience.expression] Boolean expression made of criteria
 * (variables) operators (`not`, `and` or `or`) and parenthesis. Criterion
 * names in the audience expression must start with a capital letter and can
 * only contain alphanumeric (A-Z,a-z,0-9) and underscore (_) characters.
 * @member {object} [audience.criteria] Criteria by name.
 * @member {array} [audience.filters] Global filters applied to all devices.
 * @member {string} [category] Category of the campaign. Categories can be used
 * on the application side to customize campaigns.
 * @member {string} [pushMode] Announcements/polls only. Defines how the
 * campaign is pushed. Valid values are: * `real-time`: Never ending campaign,
 * the campaign will be delivered  to your existing users and also to your new
 * users. * `one-shot`: In this mode, the campaign will be delivered only to
 * your existing users (campaign will stop after that). * `manual`: In this
 * mode, the campaign will not be pushed automatically to devices. You will
 * have to use the Push campaign command to push the campaign to your
 * end-users. Campaigns can be pushed multiple times to the same device.
 * . Possible values include: 'real-time', 'one-shot', 'manual'. Default value:
 * 'real-time' .
 * @member {string} [type] Applicable only to announcements and data pushes.
 * Type of announcement. Valid values are: * `text/plain`: Text-only
 * announcement: `body` property should only contain plain text. * `text/html`:
 * HTML announcement: `body` attribute can contain HTML code. * `only_notif`:
 * Notification-only announcement. With this kind of announcements, the `body`,
 * `title`, `actionButtonText` and `exitButtonText` are ignored. Type of data
 * push. Valid values are: * `text/plain`: Text only data push: `body` property
 * must be plain text. * `text/base64`: Base 64 data push: `body` property must
 * be encoded in base 64.
 * . Possible values include: 'text/plain', 'text/html', 'only_notif',
 * 'text/base64'
 * @member {string} [deliveryTime] Announcements/polls only. Defines when the
 * campaign should be delivered. Valid values are: * `any`: Campaign will be
 * delivered as soon as possible. * `background`: iOS only. Campaign will be
 * only delivered when the application is in background (out of app). *
 * `session`: Campaign will be delivered when the application is running.
 * . Possible values include: 'any', 'background', 'session'
 * @member {array} [deliveryActivities] Announcements/polls only. Array
 * containing the list of activities in which the campaign can be delivered.
 * deliveryTime must be set to session. If the platform is iOS, this option can
 * also be set if deliveryTime is set to any. In that case, if the campaign is
 * received when the application is launched, it will be delivered only in the
 * specified list of activities.
 * @member {string} [startTime] The date at which the campaign should be
 * started. The date shall conform to the following format:
 * `yyyy-MM-ddTHH:mm:ssZ`. * If you set pushMode property to manual, this
 * attribute will be ignored. * If you set pushMode property to one-shot, then
 * the timezone attribute must be specified. Example: `2011-11-21 15:23Z`
 * @member {string} [endTime] The date at which the campaign should be
 * finished. The date shall conform to the following format:
 * `yyyy-MM-ddTHH:mm:ssZ`. Example: `2011-11-21 15:23Z`
 * @member {string} [timezone] The id of the time zone to use for the startTime
 * and endTime dates. If not provided, the two date attributes will be
 * expressed using the device timezone. Example: America/Los_Angeles
 * @member {string} [notificationType] Android only. Defines how the
 * notification should be displayed. Valid values are: * `system`: Display the
 * notification using a standard system notification. * `popup`: Display the
 * notification using a in-app banner notification.
 * . Possible values include: 'system', 'popup'. Default value: 'popup' .
 * @member {boolean} [notificationIcon] A flag indicating whether or not you
 * want to display the resource icon in notification content. Default value:
 * true .
 * @member {boolean} [notificationCloseable] A flag indicating whether or not
 * you want the notification to be closeable. Default value: true .
 * @member {boolean} [notificationVibrate] Android only. A flag indicating
 * whether or not you want the system notification to make a vibration. The
 * notificationType property must be set to system. Default value: false .
 * @member {boolean} [notificationSound] * `Android`: A flag indicating whether
 * or not you want the system notification to make a sound. The
 * `notificationType` property must be set to `system`. * `iOS`: A flag
 * indicating whether or not you want the native Apple Push notification to
 * make a sound. The `deliveryTime` property must be set to `any` or
 * `background`. This will play the 'default' sound. If you want to play a
 * custom sound, see the `notificationOptions` property. * `Windows`: A flag
 * indicating whether or not you want the native Windows Notification Service
 * to make a sound. The `deliveryTime` property must be set to `any`.
 * . Default value: false .
 * @member {boolean} [notificationBadge] A flag indicating whether or not you
 * want the native Apple Push notification to update the badge icon to the
 * number of unread messages. The `deliveryTime` property must be set to `any`
 * or `background`.
 * . Default value: false .
 * @member {object} [localization] Push campaigns can be localized using an
 * optional JSON object. The JSON key is a two-character language code as
 * specified by the ISO 639-1 standard. The corresponding value is an object
 * containing the localizable properties.
 * @member {array} [questions] Poll questions.
 */
export interface Campaign extends CampaignLocalization {
  name?: string;
  audience?: CampaignAudience;
  category?: string;
  pushMode?: string;
  type?: string;
  deliveryTime?: string;
  deliveryActivities?: string[];
  startTime?: string;
  endTime?: string;
  timezone?: string;
  notificationType?: string;
  notificationIcon?: boolean;
  notificationCloseable?: boolean;
  notificationVibrate?: boolean;
  notificationSound?: boolean;
  notificationBadge?: boolean;
  localization?: { [propertyName: string]: CampaignLocalization };
  questions?: PollQuestion[];
}

/**
 * @class
 * Initializes a new instance of the CampaignTestNewParameters class.
 * @constructor
 * @member {object} data
 * @member {string} [data.name] Unique name of the campaign.
 * @member {object} [data.audience] Specify which users will be targeted by
 * this campaign. By default, all users will be targeted. If you set `pushMode`
 * property to `manual`, the only thing you can specify in the audience is the
 * push quota filter. An audience is a boolean expression made of criteria
 * (variables) operators (`not`, `and` or `or`) and parenthesis. Additionally,
 * a set of filters can be added to an audience. 65535 bytes max as per JSON
 * encoding.
 * @member {string} [data.audience.expression] Boolean expression made of
 * criteria (variables) operators (`not`, `and` or `or`) and parenthesis.
 * Criterion names in the audience expression must start with a capital letter
 * and can only contain alphanumeric (A-Z,a-z,0-9) and underscore (_)
 * characters.
 * @member {object} [data.audience.criteria] Criteria by name.
 * @member {array} [data.audience.filters] Global filters applied to all
 * devices.
 * @member {string} [data.category] Category of the campaign. Categories can be
 * used on the application side to customize campaigns.
 * @member {string} [data.pushMode] Announcements/polls only. Defines how the
 * campaign is pushed. Valid values are: * `real-time`: Never ending campaign,
 * the campaign will be delivered  to your existing users and also to your new
 * users. * `one-shot`: In this mode, the campaign will be delivered only to
 * your existing users (campaign will stop after that). * `manual`: In this
 * mode, the campaign will not be pushed automatically to devices. You will
 * have to use the Push campaign command to push the campaign to your
 * end-users. Campaigns can be pushed multiple times to the same device.
 * . Possible values include: 'real-time', 'one-shot', 'manual'
 * @member {string} [data.type] Applicable only to announcements and data
 * pushes. Type of announcement. Valid values are: * `text/plain`: Text-only
 * announcement: `body` property should only contain plain text. * `text/html`:
 * HTML announcement: `body` attribute can contain HTML code. * `only_notif`:
 * Notification-only announcement. With this kind of announcements, the `body`,
 * `title`, `actionButtonText` and `exitButtonText` are ignored. Type of data
 * push. Valid values are: * `text/plain`: Text only data push: `body` property
 * must be plain text. * `text/base64`: Base 64 data push: `body` property must
 * be encoded in base 64.
 * . Possible values include: 'text/plain', 'text/html', 'only_notif',
 * 'text/base64'
 * @member {string} [data.deliveryTime] Announcements/polls only. Defines when
 * the campaign should be delivered. Valid values are: * `any`: Campaign will
 * be delivered as soon as possible. * `background`: iOS only. Campaign will be
 * only delivered when the application is in background (out of app). *
 * `session`: Campaign will be delivered when the application is running.
 * . Possible values include: 'any', 'background', 'session'
 * @member {array} [data.deliveryActivities] Announcements/polls only. Array
 * containing the list of activities in which the campaign can be delivered.
 * deliveryTime must be set to session. If the platform is iOS, this option can
 * also be set if deliveryTime is set to any. In that case, if the campaign is
 * received when the application is launched, it will be delivered only in the
 * specified list of activities.
 * @member {string} [data.startTime] The date at which the campaign should be
 * started. The date shall conform to the following format:
 * `yyyy-MM-ddTHH:mm:ssZ`. * If you set pushMode property to manual, this
 * attribute will be ignored. * If you set pushMode property to one-shot, then
 * the timezone attribute must be specified. Example: `2011-11-21 15:23Z`
 * @member {string} [data.endTime] The date at which the campaign should be
 * finished. The date shall conform to the following format:
 * `yyyy-MM-ddTHH:mm:ssZ`. Example: `2011-11-21 15:23Z`
 * @member {string} [data.timezone] The id of the time zone to use for the
 * startTime and endTime dates. If not provided, the two date attributes will
 * be expressed using the device timezone. Example: America/Los_Angeles
 * @member {string} [data.notificationType] Android only. Defines how the
 * notification should be displayed. Valid values are: * `system`: Display the
 * notification using a standard system notification. * `popup`: Display the
 * notification using a in-app banner notification.
 * . Possible values include: 'system', 'popup'
 * @member {boolean} [data.notificationIcon] A flag indicating whether or not
 * you want to display the resource icon in notification content.
 * @member {boolean} [data.notificationCloseable] A flag indicating whether or
 * not you want the notification to be closeable.
 * @member {boolean} [data.notificationVibrate] Android only. A flag indicating
 * whether or not you want the system notification to make a vibration. The
 * notificationType property must be set to system.
 * @member {boolean} [data.notificationSound] * `Android`: A flag indicating
 * whether or not you want the system notification to make a sound. The
 * `notificationType` property must be set to `system`. * `iOS`: A flag
 * indicating whether or not you want the native Apple Push notification to
 * make a sound. The `deliveryTime` property must be set to `any` or
 * `background`. This will play the 'default' sound. If you want to play a
 * custom sound, see the `notificationOptions` property. * `Windows`: A flag
 * indicating whether or not you want the native Windows Notification Service
 * to make a sound. The `deliveryTime` property must be set to `any`.
 * @member {boolean} [data.notificationBadge] A flag indicating whether or not
 * you want the native Apple Push notification to update the badge icon to the
 * number of unread messages. The `deliveryTime` property must be set to `any`
 * or `background`.
 * @member {object} [data.localization] Push campaigns can be localized using
 * an optional JSON object. The JSON key is a two-character language code as
 * specified by the ISO 639-1 standard. The corresponding value is an object
 * containing the localizable properties.
 * @member {array} [data.questions] Poll questions.
 */
export interface CampaignTestNewParameters extends CampaignTestSavedParameters {
  data: Campaign;
}

/**
 * @class
 * Initializes a new instance of the CampaignPushParameters class.
 * @constructor
 * @member {array} deviceIds Device identifiers to push as a JSON array of
 * strings. Note that if you want to push the same campaign several times to
 * the same device, you need to make several API calls.
 * @member {object} [data] Alternative campaign's content to use instead of the
 * referenced campaign. All campaign's properties can be overridden except for
 * the following: `name`, `manualPush`, `audience`, `startTime` and `timezone`.
 * `endTime` can be overridden while keeping original `timezone` parameter. The
 * effect is to change the client side expiration of the received campaign for
 * the specific devices. If your campaign is a *poll*, the provided data should
 * contain the same number of questions and choices that the one you created
 * with the create command. Please note that all the push messages created
 * using this parameter will expire after 4 weeks at maximum (`endTime`
 * property of the campaign will be used if lower than 4 weeks in the future).
 * @member {string} [data.name] Unique name of the campaign.
 * @member {object} [data.audience] Specify which users will be targeted by
 * this campaign. By default, all users will be targeted. If you set `pushMode`
 * property to `manual`, the only thing you can specify in the audience is the
 * push quota filter. An audience is a boolean expression made of criteria
 * (variables) operators (`not`, `and` or `or`) and parenthesis. Additionally,
 * a set of filters can be added to an audience. 65535 bytes max as per JSON
 * encoding.
 * @member {string} [data.audience.expression] Boolean expression made of
 * criteria (variables) operators (`not`, `and` or `or`) and parenthesis.
 * Criterion names in the audience expression must start with a capital letter
 * and can only contain alphanumeric (A-Z,a-z,0-9) and underscore (_)
 * characters.
 * @member {object} [data.audience.criteria] Criteria by name.
 * @member {array} [data.audience.filters] Global filters applied to all
 * devices.
 * @member {string} [data.category] Category of the campaign. Categories can be
 * used on the application side to customize campaigns.
 * @member {string} [data.pushMode] Announcements/polls only. Defines how the
 * campaign is pushed. Valid values are: * `real-time`: Never ending campaign,
 * the campaign will be delivered  to your existing users and also to your new
 * users. * `one-shot`: In this mode, the campaign will be delivered only to
 * your existing users (campaign will stop after that). * `manual`: In this
 * mode, the campaign will not be pushed automatically to devices. You will
 * have to use the Push campaign command to push the campaign to your
 * end-users. Campaigns can be pushed multiple times to the same device.
 * . Possible values include: 'real-time', 'one-shot', 'manual'
 * @member {string} [data.type] Applicable only to announcements and data
 * pushes. Type of announcement. Valid values are: * `text/plain`: Text-only
 * announcement: `body` property should only contain plain text. * `text/html`:
 * HTML announcement: `body` attribute can contain HTML code. * `only_notif`:
 * Notification-only announcement. With this kind of announcements, the `body`,
 * `title`, `actionButtonText` and `exitButtonText` are ignored. Type of data
 * push. Valid values are: * `text/plain`: Text only data push: `body` property
 * must be plain text. * `text/base64`: Base 64 data push: `body` property must
 * be encoded in base 64.
 * . Possible values include: 'text/plain', 'text/html', 'only_notif',
 * 'text/base64'
 * @member {string} [data.deliveryTime] Announcements/polls only. Defines when
 * the campaign should be delivered. Valid values are: * `any`: Campaign will
 * be delivered as soon as possible. * `background`: iOS only. Campaign will be
 * only delivered when the application is in background (out of app). *
 * `session`: Campaign will be delivered when the application is running.
 * . Possible values include: 'any', 'background', 'session'
 * @member {array} [data.deliveryActivities] Announcements/polls only. Array
 * containing the list of activities in which the campaign can be delivered.
 * deliveryTime must be set to session. If the platform is iOS, this option can
 * also be set if deliveryTime is set to any. In that case, if the campaign is
 * received when the application is launched, it will be delivered only in the
 * specified list of activities.
 * @member {string} [data.startTime] The date at which the campaign should be
 * started. The date shall conform to the following format:
 * `yyyy-MM-ddTHH:mm:ssZ`. * If you set pushMode property to manual, this
 * attribute will be ignored. * If you set pushMode property to one-shot, then
 * the timezone attribute must be specified. Example: `2011-11-21 15:23Z`
 * @member {string} [data.endTime] The date at which the campaign should be
 * finished. The date shall conform to the following format:
 * `yyyy-MM-ddTHH:mm:ssZ`. Example: `2011-11-21 15:23Z`
 * @member {string} [data.timezone] The id of the time zone to use for the
 * startTime and endTime dates. If not provided, the two date attributes will
 * be expressed using the device timezone. Example: America/Los_Angeles
 * @member {string} [data.notificationType] Android only. Defines how the
 * notification should be displayed. Valid values are: * `system`: Display the
 * notification using a standard system notification. * `popup`: Display the
 * notification using a in-app banner notification.
 * . Possible values include: 'system', 'popup'
 * @member {boolean} [data.notificationIcon] A flag indicating whether or not
 * you want to display the resource icon in notification content.
 * @member {boolean} [data.notificationCloseable] A flag indicating whether or
 * not you want the notification to be closeable.
 * @member {boolean} [data.notificationVibrate] Android only. A flag indicating
 * whether or not you want the system notification to make a vibration. The
 * notificationType property must be set to system.
 * @member {boolean} [data.notificationSound] * `Android`: A flag indicating
 * whether or not you want the system notification to make a sound. The
 * `notificationType` property must be set to `system`. * `iOS`: A flag
 * indicating whether or not you want the native Apple Push notification to
 * make a sound. The `deliveryTime` property must be set to `any` or
 * `background`. This will play the 'default' sound. If you want to play a
 * custom sound, see the `notificationOptions` property. * `Windows`: A flag
 * indicating whether or not you want the native Windows Notification Service
 * to make a sound. The `deliveryTime` property must be set to `any`.
 * @member {boolean} [data.notificationBadge] A flag indicating whether or not
 * you want the native Apple Push notification to update the badge icon to the
 * number of unread messages. The `deliveryTime` property must be set to `any`
 * or `background`.
 * @member {object} [data.localization] Push campaigns can be localized using
 * an optional JSON object. The JSON key is a two-character language code as
 * specified by the ISO 639-1 standard. The corresponding value is an object
 * containing the localizable properties.
 * @member {array} [data.questions] Poll questions.
 */
export interface CampaignPushParameters {
  deviceIds: string[];
  data?: Campaign;
}

/**
 * @class
 * Initializes a new instance of the CampaignState class.
 * @constructor
 * @member {string} [state] State of the campaign, or 'queued' when testing a
 * campaign. Possible values include: 'draft', 'scheduled', 'in-progress',
 * 'finished', 'queued'
 */
export interface CampaignState {
  state?: string;
}

/**
 * @class
 * Initializes a new instance of the CampaignStateResult class.
 * @constructor
 * @member {number} id Campaign identifier.
 */
export interface CampaignStateResult extends CampaignState {
  id: number;
}

/**
 * @class
 * Initializes a new instance of the CarrierNameCriterion class.
 * @constructor
 * Used to target devices based on their carrier name.
 *
 * @member {string} [name] Carrier name value.
 */
export interface CarrierNameCriterion extends Criterion {
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the CarrierCountryCriterion class.
 * @constructor
 * Used to target devices based on their carrier country.
 *
 * @member {string} [name] Two-characters country code (ISO 3166-1).
 */
export interface CarrierCountryCriterion extends Criterion {
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the FirmwareVersionCriterion class.
 * @constructor
 * Used to target devices based on their firmware version.
 *
 * @member {string} [name] Firmware version.
 */
export interface FirmwareVersionCriterion extends Criterion {
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the DeviceManufacturerCriterion class.
 * @constructor
 * Used to target devices based on the device manufacturer.
 *
 * @member {string} [name] The device manufacturer.
 */
export interface DeviceManufacturerCriterion extends Criterion {
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the DeviceModelCriterion class.
 * @constructor
 * Used to target devices based on the device model.
 *
 * @member {string} [name] The device model.
 */
export interface DeviceModelCriterion extends Criterion {
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the ApplicationVersionCriterion class.
 * @constructor
 * Used to target devices based on the version of the application they are
 * using.
 *
 * @member {string} [name] The application version.
 */
export interface ApplicationVersionCriterion extends Criterion {
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the NetworkTypeCriterion class.
 * @constructor
 * Used to target devices based their network type.
 *
 * @member {string} [name] The network type (Wifi, Mobile...).
 */
export interface NetworkTypeCriterion extends Criterion {
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the LanguageCriterion class.
 * @constructor
 * Used to target devices based on the language of their device.
 *
 * @member {string} [name] Two character language code (ISO 639-1).
 */
export interface LanguageCriterion extends Criterion {
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the ScreenSizeCriterion class.
 * @constructor
 * Used to target devices based on the screen resolution of their device.
 *
 * @member {string} [name] Screen size using the following format
 * WIDTH**x**HEIGHT.
 */
export interface ScreenSizeCriterion extends Criterion {
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the LocationCriterion class.
 * @constructor
 * Used to target devices based on their last know area.
 *
 * @member {string} [country] Two character country code where the user is
 * located (ISO 3166-1).
 * @member {string} [region] An administrative region of the country, such as a
 * state or province.
 * @member {string} [locality] A locality within the administrative region,
 * such as a town or city.
 */
export interface LocationCriterion extends Criterion {
  country?: string;
  region?: string;
  locality?: string;
}

/**
 * @class
 * Initializes a new instance of the GeoFencingCriterion class.
 * @constructor
 * Used to target devices based on a specific region. A center point (defined
 * by a latitude and longitude) and a radius form the boundary for the region.
 * This criterion will be met when the user crosses the boundaries of the
 * region.
 *
 *
 * @member {number} [lat] The latitude of the central point of the region.
 * @member {number} [lon] The longitude of the central point of the region.
 * @member {number} [radius] The radius of the central point of the region, in
 * meters.
 * @member {number} [expiration] Number of minutes before device location is
 * considered to be expired.
 */
export interface GeoFencingCriterion extends Criterion {
  lat?: number;
  lon?: number;
  radius?: number;
  expiration?: number;
}

/**
 * @class
 * Initializes a new instance of the AnnouncementFeedbackCriterion class.
 * @constructor
 * Used to target devices who received an announcement.
 *
 * @member {number} [contentId] The unique identifier of the announcement.
 * @member {string} [action] Action that was performed on the announcement.
 * Possible values include: 'pushed', 'replied', 'actioned', 'exited'
 */
export interface AnnouncementFeedbackCriterion extends Criterion {
  contentId?: number;
  action?: string;
}

/**
 * @class
 * Initializes a new instance of the PollFeedbackCriterion class.
 * @constructor
 * Used to target devices who received a poll.
 *
 * @member {number} [contentId] The unique identifier of the poll.
 * @member {string} [action] Action that was performed on the poll. Possible
 * values include: 'pushed', 'replied', 'actioned', 'exited'
 */
export interface PollFeedbackCriterion extends Criterion {
  contentId?: number;
  action?: string;
}

/**
 * @class
 * Initializes a new instance of the PollAnswerFeedbackCriterion class.
 * @constructor
 * Used to target devices who answered X to a given question.
 *
 * @member {number} [contentId] The unique identifier of the poll.
 * @member {number} [choiceId] The unique identifier of the choice.
 */
export interface PollAnswerFeedbackCriterion extends Criterion {
  contentId?: number;
  choiceId?: number;
}

/**
 * @class
 * Initializes a new instance of the DatapushFeedbackCriterion class.
 * @constructor
 * Used to target devices who received a data push.
 *
 * @member {number} [contentId] The unique identifier of the data push.
 * @member {string} [action] Action that was performed on the data push (action
 * depends on the return value in the callbacks you declared in the client
 * code).
 * . Possible values include: 'pushed', 'replied', 'actioned', 'exited'
 */
export interface DatapushFeedbackCriterion extends Criterion {
  contentId?: number;
  action?: string;
}

/**
 * @class
 * Initializes a new instance of the SegmentCriterion class.
 * @constructor
 * Target devices based on an existing segment.
 *
 * @member {number} [id] Segment identifier.
 * @member {boolean} [exclude] If value is true, the criterion will target
 * users that are NOT part of the segment.
 */
export interface SegmentCriterion extends Criterion {
  id?: number;
  exclude?: boolean;
}

/**
 * @class
 * Initializes a new instance of the StringTagCriterion class.
 * @constructor
 * Target devices based on a string tag value.
 *
 * @member {string} [name] The name of the custom tag.
 * @member {string} [value] A custom string to match for tag value (? and *
 * characters can be used to perform wildcard matching).
 */
export interface StringTagCriterion extends Criterion {
  name?: string;
  value?: string;
}

/**
 * @class
 * Initializes a new instance of the DateTagCriterion class.
 * @constructor
 * Target devices based on a date tag value.
 *
 * @member {string} [name] The name of the custom tag.
 * @member {date} [value] It can be either: * an absolute date using yyyy-MM-dd
 * format (e.g. 1969-12-07 stands for 7 Dec 1969). * an offset in days relative
 * to the current day (`TODAY` + `value`).
 * @member {string} [op] comparison operator: `EQ` (equal to), `LT` (less
 * than), `GT` (greater than), `LE` (less than or equal to) or `GE` (greater
 * than or equal to). Possible values include: 'EQ', 'LT', 'GT', 'LE', 'GE'
 */
export interface DateTagCriterion extends Criterion {
  name?: string;
  value?: Date;
  op?: string;
}

/**
 * @class
 * Initializes a new instance of the IntegerTagCriterion class.
 * @constructor
 * Target devices based on an integer tag value.
 *
 * @member {string} [name] The name of the custom tag.
 * @member {number} [value] A custom integer value to match.
 * @member {string} [op] comparison operator: `EQ` (equal to), `LT` (less
 * than), `GT` (greater than), `LE` (less than or equal to) or `GE` (greater
 * than or equal to). Possible values include: 'EQ', 'LT', 'GT', 'LE', 'GE'
 */
export interface IntegerTagCriterion extends Criterion {
  name?: string;
  value?: number;
  op?: string;
}

/**
 * @class
 * Initializes a new instance of the BooleanTagCriterion class.
 * @constructor
 * Target devices based on a boolean tag value.
 *
 * @member {string} [name] The name of the custom tag.
 * @member {boolean} [value] A custom boolean value to match.
 */
export interface BooleanTagCriterion extends Criterion {
  name?: string;
  value?: boolean;
}

/**
 * @class
 * Initializes a new instance of the EngageSubsetFilter class.
 * @constructor
 * Send only to a maximum of max users.
 *
 * @member {number} [max] An integer value representing the maximum users that
 * should be pushed.
 */
export interface EngageSubsetFilter extends Filter {
  max?: number;
}

/**
 * @class
 * Initializes a new instance of the EngageOldUsersFilter class.
 * @constructor
 * Send only to users whose first app use is more than {threshold} days old.
 *
 * @member {number} [threshold] An integer value representing the threshold to
 * apply on this filter.
 */
export interface EngageOldUsersFilter extends Filter {
  threshold?: number;
}

/**
 * @class
 * Initializes a new instance of the EngageNewUsersFilter class.
 * @constructor
 * Send only to users whose first app use is less than {threshold} days old.
 *
 * @member {number} [threshold] An integer value representing the threshold to
 * apply on this filter.
 */
export interface EngageNewUsersFilter extends Filter {
  threshold?: number;
}

/**
 * @class
 * Initializes a new instance of the EngageActiveUsersFilter class.
 * @constructor
 * Send only to users who have used the app in the last {threshold} days.
 *
 * @member {number} [threshold] An integer value representing the threshold to
 * apply on this filter.
 */
export interface EngageActiveUsersFilter extends Filter {
  threshold?: number;
}

/**
 * @class
 * Initializes a new instance of the EngageIdleUsersFilter class.
 * @constructor
 * Send only to users who haven't used the app in the last {threshold} days.
 *
 * @member {number} [threshold] An integer value representing the threshold to
 * apply on this filter.
 */
export interface EngageIdleUsersFilter extends Filter {
  threshold?: number;
}

/**
 * @class
 * Initializes a new instance of the NativePushEnabledFilter class.
 * @constructor
 * Engage only users with native push enabled.
 *
 */
export interface NativePushEnabledFilter extends Filter {
}

/**
 * @class
 * Initializes a new instance of the PushQuotaFilter class.
 * @constructor
 * Engage only users for whom the push quota is not reached.
 *
 */
export interface PushQuotaFilter extends Filter {
}

/**
 * @class
 * Initializes a new instance of the AppInfoFilter class.
 * @constructor
 * Send only to users who have some app info set. This is a special filter that
 * is automatically added if your campaign contains appInfo parameters. It is
 * not intended to be public and should not be used as it could be removed or
 * replaced by the API.
 *
 *
 * @member {array} [appInfo] An array containing all the required appInfo.
 */
export interface AppInfoFilter extends Filter {
  appInfo?: string[];
}

/**
 * @class
 * Initializes a new instance of the CampaignListResult class.
 * @constructor
 * @member {string} [name] Name of the campaign.
 * @member {date} [activatedDate] The date at which the campaign was activated
 * (Not present if not yet activated). The date conforms to the following
 * format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
 * @member {date} [finishedDate] The date at which the campaign was finished
 * (Not present if not yet finished). The date conforms to the following
 * format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
 * @member {date} [startTime] The date at which the campaign should be started
 * if specified. The date conforms to the following format:
 * `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. Applicable
 * only to announcements and polls.
 * @member {date} [endTime] The date at which the campaign should be finished
 * if specified. The date conforms to the following format:
 * `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. Applicable
 * only to announcements and polls.
 * @member {string} [timezone] The id of the time zone to use for the
 * `startTime` and `endTime` dates. If not provided, the two date attributes
 * are referencing to the device timezone. Applicable only to announcements and
 * polls.
 */
export interface CampaignListResult extends CampaignStateResult {
  name?: string;
  activatedDate?: Date;
  finishedDate?: Date;
  startTime?: Date;
  endTime?: Date;
  timezone?: string;
}

/**
 * @class
 * Initializes a new instance of the CampaignResult class.
 * @constructor
 * @member {number} [id] Campaign identifier.
 * @member {string} [state] State of the campaign, or 'queued' when testing a
 * campaign. Possible values include: 'draft', 'scheduled', 'in-progress',
 * 'finished', 'queued'
 * @member {date} [activatedDate] The date at which the campaign was activated
 * (Not present if not yet activated). The date conforms to the following
 * format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
 * @member {date} [finishedDate] The date at which the campaign was finished
 * (Not present if not yet finished). The date conforms to the following
 * format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
 */
export interface CampaignResult extends Campaign {
  id?: number;
  state?: string;
  activatedDate?: Date;
  finishedDate?: Date;
}

/**
 * @class
 * Initializes a new instance of the CampaignPushResult class.
 * @constructor
 * @member {array} [invalidDeviceIds] A JSON array containing all identifiers
 * that have been rejected. A device can be rejected for the following reasons:
 * * The device hasn’t reported any session yet. * The device is over quota (if
 * a push quota filter is applied on your campaign). Please note that if the
 * request parameters are valid but all the specified devices are rejected, the
 * status code is still `200` with a response including all the devices as
 * being rejected.
 */
export interface CampaignPushResult {
  invalidDeviceIds?: string[];
}

/**
 * @class
 * Initializes a new instance of the CampaignStatisticsResult class.
 * @constructor
 * @member {number} [queued] Number of times the campaign was registered to be
 * pushed.
 * @member {number} [pushed] Number of pushes performed.
 * @member {number} [pushedNative] Total number of native pushes. Information
 * only available on Android, iOS, Windows Phone and Windows applications.
 * @member {number} [pushedNativeGoogle] Number of C2DM/GCM pushes (available
 * only on Android applications).
 * @member {number} [pushedNativeAdm] Number of ADM pushes (available only on
 * Android applications).
 * @member {number} [delivered] Number of times the campaign was received by
 * the application (Not present in case of a native-push).
 * @member {number} [dropped] Number of times the campaign was dropped by the
 * application. It can happen if the SDK failed to parse the campaign payload
 * or if an error occurred while trying to notify the end-user (Not present in
 * case of a native-push).
 * @member {number} [systemNotificationDisplayed] Number of times the system
 * notification was displayed (Not present in case of a data-push or a
 * native-push). On Android it corresponds to a status bar notification.
 * @member {number} [inAppNotificationDisplayed] Number of times the in-app
 * notification was displayed (Not present in case of a data-push or a
 * native-push).
 * @member {number} [contentDisplayed] Number of times the campaign’s content
 * view was displayed (Not present in case of a notification-only announcement,
 * a data-push or a native-push).
 * @member {number} [systemNotificationActioned] Number of times the system
 * notification (On Android it corresponds to a status bar notification. On
 * iOS, it is the Apple Push notification) was actioned.
 * @member {number} [systemNotificationExited] Number of times the system
 * notification was exited (Not present in case of a data-push or a
 * native-push).
 * @member {number} [inAppNotificationActioned] Number of times the in-app
 * notification was actioned (Not present in case of a data-push or a
 * native-push).
 * @member {number} [inAppNotificationExited] Number of times the in-app
 * notification was exited (Not present in case of a data-push or a
 * native-push).
 * @member {number} [contentActioned] Number of times the campaign’s content
 * view was actioned (Not present in case of a notification-only announcement
 * or a native-push).
 * @member {number} [contentExited] Number of times the campaign’s content view
 * was exited (Not present in case of a notification-only announcement or a
 * native-push).
 * @member {object} [answers] Poll specific statistics.
 */
export interface CampaignStatisticsResult {
  queued?: number;
  pushed?: number;
  pushedNative?: number;
  pushedNativeGoogle?: number;
  pushedNativeAdm?: number;
  delivered?: number;
  dropped?: number;
  systemNotificationDisplayed?: number;
  inAppNotificationDisplayed?: number;
  contentDisplayed?: number;
  systemNotificationActioned?: number;
  systemNotificationExited?: number;
  inAppNotificationActioned?: number;
  inAppNotificationExited?: number;
  contentActioned?: number;
  contentExited?: number;
  answers?: { [propertyName: string]: any };
}

/**
 * @class
 * Initializes a new instance of the DeviceMeta class.
 * @constructor
 * @member {number} [firstSeen] First time the device used the application in
 * milliseconds since January 1st, 1970 UTC.
 * @member {number} [lastSeen] Last time the device used the application in
 * milliseconds since January 1st, 1970 UTC.
 * @member {number} [lastInfo] Timestamp corresponding to the info object in
 * milliseconds since January 1st, 1970 UTC.
 * @member {number} [lastLocation] Timestamp corresponding to the location
 * object in milliseconds since January 1st, 1970 UTC.
 * @member {boolean} [nativePushEnabled] Boolean indicating if native push
 * notifications (like Android’s GCM or Apple’s APNS) are enabled for the
 * application. This boolean is set to true when the application registers
 * successfully to the native push service, and set to false when the native
 * push service reports to Mobile Engagement that the application can no longer
 * be pushed (which means that it has been uninstalled). This report is
 * performed a few hours after Mobile Engagement has tried to perform a native
 * push to a device on which the application has been uninstalled.
 */
export interface DeviceMeta {
  firstSeen?: number;
  lastSeen?: number;
  lastInfo?: number;
  lastLocation?: number;
  nativePushEnabled?: boolean;
}

/**
 * @class
 * Initializes a new instance of the DeviceQueryResult class.
 * @constructor
 * @member {string} deviceId The device result.
 * @member {object} [meta] Application usage data.
 * @member {number} [meta.firstSeen] First time the device used the application
 * in milliseconds since January 1st, 1970 UTC.
 * @member {number} [meta.lastSeen] Last time the device used the application
 * in milliseconds since January 1st, 1970 UTC.
 * @member {number} [meta.lastInfo] Timestamp corresponding to the info object
 * in milliseconds since January 1st, 1970 UTC.
 * @member {number} [meta.lastLocation] Timestamp corresponding to the location
 * object in milliseconds since January 1st, 1970 UTC.
 * @member {boolean} [meta.nativePushEnabled] Boolean indicating if native push
 * notifications (like Android’s GCM or Apple’s APNS) are enabled for the
 * application. This boolean is set to true when the application registers
 * successfully to the native push service, and set to false when the native
 * push service reports to Mobile Engagement that the application can no longer
 * be pushed (which means that it has been uninstalled). This report is
 * performed a few hours after Mobile Engagement has tried to perform a native
 * push to a device on which the application has been uninstalled.
 * @member {object} [appInfo] Also known as tags, a key-value set as a JSON
 * object.
 */
export interface DeviceQueryResult {
  deviceId: string;
  meta?: DeviceMeta;
  appInfo?: { [propertyName: string]: string };
}

/**
 * @class
 * Initializes a new instance of the DeviceInfo class.
 * @constructor
 * @member {string} [phoneModel] Phone model.
 * @member {string} [phoneManufacturer] Phone manufacturer
 * @member {string} [firmwareVersion] Firmware version.
 * @member {string} [firmwareName] Firmware name.
 * @member {number} [androidAPILevel] Android API level.
 * @member {string} [carrierCountry] Carrier country.
 * @member {string} [locale] Locale code.
 * @member {string} [carrierName] Carrier name.
 * @member {string} [networkType] Network type.
 * @member {string} [networkSubtype] Network sub-type.
 * @member {string} [applicationVersionName] Application version name.
 * @member {number} [applicationVersionCode] Application version code.
 * @member {number} [timeZoneOffset] The offset in minutes from UTC for the
 * device time zone, including daylight savings time.
 * @member {string} [serviceVersion] SDK version.
 */
export interface DeviceInfo {
  phoneModel?: string;
  phoneManufacturer?: string;
  firmwareVersion?: string;
  firmwareName?: string;
  androidAPILevel?: number;
  carrierCountry?: string;
  locale?: string;
  carrierName?: string;
  networkType?: string;
  networkSubtype?: string;
  applicationVersionName?: string;
  applicationVersionCode?: number;
  timeZoneOffset?: number;
  serviceVersion?: string;
}

/**
 * @class
 * Initializes a new instance of the DeviceLocation class.
 * @constructor
 * @member {string} [countrycode] The ISO 3166 two-letter country code.
 * @member {string} [region] An administrative region of the nation, such as a
 * state or province.
 * @member {string} [locality] A locality within the administrative region,
 * such as a town or city.
 */
export interface DeviceLocation {
  countrycode?: string;
  region?: string;
  locality?: string;
}

/**
 * @class
 * Initializes a new instance of the Device class.
 * @constructor
 * @member {string} deviceId The device result.
 * @member {object} [meta] Application usage data.
 * @member {number} [meta.firstSeen] First time the device used the application
 * in milliseconds since January 1st, 1970 UTC.
 * @member {number} [meta.lastSeen] Last time the device used the application
 * in milliseconds since January 1st, 1970 UTC.
 * @member {number} [meta.lastInfo] Timestamp corresponding to the info object
 * in milliseconds since January 1st, 1970 UTC.
 * @member {number} [meta.lastLocation] Timestamp corresponding to the location
 * object in milliseconds since January 1st, 1970 UTC.
 * @member {boolean} [meta.nativePushEnabled] Boolean indicating if native push
 * notifications (like Android’s GCM or Apple’s APNS) are enabled for the
 * application. This boolean is set to true when the application registers
 * successfully to the native push service, and set to false when the native
 * push service reports to Mobile Engagement that the application can no longer
 * be pushed (which means that it has been uninstalled). This report is
 * performed a few hours after Mobile Engagement has tried to perform a native
 * push to a device on which the application has been uninstalled.
 * @member {object} [info] Last technical data received (concerning device,
 * system, network and application identification).
 * @member {string} [info.phoneModel] Phone model.
 * @member {string} [info.phoneManufacturer] Phone manufacturer
 * @member {string} [info.firmwareVersion] Firmware version.
 * @member {string} [info.firmwareName] Firmware name.
 * @member {number} [info.androidAPILevel] Android API level.
 * @member {string} [info.carrierCountry] Carrier country.
 * @member {string} [info.locale] Locale code.
 * @member {string} [info.carrierName] Carrier name.
 * @member {string} [info.networkType] Network type.
 * @member {string} [info.networkSubtype] Network sub-type.
 * @member {string} [info.applicationVersionName] Application version name.
 * @member {number} [info.applicationVersionCode] Application version code.
 * @member {number} [info.timeZoneOffset] The offset in minutes from UTC for
 * the device time zone, including daylight savings time.
 * @member {string} [info.serviceVersion] SDK version.
 * @member {object} [location] Last geo-location data received.
 * @member {string} [location.countrycode] The ISO 3166 two-letter country
 * code.
 * @member {string} [location.region] An administrative region of the nation,
 * such as a state or province.
 * @member {string} [location.locality] A locality within the administrative
 * region, such as a town or city.
 * @member {object} [appInfo] Also known as tags, a key-value set as a JSON
 * object.
 */
export interface Device {
  deviceId: string;
  meta?: DeviceMeta;
  info?: DeviceInfo;
  location?: DeviceLocation;
  appInfo?: { [propertyName: string]: string };
}

/**
 * @class
 * Initializes a new instance of the DeviceTagsParameters class.
 * @constructor
 * @member {object} tags A JSON object describing the set of tags to record for
 * a set of users. Each key is a device/user identifier, each value is itself a
 * key/value set: the tags to set for the specified device/user identifier.
 * @member {boolean} [deleteOnNull] If this parameter is `true`, tags with a
 * null value will be deleted. Default value: false .
 */
export interface DeviceTagsParameters {
  tags: { [propertyName: string]: { [propertyName: string]: string } };
  deleteOnNull?: boolean;
}

/**
 * @class
 * Initializes a new instance of the DeviceTagsResult class.
 * @constructor
 * @member {array} invalidIds A JSON array containing all identifiers that have
 * been rejected. Please note that if the request parameters are valid but all
 * the specified devices are rejected, the status code is still `200` with a
 * response including all the devices as being rejected.
 */
export interface DeviceTagsResult {
  invalidIds: string[];
}

/**
 * @class
 * Initializes a new instance of the ExportOptions class.
 * @constructor
 * Options to control export generation.
 *
 * @member {boolean} [exportUserId]
 */
export interface ExportOptions {
  exportUserId?: boolean;
}

/**
 * @class
 * Initializes a new instance of the DateRangeExportTaskParameter class.
 * @constructor
 * @member {string} containerUrl
 * @member {string} [description] A description of the export task.
 * @member {date} startDate The RFC3339 full-date of the start of the period
 * for which data is exported.
 * @member {date} endDate The RFC3339 full-date of the end of the period for
 * which data is exported.
 * @member {string} exportFormat The format of the exported data. Possible
 * values include: 'JsonBlob', 'CsvBlob'
 */
export interface DateRangeExportTaskParameter {
  containerUrl: string;
  description?: string;
  startDate: Date;
  endDate: Date;
  exportFormat: string;
}

/**
 * @class
 * Initializes a new instance of the ExportTaskParameter class.
 * @constructor
 * @member {string} containerUrl
 * @member {string} [description] A description of the export task.
 * @member {string} exportFormat The format of the exported data. Possible
 * values include: 'JsonBlob', 'CsvBlob'
 */
export interface ExportTaskParameter {
  containerUrl: string;
  description?: string;
  exportFormat: string;
}

/**
 * @class
 * Initializes a new instance of the FeedbackByCampaignParameter class.
 * @constructor
 * @member {string} containerUrl
 * @member {string} [description] A description of the export task.
 * @member {string} campaignType Possible values include: 'Announcement',
 * 'DataPush', 'NativePush', 'Poll'
 * @member {array} campaignIds A list of campaign identifiers.
 * @member {string} exportFormat The format of the exported data. Possible
 * values include: 'JsonBlob', 'CsvBlob'
 */
export interface FeedbackByCampaignParameter {
  containerUrl: string;
  description?: string;
  campaignType: string;
  campaignIds: number[];
  exportFormat: string;
}

/**
 * @class
 * Initializes a new instance of the FeedbackByDateRangeParameter class.
 * @constructor
 * @member {string} containerUrl
 * @member {string} [description] A description of the export task.
 * @member {string} campaignType Possible values include: 'Announcement',
 * 'DataPush', 'NativePush', 'Poll'
 * @member {date} campaignWindowStart The RFC3339 date-time start of the period
 * for inclusion of active campaigns.
 * @member {date} campaignWindowEnd The RFC3339 date-time end of the period for
 * inclusion of active campaigns.
 * @member {string} exportFormat The format of the exported data. Possible
 * values include: 'JsonBlob', 'CsvBlob'
 */
export interface FeedbackByDateRangeParameter {
  containerUrl: string;
  description?: string;
  campaignType: string;
  campaignWindowStart: Date;
  campaignWindowEnd: Date;
  exportFormat: string;
}

/**
 * @class
 * Initializes a new instance of the ExportTaskResult class.
 * @constructor
 * @member {string} id Unique identifier of the export task.
 * @member {string} [description] A description of the export task.
 * @member {string} state Possible values include: 'Queued', 'Started',
 * 'Succeeded', 'Failed'
 * @member {date} dateCreated The RFC3339 date-time the export task was
 * created.
 * @member {date} [dateCompleted] The RFC3339 date-time the export task was
 * completed.
 * @member {string} exportType Possible values include: 'Activity', 'Tag',
 * 'Crash', 'Error', 'Event', 'Job', 'Session', 'Token', 'Push'
 * @member {string} [errorDetails] Details of errors encountered during the
 * export, if any.
 */
export interface ExportTaskResult {
  id: string;
  description?: string;
  state: string;
  dateCreated: Date;
  dateCompleted?: Date;
  exportType: string;
  errorDetails?: string;
}

/**
 * @class
 * Initializes a new instance of the ImportTask class.
 * @constructor
 * @member {string} [storageUrl] A shared Access Signature (SAS) Storage URI
 * where the job results will be retrieved from.
 */
export interface ImportTask {
  storageUrl?: string;
}

/**
 * @class
 * Initializes a new instance of the ImportTaskResult class.
 * @constructor
 * @member {string} [id] Unique identifier of the import task.
 * @member {string} [state] The current state of the import task. Possible
 * values include: 'Queued', 'Started', 'Succeeded', 'Failed'
 * @member {date} [dateCreated] The date at which the import job was created.
 * The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as
 * specified by the ISO 8601 standard.
 * @member {date} [dateCompleted] The date at which the import job completed
 * (Not present if not yet completed).
 * The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as
 * specified by the ISO 8601 standard.
 * @member {string} [errorDetails] Details of any errors encountered during the
 * import, if any.
 */
export interface ImportTaskResult extends ImportTask {
  id?: string;
  state?: string;
  dateCreated?: Date;
  dateCompleted?: Date;
  errorDetails?: string;
}


/**
 * @class
 * Initializes a new instance of the AppCollectionListResult class.
 * @constructor
 * The list AppCollections operation response.
 *
 * @member {string} [nextLink] When the results are paged, the nextLink is the
 * URI for the next page of results. This property is empty when there are no
 * additional pages.
 */
export interface AppCollectionListResult extends Array<AppCollection> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the AppListResult class.
 * @constructor
 * The list Apps operation response.
 *
 * @member {string} [nextLink] When the results are paged, the nextLink is the
 * URI for the next page of results. This property is empty when there are no
 * additional pages.
 */
export interface AppListResult extends Array<App> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the CampaignsListResult class.
 * @constructor
 * The campaigns list result.
 *
 * @member {string} [nextLink] When using `top` parameter and if partial
 * results are returned, this property describes a URI path to get the next
 * results. This property is not set when reaching the last page.
 */
export interface CampaignsListResult extends Array<CampaignListResult> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the DevicesQueryResult class.
 * @constructor
 * The campaigns list result.
 *
 * @member {string} [nextLink] If partial results are returned, this property
 * describes a URI path to get the next result page.
 */
export interface DevicesQueryResult extends Array<DeviceQueryResult> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the ExportTaskListResult class.
 * @constructor
 * Gets a paged list of ExportTasks.
 *
 * @member {string} [nextLink] When the results are paged, the nextLink is the
 * URI for the next page of results. This property is empty when there are no
 * additional pages.
 */
export interface ExportTaskListResult extends Array<ExportTaskResult> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the ImportTaskListResult class.
 * @constructor
 * Gets a paged list of import tasks.
 *
 * @member {string} [nextLink] When the results are paged, the nextLink is the
 * URI for the next page of results. This property is empty when there are no
 * additional pages.
 */
export interface ImportTaskListResult extends Array<ImportTaskResult> {
  nextLink?: string;
}
