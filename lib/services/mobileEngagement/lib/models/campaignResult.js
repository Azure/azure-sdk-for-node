/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Class representing a CampaignResult.
 * @extends models['Campaign']
 */
class CampaignResult extends models['Campaign'] {
  /**
   * Create a CampaignResult.
   * @member {number} [id] Campaign identifier.
   * @member {string} [state] State of the campaign, or 'queued' when testing a
   * campaign. Possible values include: 'draft', 'scheduled', 'in-progress',
   * 'finished', 'queued'
   * @member {date} [activatedDate] The date at which the campaign was
   * activated (Not present if not yet activated). The date conforms to the
   * following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601
   * standard.
   * @member {date} [finishedDate] The date at which the campaign was finished
   * (Not present if not yet finished). The date conforms to the following
   * format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of CampaignResult
   *
   * @returns {object} metadata of CampaignResult
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'CampaignResult',
      type: {
        name: 'Composite',
        className: 'CampaignResult',
        modelProperties: {
          notificationTitle: {
            required: false,
            serializedName: 'notificationTitle',
            constraints: {
              MaxLength: 2000
            },
            type: {
              name: 'String'
            }
          },
          notificationMessage: {
            required: false,
            serializedName: 'notificationMessage',
            constraints: {
              MaxLength: 4000
            },
            type: {
              name: 'String'
            }
          },
          notificationImage: {
            required: false,
            serializedName: 'notificationImage',
            constraints: {
              MaxLength: 65535
            },
            type: {
              name: 'ByteArray'
            }
          },
          notificationOptions: {
            required: false,
            serializedName: 'notificationOptions',
            type: {
              name: 'Composite',
              className: 'NotificationOptions'
            }
          },
          title: {
            required: false,
            serializedName: 'title',
            constraints: {
              MaxLength: 128
            },
            type: {
              name: 'String'
            }
          },
          body: {
            required: false,
            serializedName: 'body',
            constraints: {
              MaxLength: 65535
            },
            type: {
              name: 'String'
            }
          },
          actionButtonText: {
            required: false,
            serializedName: 'actionButtonText',
            constraints: {
              MaxLength: 64
            },
            type: {
              name: 'String'
            }
          },
          exitButtonText: {
            required: false,
            serializedName: 'exitButtonText',
            constraints: {
              MaxLength: 64
            },
            type: {
              name: 'String'
            }
          },
          actionUrl: {
            required: false,
            serializedName: 'actionUrl',
            constraints: {
              MaxLength: 2000
            },
            type: {
              name: 'String'
            }
          },
          payload: {
            required: false,
            serializedName: 'payload',
            type: {
              name: 'Object'
            }
          },
          name: {
            required: false,
            serializedName: 'name',
            constraints: {
              MaxLength: 64
            },
            type: {
              name: 'String'
            }
          },
          audience: {
            required: false,
            serializedName: 'audience',
            type: {
              name: 'Composite',
              className: 'CampaignAudience'
            }
          },
          category: {
            required: false,
            serializedName: 'category',
            constraints: {
              MaxLength: 64
            },
            type: {
              name: 'String'
            }
          },
          pushMode: {
            required: false,
            serializedName: 'pushMode',
            defaultValue: 'real-time',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          deliveryTime: {
            required: false,
            serializedName: 'deliveryTime',
            type: {
              name: 'String'
            }
          },
          deliveryActivities: {
            required: false,
            serializedName: 'deliveryActivities',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          startTime: {
            required: false,
            serializedName: 'startTime',
            type: {
              name: 'String'
            }
          },
          endTime: {
            required: false,
            serializedName: 'endTime',
            type: {
              name: 'String'
            }
          },
          timezone: {
            required: false,
            serializedName: 'timezone',
            type: {
              name: 'String'
            }
          },
          notificationType: {
            required: false,
            serializedName: 'notificationType',
            defaultValue: 'popup',
            type: {
              name: 'String'
            }
          },
          notificationIcon: {
            required: false,
            serializedName: 'notificationIcon',
            defaultValue: true,
            type: {
              name: 'Boolean'
            }
          },
          notificationCloseable: {
            required: false,
            serializedName: 'notificationCloseable',
            defaultValue: true,
            type: {
              name: 'Boolean'
            }
          },
          notificationVibrate: {
            required: false,
            serializedName: 'notificationVibrate',
            defaultValue: false,
            type: {
              name: 'Boolean'
            }
          },
          notificationSound: {
            required: false,
            serializedName: 'notificationSound',
            defaultValue: false,
            type: {
              name: 'Boolean'
            }
          },
          notificationBadge: {
            required: false,
            serializedName: 'notificationBadge',
            defaultValue: false,
            type: {
              name: 'Boolean'
            }
          },
          localization: {
            required: false,
            serializedName: 'localization',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'CampaignLocalizationElementType',
                  type: {
                    name: 'Composite',
                    className: 'CampaignLocalization'
                  }
              }
            }
          },
          questions: {
            required: false,
            serializedName: 'questions',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'PollQuestionElementType',
                  type: {
                    name: 'Composite',
                    className: 'PollQuestion'
                  }
              }
            }
          },
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'Number'
            }
          },
          state: {
            required: false,
            serializedName: 'state',
            type: {
              name: 'String'
            }
          },
          activatedDate: {
            required: false,
            serializedName: 'activatedDate',
            type: {
              name: 'DateTime'
            }
          },
          finishedDate: {
            required: false,
            serializedName: 'finishedDate',
            type: {
              name: 'DateTime'
            }
          }
        }
      }
    };
  }
}

module.exports = CampaignResult;
