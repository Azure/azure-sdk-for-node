/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Class representing a CampaignLocalization.
 */
class CampaignLocalization {
  /**
   * Create a CampaignLocalization.
   * @member {string} [notificationTitle] Title of the notification. This field
   * supports appInfo markers.
   * @member {string} [notificationMessage] Message of the notification. This
   * field supports appInfo markers.
   * @member {buffer} [notificationImage] Optional image encoded in base 64.
   * Usually included in the right part of in app notifications (or as a banner
   * if there is neither text nor content icon). For Android system
   * notifications, the image is used as the large icon (displayed only on
   * Android 3+).
   * @member {object} [notificationOptions] Additional platform specific
   * options.
   * @member {string} [notificationOptions.bigText] Android 4.1+ only. Multi
   * line message shown in expanded notifications on Android 4.1+ devices. The
   * `notificationType` property must be set to `system`.
   * @member {string} [notificationOptions.bigPicture] URL of a remote image
   * displayed in expanded notifications on
   * Android 4.1+ devices with the following constraints:
   * * The URL length is limited to 2000 characters.
   * * The image size must be less than 4 MiB.
   * * The following MIME types are supported:
   * ** image/png
   * ** image/jpeg
   * ** image/gif
   * ** image/webp
   * ** image/bmp
   * ** image/x-bmp
   * ** image/x-ms-bmp
   * * URL scheme must be HTTP or HTTPS (with valid SSL certificate).
   * * Incompatible with `bigText`, only one of the fields can be set.
   * * The `notificationType` property must be set to `system`.
   * @member {string} [notificationOptions.sound] iOS only. The name of a sound
   * file in the application bundle. The sound in this file is played as an
   * alert. If the sound file doesnâ€™t exist or default is specified as the
   * value, the default alert sound is played. The audio must be in one of the
   * audio data formats that are compatible with system sounds. The
   * `deliveryTime` property must be set to `any` or `background`.
   * @member {string} [notificationOptions.actionText] The action text is the
   * title of the right button of the alert or the value of the unlock slider,
   * where the value replaces 'unlock' in 'slide to unlock'. 'View' (localized
   * to the preferred language) is used as the default value. The
   * `deliveryTime` property must be set to `any` or `background`.
   * @member {string} [title] Title of the announcement or poll. This field
   * supports appInfo markers.
   * @member {string} [body] Body of the text/web announcement, poll or data
   * push. This field supports appInfo markers.
   * @member {string} [actionButtonText] Text of the action button for text/web
   * announcements and polls (answer button).
   * @member {string} [exitButtonText] Text of the exit button for text/web
   * announcements and polls.
   * @member {string} [actionUrl] URL to launch when the announcement is
   * actioned.
   * @member {object} [payload] Native push payload.
   */
  constructor() {
  }

  /**
   * Defines the metadata of CampaignLocalization
   *
   * @returns {object} metadata of CampaignLocalization
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'CampaignLocalization',
      type: {
        name: 'Composite',
        className: 'CampaignLocalization',
        modelProperties: {
          notificationTitle: {
            required: false,
            serializedName: 'notificationTitle',
            constraints: {
              MaxLength: 2000
            },
            type: {
              name: 'String'
            }
          },
          notificationMessage: {
            required: false,
            serializedName: 'notificationMessage',
            constraints: {
              MaxLength: 4000
            },
            type: {
              name: 'String'
            }
          },
          notificationImage: {
            required: false,
            serializedName: 'notificationImage',
            constraints: {
              MaxLength: 65535
            },
            type: {
              name: 'ByteArray'
            }
          },
          notificationOptions: {
            required: false,
            serializedName: 'notificationOptions',
            type: {
              name: 'Composite',
              className: 'NotificationOptions'
            }
          },
          title: {
            required: false,
            serializedName: 'title',
            constraints: {
              MaxLength: 128
            },
            type: {
              name: 'String'
            }
          },
          body: {
            required: false,
            serializedName: 'body',
            constraints: {
              MaxLength: 65535
            },
            type: {
              name: 'String'
            }
          },
          actionButtonText: {
            required: false,
            serializedName: 'actionButtonText',
            constraints: {
              MaxLength: 64
            },
            type: {
              name: 'String'
            }
          },
          exitButtonText: {
            required: false,
            serializedName: 'exitButtonText',
            constraints: {
              MaxLength: 64
            },
            type: {
              name: 'String'
            }
          },
          actionUrl: {
            required: false,
            serializedName: 'actionUrl',
            constraints: {
              MaxLength: 2000
            },
            type: {
              name: 'String'
            }
          },
          payload: {
            required: false,
            serializedName: 'payload',
            type: {
              name: 'Object'
            }
          }
        }
      }
    };
  }
}

module.exports = CampaignLocalization;
