/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Specify which users will be targeted by this campaign. By default, all users
 * will be targeted. If you set `pushMode` property to `manual`, the only thing
 * you can specify in the audience is the push quota filter. An audience is a
 * boolean expression made of criteria (variables) operators (`not`, `and` or
 * `or`) and parenthesis. Additionally, a set of filters can be added to an
 * audience. 65535 bytes max as per JSON encoding.
 *
 *
 */
class CampaignAudience {
  /**
   * Create a CampaignAudience.
   * @member {string} [expression] Boolean expression made of criteria
   * (variables) operators (`not`, `and` or `or`) and parenthesis. Criterion
   * names in the audience expression must start with a capital letter and can
   * only contain alphanumeric (A-Z,a-z,0-9) and underscore (_) characters.
   * @member {object} [criteria] Criteria by name.
   * @member {array} [filters] Global filters applied to all devices.
   */
  constructor() {
  }

  /**
   * Defines the metadata of CampaignAudience
   *
   * @returns {object} metadata of CampaignAudience
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Campaign_audience',
      type: {
        name: 'Composite',
        className: 'CampaignAudience',
        modelProperties: {
          expression: {
            required: false,
            serializedName: 'expression',
            type: {
              name: 'String'
            }
          },
          criteria: {
            required: false,
            serializedName: 'criteria',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'CriterionElementType',
                  type: {
                    name: 'Composite',
                    polymorphicDiscriminator: {
                      serializedName: 'type',
                      clientName: 'type'
                    },
                    uberParent: 'Criterion',
                    className: 'Criterion'
                  }
              }
            }
          },
          filters: {
            required: false,
            serializedName: 'filters',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'FilterElementType',
                  type: {
                    name: 'Composite',
                    polymorphicDiscriminator: {
                      serializedName: 'type',
                      clientName: 'type'
                    },
                    uberParent: 'Filter',
                    className: 'Filter'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = CampaignAudience;
