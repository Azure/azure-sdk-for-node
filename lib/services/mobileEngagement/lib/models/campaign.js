/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Class representing a Campaign.
 * @extends models['CampaignLocalization']
 */
class Campaign extends models['CampaignLocalization'] {
  /**
   * Create a Campaign.
   * @member {string} [name] Unique name of the campaign.
   * @member {object} [audience] Specify which users will be targeted by this
   * campaign. By default, all users will be targeted. If you set `pushMode`
   * property to `manual`, the only thing you can specify in the audience is
   * the push quota filter. An audience is a boolean expression made of
   * criteria (variables) operators (`not`, `and` or `or`) and parenthesis.
   * Additionally, a set of filters can be added to an audience. 65535 bytes
   * max as per JSON encoding.
   * @member {string} [audience.expression] Boolean expression made of criteria
   * (variables) operators (`not`, `and` or `or`) and parenthesis. Criterion
   * names in the audience expression must start with a capital letter and can
   * only contain alphanumeric (A-Z,a-z,0-9) and underscore (_) characters.
   * @member {object} [audience.criteria] Criteria by name.
   * @member {array} [audience.filters] Global filters applied to all devices.
   * @member {string} [category] Category of the campaign. Categories can be
   * used on the application side to customize campaigns.
   * @member {string} [pushMode] Announcements/polls only. Defines how the
   * campaign is pushed. Valid values are: * `real-time`: Never ending
   * campaign, the campaign will be delivered  to your existing users and also
   * to your new users. * `one-shot`: In this mode, the campaign will be
   * delivered only to your existing users (campaign will stop after that). *
   * `manual`: In this mode, the campaign will not be pushed automatically to
   * devices. You will have to use the Push campaign command to push the
   * campaign to your end-users. Campaigns can be pushed multiple times to the
   * same device.
   * . Possible values include: 'real-time', 'one-shot', 'manual'. Default
   * value: 'real-time' .
   * @member {string} [type] Applicable only to announcements and data pushes.
   * Type of announcement. Valid values are: * `text/plain`: Text-only
   * announcement: `body` property should only contain plain text. *
   * `text/html`: HTML announcement: `body` attribute can contain HTML code. *
   * `only_notif`: Notification-only announcement. With this kind of
   * announcements, the `body`, `title`, `actionButtonText` and
   * `exitButtonText` are ignored. Type of data push. Valid values are: *
   * `text/plain`: Text only data push: `body` property must be plain text. *
   * `text/base64`: Base 64 data push: `body` property must be encoded in base
   * 64.
   * . Possible values include: 'text/plain', 'text/html', 'only_notif',
   * 'text/base64'
   * @member {string} [deliveryTime] Announcements/polls only. Defines when the
   * campaign should be delivered. Valid values are: * `any`: Campaign will be
   * delivered as soon as possible. * `background`: iOS only. Campaign will be
   * only delivered when the application is in background (out of app). *
   * `session`: Campaign will be delivered when the application is running.
   * . Possible values include: 'any', 'background', 'session'
   * @member {array} [deliveryActivities] Announcements/polls only. Array
   * containing the list of activities in which the campaign can be delivered.
   * deliveryTime must be set to session. If the platform is iOS, this option
   * can also be set if deliveryTime is set to any. In that case, if the
   * campaign is received when the application is launched, it will be
   * delivered only in the specified list of activities.
   * @member {string} [startTime] The date at which the campaign should be
   * started. The date shall conform to the following format:
   * `yyyy-MM-ddTHH:mm:ssZ`. * If you set pushMode property to manual, this
   * attribute will be ignored. * If you set pushMode property to one-shot,
   * then the timezone attribute must be specified. Example: `2011-11-21
   * 15:23Z`
   * @member {string} [endTime] The date at which the campaign should be
   * finished. The date shall conform to the following format:
   * `yyyy-MM-ddTHH:mm:ssZ`. Example: `2011-11-21 15:23Z`
   * @member {string} [timezone] The id of the time zone to use for the
   * startTime and endTime dates. If not provided, the two date attributes will
   * be expressed using the device timezone. Example: America/Los_Angeles
   * @member {string} [notificationType] Android only. Defines how the
   * notification should be displayed. Valid values are: * `system`: Display
   * the notification using a standard system notification. * `popup`: Display
   * the notification using a in-app banner notification.
   * . Possible values include: 'system', 'popup'. Default value: 'popup' .
   * @member {boolean} [notificationIcon] A flag indicating whether or not you
   * want to display the resource icon in notification content. Default value:
   * true .
   * @member {boolean} [notificationCloseable] A flag indicating whether or not
   * you want the notification to be closeable. Default value: true .
   * @member {boolean} [notificationVibrate] Android only. A flag indicating
   * whether or not you want the system notification to make a vibration. The
   * notificationType property must be set to system. Default value: false .
   * @member {boolean} [notificationSound] * `Android`: A flag indicating
   * whether or not you want the system notification to make a sound. The
   * `notificationType` property must be set to `system`. * `iOS`: A flag
   * indicating whether or not you want the native Apple Push notification to
   * make a sound. The `deliveryTime` property must be set to `any` or
   * `background`. This will play the 'default' sound. If you want to play a
   * custom sound, see the `notificationOptions` property. * `Windows`: A flag
   * indicating whether or not you want the native Windows Notification Service
   * to make a sound. The `deliveryTime` property must be set to `any`.
   * . Default value: false .
   * @member {boolean} [notificationBadge] A flag indicating whether or not you
   * want the native Apple Push notification to update the badge icon to the
   * number of unread messages. The `deliveryTime` property must be set to
   * `any` or `background`.
   * . Default value: false .
   * @member {object} [localization] Push campaigns can be localized using an
   * optional JSON object. The JSON key is a two-character language code as
   * specified by the ISO 639-1 standard. The corresponding value is an object
   * containing the localizable properties.
   * @member {array} [questions] Poll questions.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Campaign
   *
   * @returns {object} metadata of Campaign
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Campaign',
      type: {
        name: 'Composite',
        className: 'Campaign',
        modelProperties: {
          notificationTitle: {
            required: false,
            serializedName: 'notificationTitle',
            constraints: {
              MaxLength: 2000
            },
            type: {
              name: 'String'
            }
          },
          notificationMessage: {
            required: false,
            serializedName: 'notificationMessage',
            constraints: {
              MaxLength: 4000
            },
            type: {
              name: 'String'
            }
          },
          notificationImage: {
            required: false,
            serializedName: 'notificationImage',
            constraints: {
              MaxLength: 65535
            },
            type: {
              name: 'ByteArray'
            }
          },
          notificationOptions: {
            required: false,
            serializedName: 'notificationOptions',
            type: {
              name: 'Composite',
              className: 'NotificationOptions'
            }
          },
          title: {
            required: false,
            serializedName: 'title',
            constraints: {
              MaxLength: 128
            },
            type: {
              name: 'String'
            }
          },
          body: {
            required: false,
            serializedName: 'body',
            constraints: {
              MaxLength: 65535
            },
            type: {
              name: 'String'
            }
          },
          actionButtonText: {
            required: false,
            serializedName: 'actionButtonText',
            constraints: {
              MaxLength: 64
            },
            type: {
              name: 'String'
            }
          },
          exitButtonText: {
            required: false,
            serializedName: 'exitButtonText',
            constraints: {
              MaxLength: 64
            },
            type: {
              name: 'String'
            }
          },
          actionUrl: {
            required: false,
            serializedName: 'actionUrl',
            constraints: {
              MaxLength: 2000
            },
            type: {
              name: 'String'
            }
          },
          payload: {
            required: false,
            serializedName: 'payload',
            type: {
              name: 'Object'
            }
          },
          name: {
            required: false,
            serializedName: 'name',
            constraints: {
              MaxLength: 64
            },
            type: {
              name: 'String'
            }
          },
          audience: {
            required: false,
            serializedName: 'audience',
            type: {
              name: 'Composite',
              className: 'CampaignAudience'
            }
          },
          category: {
            required: false,
            serializedName: 'category',
            constraints: {
              MaxLength: 64
            },
            type: {
              name: 'String'
            }
          },
          pushMode: {
            required: false,
            serializedName: 'pushMode',
            defaultValue: 'real-time',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          deliveryTime: {
            required: false,
            serializedName: 'deliveryTime',
            type: {
              name: 'String'
            }
          },
          deliveryActivities: {
            required: false,
            serializedName: 'deliveryActivities',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          startTime: {
            required: false,
            serializedName: 'startTime',
            type: {
              name: 'String'
            }
          },
          endTime: {
            required: false,
            serializedName: 'endTime',
            type: {
              name: 'String'
            }
          },
          timezone: {
            required: false,
            serializedName: 'timezone',
            type: {
              name: 'String'
            }
          },
          notificationType: {
            required: false,
            serializedName: 'notificationType',
            defaultValue: 'popup',
            type: {
              name: 'String'
            }
          },
          notificationIcon: {
            required: false,
            serializedName: 'notificationIcon',
            defaultValue: true,
            type: {
              name: 'Boolean'
            }
          },
          notificationCloseable: {
            required: false,
            serializedName: 'notificationCloseable',
            defaultValue: true,
            type: {
              name: 'Boolean'
            }
          },
          notificationVibrate: {
            required: false,
            serializedName: 'notificationVibrate',
            defaultValue: false,
            type: {
              name: 'Boolean'
            }
          },
          notificationSound: {
            required: false,
            serializedName: 'notificationSound',
            defaultValue: false,
            type: {
              name: 'Boolean'
            }
          },
          notificationBadge: {
            required: false,
            serializedName: 'notificationBadge',
            defaultValue: false,
            type: {
              name: 'Boolean'
            }
          },
          localization: {
            required: false,
            serializedName: 'localization',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'CampaignLocalizationElementType',
                  type: {
                    name: 'Composite',
                    className: 'CampaignLocalization'
                  }
              }
            }
          },
          questions: {
            required: false,
            serializedName: 'questions',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'PollQuestionElementType',
                  type: {
                    name: 'Composite',
                    className: 'PollQuestion'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = Campaign;
