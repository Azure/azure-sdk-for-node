/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the Endpoint class.
 * @constructor
 * Class respresenting a Traffic Manager endpoint.
 *
 * @member {string} [id] Gets or sets the ID of the Traffic Manager endpoint.
 * 
 * @member {string} [name] Gets or sets the name of the Traffic Manager
 * endpoint.
 * 
 * @member {string} [type] Gets or sets the endpoint type of the Traffic
 * Manager endpoint.
 * 
 * @member {string} [targetResourceId] Gets or sets the Azure Resource URI of
 * the of the endpoint.  Not applicable to endpoints of type
 * 'ExternalEndpoints'.
 * 
 * @member {string} [target] Gets or sets the fully-qualified DNS name of the
 * endpoint.  Traffic Manager returns this value in DNS responses to direct
 * traffic to this endpoint.
 * 
 * @member {string} [endpointStatus] Gets or sets the status of the endpoint..
 * If the endpoint is Enabled, it is probed for endpoint health and is
 * included in the traffic routing method.  Possible values are 'Enabled' and
 * 'Disabled'.
 * 
 * @member {number} [weight] Gets or sets the weight of this endpoint when
 * using the 'Weighted' traffic routing method. Possible values are from 1 to
 * 1000.
 * 
 * @member {number} [priority] Gets or sets the priority of this endpoint when
 * using the ‘Priority’ traffic routing method. Possible values are from 1 to
 * 1000, lower values represent higher priority. This is an optional
 * parameter.  If specified, it must be specified on all endpoints, and no
 * two endpoints can share the same priority value.
 * 
 * @member {string} [endpointLocation] Specifies the location of the external
 * or nested endpoints when using the ‘Performance’ traffic routing method.
 * 
 * @member {string} [endpointMonitorStatus] Gets or sets the monitoring status
 * of the endpoint.
 * 
 * @member {number} [minChildEndpoints] Gets or sets the minimum number of
 * endpoints that must be available in the child profile in order for the
 * parent profile to be considered available. Only applicable to endpoint of
 * type 'NestedEndpoints'.
 * 
 */
function Endpoint() {
}

/**
 * Defines the metadata of Endpoint
 *
 * @returns {object} metadata of Endpoint
 *
 */
Endpoint.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'Endpoint',
    type: {
      name: 'Composite',
      className: 'Endpoint',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        targetResourceId: {
          required: false,
          serializedName: 'properties.targetResourceId',
          type: {
            name: 'String'
          }
        },
        target: {
          required: false,
          serializedName: 'properties.target',
          type: {
            name: 'String'
          }
        },
        endpointStatus: {
          required: false,
          serializedName: 'properties.endpointStatus',
          type: {
            name: 'String'
          }
        },
        weight: {
          required: false,
          serializedName: 'properties.weight',
          type: {
            name: 'Number'
          }
        },
        priority: {
          required: false,
          serializedName: 'properties.priority',
          type: {
            name: 'Number'
          }
        },
        endpointLocation: {
          required: false,
          serializedName: 'properties.endpointLocation',
          type: {
            name: 'String'
          }
        },
        endpointMonitorStatus: {
          required: false,
          serializedName: 'properties.endpointMonitorStatus',
          type: {
            name: 'String'
          }
        },
        minChildEndpoints: {
          required: false,
          serializedName: 'properties.minChildEndpoints',
          type: {
            name: 'Number'
          }
        }
      }
    }
  };
};

module.exports = Endpoint;
