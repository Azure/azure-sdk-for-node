/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the Profile class.
 * @constructor
 * Class representing a Traffic Manager profile.
 *
 * @member {string} [profileStatus] Gets or sets the status of the Traffic
 * Manager profile.  Possible values are 'Enabled' and 'Disabled'.
 * 
 * @member {string} [trafficRoutingMethod] Gets or sets the traffic routing
 * method of the Traffic Manager profile.  Possible values are 'Performance',
 * 'Weighted', or 'Priority'.
 * 
 * @member {object} [dnsConfig] Gets or sets the DNS settings of the Traffic
 * Manager profile.
 * 
 * @member {string} [dnsConfig.relativeName] Gets or sets the relative DNS
 * name provided by this Traffic Manager profile.  This value is combined
 * with the DNS domain name used by Azure Traffic Manager to form the
 * fully-qualified domain name (FQDN) of the profile.
 * 
 * @member {string} [dnsConfig.fqdn] Gets or sets the fully-qualified domain
 * name (FQDN) of the Traffic Manager profile.  This is formed from the
 * concatenation of the RelativeName with the DNS domain used by Azure
 * Traffic Manager.
 * 
 * @member {number} [dnsConfig.ttl] Gets or sets the DNS Ttime-To-Live (TTL),
 * in seconds.  This informs the local DNS resolvers and DNS clients how long
 * to cache DNS responses provided by this Traffic Manager profile.
 * 
 * @member {object} [monitorConfig] Gets or sets the endpoint monitoring
 * settings of the Traffic Manager profile.
 * 
 * @member {string} [monitorConfig.profileMonitorStatus] Gets or sets the
 * profile-level monitoring status of the Traffic Manager profile.
 * 
 * @member {string} [monitorConfig.protocol] Gets or sets the protocol (HTTP
 * or HTTPS) used to probe for endpoint health.
 * 
 * @member {number} [monitorConfig.port] Gets or sets the TCP port used to
 * probe for endpoint health.
 * 
 * @member {string} [monitorConfig.path] Gets or sets the path relative to the
 * endpoint domain name used to probe for endpoint health.
 * 
 * @member {array} [endpoints] Gets or sets the list of endpoints in the
 * Traffic Manager profile.
 * 
 */
function Profile() {
  Profile['super_'].call(this);
}

util.inherits(Profile, models['Resource']);

/**
 * Defines the metadata of Profile
 *
 * @returns {object} metadata of Profile
 *
 */
Profile.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'Profile',
    type: {
      name: 'Composite',
      className: 'Profile',
      modelProperties: {
        id: {
          required: false,
          readOnly: true,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          readOnly: true,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          readOnly: true,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        location: {
          required: false,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        profileStatus: {
          required: false,
          serializedName: 'properties.profileStatus',
          type: {
            name: 'String'
          }
        },
        trafficRoutingMethod: {
          required: false,
          serializedName: 'properties.trafficRoutingMethod',
          type: {
            name: 'String'
          }
        },
        dnsConfig: {
          required: false,
          serializedName: 'properties.dnsConfig',
          type: {
            name: 'Composite',
            className: 'DnsConfig'
          }
        },
        monitorConfig: {
          required: false,
          serializedName: 'properties.monitorConfig',
          type: {
            name: 'Composite',
            className: 'MonitorConfig'
          }
        },
        endpoints: {
          required: false,
          serializedName: 'properties.endpoints',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'EndpointElementType',
                type: {
                  name: 'Composite',
                  className: 'Endpoint'
                }
            }
          }
        }
      }
    }
  };
};

module.exports = Profile;
