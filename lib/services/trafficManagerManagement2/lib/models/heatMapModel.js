/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Class representing a Traffic Manager HeatMap.
 *
 * @extends models['ProxyResource']
 */
class HeatMapModel extends models['ProxyResource'] {
  /**
   * Create a HeatMapModel.
   * @member {date} [startTime] The beginning of the time window for this
   * HeatMap, inclusive.
   * @member {date} [endTime] The ending of the time window for this HeatMap,
   * exclusive.
   * @member {array} [endpoints] The endpoints used in this HeatMap
   * calculation.
   * @member {array} [trafficFlows] The traffic flows produced in this HeatMap
   * calculation.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of HeatMapModel
   *
   * @returns {object} metadata of HeatMapModel
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'HeatMapModel',
      type: {
        name: 'Composite',
        className: 'HeatMapModel',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          startTime: {
            required: false,
            serializedName: 'properties.startTime',
            type: {
              name: 'DateTime'
            }
          },
          endTime: {
            required: false,
            serializedName: 'properties.endTime',
            type: {
              name: 'DateTime'
            }
          },
          endpoints: {
            required: false,
            serializedName: 'properties.endpoints',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'HeatMapEndpointElementType',
                  type: {
                    name: 'Composite',
                    className: 'HeatMapEndpoint'
                  }
              }
            }
          },
          trafficFlows: {
            required: false,
            serializedName: 'properties.trafficFlows',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'TrafficFlowElementType',
                  type: {
                    name: 'Composite',
                    className: 'TrafficFlow'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = HeatMapModel;
