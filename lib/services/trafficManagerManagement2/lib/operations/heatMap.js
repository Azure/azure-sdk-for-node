/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;

/**
 * Gets latest heatmap for Traffic Manager profile.
 *
 * @param {string} resourceGroupName The name of the resource group containing
 * the Traffic Manager endpoint.
 *
 * @param {string} profileName The name of the Traffic Manager profile.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.topLeft] The top left latitude,longitude pair of the
 * rectangular viewport to query for.
 *
 * @param {array} [options.botRight] The bottom right latitude,longitude pair
 * of the rectangular viewport to query for.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link HeatMapModel} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(resourceGroupName, profileName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let topLeft = (options && options.topLeft !== undefined) ? options.topLeft : undefined;
  let botRight = (options && options.botRight !== undefined) ? options.botRight : undefined;
  let heatMapType = 'default';
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (profileName === null || profileName === undefined || typeof profileName.valueOf() !== 'string') {
      throw new Error('profileName cannot be null or undefined and it must be of type string.');
    }
    if (Array.isArray(topLeft)) {
      for (let i = 0; i < topLeft.length; i++) {
        if (topLeft[i] !== null && topLeft[i] !== undefined && typeof topLeft[i] !== 'number') {
          throw new Error('topLeft[i] must be of type number.');
        }
      }
    }
    if (topLeft !== null && topLeft !== undefined) {
      if (topLeft.length > 2)
      {
        throw new Error('"topLeft" should satisfy the constraint - "MaxItems": 2');
      }
      if (topLeft.length < 2)
      {
        throw new Error('"topLeft" should satisfy the constraint - "MinItems": 2');
      }
    }
    if (Array.isArray(botRight)) {
      for (let i1 = 0; i1 < botRight.length; i1++) {
        if (botRight[i1] !== null && botRight[i1] !== undefined && typeof botRight[i1] !== 'number') {
          throw new Error('botRight[i1] must be of type number.');
        }
      }
    }
    if (botRight !== null && botRight !== undefined) {
      if (botRight.length > 2)
      {
        throw new Error('"botRight" should satisfy the constraint - "MaxItems": 2');
      }
      if (botRight.length < 2)
      {
        throw new Error('"botRight" should satisfy the constraint - "MinItems": 2');
      }
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{profileName}', encodeURIComponent(profileName));
  requestUrl = requestUrl.replace('{heatMapType}', encodeURIComponent(heatMapType));
  let queryParameters = [];
  if (topLeft !== null && topLeft !== undefined) {
    queryParameters.push('topLeft=' + encodeURIComponent(topLeft.join(',')));
  }
  if (botRight !== null && botRight !== undefined) {
    queryParameters.push('botRight=' + encodeURIComponent(botRight.join(',')));
  }
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['HeatMapModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a HeatMap. */
class HeatMap {
  /**
   * Create a HeatMap.
   * @param {TrafficManagerManagementClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._get = _get;
  }

  /**
   * Gets latest heatmap for Traffic Manager profile.
   *
   * @param {string} resourceGroupName The name of the resource group containing
   * the Traffic Manager endpoint.
   *
   * @param {string} profileName The name of the Traffic Manager profile.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.topLeft] The top left latitude,longitude pair of the
   * rectangular viewport to query for.
   *
   * @param {array} [options.botRight] The bottom right latitude,longitude pair
   * of the rectangular viewport to query for.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HeatMapModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(resourceGroupName, profileName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(resourceGroupName, profileName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets latest heatmap for Traffic Manager profile.
   *
   * @param {string} resourceGroupName The name of the resource group containing
   * the Traffic Manager endpoint.
   *
   * @param {string} profileName The name of the Traffic Manager profile.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.topLeft] The top left latitude,longitude pair of the
   * rectangular viewport to query for.
   *
   * @param {array} [options.botRight] The bottom right latitude,longitude pair
   * of the rectangular viewport to query for.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {HeatMapModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link HeatMapModel} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(resourceGroupName, profileName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(resourceGroupName, profileName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(resourceGroupName, profileName, options, optionalCallback);
    }
  }

}

module.exports = HeatMap;
