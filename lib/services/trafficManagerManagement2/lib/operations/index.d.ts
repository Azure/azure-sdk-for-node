/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Endpoints
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the TrafficManagerManagementClient.
 */
export interface Endpoints {


    /**
     * Update a Traffic Manager endpoint.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager endpoint to be updated.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {string} endpointType The type of the Traffic Manager endpoint to be
     * updated.
     *
     * @param {string} endpointName The name of the Traffic Manager endpoint to be
     * updated.
     *
     * @param {object} parameters The Traffic Manager endpoint parameters supplied
     * to the Update operation.
     *
     * @param {string} [parameters.targetResourceId] The Azure Resource URI of the
     * of the endpoint. Not applicable to endpoints of type 'ExternalEndpoints'.
     *
     * @param {string} [parameters.target] The fully-qualified DNS name of the
     * endpoint. Traffic Manager returns this value in DNS responses to direct
     * traffic to this endpoint.
     *
     * @param {string} [parameters.endpointStatus] The status of the endpoint. If
     * the endpoint is Enabled, it is probed for endpoint health and is included in
     * the traffic routing method. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {number} [parameters.weight] The weight of this endpoint when using
     * the 'Weighted' traffic routing method. Possible values are from 1 to 1000.
     *
     * @param {number} [parameters.priority] The priority of this endpoint when
     * using the ‘Priority’ traffic routing method. Possible values are from 1 to
     * 1000, lower values represent higher priority. This is an optional parameter.
     * If specified, it must be specified on all endpoints, and no two endpoints
     * can share the same priority value.
     *
     * @param {string} [parameters.endpointLocation] Specifies the location of the
     * external or nested endpoints when using the ‘Performance’ traffic routing
     * method.
     *
     * @param {string} [parameters.endpointMonitorStatus] The monitoring status of
     * the endpoint. Possible values include: 'CheckingEndpoint', 'Online',
     * 'Degraded', 'Disabled', 'Inactive', 'Stopped'
     *
     * @param {number} [parameters.minChildEndpoints] The minimum number of
     * endpoints that must be available in the child profile in order for the
     * parent profile to be considered available. Only applicable to endpoint of
     * type 'NestedEndpoints'.
     *
     * @param {array} [parameters.geoMapping] The list of countries/regions mapped
     * to this endpoint when using the ‘Geographic’ traffic routing method. Please
     * consult Traffic Manager Geographic documentation for a full list of accepted
     * values.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Endpoint>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, parameters: models.Endpoint, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Endpoint>>;

    /**
     * Update a Traffic Manager endpoint.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager endpoint to be updated.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {string} endpointType The type of the Traffic Manager endpoint to be
     * updated.
     *
     * @param {string} endpointName The name of the Traffic Manager endpoint to be
     * updated.
     *
     * @param {object} parameters The Traffic Manager endpoint parameters supplied
     * to the Update operation.
     *
     * @param {string} [parameters.targetResourceId] The Azure Resource URI of the
     * of the endpoint. Not applicable to endpoints of type 'ExternalEndpoints'.
     *
     * @param {string} [parameters.target] The fully-qualified DNS name of the
     * endpoint. Traffic Manager returns this value in DNS responses to direct
     * traffic to this endpoint.
     *
     * @param {string} [parameters.endpointStatus] The status of the endpoint. If
     * the endpoint is Enabled, it is probed for endpoint health and is included in
     * the traffic routing method. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {number} [parameters.weight] The weight of this endpoint when using
     * the 'Weighted' traffic routing method. Possible values are from 1 to 1000.
     *
     * @param {number} [parameters.priority] The priority of this endpoint when
     * using the ‘Priority’ traffic routing method. Possible values are from 1 to
     * 1000, lower values represent higher priority. This is an optional parameter.
     * If specified, it must be specified on all endpoints, and no two endpoints
     * can share the same priority value.
     *
     * @param {string} [parameters.endpointLocation] Specifies the location of the
     * external or nested endpoints when using the ‘Performance’ traffic routing
     * method.
     *
     * @param {string} [parameters.endpointMonitorStatus] The monitoring status of
     * the endpoint. Possible values include: 'CheckingEndpoint', 'Online',
     * 'Degraded', 'Disabled', 'Inactive', 'Stopped'
     *
     * @param {number} [parameters.minChildEndpoints] The minimum number of
     * endpoints that must be available in the child profile in order for the
     * parent profile to be considered available. Only applicable to endpoint of
     * type 'NestedEndpoints'.
     *
     * @param {array} [parameters.geoMapping] The list of countries/regions mapped
     * to this endpoint when using the ‘Geographic’ traffic routing method. Please
     * consult Traffic Manager Geographic documentation for a full list of accepted
     * values.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Endpoint} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Endpoint} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Endpoint} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, parameters: models.Endpoint, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Endpoint>;
    update(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, parameters: models.Endpoint, callback: ServiceCallback<models.Endpoint>): void;
    update(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, parameters: models.Endpoint, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Endpoint>): void;


    /**
     * Gets a Traffic Manager endpoint.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager endpoint.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {string} endpointType The type of the Traffic Manager endpoint.
     *
     * @param {string} endpointName The name of the Traffic Manager endpoint.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Endpoint>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Endpoint>>;

    /**
     * Gets a Traffic Manager endpoint.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager endpoint.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {string} endpointType The type of the Traffic Manager endpoint.
     *
     * @param {string} endpointName The name of the Traffic Manager endpoint.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Endpoint} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Endpoint} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Endpoint} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Endpoint>;
    get(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, callback: ServiceCallback<models.Endpoint>): void;
    get(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Endpoint>): void;


    /**
     * Create or update a Traffic Manager endpoint.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager endpoint to be created or updated.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {string} endpointType The type of the Traffic Manager endpoint to be
     * created or updated.
     *
     * @param {string} endpointName The name of the Traffic Manager endpoint to be
     * created or updated.
     *
     * @param {object} parameters The Traffic Manager endpoint parameters supplied
     * to the CreateOrUpdate operation.
     *
     * @param {string} [parameters.targetResourceId] The Azure Resource URI of the
     * of the endpoint. Not applicable to endpoints of type 'ExternalEndpoints'.
     *
     * @param {string} [parameters.target] The fully-qualified DNS name of the
     * endpoint. Traffic Manager returns this value in DNS responses to direct
     * traffic to this endpoint.
     *
     * @param {string} [parameters.endpointStatus] The status of the endpoint. If
     * the endpoint is Enabled, it is probed for endpoint health and is included in
     * the traffic routing method. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {number} [parameters.weight] The weight of this endpoint when using
     * the 'Weighted' traffic routing method. Possible values are from 1 to 1000.
     *
     * @param {number} [parameters.priority] The priority of this endpoint when
     * using the ‘Priority’ traffic routing method. Possible values are from 1 to
     * 1000, lower values represent higher priority. This is an optional parameter.
     * If specified, it must be specified on all endpoints, and no two endpoints
     * can share the same priority value.
     *
     * @param {string} [parameters.endpointLocation] Specifies the location of the
     * external or nested endpoints when using the ‘Performance’ traffic routing
     * method.
     *
     * @param {string} [parameters.endpointMonitorStatus] The monitoring status of
     * the endpoint. Possible values include: 'CheckingEndpoint', 'Online',
     * 'Degraded', 'Disabled', 'Inactive', 'Stopped'
     *
     * @param {number} [parameters.minChildEndpoints] The minimum number of
     * endpoints that must be available in the child profile in order for the
     * parent profile to be considered available. Only applicable to endpoint of
     * type 'NestedEndpoints'.
     *
     * @param {array} [parameters.geoMapping] The list of countries/regions mapped
     * to this endpoint when using the ‘Geographic’ traffic routing method. Please
     * consult Traffic Manager Geographic documentation for a full list of accepted
     * values.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Endpoint>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, parameters: models.Endpoint, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Endpoint>>;

    /**
     * Create or update a Traffic Manager endpoint.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager endpoint to be created or updated.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {string} endpointType The type of the Traffic Manager endpoint to be
     * created or updated.
     *
     * @param {string} endpointName The name of the Traffic Manager endpoint to be
     * created or updated.
     *
     * @param {object} parameters The Traffic Manager endpoint parameters supplied
     * to the CreateOrUpdate operation.
     *
     * @param {string} [parameters.targetResourceId] The Azure Resource URI of the
     * of the endpoint. Not applicable to endpoints of type 'ExternalEndpoints'.
     *
     * @param {string} [parameters.target] The fully-qualified DNS name of the
     * endpoint. Traffic Manager returns this value in DNS responses to direct
     * traffic to this endpoint.
     *
     * @param {string} [parameters.endpointStatus] The status of the endpoint. If
     * the endpoint is Enabled, it is probed for endpoint health and is included in
     * the traffic routing method. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {number} [parameters.weight] The weight of this endpoint when using
     * the 'Weighted' traffic routing method. Possible values are from 1 to 1000.
     *
     * @param {number} [parameters.priority] The priority of this endpoint when
     * using the ‘Priority’ traffic routing method. Possible values are from 1 to
     * 1000, lower values represent higher priority. This is an optional parameter.
     * If specified, it must be specified on all endpoints, and no two endpoints
     * can share the same priority value.
     *
     * @param {string} [parameters.endpointLocation] Specifies the location of the
     * external or nested endpoints when using the ‘Performance’ traffic routing
     * method.
     *
     * @param {string} [parameters.endpointMonitorStatus] The monitoring status of
     * the endpoint. Possible values include: 'CheckingEndpoint', 'Online',
     * 'Degraded', 'Disabled', 'Inactive', 'Stopped'
     *
     * @param {number} [parameters.minChildEndpoints] The minimum number of
     * endpoints that must be available in the child profile in order for the
     * parent profile to be considered available. Only applicable to endpoint of
     * type 'NestedEndpoints'.
     *
     * @param {array} [parameters.geoMapping] The list of countries/regions mapped
     * to this endpoint when using the ‘Geographic’ traffic routing method. Please
     * consult Traffic Manager Geographic documentation for a full list of accepted
     * values.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Endpoint} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Endpoint} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Endpoint} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, parameters: models.Endpoint, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Endpoint>;
    createOrUpdate(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, parameters: models.Endpoint, callback: ServiceCallback<models.Endpoint>): void;
    createOrUpdate(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, parameters: models.Endpoint, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Endpoint>): void;


    /**
     * Deletes a Traffic Manager endpoint.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager endpoint to be deleted.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {string} endpointType The type of the Traffic Manager endpoint to be
     * deleted.
     *
     * @param {string} endpointName The name of the Traffic Manager endpoint to be
     * deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeleteOperationResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeleteOperationResult>>;

    /**
     * Deletes a Traffic Manager endpoint.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager endpoint to be deleted.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {string} endpointType The type of the Traffic Manager endpoint to be
     * deleted.
     *
     * @param {string} endpointName The name of the Traffic Manager endpoint to be
     * deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeleteOperationResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeleteOperationResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeleteOperationResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeleteOperationResult>;
    deleteMethod(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, callback: ServiceCallback<models.DeleteOperationResult>): void;
    deleteMethod(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeleteOperationResult>): void;
}

/**
 * @class
 * Profiles
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the TrafficManagerManagementClient.
 */
export interface Profiles {


    /**
     * Checks the availability of a Traffic Manager Relative DNS name.
     *
     * @param {object} parameters The Traffic Manager name parameters supplied to
     * the CheckTrafficManagerNameAvailability operation.
     *
     * @param {string} [parameters.name] The name of the resource.
     *
     * @param {string} [parameters.type] The type of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TrafficManagerNameAvailability>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkTrafficManagerRelativeDnsNameAvailabilityWithHttpOperationResponse(parameters: models.CheckTrafficManagerRelativeDnsNameAvailabilityParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TrafficManagerNameAvailability>>;

    /**
     * Checks the availability of a Traffic Manager Relative DNS name.
     *
     * @param {object} parameters The Traffic Manager name parameters supplied to
     * the CheckTrafficManagerNameAvailability operation.
     *
     * @param {string} [parameters.name] The name of the resource.
     *
     * @param {string} [parameters.type] The type of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TrafficManagerNameAvailability} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TrafficManagerNameAvailability} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TrafficManagerNameAvailability} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkTrafficManagerRelativeDnsNameAvailability(parameters: models.CheckTrafficManagerRelativeDnsNameAvailabilityParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TrafficManagerNameAvailability>;
    checkTrafficManagerRelativeDnsNameAvailability(parameters: models.CheckTrafficManagerRelativeDnsNameAvailabilityParameters, callback: ServiceCallback<models.TrafficManagerNameAvailability>): void;
    checkTrafficManagerRelativeDnsNameAvailability(parameters: models.CheckTrafficManagerRelativeDnsNameAvailabilityParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TrafficManagerNameAvailability>): void;


    /**
     * Lists all Traffic Manager profiles within a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager profiles to be listed.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProfileListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProfileListResult>>;

    /**
     * Lists all Traffic Manager profiles within a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager profiles to be listed.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProfileListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProfileListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProfileListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProfileListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ProfileListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProfileListResult>): void;


    /**
     * Lists all Traffic Manager profiles within a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProfileListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProfileListResult>>;

    /**
     * Lists all Traffic Manager profiles within a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProfileListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProfileListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProfileListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscription(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProfileListResult>;
    listBySubscription(callback: ServiceCallback<models.ProfileListResult>): void;
    listBySubscription(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProfileListResult>): void;


    /**
     * Gets a Traffic Manager profile.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager profile.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Profile>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, profileName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Profile>>;

    /**
     * Gets a Traffic Manager profile.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager profile.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Profile} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Profile} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Profile} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, profileName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Profile>;
    get(resourceGroupName: string, profileName: string, callback: ServiceCallback<models.Profile>): void;
    get(resourceGroupName: string, profileName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Profile>): void;


    /**
     * Create or update a Traffic Manager profile.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager profile.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {object} parameters The Traffic Manager profile parameters supplied
     * to the CreateOrUpdate operation.
     *
     * @param {string} [parameters.profileStatus] The status of the Traffic Manager
     * profile. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.trafficRoutingMethod] The traffic routing method
     * of the Traffic Manager profile. Possible values include: 'Performance',
     * 'Priority', 'Weighted', 'Geographic'
     *
     * @param {object} [parameters.dnsConfig] The DNS settings of the Traffic
     * Manager profile.
     *
     * @param {string} [parameters.dnsConfig.relativeName] The relative DNS name
     * provided by this Traffic Manager profile. This value is combined with the
     * DNS domain name used by Azure Traffic Manager to form the fully-qualified
     * domain name (FQDN) of the profile.
     *
     * @param {number} [parameters.dnsConfig.ttl] The DNS Time-To-Live (TTL), in
     * seconds. This informs the local DNS resolvers and DNS clients how long to
     * cache DNS responses provided by this Traffic Manager profile.
     *
     * @param {object} [parameters.monitorConfig] The endpoint monitoring settings
     * of the Traffic Manager profile.
     *
     * @param {string} [parameters.monitorConfig.profileMonitorStatus] The
     * profile-level monitoring status of the Traffic Manager profile. Possible
     * values include: 'CheckingEndpoints', 'Online', 'Degraded', 'Disabled',
     * 'Inactive'
     *
     * @param {string} [parameters.monitorConfig.protocol] The protocol (HTTP,
     * HTTPS or TCP) used to probe for endpoint health. Possible values include:
     * 'HTTP', 'HTTPS', 'TCP'
     *
     * @param {number} [parameters.monitorConfig.port] The TCP port used to probe
     * for endpoint health.
     *
     * @param {string} [parameters.monitorConfig.path] The path relative to the
     * endpoint domain name used to probe for endpoint health.
     *
     * @param {number} [parameters.monitorConfig.intervalInSeconds] The monitor
     * interval for endpoints in this profile. This is the interval at which
     * Traffic Manager will check the health of each endpoint in this profile.
     *
     * @param {number} [parameters.monitorConfig.timeoutInSeconds] The monitor
     * timeout for endpoints in this profile. This is the time that Traffic Manager
     * allows endpoints in this profile to response to the health check.
     *
     * @param {number} [parameters.monitorConfig.toleratedNumberOfFailures] The
     * number of consecutive failed health check that Traffic Manager tolerates
     * before declaring an endpoint in this profile Degraded after the next failed
     * health check.
     *
     * @param {array} [parameters.endpoints] The list of endpoints in the Traffic
     * Manager profile.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {string} [parameters.location] The Azure Region where the resource
     * lives
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Profile>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, profileName: string, parameters: models.Profile, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Profile>>;

    /**
     * Create or update a Traffic Manager profile.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager profile.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {object} parameters The Traffic Manager profile parameters supplied
     * to the CreateOrUpdate operation.
     *
     * @param {string} [parameters.profileStatus] The status of the Traffic Manager
     * profile. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.trafficRoutingMethod] The traffic routing method
     * of the Traffic Manager profile. Possible values include: 'Performance',
     * 'Priority', 'Weighted', 'Geographic'
     *
     * @param {object} [parameters.dnsConfig] The DNS settings of the Traffic
     * Manager profile.
     *
     * @param {string} [parameters.dnsConfig.relativeName] The relative DNS name
     * provided by this Traffic Manager profile. This value is combined with the
     * DNS domain name used by Azure Traffic Manager to form the fully-qualified
     * domain name (FQDN) of the profile.
     *
     * @param {number} [parameters.dnsConfig.ttl] The DNS Time-To-Live (TTL), in
     * seconds. This informs the local DNS resolvers and DNS clients how long to
     * cache DNS responses provided by this Traffic Manager profile.
     *
     * @param {object} [parameters.monitorConfig] The endpoint monitoring settings
     * of the Traffic Manager profile.
     *
     * @param {string} [parameters.monitorConfig.profileMonitorStatus] The
     * profile-level monitoring status of the Traffic Manager profile. Possible
     * values include: 'CheckingEndpoints', 'Online', 'Degraded', 'Disabled',
     * 'Inactive'
     *
     * @param {string} [parameters.monitorConfig.protocol] The protocol (HTTP,
     * HTTPS or TCP) used to probe for endpoint health. Possible values include:
     * 'HTTP', 'HTTPS', 'TCP'
     *
     * @param {number} [parameters.monitorConfig.port] The TCP port used to probe
     * for endpoint health.
     *
     * @param {string} [parameters.monitorConfig.path] The path relative to the
     * endpoint domain name used to probe for endpoint health.
     *
     * @param {number} [parameters.monitorConfig.intervalInSeconds] The monitor
     * interval for endpoints in this profile. This is the interval at which
     * Traffic Manager will check the health of each endpoint in this profile.
     *
     * @param {number} [parameters.monitorConfig.timeoutInSeconds] The monitor
     * timeout for endpoints in this profile. This is the time that Traffic Manager
     * allows endpoints in this profile to response to the health check.
     *
     * @param {number} [parameters.monitorConfig.toleratedNumberOfFailures] The
     * number of consecutive failed health check that Traffic Manager tolerates
     * before declaring an endpoint in this profile Degraded after the next failed
     * health check.
     *
     * @param {array} [parameters.endpoints] The list of endpoints in the Traffic
     * Manager profile.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {string} [parameters.location] The Azure Region where the resource
     * lives
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Profile} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Profile} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Profile} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, profileName: string, parameters: models.Profile, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Profile>;
    createOrUpdate(resourceGroupName: string, profileName: string, parameters: models.Profile, callback: ServiceCallback<models.Profile>): void;
    createOrUpdate(resourceGroupName: string, profileName: string, parameters: models.Profile, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Profile>): void;


    /**
     * Deletes a Traffic Manager profile.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager profile to be deleted.
     *
     * @param {string} profileName The name of the Traffic Manager profile to be
     * deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeleteOperationResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, profileName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeleteOperationResult>>;

    /**
     * Deletes a Traffic Manager profile.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager profile to be deleted.
     *
     * @param {string} profileName The name of the Traffic Manager profile to be
     * deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeleteOperationResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeleteOperationResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeleteOperationResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, profileName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeleteOperationResult>;
    deleteMethod(resourceGroupName: string, profileName: string, callback: ServiceCallback<models.DeleteOperationResult>): void;
    deleteMethod(resourceGroupName: string, profileName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeleteOperationResult>): void;


    /**
     * Update a Traffic Manager profile.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager profile.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {object} parameters The Traffic Manager profile parameters supplied
     * to the Update operation.
     *
     * @param {string} [parameters.profileStatus] The status of the Traffic Manager
     * profile. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.trafficRoutingMethod] The traffic routing method
     * of the Traffic Manager profile. Possible values include: 'Performance',
     * 'Priority', 'Weighted', 'Geographic'
     *
     * @param {object} [parameters.dnsConfig] The DNS settings of the Traffic
     * Manager profile.
     *
     * @param {string} [parameters.dnsConfig.relativeName] The relative DNS name
     * provided by this Traffic Manager profile. This value is combined with the
     * DNS domain name used by Azure Traffic Manager to form the fully-qualified
     * domain name (FQDN) of the profile.
     *
     * @param {number} [parameters.dnsConfig.ttl] The DNS Time-To-Live (TTL), in
     * seconds. This informs the local DNS resolvers and DNS clients how long to
     * cache DNS responses provided by this Traffic Manager profile.
     *
     * @param {object} [parameters.monitorConfig] The endpoint monitoring settings
     * of the Traffic Manager profile.
     *
     * @param {string} [parameters.monitorConfig.profileMonitorStatus] The
     * profile-level monitoring status of the Traffic Manager profile. Possible
     * values include: 'CheckingEndpoints', 'Online', 'Degraded', 'Disabled',
     * 'Inactive'
     *
     * @param {string} [parameters.monitorConfig.protocol] The protocol (HTTP,
     * HTTPS or TCP) used to probe for endpoint health. Possible values include:
     * 'HTTP', 'HTTPS', 'TCP'
     *
     * @param {number} [parameters.monitorConfig.port] The TCP port used to probe
     * for endpoint health.
     *
     * @param {string} [parameters.monitorConfig.path] The path relative to the
     * endpoint domain name used to probe for endpoint health.
     *
     * @param {number} [parameters.monitorConfig.intervalInSeconds] The monitor
     * interval for endpoints in this profile. This is the interval at which
     * Traffic Manager will check the health of each endpoint in this profile.
     *
     * @param {number} [parameters.monitorConfig.timeoutInSeconds] The monitor
     * timeout for endpoints in this profile. This is the time that Traffic Manager
     * allows endpoints in this profile to response to the health check.
     *
     * @param {number} [parameters.monitorConfig.toleratedNumberOfFailures] The
     * number of consecutive failed health check that Traffic Manager tolerates
     * before declaring an endpoint in this profile Degraded after the next failed
     * health check.
     *
     * @param {array} [parameters.endpoints] The list of endpoints in the Traffic
     * Manager profile.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {string} [parameters.location] The Azure Region where the resource
     * lives
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Profile>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, profileName: string, parameters: models.Profile, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Profile>>;

    /**
     * Update a Traffic Manager profile.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager profile.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {object} parameters The Traffic Manager profile parameters supplied
     * to the Update operation.
     *
     * @param {string} [parameters.profileStatus] The status of the Traffic Manager
     * profile. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.trafficRoutingMethod] The traffic routing method
     * of the Traffic Manager profile. Possible values include: 'Performance',
     * 'Priority', 'Weighted', 'Geographic'
     *
     * @param {object} [parameters.dnsConfig] The DNS settings of the Traffic
     * Manager profile.
     *
     * @param {string} [parameters.dnsConfig.relativeName] The relative DNS name
     * provided by this Traffic Manager profile. This value is combined with the
     * DNS domain name used by Azure Traffic Manager to form the fully-qualified
     * domain name (FQDN) of the profile.
     *
     * @param {number} [parameters.dnsConfig.ttl] The DNS Time-To-Live (TTL), in
     * seconds. This informs the local DNS resolvers and DNS clients how long to
     * cache DNS responses provided by this Traffic Manager profile.
     *
     * @param {object} [parameters.monitorConfig] The endpoint monitoring settings
     * of the Traffic Manager profile.
     *
     * @param {string} [parameters.monitorConfig.profileMonitorStatus] The
     * profile-level monitoring status of the Traffic Manager profile. Possible
     * values include: 'CheckingEndpoints', 'Online', 'Degraded', 'Disabled',
     * 'Inactive'
     *
     * @param {string} [parameters.monitorConfig.protocol] The protocol (HTTP,
     * HTTPS or TCP) used to probe for endpoint health. Possible values include:
     * 'HTTP', 'HTTPS', 'TCP'
     *
     * @param {number} [parameters.monitorConfig.port] The TCP port used to probe
     * for endpoint health.
     *
     * @param {string} [parameters.monitorConfig.path] The path relative to the
     * endpoint domain name used to probe for endpoint health.
     *
     * @param {number} [parameters.monitorConfig.intervalInSeconds] The monitor
     * interval for endpoints in this profile. This is the interval at which
     * Traffic Manager will check the health of each endpoint in this profile.
     *
     * @param {number} [parameters.monitorConfig.timeoutInSeconds] The monitor
     * timeout for endpoints in this profile. This is the time that Traffic Manager
     * allows endpoints in this profile to response to the health check.
     *
     * @param {number} [parameters.monitorConfig.toleratedNumberOfFailures] The
     * number of consecutive failed health check that Traffic Manager tolerates
     * before declaring an endpoint in this profile Degraded after the next failed
     * health check.
     *
     * @param {array} [parameters.endpoints] The list of endpoints in the Traffic
     * Manager profile.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {string} [parameters.location] The Azure Region where the resource
     * lives
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Profile} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Profile} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Profile} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, profileName: string, parameters: models.Profile, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Profile>;
    update(resourceGroupName: string, profileName: string, parameters: models.Profile, callback: ServiceCallback<models.Profile>): void;
    update(resourceGroupName: string, profileName: string, parameters: models.Profile, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Profile>): void;
}

/**
 * @class
 * GeographicHierarchies
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the TrafficManagerManagementClient.
 */
export interface GeographicHierarchies {


    /**
     * Gets the default Geographic Hierarchy used by the Geographic traffic routing
     * method.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TrafficManagerGeographicHierarchy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDefaultWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TrafficManagerGeographicHierarchy>>;

    /**
     * Gets the default Geographic Hierarchy used by the Geographic traffic routing
     * method.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TrafficManagerGeographicHierarchy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TrafficManagerGeographicHierarchy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TrafficManagerGeographicHierarchy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDefault(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TrafficManagerGeographicHierarchy>;
    getDefault(callback: ServiceCallback<models.TrafficManagerGeographicHierarchy>): void;
    getDefault(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TrafficManagerGeographicHierarchy>): void;
}

/**
 * @class
 * HeatMap
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the TrafficManagerManagementClient.
 */
export interface HeatMap {


    /**
     * Gets latest heatmap for Traffic Manager profile.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager endpoint.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {array} [options.topLeft] The top left latitude,longitude pair of the
     * rectangular viewport to query for.
     *
     * @param {array} [options.botRight] The bottom right latitude,longitude pair
     * of the rectangular viewport to query for.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HeatMapModel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, profileName: string, options?: { topLeft? : number[], botRight? : number[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HeatMapModel>>;

    /**
     * Gets latest heatmap for Traffic Manager profile.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager endpoint.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {array} [options.topLeft] The top left latitude,longitude pair of the
     * rectangular viewport to query for.
     *
     * @param {array} [options.botRight] The bottom right latitude,longitude pair
     * of the rectangular viewport to query for.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HeatMapModel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HeatMapModel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HeatMapModel} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, profileName: string, options?: { topLeft? : number[], botRight? : number[], customHeaders? : { [headerName: string]: string; } }): Promise<models.HeatMapModel>;
    get(resourceGroupName: string, profileName: string, callback: ServiceCallback<models.HeatMapModel>): void;
    get(resourceGroupName: string, profileName: string, options: { topLeft? : number[], botRight? : number[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HeatMapModel>): void;
}
