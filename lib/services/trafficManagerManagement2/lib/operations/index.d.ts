/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Endpoints
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the TrafficManagerManagementClient.
 */
export interface Endpoints {


    /**
     * Update a Traffic Manager endpoint.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager endpoint to be updated.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {string} endpointType The type of the Traffic Manager endpoint to be
     * updated.
     *
     * @param {string} endpointName The name of the Traffic Manager endpoint to be
     * updated.
     *
     * @param {object} parameters The Traffic Manager endpoint parameters supplied
     * to the Update operation.
     *
     * @param {string} [parameters.id] Gets or sets the ID of the Traffic Manager
     * endpoint.
     *
     * @param {string} [parameters.name] Gets or sets the name of the Traffic
     * Manager endpoint.
     *
     * @param {string} [parameters.type] Gets or sets the endpoint type of the
     * Traffic Manager endpoint.
     *
     * @param {string} [parameters.targetResourceId] Gets or sets the Azure
     * Resource URI of the of the endpoint.  Not applicable to endpoints of type
     * 'ExternalEndpoints'.
     *
     * @param {string} [parameters.target] Gets or sets the fully-qualified DNS
     * name of the endpoint.  Traffic Manager returns this value in DNS responses
     * to direct traffic to this endpoint.
     *
     * @param {string} [parameters.endpointStatus] Gets or sets the status of the
     * endpoint..  If the endpoint is Enabled, it is probed for endpoint health and
     * is included in the traffic routing method.  Possible values are 'Enabled'
     * and 'Disabled'.
     *
     * @param {number} [parameters.weight] Gets or sets the weight of this endpoint
     * when using the 'Weighted' traffic routing method. Possible values are from 1
     * to 1000.
     *
     * @param {number} [parameters.priority] Gets or sets the priority of this
     * endpoint when using the ‘Priority’ traffic routing method. Possible values
     * are from 1 to 1000, lower values represent higher priority. This is an
     * optional parameter.  If specified, it must be specified on all endpoints,
     * and no two endpoints can share the same priority value.
     *
     * @param {string} [parameters.endpointLocation] Specifies the location of the
     * external or nested endpoints when using the ‘Performance’ traffic routing
     * method.
     *
     * @param {string} [parameters.endpointMonitorStatus] Gets or sets the
     * monitoring status of the endpoint.
     *
     * @param {number} [parameters.minChildEndpoints] Gets or sets the minimum
     * number of endpoints that must be available in the child profile in order for
     * the parent profile to be considered available. Only applicable to endpoint
     * of type 'NestedEndpoints'.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Endpoint>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, parameters: models.Endpoint, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Endpoint>>;

    /**
     * Update a Traffic Manager endpoint.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager endpoint to be updated.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {string} endpointType The type of the Traffic Manager endpoint to be
     * updated.
     *
     * @param {string} endpointName The name of the Traffic Manager endpoint to be
     * updated.
     *
     * @param {object} parameters The Traffic Manager endpoint parameters supplied
     * to the Update operation.
     *
     * @param {string} [parameters.id] Gets or sets the ID of the Traffic Manager
     * endpoint.
     *
     * @param {string} [parameters.name] Gets or sets the name of the Traffic
     * Manager endpoint.
     *
     * @param {string} [parameters.type] Gets or sets the endpoint type of the
     * Traffic Manager endpoint.
     *
     * @param {string} [parameters.targetResourceId] Gets or sets the Azure
     * Resource URI of the of the endpoint.  Not applicable to endpoints of type
     * 'ExternalEndpoints'.
     *
     * @param {string} [parameters.target] Gets or sets the fully-qualified DNS
     * name of the endpoint.  Traffic Manager returns this value in DNS responses
     * to direct traffic to this endpoint.
     *
     * @param {string} [parameters.endpointStatus] Gets or sets the status of the
     * endpoint..  If the endpoint is Enabled, it is probed for endpoint health and
     * is included in the traffic routing method.  Possible values are 'Enabled'
     * and 'Disabled'.
     *
     * @param {number} [parameters.weight] Gets or sets the weight of this endpoint
     * when using the 'Weighted' traffic routing method. Possible values are from 1
     * to 1000.
     *
     * @param {number} [parameters.priority] Gets or sets the priority of this
     * endpoint when using the ‘Priority’ traffic routing method. Possible values
     * are from 1 to 1000, lower values represent higher priority. This is an
     * optional parameter.  If specified, it must be specified on all endpoints,
     * and no two endpoints can share the same priority value.
     *
     * @param {string} [parameters.endpointLocation] Specifies the location of the
     * external or nested endpoints when using the ‘Performance’ traffic routing
     * method.
     *
     * @param {string} [parameters.endpointMonitorStatus] Gets or sets the
     * monitoring status of the endpoint.
     *
     * @param {number} [parameters.minChildEndpoints] Gets or sets the minimum
     * number of endpoints that must be available in the child profile in order for
     * the parent profile to be considered available. Only applicable to endpoint
     * of type 'NestedEndpoints'.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Endpoint} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Endpoint} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Endpoint} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, parameters: models.Endpoint, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Endpoint>;
    update(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, parameters: models.Endpoint, callback: ServiceCallback<models.Endpoint>): void;
    update(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, parameters: models.Endpoint, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Endpoint>): void;


    /**
     * Gets a Traffic Manager endpoint.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager endpoint.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {string} endpointType The type of the Traffic Manager endpoint.
     *
     * @param {string} endpointName The name of the Traffic Manager endpoint.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Endpoint>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Endpoint>>;

    /**
     * Gets a Traffic Manager endpoint.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager endpoint.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {string} endpointType The type of the Traffic Manager endpoint.
     *
     * @param {string} endpointName The name of the Traffic Manager endpoint.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Endpoint} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Endpoint} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Endpoint} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Endpoint>;
    get(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, callback: ServiceCallback<models.Endpoint>): void;
    get(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Endpoint>): void;


    /**
     * Create or update a Traffic Manager endpoint.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager endpoint to be created or updated.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {string} endpointType The type of the Traffic Manager endpoint to be
     * created or updated.
     *
     * @param {string} endpointName The name of the Traffic Manager endpoint to be
     * created or updated.
     *
     * @param {object} parameters The Traffic Manager endpoint parameters supplied
     * to the CreateOrUpdate operation.
     *
     * @param {string} [parameters.id] Gets or sets the ID of the Traffic Manager
     * endpoint.
     *
     * @param {string} [parameters.name] Gets or sets the name of the Traffic
     * Manager endpoint.
     *
     * @param {string} [parameters.type] Gets or sets the endpoint type of the
     * Traffic Manager endpoint.
     *
     * @param {string} [parameters.targetResourceId] Gets or sets the Azure
     * Resource URI of the of the endpoint.  Not applicable to endpoints of type
     * 'ExternalEndpoints'.
     *
     * @param {string} [parameters.target] Gets or sets the fully-qualified DNS
     * name of the endpoint.  Traffic Manager returns this value in DNS responses
     * to direct traffic to this endpoint.
     *
     * @param {string} [parameters.endpointStatus] Gets or sets the status of the
     * endpoint..  If the endpoint is Enabled, it is probed for endpoint health and
     * is included in the traffic routing method.  Possible values are 'Enabled'
     * and 'Disabled'.
     *
     * @param {number} [parameters.weight] Gets or sets the weight of this endpoint
     * when using the 'Weighted' traffic routing method. Possible values are from 1
     * to 1000.
     *
     * @param {number} [parameters.priority] Gets or sets the priority of this
     * endpoint when using the ‘Priority’ traffic routing method. Possible values
     * are from 1 to 1000, lower values represent higher priority. This is an
     * optional parameter.  If specified, it must be specified on all endpoints,
     * and no two endpoints can share the same priority value.
     *
     * @param {string} [parameters.endpointLocation] Specifies the location of the
     * external or nested endpoints when using the ‘Performance’ traffic routing
     * method.
     *
     * @param {string} [parameters.endpointMonitorStatus] Gets or sets the
     * monitoring status of the endpoint.
     *
     * @param {number} [parameters.minChildEndpoints] Gets or sets the minimum
     * number of endpoints that must be available in the child profile in order for
     * the parent profile to be considered available. Only applicable to endpoint
     * of type 'NestedEndpoints'.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Endpoint>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, parameters: models.Endpoint, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Endpoint>>;

    /**
     * Create or update a Traffic Manager endpoint.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager endpoint to be created or updated.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {string} endpointType The type of the Traffic Manager endpoint to be
     * created or updated.
     *
     * @param {string} endpointName The name of the Traffic Manager endpoint to be
     * created or updated.
     *
     * @param {object} parameters The Traffic Manager endpoint parameters supplied
     * to the CreateOrUpdate operation.
     *
     * @param {string} [parameters.id] Gets or sets the ID of the Traffic Manager
     * endpoint.
     *
     * @param {string} [parameters.name] Gets or sets the name of the Traffic
     * Manager endpoint.
     *
     * @param {string} [parameters.type] Gets or sets the endpoint type of the
     * Traffic Manager endpoint.
     *
     * @param {string} [parameters.targetResourceId] Gets or sets the Azure
     * Resource URI of the of the endpoint.  Not applicable to endpoints of type
     * 'ExternalEndpoints'.
     *
     * @param {string} [parameters.target] Gets or sets the fully-qualified DNS
     * name of the endpoint.  Traffic Manager returns this value in DNS responses
     * to direct traffic to this endpoint.
     *
     * @param {string} [parameters.endpointStatus] Gets or sets the status of the
     * endpoint..  If the endpoint is Enabled, it is probed for endpoint health and
     * is included in the traffic routing method.  Possible values are 'Enabled'
     * and 'Disabled'.
     *
     * @param {number} [parameters.weight] Gets or sets the weight of this endpoint
     * when using the 'Weighted' traffic routing method. Possible values are from 1
     * to 1000.
     *
     * @param {number} [parameters.priority] Gets or sets the priority of this
     * endpoint when using the ‘Priority’ traffic routing method. Possible values
     * are from 1 to 1000, lower values represent higher priority. This is an
     * optional parameter.  If specified, it must be specified on all endpoints,
     * and no two endpoints can share the same priority value.
     *
     * @param {string} [parameters.endpointLocation] Specifies the location of the
     * external or nested endpoints when using the ‘Performance’ traffic routing
     * method.
     *
     * @param {string} [parameters.endpointMonitorStatus] Gets or sets the
     * monitoring status of the endpoint.
     *
     * @param {number} [parameters.minChildEndpoints] Gets or sets the minimum
     * number of endpoints that must be available in the child profile in order for
     * the parent profile to be considered available. Only applicable to endpoint
     * of type 'NestedEndpoints'.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Endpoint} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Endpoint} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Endpoint} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, parameters: models.Endpoint, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Endpoint>;
    createOrUpdate(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, parameters: models.Endpoint, callback: ServiceCallback<models.Endpoint>): void;
    createOrUpdate(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, parameters: models.Endpoint, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Endpoint>): void;


    /**
     * Deletes a Traffic Manager endpoint.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager endpoint to be deleted.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {string} endpointType The type of the Traffic Manager endpoint to be
     * deleted.
     *
     * @param {string} endpointName The name of the Traffic Manager endpoint to be
     * deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a Traffic Manager endpoint.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager endpoint to be deleted.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {string} endpointType The type of the Traffic Manager endpoint to be
     * deleted.
     *
     * @param {string} endpointName The name of the Traffic Manager endpoint to be
     * deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * Profiles
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the TrafficManagerManagementClient.
 */
export interface Profiles {


    /**
     * Checks the availability of a Traffic Manager Relative DNS name.
     *
     * @param {object} parameters The Traffic Manager name parameters supplied to
     * the CheckTrafficManagerNameAvailability operation.
     *
     * @param {string} [parameters.name] Gets or sets the name of the resource.
     *
     * @param {string} [parameters.type] Gets or sets the type of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TrafficManagerNameAvailability>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkTrafficManagerRelativeDnsNameAvailabilityWithHttpOperationResponse(parameters: models.CheckTrafficManagerRelativeDnsNameAvailabilityParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TrafficManagerNameAvailability>>;

    /**
     * Checks the availability of a Traffic Manager Relative DNS name.
     *
     * @param {object} parameters The Traffic Manager name parameters supplied to
     * the CheckTrafficManagerNameAvailability operation.
     *
     * @param {string} [parameters.name] Gets or sets the name of the resource.
     *
     * @param {string} [parameters.type] Gets or sets the type of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TrafficManagerNameAvailability} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TrafficManagerNameAvailability} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TrafficManagerNameAvailability} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkTrafficManagerRelativeDnsNameAvailability(parameters: models.CheckTrafficManagerRelativeDnsNameAvailabilityParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TrafficManagerNameAvailability>;
    checkTrafficManagerRelativeDnsNameAvailability(parameters: models.CheckTrafficManagerRelativeDnsNameAvailabilityParameters, callback: ServiceCallback<models.TrafficManagerNameAvailability>): void;
    checkTrafficManagerRelativeDnsNameAvailability(parameters: models.CheckTrafficManagerRelativeDnsNameAvailabilityParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TrafficManagerNameAvailability>): void;


    /**
     * Lists all Traffic Manager profiles within a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager profiles to be listed.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProfileListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAllInResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProfileListResult>>;

    /**
     * Lists all Traffic Manager profiles within a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager profiles to be listed.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProfileListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProfileListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProfileListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAllInResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProfileListResult>;
    listAllInResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ProfileListResult>): void;
    listAllInResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProfileListResult>): void;


    /**
     * Lists all Traffic Manager profiles within a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProfileListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAllWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProfileListResult>>;

    /**
     * Lists all Traffic Manager profiles within a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProfileListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProfileListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProfileListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAll(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProfileListResult>;
    listAll(callback: ServiceCallback<models.ProfileListResult>): void;
    listAll(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProfileListResult>): void;


    /**
     * Gets a Traffic Manager profile.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager profile.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Profile>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, profileName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Profile>>;

    /**
     * Gets a Traffic Manager profile.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager profile.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Profile} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Profile} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Profile} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, profileName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Profile>;
    get(resourceGroupName: string, profileName: string, callback: ServiceCallback<models.Profile>): void;
    get(resourceGroupName: string, profileName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Profile>): void;


    /**
     * Create or update a Traffic Manager profile.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager profile.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {object} parameters The Traffic Manager profile parameters supplied
     * to the CreateOrUpdate operation.
     *
     * @param {string} [parameters.profileStatus] Gets or sets the status of the
     * Traffic Manager profile.  Possible values are 'Enabled' and 'Disabled'.
     *
     * @param {string} [parameters.trafficRoutingMethod] Gets or sets the traffic
     * routing method of the Traffic Manager profile.  Possible values are
     * 'Performance', 'Weighted', or 'Priority'.
     *
     * @param {object} [parameters.dnsConfig] Gets or sets the DNS settings of the
     * Traffic Manager profile.
     *
     * @param {string} [parameters.dnsConfig.relativeName] Gets or sets the
     * relative DNS name provided by this Traffic Manager profile.  This value is
     * combined with the DNS domain name used by Azure Traffic Manager to form the
     * fully-qualified domain name (FQDN) of the profile.
     *
     * @param {string} [parameters.dnsConfig.fqdn] Gets or sets the fully-qualified
     * domain name (FQDN) of the Traffic Manager profile.  This is formed from the
     * concatenation of the RelativeName with the DNS domain used by Azure Traffic
     * Manager.
     *
     * @param {number} [parameters.dnsConfig.ttl] Gets or sets the DNS
     * Ttime-To-Live (TTL), in seconds.  This informs the local DNS resolvers and
     * DNS clients how long to cache DNS responses provided by this Traffic Manager
     * profile.
     *
     * @param {object} [parameters.monitorConfig] Gets or sets the endpoint
     * monitoring settings of the Traffic Manager profile.
     *
     * @param {string} [parameters.monitorConfig.profileMonitorStatus] Gets or sets
     * the profile-level monitoring status of the Traffic Manager profile.
     *
     * @param {string} [parameters.monitorConfig.protocol] Gets or sets the
     * protocol (HTTP or HTTPS) used to probe for endpoint health.
     *
     * @param {number} [parameters.monitorConfig.port] Gets or sets the TCP port
     * used to probe for endpoint health.
     *
     * @param {string} [parameters.monitorConfig.path] Gets or sets the path
     * relative to the endpoint domain name used to probe for endpoint health.
     *
     * @param {array} [parameters.endpoints] Gets or sets the list of endpoints in
     * the Traffic Manager profile.
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Profile>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, profileName: string, parameters: models.Profile, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Profile>>;

    /**
     * Create or update a Traffic Manager profile.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager profile.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {object} parameters The Traffic Manager profile parameters supplied
     * to the CreateOrUpdate operation.
     *
     * @param {string} [parameters.profileStatus] Gets or sets the status of the
     * Traffic Manager profile.  Possible values are 'Enabled' and 'Disabled'.
     *
     * @param {string} [parameters.trafficRoutingMethod] Gets or sets the traffic
     * routing method of the Traffic Manager profile.  Possible values are
     * 'Performance', 'Weighted', or 'Priority'.
     *
     * @param {object} [parameters.dnsConfig] Gets or sets the DNS settings of the
     * Traffic Manager profile.
     *
     * @param {string} [parameters.dnsConfig.relativeName] Gets or sets the
     * relative DNS name provided by this Traffic Manager profile.  This value is
     * combined with the DNS domain name used by Azure Traffic Manager to form the
     * fully-qualified domain name (FQDN) of the profile.
     *
     * @param {string} [parameters.dnsConfig.fqdn] Gets or sets the fully-qualified
     * domain name (FQDN) of the Traffic Manager profile.  This is formed from the
     * concatenation of the RelativeName with the DNS domain used by Azure Traffic
     * Manager.
     *
     * @param {number} [parameters.dnsConfig.ttl] Gets or sets the DNS
     * Ttime-To-Live (TTL), in seconds.  This informs the local DNS resolvers and
     * DNS clients how long to cache DNS responses provided by this Traffic Manager
     * profile.
     *
     * @param {object} [parameters.monitorConfig] Gets or sets the endpoint
     * monitoring settings of the Traffic Manager profile.
     *
     * @param {string} [parameters.monitorConfig.profileMonitorStatus] Gets or sets
     * the profile-level monitoring status of the Traffic Manager profile.
     *
     * @param {string} [parameters.monitorConfig.protocol] Gets or sets the
     * protocol (HTTP or HTTPS) used to probe for endpoint health.
     *
     * @param {number} [parameters.monitorConfig.port] Gets or sets the TCP port
     * used to probe for endpoint health.
     *
     * @param {string} [parameters.monitorConfig.path] Gets or sets the path
     * relative to the endpoint domain name used to probe for endpoint health.
     *
     * @param {array} [parameters.endpoints] Gets or sets the list of endpoints in
     * the Traffic Manager profile.
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Profile} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Profile} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Profile} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, profileName: string, parameters: models.Profile, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Profile>;
    createOrUpdate(resourceGroupName: string, profileName: string, parameters: models.Profile, callback: ServiceCallback<models.Profile>): void;
    createOrUpdate(resourceGroupName: string, profileName: string, parameters: models.Profile, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Profile>): void;


    /**
     * Deletes a Traffic Manager profile.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager profile to be deleted.
     *
     * @param {string} profileName The name of the Traffic Manager profile to be
     * deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, profileName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a Traffic Manager profile.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager profile to be deleted.
     *
     * @param {string} profileName The name of the Traffic Manager profile to be
     * deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, profileName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, profileName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, profileName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Update a Traffic Manager profile.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager profile.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {object} parameters The Traffic Manager profile parameters supplied
     * to the Update operation.
     *
     * @param {string} [parameters.profileStatus] Gets or sets the status of the
     * Traffic Manager profile.  Possible values are 'Enabled' and 'Disabled'.
     *
     * @param {string} [parameters.trafficRoutingMethod] Gets or sets the traffic
     * routing method of the Traffic Manager profile.  Possible values are
     * 'Performance', 'Weighted', or 'Priority'.
     *
     * @param {object} [parameters.dnsConfig] Gets or sets the DNS settings of the
     * Traffic Manager profile.
     *
     * @param {string} [parameters.dnsConfig.relativeName] Gets or sets the
     * relative DNS name provided by this Traffic Manager profile.  This value is
     * combined with the DNS domain name used by Azure Traffic Manager to form the
     * fully-qualified domain name (FQDN) of the profile.
     *
     * @param {string} [parameters.dnsConfig.fqdn] Gets or sets the fully-qualified
     * domain name (FQDN) of the Traffic Manager profile.  This is formed from the
     * concatenation of the RelativeName with the DNS domain used by Azure Traffic
     * Manager.
     *
     * @param {number} [parameters.dnsConfig.ttl] Gets or sets the DNS
     * Ttime-To-Live (TTL), in seconds.  This informs the local DNS resolvers and
     * DNS clients how long to cache DNS responses provided by this Traffic Manager
     * profile.
     *
     * @param {object} [parameters.monitorConfig] Gets or sets the endpoint
     * monitoring settings of the Traffic Manager profile.
     *
     * @param {string} [parameters.monitorConfig.profileMonitorStatus] Gets or sets
     * the profile-level monitoring status of the Traffic Manager profile.
     *
     * @param {string} [parameters.monitorConfig.protocol] Gets or sets the
     * protocol (HTTP or HTTPS) used to probe for endpoint health.
     *
     * @param {number} [parameters.monitorConfig.port] Gets or sets the TCP port
     * used to probe for endpoint health.
     *
     * @param {string} [parameters.monitorConfig.path] Gets or sets the path
     * relative to the endpoint domain name used to probe for endpoint health.
     *
     * @param {array} [parameters.endpoints] Gets or sets the list of endpoints in
     * the Traffic Manager profile.
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Profile>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, profileName: string, parameters: models.Profile, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Profile>>;

    /**
     * Update a Traffic Manager profile.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the Traffic Manager profile.
     *
     * @param {string} profileName The name of the Traffic Manager profile.
     *
     * @param {object} parameters The Traffic Manager profile parameters supplied
     * to the Update operation.
     *
     * @param {string} [parameters.profileStatus] Gets or sets the status of the
     * Traffic Manager profile.  Possible values are 'Enabled' and 'Disabled'.
     *
     * @param {string} [parameters.trafficRoutingMethod] Gets or sets the traffic
     * routing method of the Traffic Manager profile.  Possible values are
     * 'Performance', 'Weighted', or 'Priority'.
     *
     * @param {object} [parameters.dnsConfig] Gets or sets the DNS settings of the
     * Traffic Manager profile.
     *
     * @param {string} [parameters.dnsConfig.relativeName] Gets or sets the
     * relative DNS name provided by this Traffic Manager profile.  This value is
     * combined with the DNS domain name used by Azure Traffic Manager to form the
     * fully-qualified domain name (FQDN) of the profile.
     *
     * @param {string} [parameters.dnsConfig.fqdn] Gets or sets the fully-qualified
     * domain name (FQDN) of the Traffic Manager profile.  This is formed from the
     * concatenation of the RelativeName with the DNS domain used by Azure Traffic
     * Manager.
     *
     * @param {number} [parameters.dnsConfig.ttl] Gets or sets the DNS
     * Ttime-To-Live (TTL), in seconds.  This informs the local DNS resolvers and
     * DNS clients how long to cache DNS responses provided by this Traffic Manager
     * profile.
     *
     * @param {object} [parameters.monitorConfig] Gets or sets the endpoint
     * monitoring settings of the Traffic Manager profile.
     *
     * @param {string} [parameters.monitorConfig.profileMonitorStatus] Gets or sets
     * the profile-level monitoring status of the Traffic Manager profile.
     *
     * @param {string} [parameters.monitorConfig.protocol] Gets or sets the
     * protocol (HTTP or HTTPS) used to probe for endpoint health.
     *
     * @param {number} [parameters.monitorConfig.port] Gets or sets the TCP port
     * used to probe for endpoint health.
     *
     * @param {string} [parameters.monitorConfig.path] Gets or sets the path
     * relative to the endpoint domain name used to probe for endpoint health.
     *
     * @param {array} [parameters.endpoints] Gets or sets the list of endpoints in
     * the Traffic Manager profile.
     *
     * @param {string} [parameters.location] Resource location
     *
     * @param {object} [parameters.tags] Resource tags
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Profile} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Profile} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Profile} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, profileName: string, parameters: models.Profile, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Profile>;
    update(resourceGroupName: string, profileName: string, parameters: models.Profile, callback: ServiceCallback<models.Profile>): void;
    update(resourceGroupName: string, profileName: string, parameters: models.Profile, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Profile>): void;
}
