/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;

/**
 * Update a Traffic Manager endpoint.
 *
 * @param {string} resourceGroupName The name of the resource group containing
 * the Traffic Manager endpoint to be updated.
 *
 * @param {string} profileName The name of the Traffic Manager profile.
 *
 * @param {string} endpointType The type of the Traffic Manager endpoint to be
 * updated.
 *
 * @param {string} endpointName The name of the Traffic Manager endpoint to be
 * updated.
 *
 * @param {object} parameters The Traffic Manager endpoint parameters supplied
 * to the Update operation.
 *
 * @param {string} [parameters.id] Gets or sets the ID of the Traffic Manager
 * endpoint.
 *
 * @param {string} [parameters.name] Gets or sets the name of the Traffic
 * Manager endpoint.
 *
 * @param {string} [parameters.type] Gets or sets the endpoint type of the
 * Traffic Manager endpoint.
 *
 * @param {string} [parameters.targetResourceId] Gets or sets the Azure
 * Resource URI of the of the endpoint.  Not applicable to endpoints of type
 * 'ExternalEndpoints'.
 *
 * @param {string} [parameters.target] Gets or sets the fully-qualified DNS
 * name of the endpoint.  Traffic Manager returns this value in DNS responses
 * to direct traffic to this endpoint.
 *
 * @param {string} [parameters.endpointStatus] Gets or sets the status of the
 * endpoint..  If the endpoint is Enabled, it is probed for endpoint health and
 * is included in the traffic routing method.  Possible values are 'Enabled'
 * and 'Disabled'.
 *
 * @param {number} [parameters.weight] Gets or sets the weight of this endpoint
 * when using the 'Weighted' traffic routing method. Possible values are from 1
 * to 1000.
 *
 * @param {number} [parameters.priority] Gets or sets the priority of this
 * endpoint when using the ‘Priority’ traffic routing method. Possible values
 * are from 1 to 1000, lower values represent higher priority. This is an
 * optional parameter.  If specified, it must be specified on all endpoints,
 * and no two endpoints can share the same priority value.
 *
 * @param {string} [parameters.endpointLocation] Specifies the location of the
 * external or nested endpoints when using the ‘Performance’ traffic routing
 * method.
 *
 * @param {string} [parameters.endpointMonitorStatus] Gets or sets the
 * monitoring status of the endpoint.
 *
 * @param {number} [parameters.minChildEndpoints] Gets or sets the minimum
 * number of endpoints that must be available in the child profile in order for
 * the parent profile to be considered available. Only applicable to endpoint
 * of type 'NestedEndpoints'.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Endpoint} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _update(resourceGroupName, profileName, endpointType, endpointName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (profileName === null || profileName === undefined || typeof profileName.valueOf() !== 'string') {
      throw new Error('profileName cannot be null or undefined and it must be of type string.');
    }
    if (endpointType === null || endpointType === undefined || typeof endpointType.valueOf() !== 'string') {
      throw new Error('endpointType cannot be null or undefined and it must be of type string.');
    }
    if (endpointName === null || endpointName === undefined || typeof endpointName.valueOf() !== 'string') {
      throw new Error('endpointName cannot be null or undefined and it must be of type string.');
    }
    if (parameters === null || parameters === undefined) {
      throw new Error('parameters cannot be null or undefined.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{profileName}', encodeURIComponent(profileName));
  requestUrl = requestUrl.replace('{endpointType}', encodeURIComponent(endpointType));
  requestUrl = requestUrl.replace('{endpointName}', encodeURIComponent(endpointName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (parameters !== null && parameters !== undefined) {
      let requestModelMapper = new client.models['Endpoint']().mapper();
      requestModel = client.serialize(requestModelMapper, parameters, 'parameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(parameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Endpoint']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets a Traffic Manager endpoint.
 *
 * @param {string} resourceGroupName The name of the resource group containing
 * the Traffic Manager endpoint.
 *
 * @param {string} profileName The name of the Traffic Manager profile.
 *
 * @param {string} endpointType The type of the Traffic Manager endpoint.
 *
 * @param {string} endpointName The name of the Traffic Manager endpoint.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Endpoint} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(resourceGroupName, profileName, endpointType, endpointName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (profileName === null || profileName === undefined || typeof profileName.valueOf() !== 'string') {
      throw new Error('profileName cannot be null or undefined and it must be of type string.');
    }
    if (endpointType === null || endpointType === undefined || typeof endpointType.valueOf() !== 'string') {
      throw new Error('endpointType cannot be null or undefined and it must be of type string.');
    }
    if (endpointName === null || endpointName === undefined || typeof endpointName.valueOf() !== 'string') {
      throw new Error('endpointName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{profileName}', encodeURIComponent(profileName));
  requestUrl = requestUrl.replace('{endpointType}', encodeURIComponent(endpointType));
  requestUrl = requestUrl.replace('{endpointName}', encodeURIComponent(endpointName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Endpoint']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Create or update a Traffic Manager endpoint.
 *
 * @param {string} resourceGroupName The name of the resource group containing
 * the Traffic Manager endpoint to be created or updated.
 *
 * @param {string} profileName The name of the Traffic Manager profile.
 *
 * @param {string} endpointType The type of the Traffic Manager endpoint to be
 * created or updated.
 *
 * @param {string} endpointName The name of the Traffic Manager endpoint to be
 * created or updated.
 *
 * @param {object} parameters The Traffic Manager endpoint parameters supplied
 * to the CreateOrUpdate operation.
 *
 * @param {string} [parameters.id] Gets or sets the ID of the Traffic Manager
 * endpoint.
 *
 * @param {string} [parameters.name] Gets or sets the name of the Traffic
 * Manager endpoint.
 *
 * @param {string} [parameters.type] Gets or sets the endpoint type of the
 * Traffic Manager endpoint.
 *
 * @param {string} [parameters.targetResourceId] Gets or sets the Azure
 * Resource URI of the of the endpoint.  Not applicable to endpoints of type
 * 'ExternalEndpoints'.
 *
 * @param {string} [parameters.target] Gets or sets the fully-qualified DNS
 * name of the endpoint.  Traffic Manager returns this value in DNS responses
 * to direct traffic to this endpoint.
 *
 * @param {string} [parameters.endpointStatus] Gets or sets the status of the
 * endpoint..  If the endpoint is Enabled, it is probed for endpoint health and
 * is included in the traffic routing method.  Possible values are 'Enabled'
 * and 'Disabled'.
 *
 * @param {number} [parameters.weight] Gets or sets the weight of this endpoint
 * when using the 'Weighted' traffic routing method. Possible values are from 1
 * to 1000.
 *
 * @param {number} [parameters.priority] Gets or sets the priority of this
 * endpoint when using the ‘Priority’ traffic routing method. Possible values
 * are from 1 to 1000, lower values represent higher priority. This is an
 * optional parameter.  If specified, it must be specified on all endpoints,
 * and no two endpoints can share the same priority value.
 *
 * @param {string} [parameters.endpointLocation] Specifies the location of the
 * external or nested endpoints when using the ‘Performance’ traffic routing
 * method.
 *
 * @param {string} [parameters.endpointMonitorStatus] Gets or sets the
 * monitoring status of the endpoint.
 *
 * @param {number} [parameters.minChildEndpoints] Gets or sets the minimum
 * number of endpoints that must be available in the child profile in order for
 * the parent profile to be considered available. Only applicable to endpoint
 * of type 'NestedEndpoints'.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Endpoint} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createOrUpdate(resourceGroupName, profileName, endpointType, endpointName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (profileName === null || profileName === undefined || typeof profileName.valueOf() !== 'string') {
      throw new Error('profileName cannot be null or undefined and it must be of type string.');
    }
    if (endpointType === null || endpointType === undefined || typeof endpointType.valueOf() !== 'string') {
      throw new Error('endpointType cannot be null or undefined and it must be of type string.');
    }
    if (endpointName === null || endpointName === undefined || typeof endpointName.valueOf() !== 'string') {
      throw new Error('endpointName cannot be null or undefined and it must be of type string.');
    }
    if (parameters === null || parameters === undefined) {
      throw new Error('parameters cannot be null or undefined.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{profileName}', encodeURIComponent(profileName));
  requestUrl = requestUrl.replace('{endpointType}', encodeURIComponent(endpointType));
  requestUrl = requestUrl.replace('{endpointName}', encodeURIComponent(endpointName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (parameters !== null && parameters !== undefined) {
      let requestModelMapper = new client.models['Endpoint']().mapper();
      requestModel = client.serialize(requestModelMapper, parameters, 'parameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(parameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Endpoint']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Endpoint']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Deletes a Traffic Manager endpoint.
 *
 * @param {string} resourceGroupName The name of the resource group containing
 * the Traffic Manager endpoint to be deleted.
 *
 * @param {string} profileName The name of the Traffic Manager profile.
 *
 * @param {string} endpointType The type of the Traffic Manager endpoint to be
 * deleted.
 *
 * @param {string} endpointName The name of the Traffic Manager endpoint to be
 * deleted.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteMethod(resourceGroupName, profileName, endpointType, endpointName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (profileName === null || profileName === undefined || typeof profileName.valueOf() !== 'string') {
      throw new Error('profileName cannot be null or undefined and it must be of type string.');
    }
    if (endpointType === null || endpointType === undefined || typeof endpointType.valueOf() !== 'string') {
      throw new Error('endpointType cannot be null or undefined and it must be of type string.');
    }
    if (endpointName === null || endpointName === undefined || typeof endpointName.valueOf() !== 'string') {
      throw new Error('endpointName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{profileName}', encodeURIComponent(profileName));
  requestUrl = requestUrl.replace('{endpointType}', encodeURIComponent(endpointType));
  requestUrl = requestUrl.replace('{endpointName}', encodeURIComponent(endpointName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @class
 * Endpoints
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the TrafficManagerManagementClient.
 * Initializes a new instance of the Endpoints class.
 * @constructor
 *
 * @param {TrafficManagerManagementClient} client Reference to the service client.
 */
class Endpoints {
  constructor(client) {
    this.client = client;
    this._update = _update;
    this._get = _get;
    this._createOrUpdate = _createOrUpdate;
    this._deleteMethod = _deleteMethod;
  }

  /**
   * Update a Traffic Manager endpoint.
   *
   * @param {string} resourceGroupName The name of the resource group containing
   * the Traffic Manager endpoint to be updated.
   *
   * @param {string} profileName The name of the Traffic Manager profile.
   *
   * @param {string} endpointType The type of the Traffic Manager endpoint to be
   * updated.
   *
   * @param {string} endpointName The name of the Traffic Manager endpoint to be
   * updated.
   *
   * @param {object} parameters The Traffic Manager endpoint parameters supplied
   * to the Update operation.
   *
   * @param {string} [parameters.id] Gets or sets the ID of the Traffic Manager
   * endpoint.
   *
   * @param {string} [parameters.name] Gets or sets the name of the Traffic
   * Manager endpoint.
   *
   * @param {string} [parameters.type] Gets or sets the endpoint type of the
   * Traffic Manager endpoint.
   *
   * @param {string} [parameters.targetResourceId] Gets or sets the Azure
   * Resource URI of the of the endpoint.  Not applicable to endpoints of type
   * 'ExternalEndpoints'.
   *
   * @param {string} [parameters.target] Gets or sets the fully-qualified DNS
   * name of the endpoint.  Traffic Manager returns this value in DNS responses
   * to direct traffic to this endpoint.
   *
   * @param {string} [parameters.endpointStatus] Gets or sets the status of the
   * endpoint..  If the endpoint is Enabled, it is probed for endpoint health and
   * is included in the traffic routing method.  Possible values are 'Enabled'
   * and 'Disabled'.
   *
   * @param {number} [parameters.weight] Gets or sets the weight of this endpoint
   * when using the 'Weighted' traffic routing method. Possible values are from 1
   * to 1000.
   *
   * @param {number} [parameters.priority] Gets or sets the priority of this
   * endpoint when using the ‘Priority’ traffic routing method. Possible values
   * are from 1 to 1000, lower values represent higher priority. This is an
   * optional parameter.  If specified, it must be specified on all endpoints,
   * and no two endpoints can share the same priority value.
   *
   * @param {string} [parameters.endpointLocation] Specifies the location of the
   * external or nested endpoints when using the ‘Performance’ traffic routing
   * method.
   *
   * @param {string} [parameters.endpointMonitorStatus] Gets or sets the
   * monitoring status of the endpoint.
   *
   * @param {number} [parameters.minChildEndpoints] Gets or sets the minimum
   * number of endpoints that must be available in the child profile in order for
   * the parent profile to be considered available. Only applicable to endpoint
   * of type 'NestedEndpoints'.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Endpoint>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateWithHttpOperationResponse(resourceGroupName, profileName, endpointType, endpointName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._update(resourceGroupName, profileName, endpointType, endpointName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Update a Traffic Manager endpoint.
   *
   * @param {string} resourceGroupName The name of the resource group containing
   * the Traffic Manager endpoint to be updated.
   *
   * @param {string} profileName The name of the Traffic Manager profile.
   *
   * @param {string} endpointType The type of the Traffic Manager endpoint to be
   * updated.
   *
   * @param {string} endpointName The name of the Traffic Manager endpoint to be
   * updated.
   *
   * @param {object} parameters The Traffic Manager endpoint parameters supplied
   * to the Update operation.
   *
   * @param {string} [parameters.id] Gets or sets the ID of the Traffic Manager
   * endpoint.
   *
   * @param {string} [parameters.name] Gets or sets the name of the Traffic
   * Manager endpoint.
   *
   * @param {string} [parameters.type] Gets or sets the endpoint type of the
   * Traffic Manager endpoint.
   *
   * @param {string} [parameters.targetResourceId] Gets or sets the Azure
   * Resource URI of the of the endpoint.  Not applicable to endpoints of type
   * 'ExternalEndpoints'.
   *
   * @param {string} [parameters.target] Gets or sets the fully-qualified DNS
   * name of the endpoint.  Traffic Manager returns this value in DNS responses
   * to direct traffic to this endpoint.
   *
   * @param {string} [parameters.endpointStatus] Gets or sets the status of the
   * endpoint..  If the endpoint is Enabled, it is probed for endpoint health and
   * is included in the traffic routing method.  Possible values are 'Enabled'
   * and 'Disabled'.
   *
   * @param {number} [parameters.weight] Gets or sets the weight of this endpoint
   * when using the 'Weighted' traffic routing method. Possible values are from 1
   * to 1000.
   *
   * @param {number} [parameters.priority] Gets or sets the priority of this
   * endpoint when using the ‘Priority’ traffic routing method. Possible values
   * are from 1 to 1000, lower values represent higher priority. This is an
   * optional parameter.  If specified, it must be specified on all endpoints,
   * and no two endpoints can share the same priority value.
   *
   * @param {string} [parameters.endpointLocation] Specifies the location of the
   * external or nested endpoints when using the ‘Performance’ traffic routing
   * method.
   *
   * @param {string} [parameters.endpointMonitorStatus] Gets or sets the
   * monitoring status of the endpoint.
   *
   * @param {number} [parameters.minChildEndpoints] Gets or sets the minimum
   * number of endpoints that must be available in the child profile in order for
   * the parent profile to be considered available. Only applicable to endpoint
   * of type 'NestedEndpoints'.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Endpoint} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Endpoint} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  update(resourceGroupName, profileName, endpointType, endpointName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._update(resourceGroupName, profileName, endpointType, endpointName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._update(resourceGroupName, profileName, endpointType, endpointName, parameters, options, optionalCallback);
    }
  }

  /**
   * Gets a Traffic Manager endpoint.
   *
   * @param {string} resourceGroupName The name of the resource group containing
   * the Traffic Manager endpoint.
   *
   * @param {string} profileName The name of the Traffic Manager profile.
   *
   * @param {string} endpointType The type of the Traffic Manager endpoint.
   *
   * @param {string} endpointName The name of the Traffic Manager endpoint.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Endpoint>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(resourceGroupName, profileName, endpointType, endpointName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(resourceGroupName, profileName, endpointType, endpointName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets a Traffic Manager endpoint.
   *
   * @param {string} resourceGroupName The name of the resource group containing
   * the Traffic Manager endpoint.
   *
   * @param {string} profileName The name of the Traffic Manager profile.
   *
   * @param {string} endpointType The type of the Traffic Manager endpoint.
   *
   * @param {string} endpointName The name of the Traffic Manager endpoint.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Endpoint} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Endpoint} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(resourceGroupName, profileName, endpointType, endpointName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(resourceGroupName, profileName, endpointType, endpointName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(resourceGroupName, profileName, endpointType, endpointName, options, optionalCallback);
    }
  }

  /**
   * Create or update a Traffic Manager endpoint.
   *
   * @param {string} resourceGroupName The name of the resource group containing
   * the Traffic Manager endpoint to be created or updated.
   *
   * @param {string} profileName The name of the Traffic Manager profile.
   *
   * @param {string} endpointType The type of the Traffic Manager endpoint to be
   * created or updated.
   *
   * @param {string} endpointName The name of the Traffic Manager endpoint to be
   * created or updated.
   *
   * @param {object} parameters The Traffic Manager endpoint parameters supplied
   * to the CreateOrUpdate operation.
   *
   * @param {string} [parameters.id] Gets or sets the ID of the Traffic Manager
   * endpoint.
   *
   * @param {string} [parameters.name] Gets or sets the name of the Traffic
   * Manager endpoint.
   *
   * @param {string} [parameters.type] Gets or sets the endpoint type of the
   * Traffic Manager endpoint.
   *
   * @param {string} [parameters.targetResourceId] Gets or sets the Azure
   * Resource URI of the of the endpoint.  Not applicable to endpoints of type
   * 'ExternalEndpoints'.
   *
   * @param {string} [parameters.target] Gets or sets the fully-qualified DNS
   * name of the endpoint.  Traffic Manager returns this value in DNS responses
   * to direct traffic to this endpoint.
   *
   * @param {string} [parameters.endpointStatus] Gets or sets the status of the
   * endpoint..  If the endpoint is Enabled, it is probed for endpoint health and
   * is included in the traffic routing method.  Possible values are 'Enabled'
   * and 'Disabled'.
   *
   * @param {number} [parameters.weight] Gets or sets the weight of this endpoint
   * when using the 'Weighted' traffic routing method. Possible values are from 1
   * to 1000.
   *
   * @param {number} [parameters.priority] Gets or sets the priority of this
   * endpoint when using the ‘Priority’ traffic routing method. Possible values
   * are from 1 to 1000, lower values represent higher priority. This is an
   * optional parameter.  If specified, it must be specified on all endpoints,
   * and no two endpoints can share the same priority value.
   *
   * @param {string} [parameters.endpointLocation] Specifies the location of the
   * external or nested endpoints when using the ‘Performance’ traffic routing
   * method.
   *
   * @param {string} [parameters.endpointMonitorStatus] Gets or sets the
   * monitoring status of the endpoint.
   *
   * @param {number} [parameters.minChildEndpoints] Gets or sets the minimum
   * number of endpoints that must be available in the child profile in order for
   * the parent profile to be considered available. Only applicable to endpoint
   * of type 'NestedEndpoints'.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Endpoint>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createOrUpdateWithHttpOperationResponse(resourceGroupName, profileName, endpointType, endpointName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createOrUpdate(resourceGroupName, profileName, endpointType, endpointName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Create or update a Traffic Manager endpoint.
   *
   * @param {string} resourceGroupName The name of the resource group containing
   * the Traffic Manager endpoint to be created or updated.
   *
   * @param {string} profileName The name of the Traffic Manager profile.
   *
   * @param {string} endpointType The type of the Traffic Manager endpoint to be
   * created or updated.
   *
   * @param {string} endpointName The name of the Traffic Manager endpoint to be
   * created or updated.
   *
   * @param {object} parameters The Traffic Manager endpoint parameters supplied
   * to the CreateOrUpdate operation.
   *
   * @param {string} [parameters.id] Gets or sets the ID of the Traffic Manager
   * endpoint.
   *
   * @param {string} [parameters.name] Gets or sets the name of the Traffic
   * Manager endpoint.
   *
   * @param {string} [parameters.type] Gets or sets the endpoint type of the
   * Traffic Manager endpoint.
   *
   * @param {string} [parameters.targetResourceId] Gets or sets the Azure
   * Resource URI of the of the endpoint.  Not applicable to endpoints of type
   * 'ExternalEndpoints'.
   *
   * @param {string} [parameters.target] Gets or sets the fully-qualified DNS
   * name of the endpoint.  Traffic Manager returns this value in DNS responses
   * to direct traffic to this endpoint.
   *
   * @param {string} [parameters.endpointStatus] Gets or sets the status of the
   * endpoint..  If the endpoint is Enabled, it is probed for endpoint health and
   * is included in the traffic routing method.  Possible values are 'Enabled'
   * and 'Disabled'.
   *
   * @param {number} [parameters.weight] Gets or sets the weight of this endpoint
   * when using the 'Weighted' traffic routing method. Possible values are from 1
   * to 1000.
   *
   * @param {number} [parameters.priority] Gets or sets the priority of this
   * endpoint when using the ‘Priority’ traffic routing method. Possible values
   * are from 1 to 1000, lower values represent higher priority. This is an
   * optional parameter.  If specified, it must be specified on all endpoints,
   * and no two endpoints can share the same priority value.
   *
   * @param {string} [parameters.endpointLocation] Specifies the location of the
   * external or nested endpoints when using the ‘Performance’ traffic routing
   * method.
   *
   * @param {string} [parameters.endpointMonitorStatus] Gets or sets the
   * monitoring status of the endpoint.
   *
   * @param {number} [parameters.minChildEndpoints] Gets or sets the minimum
   * number of endpoints that must be available in the child profile in order for
   * the parent profile to be considered available. Only applicable to endpoint
   * of type 'NestedEndpoints'.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Endpoint} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Endpoint} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdate(resourceGroupName, profileName, endpointType, endpointName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createOrUpdate(resourceGroupName, profileName, endpointType, endpointName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createOrUpdate(resourceGroupName, profileName, endpointType, endpointName, parameters, options, optionalCallback);
    }
  }

  /**
   * Deletes a Traffic Manager endpoint.
   *
   * @param {string} resourceGroupName The name of the resource group containing
   * the Traffic Manager endpoint to be deleted.
   *
   * @param {string} profileName The name of the Traffic Manager profile.
   *
   * @param {string} endpointType The type of the Traffic Manager endpoint to be
   * deleted.
   *
   * @param {string} endpointName The name of the Traffic Manager endpoint to be
   * deleted.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteMethodWithHttpOperationResponse(resourceGroupName, profileName, endpointType, endpointName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteMethod(resourceGroupName, profileName, endpointType, endpointName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deletes a Traffic Manager endpoint.
   *
   * @param {string} resourceGroupName The name of the resource group containing
   * the Traffic Manager endpoint to be deleted.
   *
   * @param {string} profileName The name of the Traffic Manager profile.
   *
   * @param {string} endpointType The type of the Traffic Manager endpoint to be
   * deleted.
   *
   * @param {string} endpointName The name of the Traffic Manager endpoint to be
   * deleted.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(resourceGroupName, profileName, endpointType, endpointName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteMethod(resourceGroupName, profileName, endpointType, endpointName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteMethod(resourceGroupName, profileName, endpointType, endpointName, options, optionalCallback);
    }
  }

}

module.exports = Endpoints;
