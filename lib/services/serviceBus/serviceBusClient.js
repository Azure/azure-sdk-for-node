/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty: false */

// 
// Copyright (c) Microsoft.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

var xml = require('xml2js');
var util = require('util');
var js2xml = require('../../util/js2xml');
var Service = require('../core/service');
var WebResource = require('../../http/webresource');

/**
 * The Service Bus Management API is a REST API for managing Service Bus
 * queues, topics, rules and subscriptions.  (see
 * http://msdn.microsoft.com/en-us/library/windowsazure/hh780776.aspx for more
 * information)
 */
var ServiceBusManagementClient = (function() {
  /**
   * Initializes a new instance of the ServiceBusManagementClient class.
   *
   * @constructor
   *
   * @param {SubscriptionCloudCredentials} credentials - When you create a
   * Windows Azure subscription, it is uniquely identified by a subscription
   * ID. The subscription ID forms part of the URI for every call that you
   * make to the Service Management API.  The Windows Azure Service
   * ManagementAPI use mutual authentication of management certificates over
   * SSL to ensure that a request made to the service is secure.  No anonymous
   * requests are allowed.
   *
   * @param {String} baseUri - The URI used as the base for all Service Bus
   * requests.
   */
  function ServiceBusManagementClient(credentials, baseUri) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    ServiceBusManagementClient['super_'].call(this, credentials);
    
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://management.core.windows.net';
    }
    this.namespaces = new NamespaceOperations(this);
    this.notificationHubs = new NotificationHubOperations(this);
    this.queues = new QueueOperations(this);
    this.relays = new RelayOperations(this);
    this.topics = new TopicOperations(this);
  }
  
  util.inherits(ServiceBusManagementClient, Service);
  
  /**
   * The Get Operation Status operation returns the status of thespecified
   * operation. After calling an asynchronous operation, you can call Get
   * Operation Status to determine whether the operation has succeeded,
   * failed, or is still in progress.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/ee460783.aspx for
   * more information)
   *
   * @param {String} requestId - The request ID for the request you wish to
   * track. The request ID is returned in the x-ms-request-id response header
   * for every request.
   *
   * @param {Function} callback
   *
   * @returns {ServiceBusOperationStatusResponse} - The response body contains
   * the status of the specified asynchronous operation, indicating whether it
   * has succeeded, is inprogress, or has failed. Note that this status is
   * distinct from the HTTP status code returned for the Get Operation Status
   * operation itself.  If the asynchronous operation succeeded, the response
   * body includes the HTTP status code for the successful request.  If the
   * asynchronous operation failed, the response body includes the HTTP status
   * code for the failed request, and also includes error information
   * regarding the failure.
   */
  ServiceBusManagementClient.prototype.getOperationStatus = function(requestId, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (requestId === null || requestId === undefined) {
      return callback(new Error('requestId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.baseUri + this.credentials.subscriptionId + '/operations/' + requestId;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-08-01';
    
    // Set Credentials
    
    // Send Request
    return this.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var operationElement = js2xml.getElement(responseDoc, responseDoc, 'OPERATION', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
        if (operationElement) {
          var idElement = js2xml.getElement(responseDoc, operationElement, 'ID', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (idElement) {
            var idInstance = idElement;
            result.id = idInstance;
          }
          
          var statusElement = js2xml.getElement(responseDoc, operationElement, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (statusElement) {
            var statusInstance = statusElement;
            result.status = statusInstance;
          }
          
          var httpStatusCodeElement = js2xml.getElement(responseDoc, operationElement, 'HTTPSTATUSCODE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (httpStatusCodeElement) {
            var httpStatusCodeInstance = httpStatusCodeElement;
            result.httpStatusCode = httpStatusCodeInstance;
          }
          
          var errorElement = js2xml.getElement(responseDoc, operationElement, 'ERROR', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
          if (errorElement) {
            var errorInstance = {};
            result.error = errorInstance;
            
            var codeElement = js2xml.getElement(responseDoc, errorElement, 'CODE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (codeElement) {
              var codeInstance = codeElement;
              errorInstance.code = codeInstance;
            }
            
            var messageElement = js2xml.getElement(responseDoc, errorElement, 'MESSAGE', 'HTTP://SCHEMAS.MICROSOFT.COM/WINDOWSAZURE');
            if (messageElement) {
              var messageInstance = messageElement;
              errorInstance.message = messageInstance;
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Retrieves the list of regions that support the creation and management of
   * Service Bus service namespaces.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj860465.aspx for
   * more information)
   *
   * @param {Function} callback
   *
   * @returns {ServiceBusRegionsResponse} - A response to a request for a list
   * of regions.
   */
  ServiceBusManagementClient.prototype.getServiceBusRegions = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.baseUri + this.credentials.subscriptionId + '/services/servicebus/regions';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Accept'] = 'application/atom+xml';
    httpRequest.headers['Content-Type'] = 'application/atom+xml';
    httpRequest.headers['x-ms-version'] = '2013-08-01';
    
    // Set Credentials
    
    // Send Request
    return this.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { regions: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var feedElement = js2xml.getElement(responseDoc, responseDoc, 'FEED', 'HTTP://WWW.W3.ORG/2005/ATOM');
        if (feedElement) {
          if (feedElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, feedElement, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM').length; loweredIndex1 = loweredIndex1 + 1) {
              var entriesElement = js2xml.getElements(responseDoc, feedElement, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM')[loweredIndex1];
              var entryInstance = {};
              result.regions.push(entryInstance);
              
              var contentElement = js2xml.getElement(responseDoc, entriesElement, 'CONTENT', 'HTTP://WWW.W3.ORG/2005/ATOM');
              if (contentElement) {
                var regionCodeDescriptionElement = js2xml.getElement(responseDoc, contentElement, 'REGIONCODEDESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                if (regionCodeDescriptionElement) {
                  var codeElement = js2xml.getElement(responseDoc, regionCodeDescriptionElement, 'CODE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (codeElement) {
                    var codeInstance = codeElement;
                    entryInstance.code = codeInstance;
                  }
                  
                  var fullNameElement = js2xml.getElement(responseDoc, regionCodeDescriptionElement, 'FULLNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (fullNameElement) {
                    var fullNameInstance = fullNameElement;
                    entryInstance.fullName = fullNameInstance;
                  }
                }
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  return ServiceBusManagementClient;
})();
exports.ServiceBusManagementClient = ServiceBusManagementClient;

/**
 * The Service Bus Management API includes operations for managing Service Bus
 * namespaces.
 */
var NamespaceOperations = (function() {
  /**
   * Initializes a new instance of the NamespaceOperations class.
   *
   * @constructor
   *
   * @param {ServiceBusManagementClient} client - Reference to the service
   * client.
   */
  function NamespaceOperations(client) {
    this.client = client;
  }
  
  /**
   * Checks the availability of the given service namespace across all Windows
   * Azure subscriptions. This is useful because the domain name is created
   * based on the service namespace name.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj870968.aspx for
   * more information)
   *
   * @param {String} namespaceName
   *
   * @param {Function} callback
   *
   * @returns {CheckNamespaceAvailabilityResponse} - The response to a query
   * for the availability status of a namespace name.
   */
  NamespaceOperations.prototype.checkAvailability = function(namespaceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + this.client.credentials.subscriptionId + '/services/ServiceBus/CheckNamespaceAvailability?namespace=' + namespaceName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Accept'] = 'application/atom+xml';
    httpRequest.headers['Content-Type'] = 'application/atom+xml';
    httpRequest.headers['x-ms-version'] = '2013-06-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var entryElement = js2xml.getElement(responseDoc, responseDoc, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM');
        if (entryElement) {
          var contentElement = js2xml.getElement(responseDoc, entryElement, 'CONTENT', 'HTTP://WWW.W3.ORG/2005/ATOM');
          if (contentElement) {
            var namespaceAvailabilityElement = js2xml.getElement(responseDoc, contentElement, 'NAMESPACEAVAILABILITY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
            if (namespaceAvailabilityElement) {
              var resultElement = js2xml.getElement(responseDoc, namespaceAvailabilityElement, 'RESULT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (resultElement) {
                var resultInstance = resultElement;
                result.isAvailable = resultInstance;
              }
              
              var reasonDetailElement = js2xml.getElement(responseDoc, namespaceAvailabilityElement, 'REASONDETAIL', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (reasonDetailElement) {
                var reasonDetailInstance = reasonDetailElement;
                result.reasonDetails = reasonDetailInstance;
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Creates a new service namespace. Once created, this namespace's resource
   * manifest is immutable. This operation is idempotent.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj856303.aspx for
   * more information)
   *
   * @param {String} namespaceName
   *
   * @param {String} region
   *
   * @param {Function} callback
   *
   * @returns {ServiceBusNamespaceResponse} - The response to a request for a
   * particular namespace.
   */
  NamespaceOperations.prototype.create = function(namespaceName, region, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + this.client.credentials.subscriptionId + '/services/servicebus/namespaces/' + namespaceName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Accept'] = 'application/atom+xml';
    httpRequest.headers['Content-Type'] = 'application/atom+xml';
    httpRequest.headers['type'] = 'entry';
    httpRequest.headers['x-ms-version'] = '2013-07-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var entryElement = js2xml.createElement('entry', 'http://www.w3.org/2005/Atom');
    js2xml.addChildElement(requestDoc, entryElement);
    
    var contentElement = js2xml.createElement('content', 'http://www.w3.org/2005/Atom');
    js2xml.addChildElement(entryElement, contentElement);
    
    var typeAttribute = js2xml.createAttribute('type', '');
    js2xml.setAttributeValue(typeAttribute, 'application/xml');
    js2xml.addAttribute(contentElement, typeAttribute);
    
    var namespaceDescriptionElement = js2xml.createElement('NamespaceDescription', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
    js2xml.addChildElement(contentElement, namespaceDescriptionElement);
    
    if (region) {
      var regionElement = js2xml.createElement('Region', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(regionElement, region);
      js2xml.addChildElement(namespaceDescriptionElement, regionElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var entryElement2 = js2xml.getElement(responseDoc, responseDoc, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM');
        if (entryElement2) {
          var contentElement2 = js2xml.getElement(responseDoc, entryElement2, 'CONTENT', 'HTTP://WWW.W3.ORG/2005/ATOM');
          if (contentElement2) {
            var namespaceDescriptionElement2 = js2xml.getElement(responseDoc, contentElement2, 'NAMESPACEDESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
            if (namespaceDescriptionElement2) {
              var namespaceDescriptionInstance = {};
              result.namespace = namespaceDescriptionInstance;
              
              var nameElement = js2xml.getElement(responseDoc, namespaceDescriptionElement2, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (nameElement) {
                var nameInstance = nameElement;
                namespaceDescriptionInstance.name = nameInstance;
              }
              
              var regionElement2 = js2xml.getElement(responseDoc, namespaceDescriptionElement2, 'REGION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (regionElement2) {
                var regionInstance = regionElement2;
                namespaceDescriptionInstance.region = regionInstance;
              }
              
              var statusElement = js2xml.getElement(responseDoc, namespaceDescriptionElement2, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (statusElement) {
                var statusInstance = statusElement;
                namespaceDescriptionInstance.status = statusInstance;
              }
              
              var createdAtElement = js2xml.getElement(responseDoc, namespaceDescriptionElement2, 'CREATEDAT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (createdAtElement) {
                var createdAtInstance = new Date(createdAtElement);
                namespaceDescriptionInstance.createdAt = createdAtInstance;
              }
              
              var acsManagementEndpointElement = js2xml.getElement(responseDoc, namespaceDescriptionElement2, 'ACSMANAGEMENTENDPOINT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (acsManagementEndpointElement) {
                var acsManagementEndpointInstance = acsManagementEndpointElement;
                namespaceDescriptionInstance.acsManagementEndpoint = acsManagementEndpointInstance;
              }
              
              var serviceBusEndpointElement = js2xml.getElement(responseDoc, namespaceDescriptionElement2, 'SERVICEBUSENDPOINT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (serviceBusEndpointElement) {
                var serviceBusEndpointInstance = serviceBusEndpointElement;
                namespaceDescriptionInstance.serviceBusEndpoint = serviceBusEndpointInstance;
              }
              
              var subscriptionIdElement = js2xml.getElement(responseDoc, namespaceDescriptionElement2, 'SUBSCRIPTIONID', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (subscriptionIdElement) {
                var subscriptionIdInstance = subscriptionIdElement;
                namespaceDescriptionInstance.subscriptionId = subscriptionIdInstance;
              }
              
              var enabledElement = js2xml.getElement(responseDoc, namespaceDescriptionElement2, 'ENABLED', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (enabledElement) {
                var enabledInstance = enabledElement;
                namespaceDescriptionInstance.enabled = enabledInstance;
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The create namespace authorization rule operation creates an authorization
   * rule for a namespace
   *
   * @param {String} namespaceName
   *
   * @param {ServiceBusSharedAccessAuthorizationRule} rule
   *
   * @param {Function} callback
   *
   * @returns {ServiceBusAuthorizationRuleResponse} - A response to a request
   * for a particular authorization rule.
   */
  NamespaceOperations.prototype.createAuthorizationRule = function(namespaceName, rule, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (namespaceName === null || namespaceName === undefined) {
      return callback(new Error('namespaceName cannot be null.'));
    }
    if (rule === null || rule === undefined) {
      return callback(new Error('rule cannot be null.'));
    }
    if (rule.createdTime === null || rule.createdTime === undefined) {
      return callback(new Error('rule.createdTime cannot be null.'));
    }
    if (rule.modifiedTime === null || rule.modifiedTime === undefined) {
      return callback(new Error('rule.modifiedTime cannot be null.'));
    }
    if (rule.revision === null || rule.revision === undefined) {
      return callback(new Error('rule.revision cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + this.client.credentials.subscriptionId + '/services/servicebus/namespaces/' + namespaceName + '/AuthorizationRules';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Accept'] = 'application/atom+xml';
    httpRequest.headers['Content-Type'] = 'application/atom+xml';
    httpRequest.headers['type'] = 'entry';
    httpRequest.headers['x-ms-version'] = '2013-08-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var entryElement = js2xml.createElement('entry', 'http://www.w3.org/2005/Atom');
    js2xml.addChildElement(requestDoc, entryElement);
    
    var contentElement = js2xml.createElement('content', 'http://www.w3.org/2005/Atom');
    js2xml.addChildElement(entryElement, contentElement);
    
    var typeAttribute = js2xml.createAttribute('type', '');
    js2xml.setAttributeValue(typeAttribute, 'application/atom+xml');
    js2xml.addAttribute(contentElement, typeAttribute);
    
    var sharedAccessAuthorizationRuleElement = js2xml.createElement('SharedAccessAuthorizationRule', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
    js2xml.addChildElement(contentElement, sharedAccessAuthorizationRuleElement);
    
    if (rule.claimType) {
      var claimTypeElement = js2xml.createElement('ClaimType', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(claimTypeElement, rule.claimType);
      js2xml.addChildElement(sharedAccessAuthorizationRuleElement, claimTypeElement);
    }
    
    if (rule.claimValue) {
      var claimValueElement = js2xml.createElement('ClaimValue', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(claimValueElement, rule.claimValue);
      js2xml.addChildElement(sharedAccessAuthorizationRuleElement, claimValueElement);
    }
    
    if (rule.rights) {
      var rightsSequenceElement = js2xml.createElement('Rights', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      for (var loweredIndex1 = 0; loweredIndex1 < rule.rights.length; loweredIndex1 = loweredIndex1 + 1) {
        var rightsItem = rule.rights[loweredIndex1];
        var rightsItemElement = js2xml.createElement('AccessRights', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        js2xml.setElementValue(rightsItemElement, rightsItem ? rightsItem.toString() : 'Listen');
        js2xml.addChildElement(rightsSequenceElement, rightsItemElement);
      }
      js2xml.addChildElement(sharedAccessAuthorizationRuleElement, rightsSequenceElement);
    }
    
    var createdTimeElement = js2xml.createElement('CreatedTime', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
    var dateText = JSON.stringify(rule.createdTime);
    js2xml.setElementValue(createdTimeElement, dateText.substr(1, dateText.length - 2));
    js2xml.addChildElement(sharedAccessAuthorizationRuleElement, createdTimeElement);
    
    var modifiedTimeElement = js2xml.createElement('ModifiedTime', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
    var dateText2 = JSON.stringify(rule.modifiedTime);
    js2xml.setElementValue(modifiedTimeElement, dateText2.substr(1, dateText2.length - 2));
    js2xml.addChildElement(sharedAccessAuthorizationRuleElement, modifiedTimeElement);
    
    var revisionElement = js2xml.createElement('Revision', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
    js2xml.setElementValue(revisionElement, rule.revision.toString());
    js2xml.addChildElement(sharedAccessAuthorizationRuleElement, revisionElement);
    
    if (rule.keyName) {
      var keyNameElement = js2xml.createElement('KeyName', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(keyNameElement, rule.keyName);
      js2xml.addChildElement(sharedAccessAuthorizationRuleElement, keyNameElement);
    }
    
    if (rule.primaryKey) {
      var primaryKeyElement = js2xml.createElement('PrimaryKey', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(primaryKeyElement, rule.primaryKey);
      js2xml.addChildElement(sharedAccessAuthorizationRuleElement, primaryKeyElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 201) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var entryElement2 = js2xml.getElement(responseDoc, responseDoc, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM');
        if (entryElement2) {
          var contentElement2 = js2xml.getElement(responseDoc, entryElement2, 'CONTENT', 'HTTP://WWW.W3.ORG/2005/ATOM');
          if (contentElement2) {
            var sharedAccessAuthorizationRuleElement2 = js2xml.getElement(responseDoc, contentElement2, 'SHAREDACCESSAUTHORIZATIONRULE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
            if (sharedAccessAuthorizationRuleElement2) {
              var sharedAccessAuthorizationRuleInstance = { rights: [] };
              result.authorizationRule = sharedAccessAuthorizationRuleInstance;
              
              var claimTypeElement2 = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement2, 'CLAIMTYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (claimTypeElement2) {
                var claimTypeInstance = claimTypeElement2;
                sharedAccessAuthorizationRuleInstance.claimType = claimTypeInstance;
              }
              
              var claimValueElement2 = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement2, 'CLAIMVALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (claimValueElement2) {
                var claimValueInstance = claimValueElement2;
                sharedAccessAuthorizationRuleInstance.claimValue = claimValueInstance;
              }
              
              var rightsSequenceElement2 = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement2, 'RIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (rightsSequenceElement2) {
                for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, rightsSequenceElement2, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex2 = loweredIndex2 + 1) {
                  var rightsElement = js2xml.getElements(responseDoc, rightsSequenceElement2, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex2];
                  sharedAccessAuthorizationRuleInstance.rights.push(rightsElement);
                }
              }
              
              var createdTimeElement2 = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement2, 'CREATEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (createdTimeElement2) {
                var createdTimeInstance = new Date(createdTimeElement2);
                sharedAccessAuthorizationRuleInstance.createdTime = createdTimeInstance;
              }
              
              var modifiedTimeElement2 = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement2, 'MODIFIEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (modifiedTimeElement2) {
                var modifiedTimeInstance = new Date(modifiedTimeElement2);
                sharedAccessAuthorizationRuleInstance.modifiedTime = modifiedTimeInstance;
              }
              
              var keyNameElement2 = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement2, 'KEYNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (keyNameElement2) {
                var keyNameInstance = keyNameElement2;
                sharedAccessAuthorizationRuleInstance.keyName = keyNameInstance;
              }
              
              var primaryKeyElement2 = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement2, 'PRIMARYKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (primaryKeyElement2) {
                var primaryKeyInstance = primaryKeyElement2;
                sharedAccessAuthorizationRuleInstance.primaryKey = primaryKeyInstance;
              }
              
              var secondaryKeyElement = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement2, 'SECONDARYKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (secondaryKeyElement) {
                var secondaryKeyInstance = secondaryKeyElement;
                sharedAccessAuthorizationRuleInstance.secondaryKey = secondaryKeyInstance;
              }
              
              var revisionElement2 = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement2, 'REVISION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (revisionElement2) {
                var revisionInstance = parseInt(revisionElement2, 10);
                sharedAccessAuthorizationRuleInstance.revision = revisionInstance;
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Deletes an existing namespace. This operation also removes all associated
   * entities including queues, topics, relay points, and messages stored
   * under the namespace.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj856296.aspx for
   * more information)
   *
   * @param {String} namespaceName
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard storage response including an
   * HTTP status code and request ID.
   */
  NamespaceOperations.prototype.delete = function(namespaceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + this.client.credentials.subscriptionId + '/services/servicebus/namespaces/' + namespaceName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Accept'] = 'application/atom+xml';
    httpRequest.headers['Content-Type'] = 'application/atom+xml';
    httpRequest.headers['x-ms-version'] = '2013-08-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The delete namespace authorization rule operation deletes an authorization
   * rule for a namespace
   *
   * @param {String} namespaceName
   *
   * @param {String} ruleName
   *
   * @param {Function} callback
   *
   * @returns {OperationResponse} - A standard storage response including an
   * HTTP status code and request ID.
   */
  NamespaceOperations.prototype.deleteAuthorizationRule = function(namespaceName, ruleName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (namespaceName === null || namespaceName === undefined) {
      return callback(new Error('namespaceName cannot be null.'));
    }
    if (ruleName === null || ruleName === undefined) {
      return callback(new Error('ruleName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + this.client.credentials.subscriptionId + '/services/servicebus/namespaces/' + namespaceName + '/AuthorizationRules/' + ruleName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2012-03-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 204) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Returns the description for the specified namespace.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn140232.aspx for
   * more information)
   *
   * @param {String} namespaceName
   *
   * @param {Function} callback
   *
   * @returns {ServiceBusNamespaceResponse} - The response to a request for a
   * particular namespace.
   */
  NamespaceOperations.prototype.get = function(namespaceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + this.client.credentials.subscriptionId + '/services/servicebus/namespaces/' + namespaceName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Accept'] = 'application/atom+xml';
    httpRequest.headers['Content-Type'] = 'application/atom+xml';
    httpRequest.headers['x-ms-version'] = '2013-08-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var entryElement = js2xml.getElement(responseDoc, responseDoc, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM');
        if (entryElement) {
          var contentElement = js2xml.getElement(responseDoc, entryElement, 'CONTENT', 'HTTP://WWW.W3.ORG/2005/ATOM');
          if (contentElement) {
            var namespaceDescriptionElement = js2xml.getElement(responseDoc, contentElement, 'NAMESPACEDESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
            if (namespaceDescriptionElement) {
              var namespaceDescriptionInstance = {};
              result.namespace = namespaceDescriptionInstance;
              
              var nameElement = js2xml.getElement(responseDoc, namespaceDescriptionElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (nameElement) {
                var nameInstance = nameElement;
                namespaceDescriptionInstance.name = nameInstance;
              }
              
              var regionElement = js2xml.getElement(responseDoc, namespaceDescriptionElement, 'REGION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (regionElement) {
                var regionInstance = regionElement;
                namespaceDescriptionInstance.region = regionInstance;
              }
              
              var statusElement = js2xml.getElement(responseDoc, namespaceDescriptionElement, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (statusElement) {
                var statusInstance = statusElement;
                namespaceDescriptionInstance.status = statusInstance;
              }
              
              var createdAtElement = js2xml.getElement(responseDoc, namespaceDescriptionElement, 'CREATEDAT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (createdAtElement) {
                var createdAtInstance = new Date(createdAtElement);
                namespaceDescriptionInstance.createdAt = createdAtInstance;
              }
              
              var acsManagementEndpointElement = js2xml.getElement(responseDoc, namespaceDescriptionElement, 'ACSMANAGEMENTENDPOINT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (acsManagementEndpointElement) {
                var acsManagementEndpointInstance = acsManagementEndpointElement;
                namespaceDescriptionInstance.acsManagementEndpoint = acsManagementEndpointInstance;
              }
              
              var serviceBusEndpointElement = js2xml.getElement(responseDoc, namespaceDescriptionElement, 'SERVICEBUSENDPOINT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (serviceBusEndpointElement) {
                var serviceBusEndpointInstance = serviceBusEndpointElement;
                namespaceDescriptionInstance.serviceBusEndpoint = serviceBusEndpointInstance;
              }
              
              var subscriptionIdElement = js2xml.getElement(responseDoc, namespaceDescriptionElement, 'SUBSCRIPTIONID', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (subscriptionIdElement) {
                var subscriptionIdInstance = subscriptionIdElement;
                namespaceDescriptionInstance.subscriptionId = subscriptionIdInstance;
              }
              
              var enabledElement = js2xml.getElement(responseDoc, namespaceDescriptionElement, 'ENABLED', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (enabledElement) {
                var enabledInstance = enabledElement;
                namespaceDescriptionInstance.enabled = enabledInstance;
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The get authorization rule operation gets an authorization rule for a
   * namespace by name
   *
   * @param {String} namespaceName - The namespace to get the authorization
   * rule for.
   *
   * @param {String} entityName - The entity name to get the authorization rule
   * for.
   *
   * @param {Function} callback
   *
   * @returns {ServiceBusAuthorizationRuleResponse} - A response to a request
   * for a particular authorization rule.
   */
  NamespaceOperations.prototype.getAuthorizationRule = function(namespaceName, entityName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (namespaceName === null || namespaceName === undefined) {
      return callback(new Error('namespaceName cannot be null.'));
    }
    if (entityName === null || entityName === undefined) {
      return callback(new Error('entityName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + this.client.credentials.subscriptionId + '/services/servicebus/namespaces/' + namespaceName + '/AuthorizationRules/' + entityName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Accept'] = 'application/atom+xml';
    httpRequest.headers['Content-Type'] = 'application/xml; charset=utf-8';
    httpRequest.headers['x-ms-version'] = '2013-08-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var entryElement = js2xml.getElement(responseDoc, responseDoc, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM');
        if (entryElement) {
          var contentElement = js2xml.getElement(responseDoc, entryElement, 'CONTENT', 'HTTP://WWW.W3.ORG/2005/ATOM');
          if (contentElement) {
            var sharedAccessAuthorizationRuleElement = js2xml.getElement(responseDoc, contentElement, 'SHAREDACCESSAUTHORIZATIONRULE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
            if (sharedAccessAuthorizationRuleElement) {
              var sharedAccessAuthorizationRuleInstance = { rights: [] };
              result.authorizationRule = sharedAccessAuthorizationRuleInstance;
              
              var claimTypeElement = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement, 'CLAIMTYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (claimTypeElement) {
                var claimTypeInstance = claimTypeElement;
                sharedAccessAuthorizationRuleInstance.claimType = claimTypeInstance;
              }
              
              var claimValueElement = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement, 'CLAIMVALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (claimValueElement) {
                var claimValueInstance = claimValueElement;
                sharedAccessAuthorizationRuleInstance.claimValue = claimValueInstance;
              }
              
              var rightsSequenceElement = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement, 'RIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (rightsSequenceElement) {
                for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, rightsSequenceElement, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex1 = loweredIndex1 + 1) {
                  var rightsElement = js2xml.getElements(responseDoc, rightsSequenceElement, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex1];
                  sharedAccessAuthorizationRuleInstance.rights.push(rightsElement);
                }
              }
              
              var createdTimeElement = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement, 'CREATEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (createdTimeElement) {
                var createdTimeInstance = new Date(createdTimeElement);
                sharedAccessAuthorizationRuleInstance.createdTime = createdTimeInstance;
              }
              
              var modifiedTimeElement = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement, 'MODIFIEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (modifiedTimeElement) {
                var modifiedTimeInstance = new Date(modifiedTimeElement);
                sharedAccessAuthorizationRuleInstance.modifiedTime = modifiedTimeInstance;
              }
              
              var keyNameElement = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement, 'KEYNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (keyNameElement) {
                var keyNameInstance = keyNameElement;
                sharedAccessAuthorizationRuleInstance.keyName = keyNameInstance;
              }
              
              var primaryKeyElement = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement, 'PRIMARYKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (primaryKeyElement) {
                var primaryKeyInstance = primaryKeyElement;
                sharedAccessAuthorizationRuleInstance.primaryKey = primaryKeyInstance;
              }
              
              var secondaryKeyElement = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement, 'SECONDARYKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (secondaryKeyElement) {
                var secondaryKeyInstance = secondaryKeyElement;
                sharedAccessAuthorizationRuleInstance.secondaryKey = secondaryKeyInstance;
              }
              
              var revisionElement = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement, 'REVISION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (revisionElement) {
                var revisionInstance = parseInt(revisionElement, 10);
                sharedAccessAuthorizationRuleInstance.revision = revisionInstance;
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The namespace description is an XML AtomPub document that defines the
   * desired semantics for a service namespace. The namespace description
   * contains the following properties.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj873988.aspx for
   * more information)
   *
   * @param {String} namespaceName
   *
   * @param {Function} callback
   *
   * @returns {ServiceBusNamespaceDescriptionResponse} - A response to a
   * request for a list of namespaces.
   */
  NamespaceOperations.prototype.getNamespaceDescription = function(namespaceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + this.client.credentials.subscriptionId + '/services/servicebus/namespaces/' + namespaceName + '/ConnectionDetails';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Accept'] = 'application/atom+xml';
    httpRequest.headers['Content-Type'] = 'application/xml; charset=utf-8';
    httpRequest.headers['x-ms-version'] = '2013-08-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { namespaceDescriptions: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var feedElement = js2xml.getElement(responseDoc, responseDoc, 'FEED', 'HTTP://WWW.W3.ORG/2005/ATOM');
        if (feedElement) {
          if (feedElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, feedElement, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM').length; loweredIndex1 = loweredIndex1 + 1) {
              var entriesElement = js2xml.getElements(responseDoc, feedElement, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM')[loweredIndex1];
              var entryInstance = { rights: [] };
              result.namespaceDescriptions.push(entryInstance);
              
              var contentElement = js2xml.getElement(responseDoc, entriesElement, 'CONTENT', 'HTTP://WWW.W3.ORG/2005/ATOM');
              if (contentElement) {
                var connectionDetailElement = js2xml.getElement(responseDoc, contentElement, 'CONNECTIONDETAIL', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                if (connectionDetailElement) {
                  var keyNameElement = js2xml.getElement(responseDoc, connectionDetailElement, 'KEYNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (keyNameElement) {
                    var keyNameInstance = keyNameElement;
                    entryInstance.keyName = keyNameInstance;
                  }
                  
                  var connectionStringElement = js2xml.getElement(responseDoc, connectionDetailElement, 'CONNECTIONSTRING', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (connectionStringElement) {
                    var connectionStringInstance = connectionStringElement;
                    entryInstance.connectionString = connectionStringInstance;
                  }
                  
                  var authorizationTypeElement = js2xml.getElement(responseDoc, connectionDetailElement, 'AUTHORIZATIONTYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (authorizationTypeElement) {
                    var authorizationTypeInstance = authorizationTypeElement;
                    entryInstance.authorizationType = authorizationTypeInstance;
                  }
                  
                  var rightsSequenceElement = js2xml.getElement(responseDoc, connectionDetailElement, 'RIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (rightsSequenceElement) {
                    for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, rightsSequenceElement, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex2 = loweredIndex2 + 1) {
                      var rightsElement = js2xml.getElements(responseDoc, rightsSequenceElement, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex2];
                      entryInstance.rights.push(rightsElement);
                    }
                  }
                  
                  var secondaryConnectionStringElement = js2xml.getElement(responseDoc, connectionDetailElement, 'SECONDARYCONNECTIONSTRING', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (secondaryConnectionStringElement) {
                    var secondaryConnectionStringInstance = secondaryConnectionStringElement;
                    entryInstance.secondaryConnectionString = secondaryConnectionStringInstance;
                  }
                }
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Lists the available namespaces.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn140232.asp for
   * more information)
   *
   * @param {Function} callback
   *
   * @returns {ServiceBusNamespacesResponse} - The response to the request for
   * a listing of namespaces
   */
  NamespaceOperations.prototype.list = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + this.client.credentials.subscriptionId + '/services/servicebus/namespaces/';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Accept'] = 'application/atom+xml';
    httpRequest.headers['Content-Type'] = 'application/atom+xml';
    httpRequest.headers['x-ms-version'] = '2013-08-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { namespaces: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var feedElement = js2xml.getElement(responseDoc, responseDoc, 'FEED', 'HTTP://WWW.W3.ORG/2005/ATOM');
        if (feedElement) {
          if (feedElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, feedElement, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM').length; loweredIndex1 = loweredIndex1 + 1) {
              var entriesElement = js2xml.getElements(responseDoc, feedElement, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM')[loweredIndex1];
              var entryInstance = {};
              result.namespaces.push(entryInstance);
              
              var contentElement = js2xml.getElement(responseDoc, entriesElement, 'CONTENT', 'HTTP://WWW.W3.ORG/2005/ATOM');
              if (contentElement) {
                var namespaceDescriptionElement = js2xml.getElement(responseDoc, contentElement, 'NAMESPACEDESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                if (namespaceDescriptionElement) {
                  var nameElement = js2xml.getElement(responseDoc, namespaceDescriptionElement, 'NAME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (nameElement) {
                    var nameInstance = nameElement;
                    entryInstance.name = nameInstance;
                  }
                  
                  var regionElement = js2xml.getElement(responseDoc, namespaceDescriptionElement, 'REGION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (regionElement) {
                    var regionInstance = regionElement;
                    entryInstance.region = regionInstance;
                  }
                  
                  var statusElement = js2xml.getElement(responseDoc, namespaceDescriptionElement, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (statusElement) {
                    var statusInstance = statusElement;
                    entryInstance.status = statusInstance;
                  }
                  
                  var createdAtElement = js2xml.getElement(responseDoc, namespaceDescriptionElement, 'CREATEDAT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (createdAtElement) {
                    var createdAtInstance = new Date(createdAtElement);
                    entryInstance.createdAt = createdAtInstance;
                  }
                  
                  var acsManagementEndpointElement = js2xml.getElement(responseDoc, namespaceDescriptionElement, 'ACSMANAGEMENTENDPOINT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (acsManagementEndpointElement) {
                    var acsManagementEndpointInstance = acsManagementEndpointElement;
                    entryInstance.acsManagementEndpoint = acsManagementEndpointInstance;
                  }
                  
                  var serviceBusEndpointElement = js2xml.getElement(responseDoc, namespaceDescriptionElement, 'SERVICEBUSENDPOINT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (serviceBusEndpointElement) {
                    var serviceBusEndpointInstance = serviceBusEndpointElement;
                    entryInstance.serviceBusEndpoint = serviceBusEndpointInstance;
                  }
                  
                  var subscriptionIdElement = js2xml.getElement(responseDoc, namespaceDescriptionElement, 'SUBSCRIPTIONID', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (subscriptionIdElement) {
                    var subscriptionIdInstance = subscriptionIdElement;
                    entryInstance.subscriptionId = subscriptionIdInstance;
                  }
                  
                  var enabledElement = js2xml.getElement(responseDoc, namespaceDescriptionElement, 'ENABLED', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (enabledElement) {
                    var enabledInstance = enabledElement;
                    entryInstance.enabled = enabledInstance;
                  }
                }
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The get authorization rules operation gets the authorization rules for a
   * namespace
   *
   * @param {String} namespaceName - The namespace to get the authorization
   * rule for.
   *
   * @param {Function} callback
   *
   * @returns {ServiceBusAuthorizationRulesResponse} - A response to a request
   * for a list of authorization rules.
   */
  NamespaceOperations.prototype.listAuthorizationRules = function(namespaceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (namespaceName === null || namespaceName === undefined) {
      return callback(new Error('namespaceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + this.client.credentials.subscriptionId + '/services/servicebus/namespaces/' + namespaceName + '/AuthorizationRules';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Accept'] = 'application/atom+xml';
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-08-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { authorizationRules: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var feedElement = js2xml.getElement(responseDoc, responseDoc, 'FEED', 'HTTP://WWW.W3.ORG/2005/ATOM');
        if (feedElement) {
          if (feedElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, feedElement, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM').length; loweredIndex1 = loweredIndex1 + 1) {
              var entriesElement = js2xml.getElements(responseDoc, feedElement, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM')[loweredIndex1];
              var entryInstance = { rights: [] };
              result.authorizationRules.push(entryInstance);
              
              var contentElement = js2xml.getElement(responseDoc, entriesElement, 'CONTENT', 'HTTP://WWW.W3.ORG/2005/ATOM');
              if (contentElement) {
                var sharedAccessAuthorizationRuleElement = js2xml.getElement(responseDoc, contentElement, 'SHAREDACCESSAUTHORIZATIONRULE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                if (sharedAccessAuthorizationRuleElement) {
                  var claimTypeElement = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement, 'CLAIMTYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (claimTypeElement) {
                    var claimTypeInstance = claimTypeElement;
                    entryInstance.claimType = claimTypeInstance;
                  }
                  
                  var claimValueElement = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement, 'CLAIMVALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (claimValueElement) {
                    var claimValueInstance = claimValueElement;
                    entryInstance.claimValue = claimValueInstance;
                  }
                  
                  var rightsSequenceElement = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement, 'RIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (rightsSequenceElement) {
                    for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, rightsSequenceElement, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex2 = loweredIndex2 + 1) {
                      var rightsElement = js2xml.getElements(responseDoc, rightsSequenceElement, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex2];
                      entryInstance.rights.push(rightsElement);
                    }
                  }
                  
                  var createdTimeElement = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement, 'CREATEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (createdTimeElement) {
                    var createdTimeInstance = new Date(createdTimeElement);
                    entryInstance.createdTime = createdTimeInstance;
                  }
                  
                  var modifiedTimeElement = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement, 'MODIFIEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (modifiedTimeElement) {
                    var modifiedTimeInstance = new Date(modifiedTimeElement);
                    entryInstance.modifiedTime = modifiedTimeInstance;
                  }
                  
                  var keyNameElement = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement, 'KEYNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (keyNameElement) {
                    var keyNameInstance = keyNameElement;
                    entryInstance.keyName = keyNameInstance;
                  }
                  
                  var primaryKeyElement = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement, 'PRIMARYKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (primaryKeyElement) {
                    var primaryKeyInstance = primaryKeyElement;
                    entryInstance.primaryKey = primaryKeyInstance;
                  }
                  
                  var secondaryKeyElement = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement, 'SECONDARYKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (secondaryKeyElement) {
                    var secondaryKeyInstance = secondaryKeyElement;
                    entryInstance.secondaryKey = secondaryKeyInstance;
                  }
                  
                  var revisionElement = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement, 'REVISION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (revisionElement) {
                    var revisionInstance = parseInt(revisionElement, 10);
                    entryInstance.revision = revisionInstance;
                  }
                }
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The update authorization rule operation updates an authorization rule for
   * a namespace.
   *
   * @param {String} namespaceName
   *
   * @param {ServiceBusSharedAccessAuthorizationRule} rule
   *
   * @param {Function} callback
   *
   * @returns {ServiceBusAuthorizationRuleResponse} - A response to a request
   * for a particular authorization rule.
   */
  NamespaceOperations.prototype.updateAuthorizationRule = function(namespaceName, rule, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (rule) {
      if (rule.createdTime === null || rule.createdTime === undefined) {
        return callback(new Error('rule.createdTime cannot be null.'));
      }
      if (rule.modifiedTime === null || rule.modifiedTime === undefined) {
        return callback(new Error('rule.modifiedTime cannot be null.'));
      }
      if (rule.revision === null || rule.revision === undefined) {
        return callback(new Error('rule.revision cannot be null.'));
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + this.client.credentials.subscriptionId + '/services/servicebus/namespaces/' + namespaceName + '/AuthorizationRules/' + rule.keyName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Accept'] = 'application/atom+xml';
    httpRequest.headers['Content-Type'] = 'application/atom+xml';
    httpRequest.headers['if-match'] = '*';
    httpRequest.headers['type'] = 'entry';
    httpRequest.headers['x-ms-version'] = '2012-03-01';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    if (rule) {
      var entryElement = js2xml.createElement('entry', 'http://www.w3.org/2005/Atom');
      js2xml.addChildElement(requestDoc, entryElement);
      
      var contentElement = js2xml.createElement('content', 'http://www.w3.org/2005/Atom');
      js2xml.addChildElement(entryElement, contentElement);
      
      var typeAttribute = js2xml.createAttribute('type', '');
      js2xml.setAttributeValue(typeAttribute, 'application/atom+xml');
      js2xml.addAttribute(contentElement, typeAttribute);
      
      var sharedAccessAuthorizationRuleElement = js2xml.createElement('SharedAccessAuthorizationRule', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.addChildElement(contentElement, sharedAccessAuthorizationRuleElement);
      
      if (rule.claimType) {
        var claimTypeElement = js2xml.createElement('ClaimType', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        js2xml.setElementValue(claimTypeElement, rule.claimType);
        js2xml.addChildElement(sharedAccessAuthorizationRuleElement, claimTypeElement);
      }
      
      if (rule.claimValue) {
        var claimValueElement = js2xml.createElement('ClaimValue', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        js2xml.setElementValue(claimValueElement, rule.claimValue);
        js2xml.addChildElement(sharedAccessAuthorizationRuleElement, claimValueElement);
      }
      
      if (rule.rights) {
        var rightsSequenceElement = js2xml.createElement('Rights', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        for (var loweredIndex1 = 0; loweredIndex1 < rule.rights.length; loweredIndex1 = loweredIndex1 + 1) {
          var rightsItem = rule.rights[loweredIndex1];
          var rightsItemElement = js2xml.createElement('AccessRights', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
          js2xml.setElementValue(rightsItemElement, rightsItem ? rightsItem.toString() : 'Listen');
          js2xml.addChildElement(rightsSequenceElement, rightsItemElement);
        }
        js2xml.addChildElement(sharedAccessAuthorizationRuleElement, rightsSequenceElement);
      }
      
      var createdTimeElement = js2xml.createElement('CreatedTime', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      var dateText = JSON.stringify(rule.createdTime);
      js2xml.setElementValue(createdTimeElement, dateText.substr(1, dateText.length - 2));
      js2xml.addChildElement(sharedAccessAuthorizationRuleElement, createdTimeElement);
      
      var modifiedTimeElement = js2xml.createElement('ModifiedTime', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      var dateText2 = JSON.stringify(rule.modifiedTime);
      js2xml.setElementValue(modifiedTimeElement, dateText2.substr(1, dateText2.length - 2));
      js2xml.addChildElement(sharedAccessAuthorizationRuleElement, modifiedTimeElement);
      
      var revisionElement = js2xml.createElement('Revision', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(revisionElement, rule.revision.toString());
      js2xml.addChildElement(sharedAccessAuthorizationRuleElement, revisionElement);
      
      if (rule.keyName) {
        var keyNameElement = js2xml.createElement('KeyName', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        js2xml.setElementValue(keyNameElement, rule.keyName);
        js2xml.addChildElement(sharedAccessAuthorizationRuleElement, keyNameElement);
      }
      
      if (rule.primaryKey) {
        var primaryKeyElement = js2xml.createElement('PrimaryKey', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        js2xml.setElementValue(primaryKeyElement, rule.primaryKey);
        js2xml.addChildElement(sharedAccessAuthorizationRuleElement, primaryKeyElement);
      }
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 201) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var entryElement2 = js2xml.getElement(responseDoc, responseDoc, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM');
        if (entryElement2) {
          var contentElement2 = js2xml.getElement(responseDoc, entryElement2, 'CONTENT', 'HTTP://WWW.W3.ORG/2005/ATOM');
          if (contentElement2) {
            var sharedAccessAuthorizationRuleElement2 = js2xml.getElement(responseDoc, contentElement2, 'SHAREDACCESSAUTHORIZATIONRULE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
            if (sharedAccessAuthorizationRuleElement2) {
              var sharedAccessAuthorizationRuleInstance = { rights: [] };
              result.authorizationRule = sharedAccessAuthorizationRuleInstance;
              
              var claimTypeElement2 = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement2, 'CLAIMTYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (claimTypeElement2) {
                var claimTypeInstance = claimTypeElement2;
                sharedAccessAuthorizationRuleInstance.claimType = claimTypeInstance;
              }
              
              var claimValueElement2 = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement2, 'CLAIMVALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (claimValueElement2) {
                var claimValueInstance = claimValueElement2;
                sharedAccessAuthorizationRuleInstance.claimValue = claimValueInstance;
              }
              
              var rightsSequenceElement2 = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement2, 'RIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (rightsSequenceElement2) {
                for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, rightsSequenceElement2, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex2 = loweredIndex2 + 1) {
                  var rightsElement = js2xml.getElements(responseDoc, rightsSequenceElement2, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex2];
                  sharedAccessAuthorizationRuleInstance.rights.push(rightsElement);
                }
              }
              
              var createdTimeElement2 = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement2, 'CREATEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (createdTimeElement2) {
                var createdTimeInstance = new Date(createdTimeElement2);
                sharedAccessAuthorizationRuleInstance.createdTime = createdTimeInstance;
              }
              
              var modifiedTimeElement2 = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement2, 'MODIFIEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (modifiedTimeElement2) {
                var modifiedTimeInstance = new Date(modifiedTimeElement2);
                sharedAccessAuthorizationRuleInstance.modifiedTime = modifiedTimeInstance;
              }
              
              var keyNameElement2 = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement2, 'KEYNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (keyNameElement2) {
                var keyNameInstance = keyNameElement2;
                sharedAccessAuthorizationRuleInstance.keyName = keyNameInstance;
              }
              
              var primaryKeyElement2 = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement2, 'PRIMARYKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (primaryKeyElement2) {
                var primaryKeyInstance = primaryKeyElement2;
                sharedAccessAuthorizationRuleInstance.primaryKey = primaryKeyInstance;
              }
              
              var secondaryKeyElement = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement2, 'SECONDARYKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (secondaryKeyElement) {
                var secondaryKeyInstance = secondaryKeyElement;
                sharedAccessAuthorizationRuleInstance.secondaryKey = secondaryKeyInstance;
              }
              
              var revisionElement2 = js2xml.getElement(responseDoc, sharedAccessAuthorizationRuleElement2, 'REVISION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (revisionElement2) {
                var revisionInstance = parseInt(revisionElement2, 10);
                sharedAccessAuthorizationRuleInstance.revision = revisionInstance;
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  return NamespaceOperations;
})();

/**
 * The Service Bus Management API includes operations for managing Service Bus
 * queues.
 */
var NotificationHubOperations = (function() {
  /**
   * Initializes a new instance of the NotificationHubOperations class.
   *
   * @constructor
   *
   * @param {ServiceBusManagementClient} client - Reference to the service
   * client.
   */
  function NotificationHubOperations(client) {
    this.client = client;
  }
  
  /**
   * Lists the notification hubs associated with a namespace.
   *
   * @param {String} namespaceName
   *
   * @param {String} notificationHubName
   *
   * @param {Function} callback
   *
   * @returns {ServiceBusNotificationHubResponse} - A standard storage response
   * including an HTTP status code and request ID.
   */
  NotificationHubOperations.prototype.get = function(namespaceName, notificationHubName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + this.client.credentials.subscriptionId + '/services/servicebus/namespaces/' + namespaceName + '/NotificationHubs/' + notificationHubName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-08-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var entryElement = js2xml.getElement(responseDoc, responseDoc, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM');
        if (entryElement) {
          var titleElement = js2xml.getElement(responseDoc, entryElement, 'TITLE', 'HTTP://WWW.W3.ORG/2005/ATOM');
          if (titleElement) {
          }
          
          var contentElement = js2xml.getElement(responseDoc, entryElement, 'CONTENT', 'HTTP://WWW.W3.ORG/2005/ATOM');
          if (contentElement) {
            var notificationHubDescriptionElement = js2xml.getElement(responseDoc, contentElement, 'NOTIFICATIONHUBDESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
            if (notificationHubDescriptionElement) {
              var notificationHubDescriptionInstance = { authorizationRules: [] };
              result.notificationHub = notificationHubDescriptionInstance;
              
              var registrationTtlElement = js2xml.getElement(responseDoc, notificationHubDescriptionElement, 'REGISTRATIONTTL', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (registrationTtlElement) {
                var registrationTtlInstance = registrationTtlElement;
                notificationHubDescriptionInstance.registrationTtl = registrationTtlInstance;
              }
              
              var authorizationRulesSequenceElement = js2xml.getElement(responseDoc, notificationHubDescriptionElement, 'AUTHORIZATIONRULES', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (authorizationRulesSequenceElement) {
                for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, authorizationRulesSequenceElement, 'AUTHORIZATIONRULE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex1 = loweredIndex1 + 1) {
                  var authorizationRulesElement = js2xml.getElements(responseDoc, authorizationRulesSequenceElement, 'AUTHORIZATIONRULE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex1];
                  var authorizationRuleInstance = { rights: [] };
                  notificationHubDescriptionInstance.authorizationRules.push(authorizationRuleInstance);
                  
                  var claimTypeElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'CLAIMTYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (claimTypeElement) {
                    var claimTypeInstance = claimTypeElement;
                    authorizationRuleInstance.claimType = claimTypeInstance;
                  }
                  
                  var claimValueElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'CLAIMVALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (claimValueElement) {
                    var claimValueInstance = claimValueElement;
                    authorizationRuleInstance.claimValue = claimValueInstance;
                  }
                  
                  var rightsSequenceElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'RIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (rightsSequenceElement) {
                    for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, rightsSequenceElement, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex2 = loweredIndex2 + 1) {
                      var rightsElement = js2xml.getElements(responseDoc, rightsSequenceElement, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex2];
                      authorizationRuleInstance.rights.push(rightsElement);
                    }
                  }
                  
                  var createdTimeElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'CREATEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (createdTimeElement) {
                    var createdTimeInstance = new Date(createdTimeElement);
                    authorizationRuleInstance.createdTime = createdTimeInstance;
                  }
                  
                  var keyNameElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'KEYNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (keyNameElement) {
                    var keyNameInstance = keyNameElement;
                    authorizationRuleInstance.keyName = keyNameInstance;
                  }
                  
                  var modifiedTimeElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'MODIFIEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (modifiedTimeElement) {
                    var modifiedTimeInstance = new Date(modifiedTimeElement);
                    authorizationRuleInstance.modifiedTime = modifiedTimeInstance;
                  }
                  
                  var primaryKeyElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'PRIMARYKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (primaryKeyElement) {
                    var primaryKeyInstance = primaryKeyElement;
                    authorizationRuleInstance.primaryKey = primaryKeyInstance;
                  }
                  
                  var secondaryKeyElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'SECONDARYKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (secondaryKeyElement) {
                    var secondaryKeyInstance = secondaryKeyElement;
                    authorizationRuleInstance.secondaryKey = secondaryKeyInstance;
                  }
                }
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Lists the notification hubs associated with a namespace.
   *
   * @param {String} namespaceName
   *
   * @param {String} notificationHubName
   *
   * @param {Function} callback
   *
   * @returns {ServiceBusConnectionDetailsResponse} - The set of connection
   * details for a service bus entity.
   */
  NotificationHubOperations.prototype.getConnectionDetails = function(namespaceName, notificationHubName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + this.client.credentials.subscriptionId + '/services/servicebus/namespaces/' + namespaceName + '/NotificationHubs/' + notificationHubName + '/ConnectionDetails';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-08-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { connectionDetails: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var feedElement = js2xml.getElement(responseDoc, responseDoc, 'FEED', 'HTTP://WWW.W3.ORG/2005/ATOM');
        if (feedElement) {
          if (feedElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, feedElement, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM').length; loweredIndex1 = loweredIndex1 + 1) {
              var entriesElement = js2xml.getElements(responseDoc, feedElement, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM')[loweredIndex1];
              var entryInstance = { rights: [] };
              result.connectionDetails.push(entryInstance);
              
              var contentElement = js2xml.getElement(responseDoc, entriesElement, 'CONTENT', 'HTTP://WWW.W3.ORG/2005/ATOM');
              if (contentElement) {
                var connectionDetailElement = js2xml.getElement(responseDoc, contentElement, 'CONNECTIONDETAIL', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                if (connectionDetailElement) {
                  var keyNameElement = js2xml.getElement(responseDoc, connectionDetailElement, 'KEYNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (keyNameElement) {
                    var keyNameInstance = keyNameElement;
                    entryInstance.keyName = keyNameInstance;
                  }
                  
                  var connectionStringElement = js2xml.getElement(responseDoc, connectionDetailElement, 'CONNECTIONSTRING', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (connectionStringElement) {
                    var connectionStringInstance = connectionStringElement;
                    entryInstance.connectionString = connectionStringInstance;
                  }
                  
                  var authorizationTypeElement = js2xml.getElement(responseDoc, connectionDetailElement, 'AUTHORIZATIONTYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (authorizationTypeElement) {
                    var authorizationTypeInstance = authorizationTypeElement;
                    entryInstance.authorizationType = authorizationTypeInstance;
                  }
                  
                  var rightsSequenceElement = js2xml.getElement(responseDoc, connectionDetailElement, 'RIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (rightsSequenceElement) {
                    for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, rightsSequenceElement, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex2 = loweredIndex2 + 1) {
                      var rightsElement = js2xml.getElements(responseDoc, rightsSequenceElement, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex2];
                      entryInstance.rights.push(rightsElement);
                    }
                  }
                }
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Lists the notification hubs associated with a namespace.
   *
   * @param {String} namespaceName
   *
   * @param {Function} callback
   *
   * @returns {ServiceBusNotificationHubsResponse} - A standard storage
   * response including an HTTP status code and request ID.
   */
  NotificationHubOperations.prototype.list = function(namespaceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + this.client.credentials.subscriptionId + '/services/servicebus/namespaces/' + namespaceName + '/NotificationHubs';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-08-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { notificationHubs: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var feedElement = js2xml.getElement(responseDoc, responseDoc, 'FEED', 'HTTP://WWW.W3.ORG/2005/ATOM');
        if (feedElement) {
          if (feedElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, feedElement, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM').length; loweredIndex1 = loweredIndex1 + 1) {
              var entriesElement = js2xml.getElements(responseDoc, feedElement, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM')[loweredIndex1];
              var entryInstance = { authorizationRules: [] };
              result.notificationHubs.push(entryInstance);
              
              var titleElement = js2xml.getElement(responseDoc, entriesElement, 'TITLE', 'HTTP://WWW.W3.ORG/2005/ATOM');
              if (titleElement) {
                var titleInstance = titleElement;
                entryInstance.name = titleInstance;
              }
              
              var contentElement = js2xml.getElement(responseDoc, entriesElement, 'CONTENT', 'HTTP://WWW.W3.ORG/2005/ATOM');
              if (contentElement) {
                var notificationHubDescriptionElement = js2xml.getElement(responseDoc, contentElement, 'NOTIFICATIONHUBDESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                if (notificationHubDescriptionElement) {
                  var registrationTtlElement = js2xml.getElement(responseDoc, notificationHubDescriptionElement, 'REGISTRATIONTTL', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (registrationTtlElement) {
                    var registrationTtlInstance = registrationTtlElement;
                    entryInstance.registrationTtl = registrationTtlInstance;
                  }
                  
                  var authorizationRulesSequenceElement = js2xml.getElement(responseDoc, notificationHubDescriptionElement, 'AUTHORIZATIONRULES', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (authorizationRulesSequenceElement) {
                    for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, authorizationRulesSequenceElement, 'AUTHORIZATIONRULE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex2 = loweredIndex2 + 1) {
                      var authorizationRulesElement = js2xml.getElements(responseDoc, authorizationRulesSequenceElement, 'AUTHORIZATIONRULE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex2];
                      var authorizationRuleInstance = { rights: [] };
                      entryInstance.authorizationRules.push(authorizationRuleInstance);
                      
                      var claimTypeElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'CLAIMTYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                      if (claimTypeElement) {
                        var claimTypeInstance = claimTypeElement;
                        authorizationRuleInstance.claimType = claimTypeInstance;
                      }
                      
                      var claimValueElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'CLAIMVALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                      if (claimValueElement) {
                        var claimValueInstance = claimValueElement;
                        authorizationRuleInstance.claimValue = claimValueInstance;
                      }
                      
                      var rightsSequenceElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'RIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                      if (rightsSequenceElement) {
                        for (var loweredIndex3 = 0; loweredIndex3 < js2xml.getElements(responseDoc, rightsSequenceElement, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex3 = loweredIndex3 + 1) {
                          var rightsElement = js2xml.getElements(responseDoc, rightsSequenceElement, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex3];
                          authorizationRuleInstance.rights.push(rightsElement);
                        }
                      }
                      
                      var createdTimeElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'CREATEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                      if (createdTimeElement) {
                        var createdTimeInstance = new Date(createdTimeElement);
                        authorizationRuleInstance.createdTime = createdTimeInstance;
                      }
                      
                      var keyNameElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'KEYNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                      if (keyNameElement) {
                        var keyNameInstance = keyNameElement;
                        authorizationRuleInstance.keyName = keyNameInstance;
                      }
                      
                      var modifiedTimeElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'MODIFIEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                      if (modifiedTimeElement) {
                        var modifiedTimeInstance = new Date(modifiedTimeElement);
                        authorizationRuleInstance.modifiedTime = modifiedTimeInstance;
                      }
                      
                      var primaryKeyElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'PRIMARYKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                      if (primaryKeyElement) {
                        var primaryKeyInstance = primaryKeyElement;
                        authorizationRuleInstance.primaryKey = primaryKeyInstance;
                      }
                      
                      var secondaryKeyElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'SECONDARYKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                      if (secondaryKeyElement) {
                        var secondaryKeyInstance = secondaryKeyElement;
                        authorizationRuleInstance.secondaryKey = secondaryKeyInstance;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  return NotificationHubOperations;
})();

/**
 * The Service Bus Management API includes operations for managing Service Bus
 * queues.
 */
var QueueOperations = (function() {
  /**
   * Initializes a new instance of the QueueOperations class.
   *
   * @constructor
   *
   * @param {ServiceBusManagementClient} client - Reference to the service
   * client.
   */
  function QueueOperations(client) {
    this.client = client;
  }
  
  /**
   * Creates a new queue. Once created, this queue’s resource manifest is
   * immutable. This operation is idempotent. Repeating the create call, after
   * a queue with same name has been created successfully, will result in a
   * 409 Conflict error message.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj856295.aspx for
   * more information)
   *
   * @param {String} namespaceName
   *
   * @param {ServiceBusQueue} queue
   *
   * @param {Function} callback
   *
   * @returns {ServiceBusQueueResponse} - A response to a request for a
   * particular queue.
   */
  QueueOperations.prototype.create = function(namespaceName, queue, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (namespaceName === null || namespaceName === undefined) {
      return callback(new Error('namespaceName cannot be null.'));
    }
    if (queue === null || queue === undefined) {
      return callback(new Error('queue cannot be null.'));
    }
    if (queue.accessedAt === null || queue.accessedAt === undefined) {
      return callback(new Error('queue.accessedAt cannot be null.'));
    }
    for (var loweredIndex1 = 0; loweredIndex1 < queue.authorizationRules.length; loweredIndex1 = loweredIndex1 + 1) {
      var authorizationRulesParameterItem = queue.authorizationRules[loweredIndex1];
      if (authorizationRulesParameterItem.createdTime === null || authorizationRulesParameterItem.createdTime === undefined) {
        return callback(new Error('queue.authorizationRules.createdTime cannot be null.'));
      }
      if (authorizationRulesParameterItem.modifiedTime === null || authorizationRulesParameterItem.modifiedTime === undefined) {
        return callback(new Error('queue.authorizationRules.modifiedTime cannot be null.'));
      }
      if (authorizationRulesParameterItem.revision === null || authorizationRulesParameterItem.revision === undefined) {
        return callback(new Error('queue.authorizationRules.revision cannot be null.'));
      }
    }
    if (queue.countDetails) {
      if (queue.countDetails.activeMessageCount === null || queue.countDetails.activeMessageCount === undefined) {
        return callback(new Error('queue.countDetails.activeMessageCount cannot be null.'));
      }
      if (queue.countDetails.deadLetterMessageCount === null || queue.countDetails.deadLetterMessageCount === undefined) {
        return callback(new Error('queue.countDetails.deadLetterMessageCount cannot be null.'));
      }
      if (queue.countDetails.scheduledMessageCount === null || queue.countDetails.scheduledMessageCount === undefined) {
        return callback(new Error('queue.countDetails.scheduledMessageCount cannot be null.'));
      }
      if (queue.countDetails.transferDeadLetterMessageCount === null || queue.countDetails.transferDeadLetterMessageCount === undefined) {
        return callback(new Error('queue.countDetails.transferDeadLetterMessageCount cannot be null.'));
      }
      if (queue.countDetails.transferMessageCount === null || queue.countDetails.transferMessageCount === undefined) {
        return callback(new Error('queue.countDetails.transferMessageCount cannot be null.'));
      }
    }
    if (queue.createdAt === null || queue.createdAt === undefined) {
      return callback(new Error('queue.createdAt cannot be null.'));
    }
    if (queue.deadLetteringOnMessageExpiration === null || queue.deadLetteringOnMessageExpiration === undefined) {
      return callback(new Error('queue.deadLetteringOnMessageExpiration cannot be null.'));
    }
    if (queue.enableBatchedOperations === null || queue.enableBatchedOperations === undefined) {
      return callback(new Error('queue.enableBatchedOperations cannot be null.'));
    }
    if (queue.isAnonymousAccessible === null || queue.isAnonymousAccessible === undefined) {
      return callback(new Error('queue.isAnonymousAccessible cannot be null.'));
    }
    if (queue.maxDeliveryCount === null || queue.maxDeliveryCount === undefined) {
      return callback(new Error('queue.maxDeliveryCount cannot be null.'));
    }
    if (queue.maxSizeInMegabytes === null || queue.maxSizeInMegabytes === undefined) {
      return callback(new Error('queue.maxSizeInMegabytes cannot be null.'));
    }
    if (queue.messageCount === null || queue.messageCount === undefined) {
      return callback(new Error('queue.messageCount cannot be null.'));
    }
    if (queue.requiresDuplicateDetection === null || queue.requiresDuplicateDetection === undefined) {
      return callback(new Error('queue.requiresDuplicateDetection cannot be null.'));
    }
    if (queue.requiresSession === null || queue.requiresSession === undefined) {
      return callback(new Error('queue.requiresSession cannot be null.'));
    }
    if (queue.sizeInBytes === null || queue.sizeInBytes === undefined) {
      return callback(new Error('queue.sizeInBytes cannot be null.'));
    }
    if (queue.supportOrdering === null || queue.supportOrdering === undefined) {
      return callback(new Error('queue.supportOrdering cannot be null.'));
    }
    if (queue.updatedAt === null || queue.updatedAt === undefined) {
      return callback(new Error('queue.updatedAt cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + this.client.credentials.subscriptionId + '/services/servicebus/namespaces/' + namespaceName + '/queues/' + queue.name + '/';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/atom+xml';
    httpRequest.headers['type'] = 'entry';
    httpRequest.headers['x-ms-version'] = '2013-08-01';
    httpRequest.headers['x-process-at'] = 'ServiceBus';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var entryElement = js2xml.createElement('entry', 'http://www.w3.org/2005/Atom');
    js2xml.addChildElement(requestDoc, entryElement);
    
    var contentElement = js2xml.createElement('content', 'http://www.w3.org/2005/Atom');
    js2xml.addChildElement(entryElement, contentElement);
    
    var typeAttribute = js2xml.createAttribute('type', '');
    js2xml.setAttributeValue(typeAttribute, 'application/atom+xml;type=entry;charset=utf-8');
    js2xml.addAttribute(contentElement, typeAttribute);
    
    var queueDescriptionElement = js2xml.createElement('QueueDescription', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
    js2xml.addChildElement(contentElement, queueDescriptionElement);
    
    if (queue.lockDuration) {
      var lockDurationElement = js2xml.createElement('LockDuration', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(lockDurationElement, queue.lockDuration);
      js2xml.addChildElement(queueDescriptionElement, lockDurationElement);
    }
    
    var maxSizeInMegabytesElement = js2xml.createElement('MaxSizeInMegabytes', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
    js2xml.setElementValue(maxSizeInMegabytesElement, queue.maxSizeInMegabytes.toString());
    js2xml.addChildElement(queueDescriptionElement, maxSizeInMegabytesElement);
    
    var requiresDuplicateDetectionElement = js2xml.createElement('RequiresDuplicateDetection', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
    js2xml.setElementValue(requiresDuplicateDetectionElement, queue.requiresDuplicateDetection.toString());
    js2xml.addChildElement(queueDescriptionElement, requiresDuplicateDetectionElement);
    
    var requiresSessionElement = js2xml.createElement('RequiresSession', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
    js2xml.setElementValue(requiresSessionElement, queue.requiresSession.toString());
    js2xml.addChildElement(queueDescriptionElement, requiresSessionElement);
    
    if (queue.defaultMessageTimeToLive) {
      var defaultMessageTimeToLiveElement = js2xml.createElement('DefaultMessageTimeToLive', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(defaultMessageTimeToLiveElement, queue.defaultMessageTimeToLive);
      js2xml.addChildElement(queueDescriptionElement, defaultMessageTimeToLiveElement);
    }
    
    var deadLetteringOnMessageExpirationElement = js2xml.createElement('DeadLetteringOnMessageExpiration', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
    js2xml.setElementValue(deadLetteringOnMessageExpirationElement, queue.deadLetteringOnMessageExpiration.toString());
    js2xml.addChildElement(queueDescriptionElement, deadLetteringOnMessageExpirationElement);
    
    if (queue.duplicateDetectionHistoryTimeWindow) {
      var duplicateDetectionHistoryTimeWindowElement = js2xml.createElement('DuplicateDetectionHistoryTimeWindow', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(duplicateDetectionHistoryTimeWindowElement, queue.duplicateDetectionHistoryTimeWindow);
      js2xml.addChildElement(queueDescriptionElement, duplicateDetectionHistoryTimeWindowElement);
    }
    
    var maxDeliveryCountElement = js2xml.createElement('MaxDeliveryCount', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
    js2xml.setElementValue(maxDeliveryCountElement, queue.maxDeliveryCount.toString());
    js2xml.addChildElement(queueDescriptionElement, maxDeliveryCountElement);
    
    var enableBatchedOperationsElement = js2xml.createElement('EnableBatchedOperations', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
    js2xml.setElementValue(enableBatchedOperationsElement, queue.enableBatchedOperations.toString());
    js2xml.addChildElement(queueDescriptionElement, enableBatchedOperationsElement);
    
    var sizeInBytesElement = js2xml.createElement('SizeInBytes', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
    js2xml.setElementValue(sizeInBytesElement, queue.sizeInBytes.toString());
    js2xml.addChildElement(queueDescriptionElement, sizeInBytesElement);
    
    var messageCountElement = js2xml.createElement('MessageCount', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
    js2xml.setElementValue(messageCountElement, queue.messageCount.toString());
    js2xml.addChildElement(queueDescriptionElement, messageCountElement);
    
    var isAnonymousAccessibleElement = js2xml.createElement('IsAnonymousAccessible', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
    js2xml.setElementValue(isAnonymousAccessibleElement, queue.isAnonymousAccessible.toString());
    js2xml.addChildElement(queueDescriptionElement, isAnonymousAccessibleElement);
    
    if (queue.authorizationRules) {
      var authorizationRulesSequenceElement = js2xml.createElement('AuthorizationRules', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      for (var loweredIndex2 = 0; loweredIndex2 < queue.authorizationRules.length; loweredIndex2 = loweredIndex2 + 1) {
        var authorizationRulesItem = queue.authorizationRules[loweredIndex2];
        var authorizationRuleElement = js2xml.createElement('AuthorizationRule', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        js2xml.addChildElement(authorizationRulesSequenceElement, authorizationRuleElement);
        
        var typeAttribute2 = js2xml.createAttribute('type', 'http://www.w3.org/2001/XMLSchema-instance');
        js2xml.setAttributeValue(typeAttribute2, 'SharedAccessAuthorizationRule');
        js2xml.addAttribute(authorizationRuleElement, typeAttribute2);
        
        if (authorizationRulesItem.claimType) {
          var claimTypeElement = js2xml.createElement('ClaimType', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
          js2xml.setElementValue(claimTypeElement, authorizationRulesItem.claimType);
          js2xml.addChildElement(authorizationRuleElement, claimTypeElement);
        }
        
        if (authorizationRulesItem.claimValue) {
          var claimValueElement = js2xml.createElement('ClaimValue', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
          js2xml.setElementValue(claimValueElement, authorizationRulesItem.claimValue);
          js2xml.addChildElement(authorizationRuleElement, claimValueElement);
        }
        
        if (authorizationRulesItem.rights) {
          var rightsSequenceElement = js2xml.createElement('Rights', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
          for (var loweredIndex3 = 0; loweredIndex3 < authorizationRulesItem.rights.length; loweredIndex3 = loweredIndex3 + 1) {
            var rightsItem = authorizationRulesItem.rights[loweredIndex3];
            var rightsItemElement = js2xml.createElement('AccessRights', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
            js2xml.setElementValue(rightsItemElement, rightsItem ? rightsItem.toString() : 'Listen');
            js2xml.addChildElement(rightsSequenceElement, rightsItemElement);
          }
          js2xml.addChildElement(authorizationRuleElement, rightsSequenceElement);
        }
        
        var createdTimeElement = js2xml.createElement('CreatedTime', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        js2xml.setElementValue(createdTimeElement, authorizationRulesItem.createdTime.toString());
        js2xml.addChildElement(authorizationRuleElement, createdTimeElement);
        
        if (authorizationRulesItem.keyName) {
          var keyNameElement = js2xml.createElement('KeyName', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
          js2xml.setElementValue(keyNameElement, authorizationRulesItem.keyName);
          js2xml.addChildElement(authorizationRuleElement, keyNameElement);
        }
        
        var modifiedTimeElement = js2xml.createElement('ModifiedTime', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        js2xml.setElementValue(modifiedTimeElement, authorizationRulesItem.modifiedTime.toString());
        js2xml.addChildElement(authorizationRuleElement, modifiedTimeElement);
        
        if (authorizationRulesItem.primaryKey) {
          var primaryKeyElement = js2xml.createElement('PrimaryKey', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
          js2xml.setElementValue(primaryKeyElement, authorizationRulesItem.primaryKey);
          js2xml.addChildElement(authorizationRuleElement, primaryKeyElement);
        }
        
        if (authorizationRulesItem.secondaryKey) {
          var secondaryKeyElement = js2xml.createElement('SecondaryKey', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
          js2xml.setElementValue(secondaryKeyElement, authorizationRulesItem.secondaryKey);
          js2xml.addChildElement(authorizationRuleElement, secondaryKeyElement);
        }
      }
      js2xml.addChildElement(queueDescriptionElement, authorizationRulesSequenceElement);
    }
    
    if (queue.status) {
      var statusElement = js2xml.createElement('Status', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(statusElement, queue.status);
      js2xml.addChildElement(queueDescriptionElement, statusElement);
    }
    
    var createdAtElement = js2xml.createElement('CreatedAt', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
    js2xml.setElementValue(createdAtElement, queue.createdAt.toString());
    js2xml.addChildElement(queueDescriptionElement, createdAtElement);
    
    var updatedAtElement = js2xml.createElement('UpdatedAt', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
    js2xml.setElementValue(updatedAtElement, queue.updatedAt.toString());
    js2xml.addChildElement(queueDescriptionElement, updatedAtElement);
    
    var accessedAtElement = js2xml.createElement('AccessedAt', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
    js2xml.setElementValue(accessedAtElement, queue.accessedAt.toString());
    js2xml.addChildElement(queueDescriptionElement, accessedAtElement);
    
    var supportOrderingElement = js2xml.createElement('SupportOrdering', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
    js2xml.setElementValue(supportOrderingElement, queue.supportOrdering.toString());
    js2xml.addChildElement(queueDescriptionElement, supportOrderingElement);
    
    if (queue.countDetails) {
      var countDetailsElement = js2xml.createElement('CountDetails', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.addChildElement(queueDescriptionElement, countDetailsElement);
      
      var activeMessageCountElement = js2xml.createElement('ActiveMessageCount', 'http://schemas.microsoft.com/netservices/2011/06/servicebus');
      js2xml.setElementValue(activeMessageCountElement, queue.countDetails.activeMessageCount.toString());
      js2xml.addChildElement(countDetailsElement, activeMessageCountElement);
      
      var deadLetterMessageCountElement = js2xml.createElement('DeadLetterMessageCount', 'http://schemas.microsoft.com/netservices/2011/06/servicebus');
      js2xml.setElementValue(deadLetterMessageCountElement, queue.countDetails.deadLetterMessageCount.toString());
      js2xml.addChildElement(countDetailsElement, deadLetterMessageCountElement);
      
      var scheduledMessageCountElement = js2xml.createElement('ScheduledMessageCount', 'http://schemas.microsoft.com/netservices/2011/06/servicebus');
      js2xml.setElementValue(scheduledMessageCountElement, queue.countDetails.scheduledMessageCount.toString());
      js2xml.addChildElement(countDetailsElement, scheduledMessageCountElement);
      
      var transferDeadLetterMessageCountElement = js2xml.createElement('TransferDeadLetterMessageCount', 'http://schemas.microsoft.com/netservices/2011/06/servicebus');
      js2xml.setElementValue(transferDeadLetterMessageCountElement, queue.countDetails.transferDeadLetterMessageCount.toString());
      js2xml.addChildElement(countDetailsElement, transferDeadLetterMessageCountElement);
      
      var transferMessageCountElement = js2xml.createElement('TransferMessageCount', 'http://schemas.microsoft.com/netservices/2011/06/servicebus');
      js2xml.setElementValue(transferMessageCountElement, queue.countDetails.transferMessageCount.toString());
      js2xml.addChildElement(countDetailsElement, transferMessageCountElement);
    }
    
    if (queue.autoDeleteOnIdle) {
      var autoDeleteOnIdleElement = js2xml.createElement('AutoDeleteOnIdle', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(autoDeleteOnIdleElement, queue.autoDeleteOnIdle);
      js2xml.addChildElement(queueDescriptionElement, autoDeleteOnIdleElement);
    }
    
    if (queue.entityAvailabilityStatus) {
      var entityAvailabilityStatusElement = js2xml.createElement('EntityAvailabilityStatus', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(entityAvailabilityStatusElement, queue.entityAvailabilityStatus);
      js2xml.addChildElement(queueDescriptionElement, entityAvailabilityStatusElement);
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 201) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var entryElement2 = js2xml.getElement(responseDoc, responseDoc, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM');
        if (entryElement2) {
          var titleElement = js2xml.getElement(responseDoc, entryElement2, 'TITLE', 'HTTP://WWW.W3.ORG/2005/ATOM');
          if (titleElement) {
          }
          
          var contentElement2 = js2xml.getElement(responseDoc, entryElement2, 'CONTENT', 'HTTP://WWW.W3.ORG/2005/ATOM');
          if (contentElement2) {
            var queueDescriptionElement2 = js2xml.getElement(responseDoc, contentElement2, 'QUEUEDESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
            if (queueDescriptionElement2) {
              var queueDescriptionInstance = { authorizationRules: [] };
              result.queue = queueDescriptionInstance;
              
              var lockDurationElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'LOCKDURATION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (lockDurationElement2) {
                var lockDurationInstance = lockDurationElement2;
                queueDescriptionInstance.lockDuration = lockDurationInstance;
              }
              
              var maxSizeInMegabytesElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'MAXSIZEINMEGABYTES', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (maxSizeInMegabytesElement2) {
                var maxSizeInMegabytesInstance = parseInt(maxSizeInMegabytesElement2, 10);
                queueDescriptionInstance.maxSizeInMegabytes = maxSizeInMegabytesInstance;
              }
              
              var requiresDuplicateDetectionElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'REQUIRESDUPLICATEDETECTION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (requiresDuplicateDetectionElement2) {
                var requiresDuplicateDetectionInstance = requiresDuplicateDetectionElement2;
                queueDescriptionInstance.requiresDuplicateDetection = requiresDuplicateDetectionInstance;
              }
              
              var requiresSessionElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'REQUIRESSESSION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (requiresSessionElement2) {
                var requiresSessionInstance = requiresSessionElement2;
                queueDescriptionInstance.requiresSession = requiresSessionInstance;
              }
              
              var defaultMessageTimeToLiveElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'DEFAULTMESSAGETIMETOLIVE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (defaultMessageTimeToLiveElement2) {
                var defaultMessageTimeToLiveInstance = defaultMessageTimeToLiveElement2;
                queueDescriptionInstance.defaultMessageTimeToLive = defaultMessageTimeToLiveInstance;
              }
              
              var deadLetteringOnMessageExpirationElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'DEADLETTERINGONMESSAGEEXPIRATION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (deadLetteringOnMessageExpirationElement2) {
                var deadLetteringOnMessageExpirationInstance = deadLetteringOnMessageExpirationElement2;
                queueDescriptionInstance.deadLetteringOnMessageExpiration = deadLetteringOnMessageExpirationInstance;
              }
              
              var duplicateDetectionHistoryTimeWindowElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'DUPLICATEDETECTIONHISTORYTIMEWINDOW', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (duplicateDetectionHistoryTimeWindowElement2) {
                var duplicateDetectionHistoryTimeWindowInstance = duplicateDetectionHistoryTimeWindowElement2;
                queueDescriptionInstance.duplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindowInstance;
              }
              
              var maxDeliveryCountElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'MAXDELIVERYCOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (maxDeliveryCountElement2) {
                var maxDeliveryCountInstance = parseInt(maxDeliveryCountElement2, 10);
                queueDescriptionInstance.maxDeliveryCount = maxDeliveryCountInstance;
              }
              
              var enableBatchedOperationsElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'ENABLEBATCHEDOPERATIONS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (enableBatchedOperationsElement2) {
                var enableBatchedOperationsInstance = enableBatchedOperationsElement2;
                queueDescriptionInstance.enableBatchedOperations = enableBatchedOperationsInstance;
              }
              
              var sizeInBytesElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'SIZEINBYTES', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (sizeInBytesElement2) {
                var sizeInBytesInstance = parseInt(sizeInBytesElement2, 10);
                queueDescriptionInstance.sizeInBytes = sizeInBytesInstance;
              }
              
              var messageCountElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'MESSAGECOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (messageCountElement2) {
                var messageCountInstance = parseInt(messageCountElement2, 10);
                queueDescriptionInstance.messageCount = messageCountInstance;
              }
              
              var isAnonymousAccessibleElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'ISANONYMOUSACCESSIBLE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (isAnonymousAccessibleElement2) {
                var isAnonymousAccessibleInstance = isAnonymousAccessibleElement2;
                queueDescriptionInstance.isAnonymousAccessible = isAnonymousAccessibleInstance;
              }
              
              var authorizationRulesSequenceElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'AUTHORIZATIONRULES', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (authorizationRulesSequenceElement2) {
                for (var loweredIndex4 = 0; loweredIndex4 < js2xml.getElements(responseDoc, authorizationRulesSequenceElement2, 'AUTHORIZATIONRULE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex4 = loweredIndex4 + 1) {
                  var authorizationRulesElement = js2xml.getElements(responseDoc, authorizationRulesSequenceElement2, 'AUTHORIZATIONRULE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex4];
                  var authorizationRuleInstance = { rights: [] };
                  queueDescriptionInstance.authorizationRules.push(authorizationRuleInstance);
                  
                  var claimTypeElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'CLAIMTYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (claimTypeElement2) {
                    var claimTypeInstance = claimTypeElement2;
                    authorizationRuleInstance.claimType = claimTypeInstance;
                  }
                  
                  var claimValueElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'CLAIMVALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (claimValueElement2) {
                    var claimValueInstance = claimValueElement2;
                    authorizationRuleInstance.claimValue = claimValueInstance;
                  }
                  
                  var rightsSequenceElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'RIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (rightsSequenceElement2) {
                    for (var loweredIndex5 = 0; loweredIndex5 < js2xml.getElements(responseDoc, rightsSequenceElement2, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex5 = loweredIndex5 + 1) {
                      var rightsElement = js2xml.getElements(responseDoc, rightsSequenceElement2, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex5];
                      authorizationRuleInstance.rights.push(rightsElement);
                    }
                  }
                  
                  var createdTimeElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'CREATEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (createdTimeElement2) {
                    var createdTimeInstance = new Date(createdTimeElement2);
                    authorizationRuleInstance.createdTime = createdTimeInstance;
                  }
                  
                  var keyNameElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'KEYNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (keyNameElement2) {
                    var keyNameInstance = keyNameElement2;
                    authorizationRuleInstance.keyName = keyNameInstance;
                  }
                  
                  var modifiedTimeElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'MODIFIEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (modifiedTimeElement2) {
                    var modifiedTimeInstance = new Date(modifiedTimeElement2);
                    authorizationRuleInstance.modifiedTime = modifiedTimeInstance;
                  }
                  
                  var primaryKeyElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'PRIMARYKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (primaryKeyElement2) {
                    var primaryKeyInstance = primaryKeyElement2;
                    authorizationRuleInstance.primaryKey = primaryKeyInstance;
                  }
                  
                  var secondaryKeyElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'SECONDARYKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (secondaryKeyElement2) {
                    var secondaryKeyInstance = secondaryKeyElement2;
                    authorizationRuleInstance.secondaryKey = secondaryKeyInstance;
                  }
                }
              }
              
              var statusElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (statusElement2) {
                var statusInstance = statusElement2;
                queueDescriptionInstance.status = statusInstance;
              }
              
              var createdAtElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'CREATEDAT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (createdAtElement2) {
                var createdAtInstance = new Date(createdAtElement2);
                queueDescriptionInstance.createdAt = createdAtInstance;
              }
              
              var updatedAtElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'UPDATEDAT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (updatedAtElement2) {
                var updatedAtInstance = new Date(updatedAtElement2);
                queueDescriptionInstance.updatedAt = updatedAtInstance;
              }
              
              var accessedAtElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'ACCESSEDAT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (accessedAtElement2) {
                var accessedAtInstance = new Date(accessedAtElement2);
                queueDescriptionInstance.accessedAt = accessedAtInstance;
              }
              
              var supportOrderingElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'SUPPORTORDERING', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (supportOrderingElement2) {
                var supportOrderingInstance = supportOrderingElement2;
                queueDescriptionInstance.supportOrdering = supportOrderingInstance;
              }
              
              var countDetailsElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'COUNTDETAILS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (countDetailsElement2) {
                var countDetailsInstance = {};
                queueDescriptionInstance.countDetails = countDetailsInstance;
                
                var activeMessageCountElement2 = js2xml.getElement(responseDoc, countDetailsElement2, 'ACTIVEMESSAGECOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2011/06/SERVICEBUS');
                if (activeMessageCountElement2) {
                  var activeMessageCountInstance = parseInt(activeMessageCountElement2, 10);
                  countDetailsInstance.activeMessageCount = activeMessageCountInstance;
                }
                
                var deadLetterMessageCountElement2 = js2xml.getElement(responseDoc, countDetailsElement2, 'DEADLETTERMESSAGECOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2011/06/SERVICEBUS');
                if (deadLetterMessageCountElement2) {
                  var deadLetterMessageCountInstance = parseInt(deadLetterMessageCountElement2, 10);
                  countDetailsInstance.deadLetterMessageCount = deadLetterMessageCountInstance;
                }
                
                var scheduledMessageCountElement2 = js2xml.getElement(responseDoc, countDetailsElement2, 'SCHEDULEDMESSAGECOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2011/06/SERVICEBUS');
                if (scheduledMessageCountElement2) {
                  var scheduledMessageCountInstance = parseInt(scheduledMessageCountElement2, 10);
                  countDetailsInstance.scheduledMessageCount = scheduledMessageCountInstance;
                }
                
                var transferDeadLetterMessageCountElement2 = js2xml.getElement(responseDoc, countDetailsElement2, 'TRANSFERDEADLETTERMESSAGECOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2011/06/SERVICEBUS');
                if (transferDeadLetterMessageCountElement2) {
                  var transferDeadLetterMessageCountInstance = parseInt(transferDeadLetterMessageCountElement2, 10);
                  countDetailsInstance.transferDeadLetterMessageCount = transferDeadLetterMessageCountInstance;
                }
                
                var transferMessageCountElement2 = js2xml.getElement(responseDoc, countDetailsElement2, 'TRANSFERMESSAGECOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2011/06/SERVICEBUS');
                if (transferMessageCountElement2) {
                  var transferMessageCountInstance = parseInt(transferMessageCountElement2, 10);
                  countDetailsInstance.transferMessageCount = transferMessageCountInstance;
                }
              }
              
              var autoDeleteOnIdleElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'AUTODELETEONIDLE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (autoDeleteOnIdleElement2) {
                var autoDeleteOnIdleInstance = autoDeleteOnIdleElement2;
                queueDescriptionInstance.autoDeleteOnIdle = autoDeleteOnIdleInstance;
              }
              
              var entityAvailabilityStatusElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'ENTITYAVAILABILITYSTATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (entityAvailabilityStatusElement2) {
                var entityAvailabilityStatusInstance = entityAvailabilityStatusElement2;
                queueDescriptionInstance.entityAvailabilityStatus = entityAvailabilityStatusInstance;
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The queue description is an XML AtomPub document that defines the desired
   * semantics for a subscription. The queue description contains the
   * following properties. For more information, see the QueueDescription
   * Properties topic.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/hh780773.aspx for
   * more information)
   *
   * @param {String} namespaceName
   *
   * @param {String} queueName
   *
   * @param {Function} callback
   *
   * @returns {ServiceBusQueueResponse} - A response to a request for a
   * particular queue.
   */
  QueueOperations.prototype.get = function(namespaceName, queueName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + this.client.credentials.subscriptionId + '/services/servicebus/namespaces/' + namespaceName + '/Queues/' + queueName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml; charset=utf-8';
    httpRequest.headers['x-ms-version'] = '2013-08-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var entryElement = js2xml.getElement(responseDoc, responseDoc, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM');
        if (entryElement) {
          var titleElement = js2xml.getElement(responseDoc, entryElement, 'TITLE', 'HTTP://WWW.W3.ORG/2005/ATOM');
          if (titleElement) {
          }
          
          var contentElement = js2xml.getElement(responseDoc, entryElement, 'CONTENT', 'HTTP://WWW.W3.ORG/2005/ATOM');
          if (contentElement) {
            var queueDescriptionElement = js2xml.getElement(responseDoc, contentElement, 'QUEUEDESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
            if (queueDescriptionElement) {
              var queueDescriptionInstance = { authorizationRules: [] };
              result.queue = queueDescriptionInstance;
              
              var lockDurationElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'LOCKDURATION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (lockDurationElement) {
                var lockDurationInstance = lockDurationElement;
                queueDescriptionInstance.lockDuration = lockDurationInstance;
              }
              
              var maxSizeInMegabytesElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'MAXSIZEINMEGABYTES', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (maxSizeInMegabytesElement) {
                var maxSizeInMegabytesInstance = parseInt(maxSizeInMegabytesElement, 10);
                queueDescriptionInstance.maxSizeInMegabytes = maxSizeInMegabytesInstance;
              }
              
              var requiresDuplicateDetectionElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'REQUIRESDUPLICATEDETECTION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (requiresDuplicateDetectionElement) {
                var requiresDuplicateDetectionInstance = requiresDuplicateDetectionElement;
                queueDescriptionInstance.requiresDuplicateDetection = requiresDuplicateDetectionInstance;
              }
              
              var requiresSessionElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'REQUIRESSESSION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (requiresSessionElement) {
                var requiresSessionInstance = requiresSessionElement;
                queueDescriptionInstance.requiresSession = requiresSessionInstance;
              }
              
              var defaultMessageTimeToLiveElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'DEFAULTMESSAGETIMETOLIVE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (defaultMessageTimeToLiveElement) {
                var defaultMessageTimeToLiveInstance = defaultMessageTimeToLiveElement;
                queueDescriptionInstance.defaultMessageTimeToLive = defaultMessageTimeToLiveInstance;
              }
              
              var deadLetteringOnMessageExpirationElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'DEADLETTERINGONMESSAGEEXPIRATION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (deadLetteringOnMessageExpirationElement) {
                var deadLetteringOnMessageExpirationInstance = deadLetteringOnMessageExpirationElement;
                queueDescriptionInstance.deadLetteringOnMessageExpiration = deadLetteringOnMessageExpirationInstance;
              }
              
              var duplicateDetectionHistoryTimeWindowElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'DUPLICATEDETECTIONHISTORYTIMEWINDOW', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (duplicateDetectionHistoryTimeWindowElement) {
                var duplicateDetectionHistoryTimeWindowInstance = duplicateDetectionHistoryTimeWindowElement;
                queueDescriptionInstance.duplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindowInstance;
              }
              
              var maxDeliveryCountElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'MAXDELIVERYCOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (maxDeliveryCountElement) {
                var maxDeliveryCountInstance = parseInt(maxDeliveryCountElement, 10);
                queueDescriptionInstance.maxDeliveryCount = maxDeliveryCountInstance;
              }
              
              var enableBatchedOperationsElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'ENABLEBATCHEDOPERATIONS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (enableBatchedOperationsElement) {
                var enableBatchedOperationsInstance = enableBatchedOperationsElement;
                queueDescriptionInstance.enableBatchedOperations = enableBatchedOperationsInstance;
              }
              
              var sizeInBytesElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'SIZEINBYTES', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (sizeInBytesElement) {
                var sizeInBytesInstance = parseInt(sizeInBytesElement, 10);
                queueDescriptionInstance.sizeInBytes = sizeInBytesInstance;
              }
              
              var messageCountElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'MESSAGECOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (messageCountElement) {
                var messageCountInstance = parseInt(messageCountElement, 10);
                queueDescriptionInstance.messageCount = messageCountInstance;
              }
              
              var isAnonymousAccessibleElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'ISANONYMOUSACCESSIBLE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (isAnonymousAccessibleElement) {
                var isAnonymousAccessibleInstance = isAnonymousAccessibleElement;
                queueDescriptionInstance.isAnonymousAccessible = isAnonymousAccessibleInstance;
              }
              
              var authorizationRulesSequenceElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'AUTHORIZATIONRULES', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (authorizationRulesSequenceElement) {
                for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, authorizationRulesSequenceElement, 'AUTHORIZATIONRULE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex1 = loweredIndex1 + 1) {
                  var authorizationRulesElement = js2xml.getElements(responseDoc, authorizationRulesSequenceElement, 'AUTHORIZATIONRULE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex1];
                  var authorizationRuleInstance = { rights: [] };
                  queueDescriptionInstance.authorizationRules.push(authorizationRuleInstance);
                  
                  var claimTypeElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'CLAIMTYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (claimTypeElement) {
                    var claimTypeInstance = claimTypeElement;
                    authorizationRuleInstance.claimType = claimTypeInstance;
                  }
                  
                  var claimValueElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'CLAIMVALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (claimValueElement) {
                    var claimValueInstance = claimValueElement;
                    authorizationRuleInstance.claimValue = claimValueInstance;
                  }
                  
                  var rightsSequenceElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'RIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (rightsSequenceElement) {
                    for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, rightsSequenceElement, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex2 = loweredIndex2 + 1) {
                      var rightsElement = js2xml.getElements(responseDoc, rightsSequenceElement, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex2];
                      authorizationRuleInstance.rights.push(rightsElement);
                    }
                  }
                  
                  var createdTimeElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'CREATEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (createdTimeElement) {
                    var createdTimeInstance = new Date(createdTimeElement);
                    authorizationRuleInstance.createdTime = createdTimeInstance;
                  }
                  
                  var keyNameElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'KEYNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (keyNameElement) {
                    var keyNameInstance = keyNameElement;
                    authorizationRuleInstance.keyName = keyNameInstance;
                  }
                  
                  var modifiedTimeElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'MODIFIEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (modifiedTimeElement) {
                    var modifiedTimeInstance = new Date(modifiedTimeElement);
                    authorizationRuleInstance.modifiedTime = modifiedTimeInstance;
                  }
                  
                  var primaryKeyElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'PRIMARYKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (primaryKeyElement) {
                    var primaryKeyInstance = primaryKeyElement;
                    authorizationRuleInstance.primaryKey = primaryKeyInstance;
                  }
                  
                  var secondaryKeyElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'SECONDARYKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (secondaryKeyElement) {
                    var secondaryKeyInstance = secondaryKeyElement;
                    authorizationRuleInstance.secondaryKey = secondaryKeyInstance;
                  }
                }
              }
              
              var statusElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (statusElement) {
                var statusInstance = statusElement;
                queueDescriptionInstance.status = statusInstance;
              }
              
              var createdAtElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'CREATEDAT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (createdAtElement) {
                var createdAtInstance = new Date(createdAtElement);
                queueDescriptionInstance.createdAt = createdAtInstance;
              }
              
              var updatedAtElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'UPDATEDAT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (updatedAtElement) {
                var updatedAtInstance = new Date(updatedAtElement);
                queueDescriptionInstance.updatedAt = updatedAtInstance;
              }
              
              var accessedAtElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'ACCESSEDAT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (accessedAtElement) {
                var accessedAtInstance = new Date(accessedAtElement);
                queueDescriptionInstance.accessedAt = accessedAtInstance;
              }
              
              var supportOrderingElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'SUPPORTORDERING', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (supportOrderingElement) {
                var supportOrderingInstance = supportOrderingElement;
                queueDescriptionInstance.supportOrdering = supportOrderingInstance;
              }
              
              var countDetailsElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'COUNTDETAILS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (countDetailsElement) {
                var countDetailsInstance = {};
                queueDescriptionInstance.countDetails = countDetailsInstance;
                
                var activeMessageCountElement = js2xml.getElement(responseDoc, countDetailsElement, 'ACTIVEMESSAGECOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2011/06/SERVICEBUS');
                if (activeMessageCountElement) {
                  var activeMessageCountInstance = parseInt(activeMessageCountElement, 10);
                  countDetailsInstance.activeMessageCount = activeMessageCountInstance;
                }
                
                var deadLetterMessageCountElement = js2xml.getElement(responseDoc, countDetailsElement, 'DEADLETTERMESSAGECOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2011/06/SERVICEBUS');
                if (deadLetterMessageCountElement) {
                  var deadLetterMessageCountInstance = parseInt(deadLetterMessageCountElement, 10);
                  countDetailsInstance.deadLetterMessageCount = deadLetterMessageCountInstance;
                }
                
                var scheduledMessageCountElement = js2xml.getElement(responseDoc, countDetailsElement, 'SCHEDULEDMESSAGECOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2011/06/SERVICEBUS');
                if (scheduledMessageCountElement) {
                  var scheduledMessageCountInstance = parseInt(scheduledMessageCountElement, 10);
                  countDetailsInstance.scheduledMessageCount = scheduledMessageCountInstance;
                }
                
                var transferDeadLetterMessageCountElement = js2xml.getElement(responseDoc, countDetailsElement, 'TRANSFERDEADLETTERMESSAGECOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2011/06/SERVICEBUS');
                if (transferDeadLetterMessageCountElement) {
                  var transferDeadLetterMessageCountInstance = parseInt(transferDeadLetterMessageCountElement, 10);
                  countDetailsInstance.transferDeadLetterMessageCount = transferDeadLetterMessageCountInstance;
                }
                
                var transferMessageCountElement = js2xml.getElement(responseDoc, countDetailsElement, 'TRANSFERMESSAGECOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2011/06/SERVICEBUS');
                if (transferMessageCountElement) {
                  var transferMessageCountInstance = parseInt(transferMessageCountElement, 10);
                  countDetailsInstance.transferMessageCount = transferMessageCountInstance;
                }
              }
              
              var autoDeleteOnIdleElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'AUTODELETEONIDLE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (autoDeleteOnIdleElement) {
                var autoDeleteOnIdleInstance = autoDeleteOnIdleElement;
                queueDescriptionInstance.autoDeleteOnIdle = autoDeleteOnIdleInstance;
              }
              
              var entityAvailabilityStatusElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'ENTITYAVAILABILITYSTATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (entityAvailabilityStatusElement) {
                var entityAvailabilityStatusInstance = entityAvailabilityStatusElement;
                queueDescriptionInstance.entityAvailabilityStatus = entityAvailabilityStatusInstance;
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Gets the set of connection strings for a queue.
   *
   * @param {String} namespaceName
   *
   * @param {String} queueName
   *
   * @param {Function} callback
   *
   * @returns {ServiceBusConnectionDetailsResponse} - The set of connection
   * details for a service bus entity.
   */
  QueueOperations.prototype.getConnectionDetails = function(namespaceName, queueName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + this.client.credentials.subscriptionId + '/services/servicebus/namespaces/' + namespaceName + '/Queues/' + queueName + '/ConnectionDetails';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml; charset=utf-8';
    httpRequest.headers['x-ms-version'] = '2013-08-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { connectionDetails: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var feedElement = js2xml.getElement(responseDoc, responseDoc, 'FEED', 'HTTP://WWW.W3.ORG/2005/ATOM');
        if (feedElement) {
          if (feedElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, feedElement, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM').length; loweredIndex1 = loweredIndex1 + 1) {
              var entriesElement = js2xml.getElements(responseDoc, feedElement, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM')[loweredIndex1];
              var entryInstance = { rights: [] };
              result.connectionDetails.push(entryInstance);
              
              var contentElement = js2xml.getElement(responseDoc, entriesElement, 'CONTENT', 'HTTP://WWW.W3.ORG/2005/ATOM');
              if (contentElement) {
                var connectionDetailElement = js2xml.getElement(responseDoc, contentElement, 'CONNECTIONDETAIL', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                if (connectionDetailElement) {
                  var keyNameElement = js2xml.getElement(responseDoc, connectionDetailElement, 'KEYNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (keyNameElement) {
                    var keyNameInstance = keyNameElement;
                    entryInstance.keyName = keyNameInstance;
                  }
                  
                  var connectionStringElement = js2xml.getElement(responseDoc, connectionDetailElement, 'CONNECTIONSTRING', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (connectionStringElement) {
                    var connectionStringInstance = connectionStringElement;
                    entryInstance.connectionString = connectionStringInstance;
                  }
                  
                  var authorizationTypeElement = js2xml.getElement(responseDoc, connectionDetailElement, 'AUTHORIZATIONTYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (authorizationTypeElement) {
                    var authorizationTypeInstance = authorizationTypeElement;
                    entryInstance.authorizationType = authorizationTypeInstance;
                  }
                  
                  var rightsSequenceElement = js2xml.getElement(responseDoc, connectionDetailElement, 'RIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (rightsSequenceElement) {
                    for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, rightsSequenceElement, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex2 = loweredIndex2 + 1) {
                      var rightsElement = js2xml.getElements(responseDoc, rightsSequenceElement, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex2];
                      entryInstance.rights.push(rightsElement);
                    }
                  }
                }
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Enumerates the queues in the service namespace. The result is returned in
   * pages, each containing up to 100 queues. If the namespace contains more
   * than 100 queues, a feed is returned that contains the first page and a
   * next link with the URI to view the next page of data.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/hh780759.asp for
   * more information)
   *
   * @param {String} namespaceName
   *
   * @param {Function} callback
   *
   * @returns {ServiceBusQueuesResponse} - A response to a request for a list
   * of queues.
   */
  QueueOperations.prototype.list = function(namespaceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + this.client.credentials.subscriptionId + '/services/servicebus/namespaces/' + namespaceName + '/Queues';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml; charset=utf-8';
    httpRequest.headers['x-ms-version'] = '2013-08-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { queues: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var feedElement = js2xml.getElement(responseDoc, responseDoc, 'FEED', 'HTTP://WWW.W3.ORG/2005/ATOM');
        if (feedElement) {
          if (feedElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, feedElement, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM').length; loweredIndex1 = loweredIndex1 + 1) {
              var entriesElement = js2xml.getElements(responseDoc, feedElement, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM')[loweredIndex1];
              var entryInstance = { authorizationRules: [] };
              result.queues.push(entryInstance);
              
              var titleElement = js2xml.getElement(responseDoc, entriesElement, 'TITLE', 'HTTP://WWW.W3.ORG/2005/ATOM');
              if (titleElement) {
                var titleInstance = titleElement;
                entryInstance.name = titleInstance;
              }
              
              var contentElement = js2xml.getElement(responseDoc, entriesElement, 'CONTENT', 'HTTP://WWW.W3.ORG/2005/ATOM');
              if (contentElement) {
                var queueDescriptionElement = js2xml.getElement(responseDoc, contentElement, 'QUEUEDESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                if (queueDescriptionElement) {
                  var lockDurationElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'LOCKDURATION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (lockDurationElement) {
                    var lockDurationInstance = lockDurationElement;
                    entryInstance.lockDuration = lockDurationInstance;
                  }
                  
                  var maxSizeInMegabytesElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'MAXSIZEINMEGABYTES', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (maxSizeInMegabytesElement) {
                    var maxSizeInMegabytesInstance = parseInt(maxSizeInMegabytesElement, 10);
                    entryInstance.maxSizeInMegabytes = maxSizeInMegabytesInstance;
                  }
                  
                  var requiresDuplicateDetectionElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'REQUIRESDUPLICATEDETECTION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (requiresDuplicateDetectionElement) {
                    var requiresDuplicateDetectionInstance = requiresDuplicateDetectionElement;
                    entryInstance.requiresDuplicateDetection = requiresDuplicateDetectionInstance;
                  }
                  
                  var requiresSessionElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'REQUIRESSESSION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (requiresSessionElement) {
                    var requiresSessionInstance = requiresSessionElement;
                    entryInstance.requiresSession = requiresSessionInstance;
                  }
                  
                  var defaultMessageTimeToLiveElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'DEFAULTMESSAGETIMETOLIVE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (defaultMessageTimeToLiveElement) {
                    var defaultMessageTimeToLiveInstance = defaultMessageTimeToLiveElement;
                    entryInstance.defaultMessageTimeToLive = defaultMessageTimeToLiveInstance;
                  }
                  
                  var deadLetteringOnMessageExpirationElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'DEADLETTERINGONMESSAGEEXPIRATION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (deadLetteringOnMessageExpirationElement) {
                    var deadLetteringOnMessageExpirationInstance = deadLetteringOnMessageExpirationElement;
                    entryInstance.deadLetteringOnMessageExpiration = deadLetteringOnMessageExpirationInstance;
                  }
                  
                  var duplicateDetectionHistoryTimeWindowElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'DUPLICATEDETECTIONHISTORYTIMEWINDOW', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (duplicateDetectionHistoryTimeWindowElement) {
                    var duplicateDetectionHistoryTimeWindowInstance = duplicateDetectionHistoryTimeWindowElement;
                    entryInstance.duplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindowInstance;
                  }
                  
                  var maxDeliveryCountElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'MAXDELIVERYCOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (maxDeliveryCountElement) {
                    var maxDeliveryCountInstance = parseInt(maxDeliveryCountElement, 10);
                    entryInstance.maxDeliveryCount = maxDeliveryCountInstance;
                  }
                  
                  var enableBatchedOperationsElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'ENABLEBATCHEDOPERATIONS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (enableBatchedOperationsElement) {
                    var enableBatchedOperationsInstance = enableBatchedOperationsElement;
                    entryInstance.enableBatchedOperations = enableBatchedOperationsInstance;
                  }
                  
                  var sizeInBytesElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'SIZEINBYTES', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (sizeInBytesElement) {
                    var sizeInBytesInstance = parseInt(sizeInBytesElement, 10);
                    entryInstance.sizeInBytes = sizeInBytesInstance;
                  }
                  
                  var messageCountElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'MESSAGECOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (messageCountElement) {
                    var messageCountInstance = parseInt(messageCountElement, 10);
                    entryInstance.messageCount = messageCountInstance;
                  }
                  
                  var isAnonymousAccessibleElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'ISANONYMOUSACCESSIBLE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (isAnonymousAccessibleElement) {
                    var isAnonymousAccessibleInstance = isAnonymousAccessibleElement;
                    entryInstance.isAnonymousAccessible = isAnonymousAccessibleInstance;
                  }
                  
                  var authorizationRulesSequenceElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'AUTHORIZATIONRULES', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (authorizationRulesSequenceElement) {
                    for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, authorizationRulesSequenceElement, 'AUTHORIZATIONRULE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex2 = loweredIndex2 + 1) {
                      var authorizationRulesElement = js2xml.getElements(responseDoc, authorizationRulesSequenceElement, 'AUTHORIZATIONRULE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex2];
                      var authorizationRuleInstance = { rights: [] };
                      entryInstance.authorizationRules.push(authorizationRuleInstance);
                      
                      var claimTypeElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'CLAIMTYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                      if (claimTypeElement) {
                        var claimTypeInstance = claimTypeElement;
                        authorizationRuleInstance.claimType = claimTypeInstance;
                      }
                      
                      var claimValueElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'CLAIMVALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                      if (claimValueElement) {
                        var claimValueInstance = claimValueElement;
                        authorizationRuleInstance.claimValue = claimValueInstance;
                      }
                      
                      var rightsSequenceElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'RIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                      if (rightsSequenceElement) {
                        for (var loweredIndex3 = 0; loweredIndex3 < js2xml.getElements(responseDoc, rightsSequenceElement, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex3 = loweredIndex3 + 1) {
                          var rightsElement = js2xml.getElements(responseDoc, rightsSequenceElement, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex3];
                          authorizationRuleInstance.rights.push(rightsElement);
                        }
                      }
                      
                      var createdTimeElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'CREATEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                      if (createdTimeElement) {
                        var createdTimeInstance = new Date(createdTimeElement);
                        authorizationRuleInstance.createdTime = createdTimeInstance;
                      }
                      
                      var keyNameElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'KEYNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                      if (keyNameElement) {
                        var keyNameInstance = keyNameElement;
                        authorizationRuleInstance.keyName = keyNameInstance;
                      }
                      
                      var modifiedTimeElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'MODIFIEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                      if (modifiedTimeElement) {
                        var modifiedTimeInstance = new Date(modifiedTimeElement);
                        authorizationRuleInstance.modifiedTime = modifiedTimeInstance;
                      }
                      
                      var primaryKeyElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'PRIMARYKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                      if (primaryKeyElement) {
                        var primaryKeyInstance = primaryKeyElement;
                        authorizationRuleInstance.primaryKey = primaryKeyInstance;
                      }
                      
                      var secondaryKeyElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'SECONDARYKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                      if (secondaryKeyElement) {
                        var secondaryKeyInstance = secondaryKeyElement;
                        authorizationRuleInstance.secondaryKey = secondaryKeyInstance;
                      }
                    }
                  }
                  
                  var statusElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (statusElement) {
                    var statusInstance = statusElement;
                    entryInstance.status = statusInstance;
                  }
                  
                  var createdAtElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'CREATEDAT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (createdAtElement) {
                    var createdAtInstance = new Date(createdAtElement);
                    entryInstance.createdAt = createdAtInstance;
                  }
                  
                  var updatedAtElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'UPDATEDAT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (updatedAtElement) {
                    var updatedAtInstance = new Date(updatedAtElement);
                    entryInstance.updatedAt = updatedAtInstance;
                  }
                  
                  var accessedAtElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'ACCESSEDAT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (accessedAtElement) {
                    var accessedAtInstance = new Date(accessedAtElement);
                    entryInstance.accessedAt = accessedAtInstance;
                  }
                  
                  var supportOrderingElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'SUPPORTORDERING', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (supportOrderingElement) {
                    var supportOrderingInstance = supportOrderingElement;
                    entryInstance.supportOrdering = supportOrderingInstance;
                  }
                  
                  var countDetailsElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'COUNTDETAILS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (countDetailsElement) {
                    var countDetailsInstance = {};
                    entryInstance.countDetails = countDetailsInstance;
                    
                    var activeMessageCountElement = js2xml.getElement(responseDoc, countDetailsElement, 'ACTIVEMESSAGECOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2011/06/SERVICEBUS');
                    if (activeMessageCountElement) {
                      var activeMessageCountInstance = parseInt(activeMessageCountElement, 10);
                      countDetailsInstance.activeMessageCount = activeMessageCountInstance;
                    }
                    
                    var deadLetterMessageCountElement = js2xml.getElement(responseDoc, countDetailsElement, 'DEADLETTERMESSAGECOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2011/06/SERVICEBUS');
                    if (deadLetterMessageCountElement) {
                      var deadLetterMessageCountInstance = parseInt(deadLetterMessageCountElement, 10);
                      countDetailsInstance.deadLetterMessageCount = deadLetterMessageCountInstance;
                    }
                    
                    var scheduledMessageCountElement = js2xml.getElement(responseDoc, countDetailsElement, 'SCHEDULEDMESSAGECOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2011/06/SERVICEBUS');
                    if (scheduledMessageCountElement) {
                      var scheduledMessageCountInstance = parseInt(scheduledMessageCountElement, 10);
                      countDetailsInstance.scheduledMessageCount = scheduledMessageCountInstance;
                    }
                    
                    var transferDeadLetterMessageCountElement = js2xml.getElement(responseDoc, countDetailsElement, 'TRANSFERDEADLETTERMESSAGECOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2011/06/SERVICEBUS');
                    if (transferDeadLetterMessageCountElement) {
                      var transferDeadLetterMessageCountInstance = parseInt(transferDeadLetterMessageCountElement, 10);
                      countDetailsInstance.transferDeadLetterMessageCount = transferDeadLetterMessageCountInstance;
                    }
                    
                    var transferMessageCountElement = js2xml.getElement(responseDoc, countDetailsElement, 'TRANSFERMESSAGECOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2011/06/SERVICEBUS');
                    if (transferMessageCountElement) {
                      var transferMessageCountInstance = parseInt(transferMessageCountElement, 10);
                      countDetailsInstance.transferMessageCount = transferMessageCountInstance;
                    }
                  }
                  
                  var autoDeleteOnIdleElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'AUTODELETEONIDLE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (autoDeleteOnIdleElement) {
                    var autoDeleteOnIdleInstance = autoDeleteOnIdleElement;
                    entryInstance.autoDeleteOnIdle = autoDeleteOnIdleInstance;
                  }
                  
                  var entityAvailabilityStatusElement = js2xml.getElement(responseDoc, queueDescriptionElement, 'ENTITYAVAILABILITYSTATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (entityAvailabilityStatusElement) {
                    var entityAvailabilityStatusInstance = entityAvailabilityStatusElement;
                    entryInstance.entityAvailabilityStatus = entityAvailabilityStatusInstance;
                  }
                }
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Updates the queue description and sends the updates status to the FE/BE to
   * update corresponding DB entries.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj856305.aspx for
   * more information)
   *
   * @param {String} namespaceName
   *
   * @param {ServiceBusQueue} queue
   *
   * @param {Function} callback
   *
   * @returns {ServiceBusQueueResponse} - A response to a request for a
   * particular queue.
   */
  QueueOperations.prototype.update = function(namespaceName, queue, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (queue) {
      if (queue.accessedAt === null || queue.accessedAt === undefined) {
        return callback(new Error('queue.accessedAt cannot be null.'));
      }
      for (var loweredIndex1 = 0; loweredIndex1 < queue.authorizationRules.length; loweredIndex1 = loweredIndex1 + 1) {
        var authorizationRulesParameterItem = queue.authorizationRules[loweredIndex1];
        if (authorizationRulesParameterItem.createdTime === null || authorizationRulesParameterItem.createdTime === undefined) {
          return callback(new Error('queue.authorizationRules.createdTime cannot be null.'));
        }
        if (authorizationRulesParameterItem.modifiedTime === null || authorizationRulesParameterItem.modifiedTime === undefined) {
          return callback(new Error('queue.authorizationRules.modifiedTime cannot be null.'));
        }
        if (authorizationRulesParameterItem.revision === null || authorizationRulesParameterItem.revision === undefined) {
          return callback(new Error('queue.authorizationRules.revision cannot be null.'));
        }
      }
      if (queue.countDetails) {
        if (queue.countDetails.activeMessageCount === null || queue.countDetails.activeMessageCount === undefined) {
          return callback(new Error('queue.countDetails.activeMessageCount cannot be null.'));
        }
        if (queue.countDetails.deadLetterMessageCount === null || queue.countDetails.deadLetterMessageCount === undefined) {
          return callback(new Error('queue.countDetails.deadLetterMessageCount cannot be null.'));
        }
        if (queue.countDetails.scheduledMessageCount === null || queue.countDetails.scheduledMessageCount === undefined) {
          return callback(new Error('queue.countDetails.scheduledMessageCount cannot be null.'));
        }
        if (queue.countDetails.transferDeadLetterMessageCount === null || queue.countDetails.transferDeadLetterMessageCount === undefined) {
          return callback(new Error('queue.countDetails.transferDeadLetterMessageCount cannot be null.'));
        }
        if (queue.countDetails.transferMessageCount === null || queue.countDetails.transferMessageCount === undefined) {
          return callback(new Error('queue.countDetails.transferMessageCount cannot be null.'));
        }
      }
      if (queue.createdAt === null || queue.createdAt === undefined) {
        return callback(new Error('queue.createdAt cannot be null.'));
      }
      if (queue.deadLetteringOnMessageExpiration === null || queue.deadLetteringOnMessageExpiration === undefined) {
        return callback(new Error('queue.deadLetteringOnMessageExpiration cannot be null.'));
      }
      if (queue.enableBatchedOperations === null || queue.enableBatchedOperations === undefined) {
        return callback(new Error('queue.enableBatchedOperations cannot be null.'));
      }
      if (queue.isAnonymousAccessible === null || queue.isAnonymousAccessible === undefined) {
        return callback(new Error('queue.isAnonymousAccessible cannot be null.'));
      }
      if (queue.maxDeliveryCount === null || queue.maxDeliveryCount === undefined) {
        return callback(new Error('queue.maxDeliveryCount cannot be null.'));
      }
      if (queue.maxSizeInMegabytes === null || queue.maxSizeInMegabytes === undefined) {
        return callback(new Error('queue.maxSizeInMegabytes cannot be null.'));
      }
      if (queue.messageCount === null || queue.messageCount === undefined) {
        return callback(new Error('queue.messageCount cannot be null.'));
      }
      if (queue.requiresDuplicateDetection === null || queue.requiresDuplicateDetection === undefined) {
        return callback(new Error('queue.requiresDuplicateDetection cannot be null.'));
      }
      if (queue.requiresSession === null || queue.requiresSession === undefined) {
        return callback(new Error('queue.requiresSession cannot be null.'));
      }
      if (queue.sizeInBytes === null || queue.sizeInBytes === undefined) {
        return callback(new Error('queue.sizeInBytes cannot be null.'));
      }
      if (queue.supportOrdering === null || queue.supportOrdering === undefined) {
        return callback(new Error('queue.supportOrdering cannot be null.'));
      }
      if (queue.updatedAt === null || queue.updatedAt === undefined) {
        return callback(new Error('queue.updatedAt cannot be null.'));
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + this.client.credentials.subscriptionId + '/services/servicebus/namespaces/' + namespaceName + '/queues/' + queue.name + '/';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/atom+xml';
    httpRequest.headers['if-match'] = '*';
    httpRequest.headers['type'] = 'entry';
    httpRequest.headers['x-ms-version'] = '2013-08-01';
    httpRequest.headers['x-process-at'] = 'ServiceBus';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    if (queue) {
      var entryElement = js2xml.createElement('entry', 'http://www.w3.org/2005/Atom');
      js2xml.addChildElement(requestDoc, entryElement);
      
      var contentElement = js2xml.createElement('content', 'http://www.w3.org/2005/Atom');
      js2xml.addChildElement(entryElement, contentElement);
      
      var typeAttribute = js2xml.createAttribute('type', '');
      js2xml.setAttributeValue(typeAttribute, 'application/atom+xml;type=entry;charset=utf-8');
      js2xml.addAttribute(contentElement, typeAttribute);
      
      var queueDescriptionElement = js2xml.createElement('QueueDescription', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.addChildElement(contentElement, queueDescriptionElement);
      
      if (queue.lockDuration) {
        var lockDurationElement = js2xml.createElement('LockDuration', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        js2xml.setElementValue(lockDurationElement, queue.lockDuration);
        js2xml.addChildElement(queueDescriptionElement, lockDurationElement);
      }
      
      var maxSizeInMegabytesElement = js2xml.createElement('MaxSizeInMegabytes', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(maxSizeInMegabytesElement, queue.maxSizeInMegabytes.toString());
      js2xml.addChildElement(queueDescriptionElement, maxSizeInMegabytesElement);
      
      var requiresDuplicateDetectionElement = js2xml.createElement('RequiresDuplicateDetection', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(requiresDuplicateDetectionElement, queue.requiresDuplicateDetection.toString());
      js2xml.addChildElement(queueDescriptionElement, requiresDuplicateDetectionElement);
      
      var requiresSessionElement = js2xml.createElement('RequiresSession', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(requiresSessionElement, queue.requiresSession.toString());
      js2xml.addChildElement(queueDescriptionElement, requiresSessionElement);
      
      if (queue.defaultMessageTimeToLive) {
        var defaultMessageTimeToLiveElement = js2xml.createElement('DefaultMessageTimeToLive', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        js2xml.setElementValue(defaultMessageTimeToLiveElement, queue.defaultMessageTimeToLive);
        js2xml.addChildElement(queueDescriptionElement, defaultMessageTimeToLiveElement);
      }
      
      var deadLetteringOnMessageExpirationElement = js2xml.createElement('DeadLetteringOnMessageExpiration', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(deadLetteringOnMessageExpirationElement, queue.deadLetteringOnMessageExpiration.toString());
      js2xml.addChildElement(queueDescriptionElement, deadLetteringOnMessageExpirationElement);
      
      if (queue.duplicateDetectionHistoryTimeWindow) {
        var duplicateDetectionHistoryTimeWindowElement = js2xml.createElement('DuplicateDetectionHistoryTimeWindow', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        js2xml.setElementValue(duplicateDetectionHistoryTimeWindowElement, queue.duplicateDetectionHistoryTimeWindow);
        js2xml.addChildElement(queueDescriptionElement, duplicateDetectionHistoryTimeWindowElement);
      }
      
      var maxDeliveryCountElement = js2xml.createElement('MaxDeliveryCount', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(maxDeliveryCountElement, queue.maxDeliveryCount.toString());
      js2xml.addChildElement(queueDescriptionElement, maxDeliveryCountElement);
      
      var enableBatchedOperationsElement = js2xml.createElement('EnableBatchedOperations', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(enableBatchedOperationsElement, queue.enableBatchedOperations.toString());
      js2xml.addChildElement(queueDescriptionElement, enableBatchedOperationsElement);
      
      var sizeInBytesElement = js2xml.createElement('SizeInBytes', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(sizeInBytesElement, queue.sizeInBytes.toString());
      js2xml.addChildElement(queueDescriptionElement, sizeInBytesElement);
      
      var messageCountElement = js2xml.createElement('MessageCount', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(messageCountElement, queue.messageCount.toString());
      js2xml.addChildElement(queueDescriptionElement, messageCountElement);
      
      var isAnonymousAccessibleElement = js2xml.createElement('IsAnonymousAccessible', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(isAnonymousAccessibleElement, queue.isAnonymousAccessible.toString());
      js2xml.addChildElement(queueDescriptionElement, isAnonymousAccessibleElement);
      
      if (queue.authorizationRules) {
        var authorizationRulesSequenceElement = js2xml.createElement('AuthorizationRules', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        for (var loweredIndex2 = 0; loweredIndex2 < queue.authorizationRules.length; loweredIndex2 = loweredIndex2 + 1) {
          var authorizationRulesItem = queue.authorizationRules[loweredIndex2];
          var authorizationRuleElement = js2xml.createElement('AuthorizationRule', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
          js2xml.addChildElement(authorizationRulesSequenceElement, authorizationRuleElement);
          
          var typeAttribute2 = js2xml.createAttribute('type', 'http://www.w3.org/2001/XMLSchema-instance');
          js2xml.setAttributeValue(typeAttribute2, 'SharedAccessAuthorizationRule');
          js2xml.addAttribute(authorizationRuleElement, typeAttribute2);
          
          if (authorizationRulesItem.claimType) {
            var claimTypeElement = js2xml.createElement('ClaimType', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
            js2xml.setElementValue(claimTypeElement, authorizationRulesItem.claimType);
            js2xml.addChildElement(authorizationRuleElement, claimTypeElement);
          }
          
          if (authorizationRulesItem.claimValue) {
            var claimValueElement = js2xml.createElement('ClaimValue', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
            js2xml.setElementValue(claimValueElement, authorizationRulesItem.claimValue);
            js2xml.addChildElement(authorizationRuleElement, claimValueElement);
          }
          
          if (authorizationRulesItem.rights) {
            var rightsSequenceElement = js2xml.createElement('Rights', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
            for (var loweredIndex3 = 0; loweredIndex3 < authorizationRulesItem.rights.length; loweredIndex3 = loweredIndex3 + 1) {
              var rightsItem = authorizationRulesItem.rights[loweredIndex3];
              var rightsItemElement = js2xml.createElement('AccessRights', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
              js2xml.setElementValue(rightsItemElement, rightsItem ? rightsItem.toString() : 'Listen');
              js2xml.addChildElement(rightsSequenceElement, rightsItemElement);
            }
            js2xml.addChildElement(authorizationRuleElement, rightsSequenceElement);
          }
          
          var createdTimeElement = js2xml.createElement('CreatedTime', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
          js2xml.setElementValue(createdTimeElement, authorizationRulesItem.createdTime.toString());
          js2xml.addChildElement(authorizationRuleElement, createdTimeElement);
          
          if (authorizationRulesItem.keyName) {
            var keyNameElement = js2xml.createElement('KeyName', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
            js2xml.setElementValue(keyNameElement, authorizationRulesItem.keyName);
            js2xml.addChildElement(authorizationRuleElement, keyNameElement);
          }
          
          var modifiedTimeElement = js2xml.createElement('ModifiedTime', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
          js2xml.setElementValue(modifiedTimeElement, authorizationRulesItem.modifiedTime.toString());
          js2xml.addChildElement(authorizationRuleElement, modifiedTimeElement);
          
          if (authorizationRulesItem.primaryKey) {
            var primaryKeyElement = js2xml.createElement('PrimaryKey', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
            js2xml.setElementValue(primaryKeyElement, authorizationRulesItem.primaryKey);
            js2xml.addChildElement(authorizationRuleElement, primaryKeyElement);
          }
          
          if (authorizationRulesItem.secondaryKey) {
            var secondaryKeyElement = js2xml.createElement('SecondaryKey', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
            js2xml.setElementValue(secondaryKeyElement, authorizationRulesItem.secondaryKey);
            js2xml.addChildElement(authorizationRuleElement, secondaryKeyElement);
          }
        }
        js2xml.addChildElement(queueDescriptionElement, authorizationRulesSequenceElement);
      }
      
      if (queue.status) {
        var statusElement = js2xml.createElement('Status', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        js2xml.setElementValue(statusElement, queue.status);
        js2xml.addChildElement(queueDescriptionElement, statusElement);
      }
      
      var createdAtElement = js2xml.createElement('CreatedAt', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(createdAtElement, queue.createdAt.toString());
      js2xml.addChildElement(queueDescriptionElement, createdAtElement);
      
      var updatedAtElement = js2xml.createElement('UpdatedAt', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(updatedAtElement, queue.updatedAt.toString());
      js2xml.addChildElement(queueDescriptionElement, updatedAtElement);
      
      var accessedAtElement = js2xml.createElement('AccessedAt', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(accessedAtElement, queue.accessedAt.toString());
      js2xml.addChildElement(queueDescriptionElement, accessedAtElement);
      
      var supportOrderingElement = js2xml.createElement('SupportOrdering', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(supportOrderingElement, queue.supportOrdering.toString());
      js2xml.addChildElement(queueDescriptionElement, supportOrderingElement);
      
      if (queue.countDetails) {
        var countDetailsElement = js2xml.createElement('CountDetails', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        js2xml.addChildElement(queueDescriptionElement, countDetailsElement);
        
        var activeMessageCountElement = js2xml.createElement('ActiveMessageCount', 'http://schemas.microsoft.com/netservices/2011/06/servicebus');
        js2xml.setElementValue(activeMessageCountElement, queue.countDetails.activeMessageCount.toString());
        js2xml.addChildElement(countDetailsElement, activeMessageCountElement);
        
        var deadLetterMessageCountElement = js2xml.createElement('DeadLetterMessageCount', 'http://schemas.microsoft.com/netservices/2011/06/servicebus');
        js2xml.setElementValue(deadLetterMessageCountElement, queue.countDetails.deadLetterMessageCount.toString());
        js2xml.addChildElement(countDetailsElement, deadLetterMessageCountElement);
        
        var scheduledMessageCountElement = js2xml.createElement('ScheduledMessageCount', 'http://schemas.microsoft.com/netservices/2011/06/servicebus');
        js2xml.setElementValue(scheduledMessageCountElement, queue.countDetails.scheduledMessageCount.toString());
        js2xml.addChildElement(countDetailsElement, scheduledMessageCountElement);
        
        var transferDeadLetterMessageCountElement = js2xml.createElement('TransferDeadLetterMessageCount', 'http://schemas.microsoft.com/netservices/2011/06/servicebus');
        js2xml.setElementValue(transferDeadLetterMessageCountElement, queue.countDetails.transferDeadLetterMessageCount.toString());
        js2xml.addChildElement(countDetailsElement, transferDeadLetterMessageCountElement);
        
        var transferMessageCountElement = js2xml.createElement('TransferMessageCount', 'http://schemas.microsoft.com/netservices/2011/06/servicebus');
        js2xml.setElementValue(transferMessageCountElement, queue.countDetails.transferMessageCount.toString());
        js2xml.addChildElement(countDetailsElement, transferMessageCountElement);
      }
      
      if (queue.autoDeleteOnIdle) {
        var autoDeleteOnIdleElement = js2xml.createElement('AutoDeleteOnIdle', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        js2xml.setElementValue(autoDeleteOnIdleElement, queue.autoDeleteOnIdle);
        js2xml.addChildElement(queueDescriptionElement, autoDeleteOnIdleElement);
      }
      
      if (queue.entityAvailabilityStatus) {
        var entityAvailabilityStatusElement = js2xml.createElement('EntityAvailabilityStatus', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        js2xml.setElementValue(entityAvailabilityStatusElement, queue.entityAvailabilityStatus);
        js2xml.addChildElement(queueDescriptionElement, entityAvailabilityStatusElement);
      }
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var entryElement2 = js2xml.getElement(responseDoc, responseDoc, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM');
        if (entryElement2) {
          var titleElement = js2xml.getElement(responseDoc, entryElement2, 'TITLE', 'HTTP://WWW.W3.ORG/2005/ATOM');
          if (titleElement) {
          }
          
          var contentElement2 = js2xml.getElement(responseDoc, entryElement2, 'CONTENT', 'HTTP://WWW.W3.ORG/2005/ATOM');
          if (contentElement2) {
            var queueDescriptionElement2 = js2xml.getElement(responseDoc, contentElement2, 'QUEUEDESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
            if (queueDescriptionElement2) {
              var queueDescriptionInstance = { authorizationRules: [] };
              result.queue = queueDescriptionInstance;
              
              var lockDurationElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'LOCKDURATION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (lockDurationElement2) {
                var lockDurationInstance = lockDurationElement2;
                queueDescriptionInstance.lockDuration = lockDurationInstance;
              }
              
              var maxSizeInMegabytesElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'MAXSIZEINMEGABYTES', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (maxSizeInMegabytesElement2) {
                var maxSizeInMegabytesInstance = parseInt(maxSizeInMegabytesElement2, 10);
                queueDescriptionInstance.maxSizeInMegabytes = maxSizeInMegabytesInstance;
              }
              
              var requiresDuplicateDetectionElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'REQUIRESDUPLICATEDETECTION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (requiresDuplicateDetectionElement2) {
                var requiresDuplicateDetectionInstance = requiresDuplicateDetectionElement2;
                queueDescriptionInstance.requiresDuplicateDetection = requiresDuplicateDetectionInstance;
              }
              
              var requiresSessionElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'REQUIRESSESSION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (requiresSessionElement2) {
                var requiresSessionInstance = requiresSessionElement2;
                queueDescriptionInstance.requiresSession = requiresSessionInstance;
              }
              
              var defaultMessageTimeToLiveElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'DEFAULTMESSAGETIMETOLIVE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (defaultMessageTimeToLiveElement2) {
                var defaultMessageTimeToLiveInstance = defaultMessageTimeToLiveElement2;
                queueDescriptionInstance.defaultMessageTimeToLive = defaultMessageTimeToLiveInstance;
              }
              
              var deadLetteringOnMessageExpirationElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'DEADLETTERINGONMESSAGEEXPIRATION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (deadLetteringOnMessageExpirationElement2) {
                var deadLetteringOnMessageExpirationInstance = deadLetteringOnMessageExpirationElement2;
                queueDescriptionInstance.deadLetteringOnMessageExpiration = deadLetteringOnMessageExpirationInstance;
              }
              
              var duplicateDetectionHistoryTimeWindowElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'DUPLICATEDETECTIONHISTORYTIMEWINDOW', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (duplicateDetectionHistoryTimeWindowElement2) {
                var duplicateDetectionHistoryTimeWindowInstance = duplicateDetectionHistoryTimeWindowElement2;
                queueDescriptionInstance.duplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindowInstance;
              }
              
              var maxDeliveryCountElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'MAXDELIVERYCOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (maxDeliveryCountElement2) {
                var maxDeliveryCountInstance = parseInt(maxDeliveryCountElement2, 10);
                queueDescriptionInstance.maxDeliveryCount = maxDeliveryCountInstance;
              }
              
              var enableBatchedOperationsElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'ENABLEBATCHEDOPERATIONS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (enableBatchedOperationsElement2) {
                var enableBatchedOperationsInstance = enableBatchedOperationsElement2;
                queueDescriptionInstance.enableBatchedOperations = enableBatchedOperationsInstance;
              }
              
              var sizeInBytesElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'SIZEINBYTES', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (sizeInBytesElement2) {
                var sizeInBytesInstance = parseInt(sizeInBytesElement2, 10);
                queueDescriptionInstance.sizeInBytes = sizeInBytesInstance;
              }
              
              var messageCountElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'MESSAGECOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (messageCountElement2) {
                var messageCountInstance = parseInt(messageCountElement2, 10);
                queueDescriptionInstance.messageCount = messageCountInstance;
              }
              
              var isAnonymousAccessibleElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'ISANONYMOUSACCESSIBLE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (isAnonymousAccessibleElement2) {
                var isAnonymousAccessibleInstance = isAnonymousAccessibleElement2;
                queueDescriptionInstance.isAnonymousAccessible = isAnonymousAccessibleInstance;
              }
              
              var authorizationRulesSequenceElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'AUTHORIZATIONRULES', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (authorizationRulesSequenceElement2) {
                for (var loweredIndex4 = 0; loweredIndex4 < js2xml.getElements(responseDoc, authorizationRulesSequenceElement2, 'AUTHORIZATIONRULE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex4 = loweredIndex4 + 1) {
                  var authorizationRulesElement = js2xml.getElements(responseDoc, authorizationRulesSequenceElement2, 'AUTHORIZATIONRULE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex4];
                  var authorizationRuleInstance = { rights: [] };
                  queueDescriptionInstance.authorizationRules.push(authorizationRuleInstance);
                  
                  var claimTypeElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'CLAIMTYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (claimTypeElement2) {
                    var claimTypeInstance = claimTypeElement2;
                    authorizationRuleInstance.claimType = claimTypeInstance;
                  }
                  
                  var claimValueElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'CLAIMVALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (claimValueElement2) {
                    var claimValueInstance = claimValueElement2;
                    authorizationRuleInstance.claimValue = claimValueInstance;
                  }
                  
                  var rightsSequenceElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'RIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (rightsSequenceElement2) {
                    for (var loweredIndex5 = 0; loweredIndex5 < js2xml.getElements(responseDoc, rightsSequenceElement2, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex5 = loweredIndex5 + 1) {
                      var rightsElement = js2xml.getElements(responseDoc, rightsSequenceElement2, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex5];
                      authorizationRuleInstance.rights.push(rightsElement);
                    }
                  }
                  
                  var createdTimeElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'CREATEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (createdTimeElement2) {
                    var createdTimeInstance = new Date(createdTimeElement2);
                    authorizationRuleInstance.createdTime = createdTimeInstance;
                  }
                  
                  var keyNameElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'KEYNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (keyNameElement2) {
                    var keyNameInstance = keyNameElement2;
                    authorizationRuleInstance.keyName = keyNameInstance;
                  }
                  
                  var modifiedTimeElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'MODIFIEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (modifiedTimeElement2) {
                    var modifiedTimeInstance = new Date(modifiedTimeElement2);
                    authorizationRuleInstance.modifiedTime = modifiedTimeInstance;
                  }
                  
                  var primaryKeyElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'PRIMARYKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (primaryKeyElement2) {
                    var primaryKeyInstance = primaryKeyElement2;
                    authorizationRuleInstance.primaryKey = primaryKeyInstance;
                  }
                  
                  var secondaryKeyElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'SECONDARYKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (secondaryKeyElement2) {
                    var secondaryKeyInstance = secondaryKeyElement2;
                    authorizationRuleInstance.secondaryKey = secondaryKeyInstance;
                  }
                }
              }
              
              var statusElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (statusElement2) {
                var statusInstance = statusElement2;
                queueDescriptionInstance.status = statusInstance;
              }
              
              var createdAtElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'CREATEDAT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (createdAtElement2) {
                var createdAtInstance = new Date(createdAtElement2);
                queueDescriptionInstance.createdAt = createdAtInstance;
              }
              
              var updatedAtElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'UPDATEDAT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (updatedAtElement2) {
                var updatedAtInstance = new Date(updatedAtElement2);
                queueDescriptionInstance.updatedAt = updatedAtInstance;
              }
              
              var accessedAtElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'ACCESSEDAT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (accessedAtElement2) {
                var accessedAtInstance = new Date(accessedAtElement2);
                queueDescriptionInstance.accessedAt = accessedAtInstance;
              }
              
              var supportOrderingElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'SUPPORTORDERING', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (supportOrderingElement2) {
                var supportOrderingInstance = supportOrderingElement2;
                queueDescriptionInstance.supportOrdering = supportOrderingInstance;
              }
              
              var countDetailsElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'COUNTDETAILS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (countDetailsElement2) {
                var countDetailsInstance = {};
                queueDescriptionInstance.countDetails = countDetailsInstance;
                
                var activeMessageCountElement2 = js2xml.getElement(responseDoc, countDetailsElement2, 'ACTIVEMESSAGECOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2011/06/SERVICEBUS');
                if (activeMessageCountElement2) {
                  var activeMessageCountInstance = parseInt(activeMessageCountElement2, 10);
                  countDetailsInstance.activeMessageCount = activeMessageCountInstance;
                }
                
                var deadLetterMessageCountElement2 = js2xml.getElement(responseDoc, countDetailsElement2, 'DEADLETTERMESSAGECOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2011/06/SERVICEBUS');
                if (deadLetterMessageCountElement2) {
                  var deadLetterMessageCountInstance = parseInt(deadLetterMessageCountElement2, 10);
                  countDetailsInstance.deadLetterMessageCount = deadLetterMessageCountInstance;
                }
                
                var scheduledMessageCountElement2 = js2xml.getElement(responseDoc, countDetailsElement2, 'SCHEDULEDMESSAGECOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2011/06/SERVICEBUS');
                if (scheduledMessageCountElement2) {
                  var scheduledMessageCountInstance = parseInt(scheduledMessageCountElement2, 10);
                  countDetailsInstance.scheduledMessageCount = scheduledMessageCountInstance;
                }
                
                var transferDeadLetterMessageCountElement2 = js2xml.getElement(responseDoc, countDetailsElement2, 'TRANSFERDEADLETTERMESSAGECOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2011/06/SERVICEBUS');
                if (transferDeadLetterMessageCountElement2) {
                  var transferDeadLetterMessageCountInstance = parseInt(transferDeadLetterMessageCountElement2, 10);
                  countDetailsInstance.transferDeadLetterMessageCount = transferDeadLetterMessageCountInstance;
                }
                
                var transferMessageCountElement2 = js2xml.getElement(responseDoc, countDetailsElement2, 'TRANSFERMESSAGECOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2011/06/SERVICEBUS');
                if (transferMessageCountElement2) {
                  var transferMessageCountInstance = parseInt(transferMessageCountElement2, 10);
                  countDetailsInstance.transferMessageCount = transferMessageCountInstance;
                }
              }
              
              var autoDeleteOnIdleElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'AUTODELETEONIDLE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (autoDeleteOnIdleElement2) {
                var autoDeleteOnIdleInstance = autoDeleteOnIdleElement2;
                queueDescriptionInstance.autoDeleteOnIdle = autoDeleteOnIdleInstance;
              }
              
              var entityAvailabilityStatusElement2 = js2xml.getElement(responseDoc, queueDescriptionElement2, 'ENTITYAVAILABILITYSTATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (entityAvailabilityStatusElement2) {
                var entityAvailabilityStatusInstance = entityAvailabilityStatusElement2;
                queueDescriptionInstance.entityAvailabilityStatus = entityAvailabilityStatusInstance;
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  return QueueOperations;
})();

/**
 * The Service Bus Management API includes operations for managing Service Bus
 * relays.
 */
var RelayOperations = (function() {
  /**
   * Initializes a new instance of the RelayOperations class.
   *
   * @constructor
   *
   * @param {ServiceBusManagementClient} client - Reference to the service
   * client.
   */
  function RelayOperations(client) {
    this.client = client;
  }
  
  /**
   * Gets the set of connection strings for a relay.
   *
   * @param {String} namespaceName
   *
   * @param {String} relayName
   *
   * @param {Function} callback
   *
   * @returns {ServiceBusConnectionDetailsResponse} - The set of connection
   * details for a service bus entity.
   */
  RelayOperations.prototype.getConnectionDetails = function(namespaceName, relayName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + this.client.credentials.subscriptionId + '/services/servicebus/namespaces/' + namespaceName + '/Relays/' + relayName + '/ConnectionDetails';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml; charset=utf-8';
    httpRequest.headers['x-ms-version'] = '2013-08-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { connectionDetails: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var feedElement = js2xml.getElement(responseDoc, responseDoc, 'FEED', 'HTTP://WWW.W3.ORG/2005/ATOM');
        if (feedElement) {
          if (feedElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, feedElement, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM').length; loweredIndex1 = loweredIndex1 + 1) {
              var entriesElement = js2xml.getElements(responseDoc, feedElement, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM')[loweredIndex1];
              var entryInstance = { rights: [] };
              result.connectionDetails.push(entryInstance);
              
              var contentElement = js2xml.getElement(responseDoc, entriesElement, 'CONTENT', 'HTTP://WWW.W3.ORG/2005/ATOM');
              if (contentElement) {
                var connectionDetailElement = js2xml.getElement(responseDoc, contentElement, 'CONNECTIONDETAIL', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                if (connectionDetailElement) {
                  var keyNameElement = js2xml.getElement(responseDoc, connectionDetailElement, 'KEYNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (keyNameElement) {
                    var keyNameInstance = keyNameElement;
                    entryInstance.keyName = keyNameInstance;
                  }
                  
                  var connectionStringElement = js2xml.getElement(responseDoc, connectionDetailElement, 'CONNECTIONSTRING', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (connectionStringElement) {
                    var connectionStringInstance = connectionStringElement;
                    entryInstance.connectionString = connectionStringInstance;
                  }
                  
                  var authorizationTypeElement = js2xml.getElement(responseDoc, connectionDetailElement, 'AUTHORIZATIONTYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (authorizationTypeElement) {
                    var authorizationTypeInstance = authorizationTypeElement;
                    entryInstance.authorizationType = authorizationTypeInstance;
                  }
                  
                  var rightsSequenceElement = js2xml.getElement(responseDoc, connectionDetailElement, 'RIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (rightsSequenceElement) {
                    for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, rightsSequenceElement, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex2 = loweredIndex2 + 1) {
                      var rightsElement = js2xml.getElements(responseDoc, rightsSequenceElement, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex2];
                      entryInstance.rights.push(rightsElement);
                    }
                  }
                }
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  return RelayOperations;
})();

/**
 * The Service Bus Management API includes operations for managing Service Bus
 * topics for a namespace.
 */
var TopicOperations = (function() {
  /**
   * Initializes a new instance of the TopicOperations class.
   *
   * @constructor
   *
   * @param {ServiceBusManagementClient} client - Reference to the service
   * client.
   */
  function TopicOperations(client) {
    this.client = client;
  }
  
  /**
   * Creates a new topic. Once created, this topic resource manifest is
   * immutable. This operation is not idempotent. Repeating the create call,
   * after a topic with same name has been created successfully, will result
   * in a 409 Conflict error message.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/hh780728.aspx for
   * more information)
   *
   * @param {String} namespaceName
   *
   * @param {ServiceBusTopic} topic
   *
   * @param {Function} callback
   *
   * @returns {ServiceBusTopicResponse} - A response to a request for a
   * particular topic.
   */
  TopicOperations.prototype.create = function(namespaceName, topic, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (topic) {
      if (topic.accessedAt === null || topic.accessedAt === undefined) {
        return callback(new Error('topic.accessedAt cannot be null.'));
      }
      for (var loweredIndex1 = 0; loweredIndex1 < topic.authorizationRules.length; loweredIndex1 = loweredIndex1 + 1) {
        var authorizationRulesParameterItem = topic.authorizationRules[loweredIndex1];
        if (authorizationRulesParameterItem.createdTime === null || authorizationRulesParameterItem.createdTime === undefined) {
          return callback(new Error('topic.authorizationRules.createdTime cannot be null.'));
        }
        if (authorizationRulesParameterItem.modifiedTime === null || authorizationRulesParameterItem.modifiedTime === undefined) {
          return callback(new Error('topic.authorizationRules.modifiedTime cannot be null.'));
        }
        if (authorizationRulesParameterItem.revision === null || authorizationRulesParameterItem.revision === undefined) {
          return callback(new Error('topic.authorizationRules.revision cannot be null.'));
        }
      }
      if (topic.countDetails) {
        if (topic.countDetails.activeMessageCount === null || topic.countDetails.activeMessageCount === undefined) {
          return callback(new Error('topic.countDetails.activeMessageCount cannot be null.'));
        }
        if (topic.countDetails.deadLetterMessageCount === null || topic.countDetails.deadLetterMessageCount === undefined) {
          return callback(new Error('topic.countDetails.deadLetterMessageCount cannot be null.'));
        }
        if (topic.countDetails.scheduledMessageCount === null || topic.countDetails.scheduledMessageCount === undefined) {
          return callback(new Error('topic.countDetails.scheduledMessageCount cannot be null.'));
        }
        if (topic.countDetails.transferDeadLetterMessageCount === null || topic.countDetails.transferDeadLetterMessageCount === undefined) {
          return callback(new Error('topic.countDetails.transferDeadLetterMessageCount cannot be null.'));
        }
        if (topic.countDetails.transferMessageCount === null || topic.countDetails.transferMessageCount === undefined) {
          return callback(new Error('topic.countDetails.transferMessageCount cannot be null.'));
        }
      }
      if (topic.createdAt === null || topic.createdAt === undefined) {
        return callback(new Error('topic.createdAt cannot be null.'));
      }
      if (topic.enableBatchedOperations === null || topic.enableBatchedOperations === undefined) {
        return callback(new Error('topic.enableBatchedOperations cannot be null.'));
      }
      if (topic.filteringMessagesBeforePublishing === null || topic.filteringMessagesBeforePublishing === undefined) {
        return callback(new Error('topic.filteringMessagesBeforePublishing cannot be null.'));
      }
      if (topic.isAnonymousAccessible === null || topic.isAnonymousAccessible === undefined) {
        return callback(new Error('topic.isAnonymousAccessible cannot be null.'));
      }
      if (topic.maxSizeInMegabytes === null || topic.maxSizeInMegabytes === undefined) {
        return callback(new Error('topic.maxSizeInMegabytes cannot be null.'));
      }
      if (topic.requiresDuplicateDetection === null || topic.requiresDuplicateDetection === undefined) {
        return callback(new Error('topic.requiresDuplicateDetection cannot be null.'));
      }
      if (topic.sizeInBytes === null || topic.sizeInBytes === undefined) {
        return callback(new Error('topic.sizeInBytes cannot be null.'));
      }
      if (topic.subscriptionCount === null || topic.subscriptionCount === undefined) {
        return callback(new Error('topic.subscriptionCount cannot be null.'));
      }
      if (topic.supportOrdering === null || topic.supportOrdering === undefined) {
        return callback(new Error('topic.supportOrdering cannot be null.'));
      }
      if (topic.updatedAt === null || topic.updatedAt === undefined) {
        return callback(new Error('topic.updatedAt cannot be null.'));
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + this.client.credentials.subscriptionId + '/services/servicebus/namespaces/' + namespaceName + '/topics/' + topic.name + '/';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/atom+xml';
    httpRequest.headers['type'] = 'entry';
    httpRequest.headers['x-ms-version'] = '2013-08-01';
    httpRequest.headers['x-process-at'] = 'ServiceBus';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    if (topic) {
      var entryElement = js2xml.createElement('entry', 'http://www.w3.org/2005/Atom');
      js2xml.addChildElement(requestDoc, entryElement);
      
      var contentElement = js2xml.createElement('content', 'http://www.w3.org/2005/Atom');
      js2xml.addChildElement(entryElement, contentElement);
      
      var typeAttribute = js2xml.createAttribute('type', '');
      js2xml.setAttributeValue(typeAttribute, 'application/atom+xml;type=entry;charset=utf-8');
      js2xml.addAttribute(contentElement, typeAttribute);
      
      var topicDescriptionElement = js2xml.createElement('TopicDescription', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.addChildElement(contentElement, topicDescriptionElement);
      
      if (topic.defaultMessageTimeToLive) {
        var defaultMessageTimeToLiveElement = js2xml.createElement('DefaultMessageTimeToLive', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        js2xml.setElementValue(defaultMessageTimeToLiveElement, topic.defaultMessageTimeToLive);
        js2xml.addChildElement(topicDescriptionElement, defaultMessageTimeToLiveElement);
      }
      
      var maxSizeInMegabytesElement = js2xml.createElement('MaxSizeInMegabytes', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(maxSizeInMegabytesElement, topic.maxSizeInMegabytes.toString());
      js2xml.addChildElement(topicDescriptionElement, maxSizeInMegabytesElement);
      
      var requiresDuplicateDetectionElement = js2xml.createElement('RequiresDuplicateDetection', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(requiresDuplicateDetectionElement, topic.requiresDuplicateDetection.toString());
      js2xml.addChildElement(topicDescriptionElement, requiresDuplicateDetectionElement);
      
      if (topic.duplicateDetectionHistoryTimeWindow) {
        var duplicateDetectionHistoryTimeWindowElement = js2xml.createElement('DuplicateDetectionHistoryTimeWindow', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        js2xml.setElementValue(duplicateDetectionHistoryTimeWindowElement, topic.duplicateDetectionHistoryTimeWindow);
        js2xml.addChildElement(topicDescriptionElement, duplicateDetectionHistoryTimeWindowElement);
      }
      
      var enableBatchedOperationsElement = js2xml.createElement('EnableBatchedOperations', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(enableBatchedOperationsElement, topic.enableBatchedOperations.toString());
      js2xml.addChildElement(topicDescriptionElement, enableBatchedOperationsElement);
      
      var sizeInBytesElement = js2xml.createElement('SizeInBytes', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(sizeInBytesElement, topic.sizeInBytes.toString());
      js2xml.addChildElement(topicDescriptionElement, sizeInBytesElement);
      
      var filteringMessagesBeforePublishingElement = js2xml.createElement('FilteringMessagesBeforePublishing', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(filteringMessagesBeforePublishingElement, topic.filteringMessagesBeforePublishing.toString());
      js2xml.addChildElement(topicDescriptionElement, filteringMessagesBeforePublishingElement);
      
      var isAnonymousAccessibleElement = js2xml.createElement('IsAnonymousAccessible', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(isAnonymousAccessibleElement, topic.isAnonymousAccessible.toString());
      js2xml.addChildElement(topicDescriptionElement, isAnonymousAccessibleElement);
      
      if (topic.authorizationRules) {
        var authorizationRulesSequenceElement = js2xml.createElement('AuthorizationRules', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        for (var loweredIndex2 = 0; loweredIndex2 < topic.authorizationRules.length; loweredIndex2 = loweredIndex2 + 1) {
          var authorizationRulesItem = topic.authorizationRules[loweredIndex2];
          var authorizationRuleElement = js2xml.createElement('AuthorizationRule', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
          js2xml.addChildElement(authorizationRulesSequenceElement, authorizationRuleElement);
          
          var typeAttribute2 = js2xml.createAttribute('type', 'http://www.w3.org/2001/XMLSchema-instance');
          js2xml.setAttributeValue(typeAttribute2, 'SharedAccessAuthorizationRule');
          js2xml.addAttribute(authorizationRuleElement, typeAttribute2);
          
          if (authorizationRulesItem.claimType) {
            var claimTypeElement = js2xml.createElement('ClaimType', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
            js2xml.setElementValue(claimTypeElement, authorizationRulesItem.claimType);
            js2xml.addChildElement(authorizationRuleElement, claimTypeElement);
          }
          
          if (authorizationRulesItem.claimValue) {
            var claimValueElement = js2xml.createElement('ClaimValue', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
            js2xml.setElementValue(claimValueElement, authorizationRulesItem.claimValue);
            js2xml.addChildElement(authorizationRuleElement, claimValueElement);
          }
          
          if (authorizationRulesItem.rights) {
            var rightsSequenceElement = js2xml.createElement('Rights', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
            for (var loweredIndex3 = 0; loweredIndex3 < authorizationRulesItem.rights.length; loweredIndex3 = loweredIndex3 + 1) {
              var rightsItem = authorizationRulesItem.rights[loweredIndex3];
              var rightsItemElement = js2xml.createElement('AccessRights', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
              js2xml.setElementValue(rightsItemElement, rightsItem ? rightsItem.toString() : 'Listen');
              js2xml.addChildElement(rightsSequenceElement, rightsItemElement);
            }
            js2xml.addChildElement(authorizationRuleElement, rightsSequenceElement);
          }
          
          var createdTimeElement = js2xml.createElement('CreatedTime', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
          js2xml.setElementValue(createdTimeElement, authorizationRulesItem.createdTime.toString());
          js2xml.addChildElement(authorizationRuleElement, createdTimeElement);
          
          if (authorizationRulesItem.keyName) {
            var keyNameElement = js2xml.createElement('KeyName', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
            js2xml.setElementValue(keyNameElement, authorizationRulesItem.keyName);
            js2xml.addChildElement(authorizationRuleElement, keyNameElement);
          }
          
          var modifiedTimeElement = js2xml.createElement('ModifiedTime', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
          js2xml.setElementValue(modifiedTimeElement, authorizationRulesItem.modifiedTime.toString());
          js2xml.addChildElement(authorizationRuleElement, modifiedTimeElement);
          
          if (authorizationRulesItem.primaryKey) {
            var primaryKeyElement = js2xml.createElement('PrimaryKey', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
            js2xml.setElementValue(primaryKeyElement, authorizationRulesItem.primaryKey);
            js2xml.addChildElement(authorizationRuleElement, primaryKeyElement);
          }
          
          if (authorizationRulesItem.secondaryKey) {
            var secondaryKeyElement = js2xml.createElement('SecondaryKey', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
            js2xml.setElementValue(secondaryKeyElement, authorizationRulesItem.secondaryKey);
            js2xml.addChildElement(authorizationRuleElement, secondaryKeyElement);
          }
        }
        js2xml.addChildElement(topicDescriptionElement, authorizationRulesSequenceElement);
      }
      
      if (topic.status) {
        var statusElement = js2xml.createElement('Status', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        js2xml.setElementValue(statusElement, topic.status);
        js2xml.addChildElement(topicDescriptionElement, statusElement);
      }
      
      var createdAtElement = js2xml.createElement('CreatedAt', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(createdAtElement, topic.createdAt.toString());
      js2xml.addChildElement(topicDescriptionElement, createdAtElement);
      
      var updatedAtElement = js2xml.createElement('UpdatedAt', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(updatedAtElement, topic.updatedAt.toString());
      js2xml.addChildElement(topicDescriptionElement, updatedAtElement);
      
      var accessedAtElement = js2xml.createElement('AccessedAt', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(accessedAtElement, topic.accessedAt.toString());
      js2xml.addChildElement(topicDescriptionElement, accessedAtElement);
      
      var supportOrderingElement = js2xml.createElement('SupportOrdering', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(supportOrderingElement, topic.supportOrdering.toString());
      js2xml.addChildElement(topicDescriptionElement, supportOrderingElement);
      
      if (topic.countDetails) {
        var countDetailsElement = js2xml.createElement('CountDetails', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        js2xml.addChildElement(topicDescriptionElement, countDetailsElement);
        
        var activeMessageCountElement = js2xml.createElement('ActiveMessageCount', 'http://schemas.microsoft.com/netservices/2011/06/servicebus');
        js2xml.setElementValue(activeMessageCountElement, topic.countDetails.activeMessageCount.toString());
        js2xml.addChildElement(countDetailsElement, activeMessageCountElement);
        
        var deadLetterMessageCountElement = js2xml.createElement('DeadLetterMessageCount', 'http://schemas.microsoft.com/netservices/2011/06/servicebus');
        js2xml.setElementValue(deadLetterMessageCountElement, topic.countDetails.deadLetterMessageCount.toString());
        js2xml.addChildElement(countDetailsElement, deadLetterMessageCountElement);
        
        var scheduledMessageCountElement = js2xml.createElement('ScheduledMessageCount', 'http://schemas.microsoft.com/netservices/2011/06/servicebus');
        js2xml.setElementValue(scheduledMessageCountElement, topic.countDetails.scheduledMessageCount.toString());
        js2xml.addChildElement(countDetailsElement, scheduledMessageCountElement);
        
        var transferDeadLetterMessageCountElement = js2xml.createElement('TransferDeadLetterMessageCount', 'http://schemas.microsoft.com/netservices/2011/06/servicebus');
        js2xml.setElementValue(transferDeadLetterMessageCountElement, topic.countDetails.transferDeadLetterMessageCount.toString());
        js2xml.addChildElement(countDetailsElement, transferDeadLetterMessageCountElement);
        
        var transferMessageCountElement = js2xml.createElement('TransferMessageCount', 'http://schemas.microsoft.com/netservices/2011/06/servicebus');
        js2xml.setElementValue(transferMessageCountElement, topic.countDetails.transferMessageCount.toString());
        js2xml.addChildElement(countDetailsElement, transferMessageCountElement);
      }
      
      var subscriptionCountElement = js2xml.createElement('SubscriptionCount', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(subscriptionCountElement, topic.subscriptionCount.toString());
      js2xml.addChildElement(topicDescriptionElement, subscriptionCountElement);
      
      if (topic.autoDeleteOnIdle) {
        var autoDeleteOnIdleElement = js2xml.createElement('AutoDeleteOnIdle', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        js2xml.setElementValue(autoDeleteOnIdleElement, topic.autoDeleteOnIdle);
        js2xml.addChildElement(topicDescriptionElement, autoDeleteOnIdleElement);
      }
      
      if (topic.entityAvailabilityStatus) {
        var entityAvailabilityStatusElement = js2xml.createElement('EntityAvailabilityStatus', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        js2xml.setElementValue(entityAvailabilityStatusElement, topic.entityAvailabilityStatus);
        js2xml.addChildElement(topicDescriptionElement, entityAvailabilityStatusElement);
      }
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 201) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var entryElement2 = js2xml.getElement(responseDoc, responseDoc, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM');
        if (entryElement2) {
          var titleElement = js2xml.getElement(responseDoc, entryElement2, 'TITLE', 'HTTP://WWW.W3.ORG/2005/ATOM');
          if (titleElement) {
          }
          
          var contentElement2 = js2xml.getElement(responseDoc, entryElement2, 'CONTENT', 'HTTP://WWW.W3.ORG/2005/ATOM');
          if (contentElement2) {
            var topicDescriptionElement2 = js2xml.getElement(responseDoc, contentElement2, 'TOPICDESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
            if (topicDescriptionElement2) {
              var topicDescriptionInstance = { authorizationRules: [] };
              result.topic = topicDescriptionInstance;
              
              var defaultMessageTimeToLiveElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'DEFAULTMESSAGETIMETOLIVE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (defaultMessageTimeToLiveElement2) {
                var defaultMessageTimeToLiveInstance = defaultMessageTimeToLiveElement2;
                topicDescriptionInstance.defaultMessageTimeToLive = defaultMessageTimeToLiveInstance;
              }
              
              var maxSizeInMegabytesElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'MAXSIZEINMEGABYTES', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (maxSizeInMegabytesElement2) {
                var maxSizeInMegabytesInstance = parseInt(maxSizeInMegabytesElement2, 10);
                topicDescriptionInstance.maxSizeInMegabytes = maxSizeInMegabytesInstance;
              }
              
              var requiresDuplicateDetectionElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'REQUIRESDUPLICATEDETECTION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (requiresDuplicateDetectionElement2) {
                var requiresDuplicateDetectionInstance = requiresDuplicateDetectionElement2;
                topicDescriptionInstance.requiresDuplicateDetection = requiresDuplicateDetectionInstance;
              }
              
              var duplicateDetectionHistoryTimeWindowElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'DUPLICATEDETECTIONHISTORYTIMEWINDOW', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (duplicateDetectionHistoryTimeWindowElement2) {
                var duplicateDetectionHistoryTimeWindowInstance = duplicateDetectionHistoryTimeWindowElement2;
                topicDescriptionInstance.duplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindowInstance;
              }
              
              var enableBatchedOperationsElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'ENABLEBATCHEDOPERATIONS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (enableBatchedOperationsElement2) {
                var enableBatchedOperationsInstance = enableBatchedOperationsElement2;
                topicDescriptionInstance.enableBatchedOperations = enableBatchedOperationsInstance;
              }
              
              var sizeInBytesElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'SIZEINBYTES', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (sizeInBytesElement2) {
                var sizeInBytesInstance = parseInt(sizeInBytesElement2, 10);
                topicDescriptionInstance.sizeInBytes = sizeInBytesInstance;
              }
              
              var filteringMessagesBeforePublishingElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'FILTERINGMESSAGESBEFOREPUBLISHING', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (filteringMessagesBeforePublishingElement2) {
                var filteringMessagesBeforePublishingInstance = filteringMessagesBeforePublishingElement2;
                topicDescriptionInstance.filteringMessagesBeforePublishing = filteringMessagesBeforePublishingInstance;
              }
              
              var isAnonymousAccessibleElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'ISANONYMOUSACCESSIBLE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (isAnonymousAccessibleElement2) {
                var isAnonymousAccessibleInstance = isAnonymousAccessibleElement2;
                topicDescriptionInstance.isAnonymousAccessible = isAnonymousAccessibleInstance;
              }
              
              var authorizationRulesSequenceElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'AUTHORIZATIONRULES', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (authorizationRulesSequenceElement2) {
                for (var loweredIndex4 = 0; loweredIndex4 < js2xml.getElements(responseDoc, authorizationRulesSequenceElement2, 'AUTHORIZATIONRULE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex4 = loweredIndex4 + 1) {
                  var authorizationRulesElement = js2xml.getElements(responseDoc, authorizationRulesSequenceElement2, 'AUTHORIZATIONRULE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex4];
                  var authorizationRuleInstance = { rights: [] };
                  topicDescriptionInstance.authorizationRules.push(authorizationRuleInstance);
                  
                  var claimTypeElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'CLAIMTYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (claimTypeElement2) {
                    var claimTypeInstance = claimTypeElement2;
                    authorizationRuleInstance.claimType = claimTypeInstance;
                  }
                  
                  var claimValueElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'CLAIMVALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (claimValueElement2) {
                    var claimValueInstance = claimValueElement2;
                    authorizationRuleInstance.claimValue = claimValueInstance;
                  }
                  
                  var rightsSequenceElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'RIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (rightsSequenceElement2) {
                    for (var loweredIndex5 = 0; loweredIndex5 < js2xml.getElements(responseDoc, rightsSequenceElement2, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex5 = loweredIndex5 + 1) {
                      var rightsElement = js2xml.getElements(responseDoc, rightsSequenceElement2, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex5];
                      authorizationRuleInstance.rights.push(rightsElement);
                    }
                  }
                  
                  var createdTimeElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'CREATEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (createdTimeElement2) {
                    var createdTimeInstance = new Date(createdTimeElement2);
                    authorizationRuleInstance.createdTime = createdTimeInstance;
                  }
                  
                  var keyNameElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'KEYNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (keyNameElement2) {
                    var keyNameInstance = keyNameElement2;
                    authorizationRuleInstance.keyName = keyNameInstance;
                  }
                  
                  var modifiedTimeElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'MODIFIEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (modifiedTimeElement2) {
                    var modifiedTimeInstance = new Date(modifiedTimeElement2);
                    authorizationRuleInstance.modifiedTime = modifiedTimeInstance;
                  }
                  
                  var primaryKeyElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'PRIMARYKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (primaryKeyElement2) {
                    var primaryKeyInstance = primaryKeyElement2;
                    authorizationRuleInstance.primaryKey = primaryKeyInstance;
                  }
                  
                  var secondaryKeyElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'SECONDARYKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (secondaryKeyElement2) {
                    var secondaryKeyInstance = secondaryKeyElement2;
                    authorizationRuleInstance.secondaryKey = secondaryKeyInstance;
                  }
                }
              }
              
              var statusElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (statusElement2) {
                var statusInstance = statusElement2;
                topicDescriptionInstance.status = statusInstance;
              }
              
              var createdAtElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'CREATEDAT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (createdAtElement2) {
                var createdAtInstance = new Date(createdAtElement2);
                topicDescriptionInstance.createdAt = createdAtInstance;
              }
              
              var updatedAtElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'UPDATEDAT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (updatedAtElement2) {
                var updatedAtInstance = new Date(updatedAtElement2);
                topicDescriptionInstance.updatedAt = updatedAtInstance;
              }
              
              var accessedAtElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'ACCESSEDAT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (accessedAtElement2) {
                var accessedAtInstance = new Date(accessedAtElement2);
                topicDescriptionInstance.accessedAt = accessedAtInstance;
              }
              
              var supportOrderingElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'SUPPORTORDERING', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (supportOrderingElement2) {
                var supportOrderingInstance = supportOrderingElement2;
                topicDescriptionInstance.supportOrdering = supportOrderingInstance;
              }
              
              var countDetailsElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'COUNTDETAILS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (countDetailsElement2) {
                var countDetailsInstance = {};
                topicDescriptionInstance.countDetails = countDetailsInstance;
              }
              
              var subscriptionCountElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'SUBSCRIPTIONCOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (subscriptionCountElement2) {
                var subscriptionCountInstance = parseInt(subscriptionCountElement2, 10);
                topicDescriptionInstance.subscriptionCount = subscriptionCountInstance;
              }
              
              var autoDeleteOnIdleElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'AUTODELETEONIDLE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (autoDeleteOnIdleElement2) {
                var autoDeleteOnIdleInstance = autoDeleteOnIdleElement2;
                topicDescriptionInstance.autoDeleteOnIdle = autoDeleteOnIdleInstance;
              }
              
              var entityAvailabilityStatusElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'ENTITYAVAILABILITYSTATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (entityAvailabilityStatusElement2) {
                var entityAvailabilityStatusInstance = entityAvailabilityStatusElement2;
                topicDescriptionInstance.entityAvailabilityStatus = entityAvailabilityStatusInstance;
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * The topic description is an XML AtomPub document that defines the desired
   * semantics for a topic. The topic description contains the following
   * properties. For more information, see the TopicDescription Properties
   * topic.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/hh780749.aspx for
   * more information)
   *
   * @param {String} namespaceName
   *
   * @param {String} topicName
   *
   * @param {Function} callback
   *
   * @returns {ServiceBusTopicResponse} - A response to a request for a
   * particular topic.
   */
  TopicOperations.prototype.get = function(namespaceName, topicName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + this.client.credentials.subscriptionId + '/services/servicebus/namespaces/' + namespaceName + '/topics/' + topicName;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml; charset=utf-8';
    httpRequest.headers['x-ms-version'] = '2013-08-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var entryElement = js2xml.getElement(responseDoc, responseDoc, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM');
        if (entryElement) {
          var titleElement = js2xml.getElement(responseDoc, entryElement, 'TITLE', 'HTTP://WWW.W3.ORG/2005/ATOM');
          if (titleElement) {
          }
          
          var contentElement = js2xml.getElement(responseDoc, entryElement, 'CONTENT', 'HTTP://WWW.W3.ORG/2005/ATOM');
          if (contentElement) {
            var topicDescriptionElement = js2xml.getElement(responseDoc, contentElement, 'TOPICDESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
            if (topicDescriptionElement) {
              var topicDescriptionInstance = { authorizationRules: [] };
              result.topic = topicDescriptionInstance;
              
              var defaultMessageTimeToLiveElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'DEFAULTMESSAGETIMETOLIVE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (defaultMessageTimeToLiveElement) {
                var defaultMessageTimeToLiveInstance = defaultMessageTimeToLiveElement;
                topicDescriptionInstance.defaultMessageTimeToLive = defaultMessageTimeToLiveInstance;
              }
              
              var maxSizeInMegabytesElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'MAXSIZEINMEGABYTES', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (maxSizeInMegabytesElement) {
                var maxSizeInMegabytesInstance = parseInt(maxSizeInMegabytesElement, 10);
                topicDescriptionInstance.maxSizeInMegabytes = maxSizeInMegabytesInstance;
              }
              
              var requiresDuplicateDetectionElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'REQUIRESDUPLICATEDETECTION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (requiresDuplicateDetectionElement) {
                var requiresDuplicateDetectionInstance = requiresDuplicateDetectionElement;
                topicDescriptionInstance.requiresDuplicateDetection = requiresDuplicateDetectionInstance;
              }
              
              var duplicateDetectionHistoryTimeWindowElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'DUPLICATEDETECTIONHISTORYTIMEWINDOW', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (duplicateDetectionHistoryTimeWindowElement) {
                var duplicateDetectionHistoryTimeWindowInstance = duplicateDetectionHistoryTimeWindowElement;
                topicDescriptionInstance.duplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindowInstance;
              }
              
              var enableBatchedOperationsElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'ENABLEBATCHEDOPERATIONS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (enableBatchedOperationsElement) {
                var enableBatchedOperationsInstance = enableBatchedOperationsElement;
                topicDescriptionInstance.enableBatchedOperations = enableBatchedOperationsInstance;
              }
              
              var sizeInBytesElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'SIZEINBYTES', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (sizeInBytesElement) {
                var sizeInBytesInstance = parseInt(sizeInBytesElement, 10);
                topicDescriptionInstance.sizeInBytes = sizeInBytesInstance;
              }
              
              var filteringMessagesBeforePublishingElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'FILTERINGMESSAGESBEFOREPUBLISHING', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (filteringMessagesBeforePublishingElement) {
                var filteringMessagesBeforePublishingInstance = filteringMessagesBeforePublishingElement;
                topicDescriptionInstance.filteringMessagesBeforePublishing = filteringMessagesBeforePublishingInstance;
              }
              
              var isAnonymousAccessibleElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'ISANONYMOUSACCESSIBLE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (isAnonymousAccessibleElement) {
                var isAnonymousAccessibleInstance = isAnonymousAccessibleElement;
                topicDescriptionInstance.isAnonymousAccessible = isAnonymousAccessibleInstance;
              }
              
              var authorizationRulesSequenceElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'AUTHORIZATIONRULES', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (authorizationRulesSequenceElement) {
                for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, authorizationRulesSequenceElement, 'AUTHORIZATIONRULE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex1 = loweredIndex1 + 1) {
                  var authorizationRulesElement = js2xml.getElements(responseDoc, authorizationRulesSequenceElement, 'AUTHORIZATIONRULE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex1];
                  var authorizationRuleInstance = { rights: [] };
                  topicDescriptionInstance.authorizationRules.push(authorizationRuleInstance);
                  
                  var claimTypeElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'CLAIMTYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (claimTypeElement) {
                    var claimTypeInstance = claimTypeElement;
                    authorizationRuleInstance.claimType = claimTypeInstance;
                  }
                  
                  var claimValueElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'CLAIMVALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (claimValueElement) {
                    var claimValueInstance = claimValueElement;
                    authorizationRuleInstance.claimValue = claimValueInstance;
                  }
                  
                  var rightsSequenceElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'RIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (rightsSequenceElement) {
                    for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, rightsSequenceElement, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex2 = loweredIndex2 + 1) {
                      var rightsElement = js2xml.getElements(responseDoc, rightsSequenceElement, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex2];
                      authorizationRuleInstance.rights.push(rightsElement);
                    }
                  }
                  
                  var createdTimeElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'CREATEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (createdTimeElement) {
                    var createdTimeInstance = new Date(createdTimeElement);
                    authorizationRuleInstance.createdTime = createdTimeInstance;
                  }
                  
                  var keyNameElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'KEYNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (keyNameElement) {
                    var keyNameInstance = keyNameElement;
                    authorizationRuleInstance.keyName = keyNameInstance;
                  }
                  
                  var modifiedTimeElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'MODIFIEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (modifiedTimeElement) {
                    var modifiedTimeInstance = new Date(modifiedTimeElement);
                    authorizationRuleInstance.modifiedTime = modifiedTimeInstance;
                  }
                  
                  var primaryKeyElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'PRIMARYKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (primaryKeyElement) {
                    var primaryKeyInstance = primaryKeyElement;
                    authorizationRuleInstance.primaryKey = primaryKeyInstance;
                  }
                  
                  var secondaryKeyElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'SECONDARYKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (secondaryKeyElement) {
                    var secondaryKeyInstance = secondaryKeyElement;
                    authorizationRuleInstance.secondaryKey = secondaryKeyInstance;
                  }
                }
              }
              
              var statusElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (statusElement) {
                var statusInstance = statusElement;
                topicDescriptionInstance.status = statusInstance;
              }
              
              var createdAtElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'CREATEDAT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (createdAtElement) {
                var createdAtInstance = new Date(createdAtElement);
                topicDescriptionInstance.createdAt = createdAtInstance;
              }
              
              var updatedAtElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'UPDATEDAT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (updatedAtElement) {
                var updatedAtInstance = new Date(updatedAtElement);
                topicDescriptionInstance.updatedAt = updatedAtInstance;
              }
              
              var accessedAtElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'ACCESSEDAT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (accessedAtElement) {
                var accessedAtInstance = new Date(accessedAtElement);
                topicDescriptionInstance.accessedAt = accessedAtInstance;
              }
              
              var supportOrderingElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'SUPPORTORDERING', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (supportOrderingElement) {
                var supportOrderingInstance = supportOrderingElement;
                topicDescriptionInstance.supportOrdering = supportOrderingInstance;
              }
              
              var countDetailsElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'COUNTDETAILS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (countDetailsElement) {
                var countDetailsInstance = {};
                topicDescriptionInstance.countDetails = countDetailsInstance;
              }
              
              var subscriptionCountElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'SUBSCRIPTIONCOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (subscriptionCountElement) {
                var subscriptionCountInstance = parseInt(subscriptionCountElement, 10);
                topicDescriptionInstance.subscriptionCount = subscriptionCountInstance;
              }
              
              var autoDeleteOnIdleElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'AUTODELETEONIDLE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (autoDeleteOnIdleElement) {
                var autoDeleteOnIdleInstance = autoDeleteOnIdleElement;
                topicDescriptionInstance.autoDeleteOnIdle = autoDeleteOnIdleInstance;
              }
              
              var entityAvailabilityStatusElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'ENTITYAVAILABILITYSTATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (entityAvailabilityStatusElement) {
                var entityAvailabilityStatusInstance = entityAvailabilityStatusElement;
                topicDescriptionInstance.entityAvailabilityStatus = entityAvailabilityStatusInstance;
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Gets the set of connection strings for a topic.
   *
   * @param {String} namespaceName
   *
   * @param {String} topicName
   *
   * @param {Function} callback
   *
   * @returns {ServiceBusConnectionDetailsResponse} - The set of connection
   * details for a service bus entity.
   */
  TopicOperations.prototype.getConnectionDetails = function(namespaceName, topicName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + this.client.credentials.subscriptionId + '/services/servicebus/namespaces/' + namespaceName + '/Topics/' + topicName + '/ConnectionDetails';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml; charset=utf-8';
    httpRequest.headers['x-ms-version'] = '2013-08-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { connectionDetails: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var feedElement = js2xml.getElement(responseDoc, responseDoc, 'FEED', 'HTTP://WWW.W3.ORG/2005/ATOM');
        if (feedElement) {
          if (feedElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, feedElement, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM').length; loweredIndex1 = loweredIndex1 + 1) {
              var entriesElement = js2xml.getElements(responseDoc, feedElement, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM')[loweredIndex1];
              var entryInstance = { rights: [] };
              result.connectionDetails.push(entryInstance);
              
              var contentElement = js2xml.getElement(responseDoc, entriesElement, 'CONTENT', 'HTTP://WWW.W3.ORG/2005/ATOM');
              if (contentElement) {
                var connectionDetailElement = js2xml.getElement(responseDoc, contentElement, 'CONNECTIONDETAIL', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                if (connectionDetailElement) {
                  var keyNameElement = js2xml.getElement(responseDoc, connectionDetailElement, 'KEYNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (keyNameElement) {
                    var keyNameInstance = keyNameElement;
                    entryInstance.keyName = keyNameInstance;
                  }
                  
                  var connectionStringElement = js2xml.getElement(responseDoc, connectionDetailElement, 'CONNECTIONSTRING', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (connectionStringElement) {
                    var connectionStringInstance = connectionStringElement;
                    entryInstance.connectionString = connectionStringInstance;
                  }
                  
                  var authorizationTypeElement = js2xml.getElement(responseDoc, connectionDetailElement, 'AUTHORIZATIONTYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (authorizationTypeElement) {
                    var authorizationTypeInstance = authorizationTypeElement;
                    entryInstance.authorizationType = authorizationTypeInstance;
                  }
                  
                  var rightsSequenceElement = js2xml.getElement(responseDoc, connectionDetailElement, 'RIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (rightsSequenceElement) {
                    for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, rightsSequenceElement, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex2 = loweredIndex2 + 1) {
                      var rightsElement = js2xml.getElements(responseDoc, rightsSequenceElement, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex2];
                      entryInstance.rights.push(rightsElement);
                    }
                  }
                }
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Enumerates the topics in the service namespace. An empty feed is returned
   * if no topic exists in the service namespace.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/hh780744.aspx for
   * more information)
   *
   * @param {String} namespaceName
   *
   * @param {Function} callback
   *
   * @returns {ServiceBusTopicsResponse} - A response to a request for a list
   * of topics.
   */
  TopicOperations.prototype.list = function(namespaceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + this.client.credentials.subscriptionId + '/services/servicebus/namespaces/' + namespaceName + '/topics/';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml; charset=utf-8';
    httpRequest.headers['x-ms-version'] = '2013-08-01';
    
    // Set Credentials
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = { topics: [] };
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var feedElement = js2xml.getElement(responseDoc, responseDoc, 'FEED', 'HTTP://WWW.W3.ORG/2005/ATOM');
        if (feedElement) {
          if (feedElement) {
            for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, feedElement, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM').length; loweredIndex1 = loweredIndex1 + 1) {
              var entriesElement = js2xml.getElements(responseDoc, feedElement, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM')[loweredIndex1];
              var entryInstance = { authorizationRules: [] };
              result.topics.push(entryInstance);
              
              var titleElement = js2xml.getElement(responseDoc, entriesElement, 'TITLE', 'HTTP://WWW.W3.ORG/2005/ATOM');
              if (titleElement) {
                var titleInstance = titleElement;
                entryInstance.name = titleInstance;
              }
              
              var contentElement = js2xml.getElement(responseDoc, entriesElement, 'CONTENT', 'HTTP://WWW.W3.ORG/2005/ATOM');
              if (contentElement) {
                var topicDescriptionElement = js2xml.getElement(responseDoc, contentElement, 'TOPICDESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                if (topicDescriptionElement) {
                  var defaultMessageTimeToLiveElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'DEFAULTMESSAGETIMETOLIVE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (defaultMessageTimeToLiveElement) {
                    var defaultMessageTimeToLiveInstance = defaultMessageTimeToLiveElement;
                    entryInstance.defaultMessageTimeToLive = defaultMessageTimeToLiveInstance;
                  }
                  
                  var maxSizeInMegabytesElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'MAXSIZEINMEGABYTES', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (maxSizeInMegabytesElement) {
                    var maxSizeInMegabytesInstance = parseInt(maxSizeInMegabytesElement, 10);
                    entryInstance.maxSizeInMegabytes = maxSizeInMegabytesInstance;
                  }
                  
                  var requiresDuplicateDetectionElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'REQUIRESDUPLICATEDETECTION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (requiresDuplicateDetectionElement) {
                    var requiresDuplicateDetectionInstance = requiresDuplicateDetectionElement;
                    entryInstance.requiresDuplicateDetection = requiresDuplicateDetectionInstance;
                  }
                  
                  var duplicateDetectionHistoryTimeWindowElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'DUPLICATEDETECTIONHISTORYTIMEWINDOW', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (duplicateDetectionHistoryTimeWindowElement) {
                    var duplicateDetectionHistoryTimeWindowInstance = duplicateDetectionHistoryTimeWindowElement;
                    entryInstance.duplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindowInstance;
                  }
                  
                  var enableBatchedOperationsElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'ENABLEBATCHEDOPERATIONS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (enableBatchedOperationsElement) {
                    var enableBatchedOperationsInstance = enableBatchedOperationsElement;
                    entryInstance.enableBatchedOperations = enableBatchedOperationsInstance;
                  }
                  
                  var sizeInBytesElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'SIZEINBYTES', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (sizeInBytesElement) {
                    var sizeInBytesInstance = parseInt(sizeInBytesElement, 10);
                    entryInstance.sizeInBytes = sizeInBytesInstance;
                  }
                  
                  var filteringMessagesBeforePublishingElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'FILTERINGMESSAGESBEFOREPUBLISHING', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (filteringMessagesBeforePublishingElement) {
                    var filteringMessagesBeforePublishingInstance = filteringMessagesBeforePublishingElement;
                    entryInstance.filteringMessagesBeforePublishing = filteringMessagesBeforePublishingInstance;
                  }
                  
                  var isAnonymousAccessibleElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'ISANONYMOUSACCESSIBLE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (isAnonymousAccessibleElement) {
                    var isAnonymousAccessibleInstance = isAnonymousAccessibleElement;
                    entryInstance.isAnonymousAccessible = isAnonymousAccessibleInstance;
                  }
                  
                  var authorizationRulesSequenceElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'AUTHORIZATIONRULES', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (authorizationRulesSequenceElement) {
                    for (var loweredIndex2 = 0; loweredIndex2 < js2xml.getElements(responseDoc, authorizationRulesSequenceElement, 'AUTHORIZATIONRULE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex2 = loweredIndex2 + 1) {
                      var authorizationRulesElement = js2xml.getElements(responseDoc, authorizationRulesSequenceElement, 'AUTHORIZATIONRULE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex2];
                      var authorizationRuleInstance = { rights: [] };
                      entryInstance.authorizationRules.push(authorizationRuleInstance);
                      
                      var claimTypeElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'CLAIMTYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                      if (claimTypeElement) {
                        var claimTypeInstance = claimTypeElement;
                        authorizationRuleInstance.claimType = claimTypeInstance;
                      }
                      
                      var claimValueElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'CLAIMVALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                      if (claimValueElement) {
                        var claimValueInstance = claimValueElement;
                        authorizationRuleInstance.claimValue = claimValueInstance;
                      }
                      
                      var rightsSequenceElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'RIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                      if (rightsSequenceElement) {
                        for (var loweredIndex3 = 0; loweredIndex3 < js2xml.getElements(responseDoc, rightsSequenceElement, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex3 = loweredIndex3 + 1) {
                          var rightsElement = js2xml.getElements(responseDoc, rightsSequenceElement, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex3];
                          authorizationRuleInstance.rights.push(rightsElement);
                        }
                      }
                      
                      var createdTimeElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'CREATEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                      if (createdTimeElement) {
                        var createdTimeInstance = new Date(createdTimeElement);
                        authorizationRuleInstance.createdTime = createdTimeInstance;
                      }
                      
                      var keyNameElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'KEYNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                      if (keyNameElement) {
                        var keyNameInstance = keyNameElement;
                        authorizationRuleInstance.keyName = keyNameInstance;
                      }
                      
                      var modifiedTimeElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'MODIFIEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                      if (modifiedTimeElement) {
                        var modifiedTimeInstance = new Date(modifiedTimeElement);
                        authorizationRuleInstance.modifiedTime = modifiedTimeInstance;
                      }
                      
                      var primaryKeyElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'PRIMARYKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                      if (primaryKeyElement) {
                        var primaryKeyInstance = primaryKeyElement;
                        authorizationRuleInstance.primaryKey = primaryKeyInstance;
                      }
                      
                      var secondaryKeyElement = js2xml.getElement(responseDoc, authorizationRulesElement, 'SECONDARYKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                      if (secondaryKeyElement) {
                        var secondaryKeyInstance = secondaryKeyElement;
                        authorizationRuleInstance.secondaryKey = secondaryKeyInstance;
                      }
                    }
                  }
                  
                  var statusElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (statusElement) {
                    var statusInstance = statusElement;
                    entryInstance.status = statusInstance;
                  }
                  
                  var createdAtElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'CREATEDAT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (createdAtElement) {
                    var createdAtInstance = new Date(createdAtElement);
                    entryInstance.createdAt = createdAtInstance;
                  }
                  
                  var updatedAtElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'UPDATEDAT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (updatedAtElement) {
                    var updatedAtInstance = new Date(updatedAtElement);
                    entryInstance.updatedAt = updatedAtInstance;
                  }
                  
                  var accessedAtElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'ACCESSEDAT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (accessedAtElement) {
                    var accessedAtInstance = new Date(accessedAtElement);
                    entryInstance.accessedAt = accessedAtInstance;
                  }
                  
                  var supportOrderingElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'SUPPORTORDERING', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (supportOrderingElement) {
                    var supportOrderingInstance = supportOrderingElement;
                    entryInstance.supportOrdering = supportOrderingInstance;
                  }
                  
                  var countDetailsElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'COUNTDETAILS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (countDetailsElement) {
                    var countDetailsInstance = {};
                    entryInstance.countDetails = countDetailsInstance;
                  }
                  
                  var subscriptionCountElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'SUBSCRIPTIONCOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (subscriptionCountElement) {
                    var subscriptionCountInstance = parseInt(subscriptionCountElement, 10);
                    entryInstance.subscriptionCount = subscriptionCountInstance;
                  }
                  
                  var autoDeleteOnIdleElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'AUTODELETEONIDLE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (autoDeleteOnIdleElement) {
                    var autoDeleteOnIdleInstance = autoDeleteOnIdleElement;
                    entryInstance.autoDeleteOnIdle = autoDeleteOnIdleInstance;
                  }
                  
                  var entityAvailabilityStatusElement = js2xml.getElement(responseDoc, topicDescriptionElement, 'ENTITYAVAILABILITYSTATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (entityAvailabilityStatusElement) {
                    var entityAvailabilityStatusInstance = entityAvailabilityStatusElement;
                    entryInstance.entityAvailabilityStatus = entityAvailabilityStatusInstance;
                  }
                }
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Updates a topic.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj839740.aspx for
   * more information)
   *
   * @param {String} namespaceName
   *
   * @param {ServiceBusTopic} topic
   *
   * @param {Function} callback
   *
   * @returns {ServiceBusTopicResponse} - A response to a request for a
   * particular topic.
   */
  TopicOperations.prototype.update = function(namespaceName, topic, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (topic) {
      if (topic.accessedAt === null || topic.accessedAt === undefined) {
        return callback(new Error('topic.accessedAt cannot be null.'));
      }
      for (var loweredIndex1 = 0; loweredIndex1 < topic.authorizationRules.length; loweredIndex1 = loweredIndex1 + 1) {
        var authorizationRulesParameterItem = topic.authorizationRules[loweredIndex1];
        if (authorizationRulesParameterItem.createdTime === null || authorizationRulesParameterItem.createdTime === undefined) {
          return callback(new Error('topic.authorizationRules.createdTime cannot be null.'));
        }
        if (authorizationRulesParameterItem.modifiedTime === null || authorizationRulesParameterItem.modifiedTime === undefined) {
          return callback(new Error('topic.authorizationRules.modifiedTime cannot be null.'));
        }
        if (authorizationRulesParameterItem.revision === null || authorizationRulesParameterItem.revision === undefined) {
          return callback(new Error('topic.authorizationRules.revision cannot be null.'));
        }
      }
      if (topic.countDetails) {
        if (topic.countDetails.activeMessageCount === null || topic.countDetails.activeMessageCount === undefined) {
          return callback(new Error('topic.countDetails.activeMessageCount cannot be null.'));
        }
        if (topic.countDetails.deadLetterMessageCount === null || topic.countDetails.deadLetterMessageCount === undefined) {
          return callback(new Error('topic.countDetails.deadLetterMessageCount cannot be null.'));
        }
        if (topic.countDetails.scheduledMessageCount === null || topic.countDetails.scheduledMessageCount === undefined) {
          return callback(new Error('topic.countDetails.scheduledMessageCount cannot be null.'));
        }
        if (topic.countDetails.transferDeadLetterMessageCount === null || topic.countDetails.transferDeadLetterMessageCount === undefined) {
          return callback(new Error('topic.countDetails.transferDeadLetterMessageCount cannot be null.'));
        }
        if (topic.countDetails.transferMessageCount === null || topic.countDetails.transferMessageCount === undefined) {
          return callback(new Error('topic.countDetails.transferMessageCount cannot be null.'));
        }
      }
      if (topic.createdAt === null || topic.createdAt === undefined) {
        return callback(new Error('topic.createdAt cannot be null.'));
      }
      if (topic.enableBatchedOperations === null || topic.enableBatchedOperations === undefined) {
        return callback(new Error('topic.enableBatchedOperations cannot be null.'));
      }
      if (topic.filteringMessagesBeforePublishing === null || topic.filteringMessagesBeforePublishing === undefined) {
        return callback(new Error('topic.filteringMessagesBeforePublishing cannot be null.'));
      }
      if (topic.isAnonymousAccessible === null || topic.isAnonymousAccessible === undefined) {
        return callback(new Error('topic.isAnonymousAccessible cannot be null.'));
      }
      if (topic.maxSizeInMegabytes === null || topic.maxSizeInMegabytes === undefined) {
        return callback(new Error('topic.maxSizeInMegabytes cannot be null.'));
      }
      if (topic.requiresDuplicateDetection === null || topic.requiresDuplicateDetection === undefined) {
        return callback(new Error('topic.requiresDuplicateDetection cannot be null.'));
      }
      if (topic.sizeInBytes === null || topic.sizeInBytes === undefined) {
        return callback(new Error('topic.sizeInBytes cannot be null.'));
      }
      if (topic.subscriptionCount === null || topic.subscriptionCount === undefined) {
        return callback(new Error('topic.subscriptionCount cannot be null.'));
      }
      if (topic.supportOrdering === null || topic.supportOrdering === undefined) {
        return callback(new Error('topic.supportOrdering cannot be null.'));
      }
      if (topic.updatedAt === null || topic.updatedAt === undefined) {
        return callback(new Error('topic.updatedAt cannot be null.'));
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + this.client.credentials.subscriptionId + '/services/servicebus/namespaces/' + namespaceName + '/topics/' + topic.name + '/';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/atom+xml';
    httpRequest.headers['if-match'] = '*';
    httpRequest.headers['type'] = 'entry';
    httpRequest.headers['x-ms-version'] = '2013-08-01';
    httpRequest.headers['x-process-at'] = 'ServiceBus';
    
    // Set Credentials
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    if (topic) {
      var entryElement = js2xml.createElement('entry', 'http://www.w3.org/2005/Atom');
      js2xml.addChildElement(requestDoc, entryElement);
      
      var contentElement = js2xml.createElement('content', 'http://www.w3.org/2005/Atom');
      js2xml.addChildElement(entryElement, contentElement);
      
      var typeAttribute = js2xml.createAttribute('type', '');
      js2xml.setAttributeValue(typeAttribute, 'application/atom+xml;type=entry;charset=utf-8');
      js2xml.addAttribute(contentElement, typeAttribute);
      
      var topicDescriptionElement = js2xml.createElement('TopicDescription', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.addChildElement(contentElement, topicDescriptionElement);
      
      if (topic.defaultMessageTimeToLive) {
        var defaultMessageTimeToLiveElement = js2xml.createElement('DefaultMessageTimeToLive', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        js2xml.setElementValue(defaultMessageTimeToLiveElement, topic.defaultMessageTimeToLive);
        js2xml.addChildElement(topicDescriptionElement, defaultMessageTimeToLiveElement);
      }
      
      var maxSizeInMegabytesElement = js2xml.createElement('MaxSizeInMegabytes', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(maxSizeInMegabytesElement, topic.maxSizeInMegabytes.toString());
      js2xml.addChildElement(topicDescriptionElement, maxSizeInMegabytesElement);
      
      var requiresDuplicateDetectionElement = js2xml.createElement('RequiresDuplicateDetection', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(requiresDuplicateDetectionElement, topic.requiresDuplicateDetection.toString());
      js2xml.addChildElement(topicDescriptionElement, requiresDuplicateDetectionElement);
      
      if (topic.duplicateDetectionHistoryTimeWindow) {
        var duplicateDetectionHistoryTimeWindowElement = js2xml.createElement('DuplicateDetectionHistoryTimeWindow', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        js2xml.setElementValue(duplicateDetectionHistoryTimeWindowElement, topic.duplicateDetectionHistoryTimeWindow);
        js2xml.addChildElement(topicDescriptionElement, duplicateDetectionHistoryTimeWindowElement);
      }
      
      var enableBatchedOperationsElement = js2xml.createElement('EnableBatchedOperations', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(enableBatchedOperationsElement, topic.enableBatchedOperations.toString());
      js2xml.addChildElement(topicDescriptionElement, enableBatchedOperationsElement);
      
      var sizeInBytesElement = js2xml.createElement('SizeInBytes', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(sizeInBytesElement, topic.sizeInBytes.toString());
      js2xml.addChildElement(topicDescriptionElement, sizeInBytesElement);
      
      var filteringMessagesBeforePublishingElement = js2xml.createElement('FilteringMessagesBeforePublishing', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(filteringMessagesBeforePublishingElement, topic.filteringMessagesBeforePublishing.toString());
      js2xml.addChildElement(topicDescriptionElement, filteringMessagesBeforePublishingElement);
      
      var isAnonymousAccessibleElement = js2xml.createElement('IsAnonymousAccessible', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(isAnonymousAccessibleElement, topic.isAnonymousAccessible.toString());
      js2xml.addChildElement(topicDescriptionElement, isAnonymousAccessibleElement);
      
      if (topic.authorizationRules) {
        var authorizationRulesSequenceElement = js2xml.createElement('AuthorizationRules', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        for (var loweredIndex2 = 0; loweredIndex2 < topic.authorizationRules.length; loweredIndex2 = loweredIndex2 + 1) {
          var authorizationRulesItem = topic.authorizationRules[loweredIndex2];
          var authorizationRuleElement = js2xml.createElement('AuthorizationRule', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
          js2xml.addChildElement(authorizationRulesSequenceElement, authorizationRuleElement);
          
          var typeAttribute2 = js2xml.createAttribute('type', 'http://www.w3.org/2001/XMLSchema-instance');
          js2xml.setAttributeValue(typeAttribute2, 'SharedAccessAuthorizationRule');
          js2xml.addAttribute(authorizationRuleElement, typeAttribute2);
          
          if (authorizationRulesItem.claimType) {
            var claimTypeElement = js2xml.createElement('ClaimType', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
            js2xml.setElementValue(claimTypeElement, authorizationRulesItem.claimType);
            js2xml.addChildElement(authorizationRuleElement, claimTypeElement);
          }
          
          if (authorizationRulesItem.claimValue) {
            var claimValueElement = js2xml.createElement('ClaimValue', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
            js2xml.setElementValue(claimValueElement, authorizationRulesItem.claimValue);
            js2xml.addChildElement(authorizationRuleElement, claimValueElement);
          }
          
          if (authorizationRulesItem.rights) {
            var rightsSequenceElement = js2xml.createElement('Rights', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
            for (var loweredIndex3 = 0; loweredIndex3 < authorizationRulesItem.rights.length; loweredIndex3 = loweredIndex3 + 1) {
              var rightsItem = authorizationRulesItem.rights[loweredIndex3];
              var rightsItemElement = js2xml.createElement('AccessRights', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
              js2xml.setElementValue(rightsItemElement, rightsItem ? rightsItem.toString() : 'Listen');
              js2xml.addChildElement(rightsSequenceElement, rightsItemElement);
            }
            js2xml.addChildElement(authorizationRuleElement, rightsSequenceElement);
          }
          
          var createdTimeElement = js2xml.createElement('CreatedTime', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
          js2xml.setElementValue(createdTimeElement, authorizationRulesItem.createdTime.toString());
          js2xml.addChildElement(authorizationRuleElement, createdTimeElement);
          
          if (authorizationRulesItem.keyName) {
            var keyNameElement = js2xml.createElement('KeyName', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
            js2xml.setElementValue(keyNameElement, authorizationRulesItem.keyName);
            js2xml.addChildElement(authorizationRuleElement, keyNameElement);
          }
          
          var modifiedTimeElement = js2xml.createElement('ModifiedTime', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
          js2xml.setElementValue(modifiedTimeElement, authorizationRulesItem.modifiedTime.toString());
          js2xml.addChildElement(authorizationRuleElement, modifiedTimeElement);
          
          if (authorizationRulesItem.primaryKey) {
            var primaryKeyElement = js2xml.createElement('PrimaryKey', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
            js2xml.setElementValue(primaryKeyElement, authorizationRulesItem.primaryKey);
            js2xml.addChildElement(authorizationRuleElement, primaryKeyElement);
          }
          
          if (authorizationRulesItem.secondaryKey) {
            var secondaryKeyElement = js2xml.createElement('SecondaryKey', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
            js2xml.setElementValue(secondaryKeyElement, authorizationRulesItem.secondaryKey);
            js2xml.addChildElement(authorizationRuleElement, secondaryKeyElement);
          }
        }
        js2xml.addChildElement(topicDescriptionElement, authorizationRulesSequenceElement);
      }
      
      if (topic.status) {
        var statusElement = js2xml.createElement('Status', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        js2xml.setElementValue(statusElement, topic.status);
        js2xml.addChildElement(topicDescriptionElement, statusElement);
      }
      
      var createdAtElement = js2xml.createElement('CreatedAt', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(createdAtElement, topic.createdAt.toString());
      js2xml.addChildElement(topicDescriptionElement, createdAtElement);
      
      var updatedAtElement = js2xml.createElement('UpdatedAt', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(updatedAtElement, topic.updatedAt.toString());
      js2xml.addChildElement(topicDescriptionElement, updatedAtElement);
      
      var accessedAtElement = js2xml.createElement('AccessedAt', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(accessedAtElement, topic.accessedAt.toString());
      js2xml.addChildElement(topicDescriptionElement, accessedAtElement);
      
      var supportOrderingElement = js2xml.createElement('SupportOrdering', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(supportOrderingElement, topic.supportOrdering.toString());
      js2xml.addChildElement(topicDescriptionElement, supportOrderingElement);
      
      if (topic.countDetails) {
        var countDetailsElement = js2xml.createElement('CountDetails', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        js2xml.addChildElement(topicDescriptionElement, countDetailsElement);
        
        var activeMessageCountElement = js2xml.createElement('ActiveMessageCount', 'http://schemas.microsoft.com/netservices/2011/06/servicebus');
        js2xml.setElementValue(activeMessageCountElement, topic.countDetails.activeMessageCount.toString());
        js2xml.addChildElement(countDetailsElement, activeMessageCountElement);
        
        var deadLetterMessageCountElement = js2xml.createElement('DeadLetterMessageCount', 'http://schemas.microsoft.com/netservices/2011/06/servicebus');
        js2xml.setElementValue(deadLetterMessageCountElement, topic.countDetails.deadLetterMessageCount.toString());
        js2xml.addChildElement(countDetailsElement, deadLetterMessageCountElement);
        
        var scheduledMessageCountElement = js2xml.createElement('ScheduledMessageCount', 'http://schemas.microsoft.com/netservices/2011/06/servicebus');
        js2xml.setElementValue(scheduledMessageCountElement, topic.countDetails.scheduledMessageCount.toString());
        js2xml.addChildElement(countDetailsElement, scheduledMessageCountElement);
        
        var transferDeadLetterMessageCountElement = js2xml.createElement('TransferDeadLetterMessageCount', 'http://schemas.microsoft.com/netservices/2011/06/servicebus');
        js2xml.setElementValue(transferDeadLetterMessageCountElement, topic.countDetails.transferDeadLetterMessageCount.toString());
        js2xml.addChildElement(countDetailsElement, transferDeadLetterMessageCountElement);
        
        var transferMessageCountElement = js2xml.createElement('TransferMessageCount', 'http://schemas.microsoft.com/netservices/2011/06/servicebus');
        js2xml.setElementValue(transferMessageCountElement, topic.countDetails.transferMessageCount.toString());
        js2xml.addChildElement(countDetailsElement, transferMessageCountElement);
      }
      
      var subscriptionCountElement = js2xml.createElement('SubscriptionCount', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
      js2xml.setElementValue(subscriptionCountElement, topic.subscriptionCount.toString());
      js2xml.addChildElement(topicDescriptionElement, subscriptionCountElement);
      
      if (topic.autoDeleteOnIdle) {
        var autoDeleteOnIdleElement = js2xml.createElement('AutoDeleteOnIdle', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        js2xml.setElementValue(autoDeleteOnIdleElement, topic.autoDeleteOnIdle);
        js2xml.addChildElement(topicDescriptionElement, autoDeleteOnIdleElement);
      }
      
      if (topic.entityAvailabilityStatus) {
        var entityAvailabilityStatusElement = js2xml.createElement('EntityAvailabilityStatus', 'http://schemas.microsoft.com/netservices/2010/10/servicebus/connect');
        js2xml.setElementValue(entityAvailabilityStatusElement, topic.entityAvailabilityStatus);
        js2xml.addChildElement(topicDescriptionElement, entityAvailabilityStatusElement);
      }
    }
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      // Deserialize Response
      var responseContent = body;
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var entryElement2 = js2xml.getElement(responseDoc, responseDoc, 'ENTRY', 'HTTP://WWW.W3.ORG/2005/ATOM');
        if (entryElement2) {
          var titleElement = js2xml.getElement(responseDoc, entryElement2, 'TITLE', 'HTTP://WWW.W3.ORG/2005/ATOM');
          if (titleElement) {
          }
          
          var contentElement2 = js2xml.getElement(responseDoc, entryElement2, 'CONTENT', 'HTTP://WWW.W3.ORG/2005/ATOM');
          if (contentElement2) {
            var topicDescriptionElement2 = js2xml.getElement(responseDoc, contentElement2, 'TOPICDESCRIPTION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
            if (topicDescriptionElement2) {
              var topicDescriptionInstance = { authorizationRules: [] };
              result.topic = topicDescriptionInstance;
              
              var defaultMessageTimeToLiveElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'DEFAULTMESSAGETIMETOLIVE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (defaultMessageTimeToLiveElement2) {
                var defaultMessageTimeToLiveInstance = defaultMessageTimeToLiveElement2;
                topicDescriptionInstance.defaultMessageTimeToLive = defaultMessageTimeToLiveInstance;
              }
              
              var maxSizeInMegabytesElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'MAXSIZEINMEGABYTES', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (maxSizeInMegabytesElement2) {
                var maxSizeInMegabytesInstance = parseInt(maxSizeInMegabytesElement2, 10);
                topicDescriptionInstance.maxSizeInMegabytes = maxSizeInMegabytesInstance;
              }
              
              var requiresDuplicateDetectionElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'REQUIRESDUPLICATEDETECTION', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (requiresDuplicateDetectionElement2) {
                var requiresDuplicateDetectionInstance = requiresDuplicateDetectionElement2;
                topicDescriptionInstance.requiresDuplicateDetection = requiresDuplicateDetectionInstance;
              }
              
              var duplicateDetectionHistoryTimeWindowElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'DUPLICATEDETECTIONHISTORYTIMEWINDOW', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (duplicateDetectionHistoryTimeWindowElement2) {
                var duplicateDetectionHistoryTimeWindowInstance = duplicateDetectionHistoryTimeWindowElement2;
                topicDescriptionInstance.duplicateDetectionHistoryTimeWindow = duplicateDetectionHistoryTimeWindowInstance;
              }
              
              var enableBatchedOperationsElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'ENABLEBATCHEDOPERATIONS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (enableBatchedOperationsElement2) {
                var enableBatchedOperationsInstance = enableBatchedOperationsElement2;
                topicDescriptionInstance.enableBatchedOperations = enableBatchedOperationsInstance;
              }
              
              var sizeInBytesElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'SIZEINBYTES', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (sizeInBytesElement2) {
                var sizeInBytesInstance = parseInt(sizeInBytesElement2, 10);
                topicDescriptionInstance.sizeInBytes = sizeInBytesInstance;
              }
              
              var filteringMessagesBeforePublishingElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'FILTERINGMESSAGESBEFOREPUBLISHING', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (filteringMessagesBeforePublishingElement2) {
                var filteringMessagesBeforePublishingInstance = filteringMessagesBeforePublishingElement2;
                topicDescriptionInstance.filteringMessagesBeforePublishing = filteringMessagesBeforePublishingInstance;
              }
              
              var isAnonymousAccessibleElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'ISANONYMOUSACCESSIBLE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (isAnonymousAccessibleElement2) {
                var isAnonymousAccessibleInstance = isAnonymousAccessibleElement2;
                topicDescriptionInstance.isAnonymousAccessible = isAnonymousAccessibleInstance;
              }
              
              var authorizationRulesSequenceElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'AUTHORIZATIONRULES', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (authorizationRulesSequenceElement2) {
                for (var loweredIndex4 = 0; loweredIndex4 < js2xml.getElements(responseDoc, authorizationRulesSequenceElement2, 'AUTHORIZATIONRULE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex4 = loweredIndex4 + 1) {
                  var authorizationRulesElement = js2xml.getElements(responseDoc, authorizationRulesSequenceElement2, 'AUTHORIZATIONRULE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex4];
                  var authorizationRuleInstance = { rights: [] };
                  topicDescriptionInstance.authorizationRules.push(authorizationRuleInstance);
                  
                  var claimTypeElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'CLAIMTYPE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (claimTypeElement2) {
                    var claimTypeInstance = claimTypeElement2;
                    authorizationRuleInstance.claimType = claimTypeInstance;
                  }
                  
                  var claimValueElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'CLAIMVALUE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (claimValueElement2) {
                    var claimValueInstance = claimValueElement2;
                    authorizationRuleInstance.claimValue = claimValueInstance;
                  }
                  
                  var rightsSequenceElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'RIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (rightsSequenceElement2) {
                    for (var loweredIndex5 = 0; loweredIndex5 < js2xml.getElements(responseDoc, rightsSequenceElement2, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT').length; loweredIndex5 = loweredIndex5 + 1) {
                      var rightsElement = js2xml.getElements(responseDoc, rightsSequenceElement2, 'ACCESSRIGHTS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT')[loweredIndex5];
                      authorizationRuleInstance.rights.push(rightsElement);
                    }
                  }
                  
                  var createdTimeElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'CREATEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (createdTimeElement2) {
                    var createdTimeInstance = new Date(createdTimeElement2);
                    authorizationRuleInstance.createdTime = createdTimeInstance;
                  }
                  
                  var keyNameElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'KEYNAME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (keyNameElement2) {
                    var keyNameInstance = keyNameElement2;
                    authorizationRuleInstance.keyName = keyNameInstance;
                  }
                  
                  var modifiedTimeElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'MODIFIEDTIME', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (modifiedTimeElement2) {
                    var modifiedTimeInstance = new Date(modifiedTimeElement2);
                    authorizationRuleInstance.modifiedTime = modifiedTimeInstance;
                  }
                  
                  var primaryKeyElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'PRIMARYKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (primaryKeyElement2) {
                    var primaryKeyInstance = primaryKeyElement2;
                    authorizationRuleInstance.primaryKey = primaryKeyInstance;
                  }
                  
                  var secondaryKeyElement2 = js2xml.getElement(responseDoc, authorizationRulesElement, 'SECONDARYKEY', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
                  if (secondaryKeyElement2) {
                    var secondaryKeyInstance = secondaryKeyElement2;
                    authorizationRuleInstance.secondaryKey = secondaryKeyInstance;
                  }
                }
              }
              
              var statusElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'STATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (statusElement2) {
                var statusInstance = statusElement2;
                topicDescriptionInstance.status = statusInstance;
              }
              
              var createdAtElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'CREATEDAT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (createdAtElement2) {
                var createdAtInstance = new Date(createdAtElement2);
                topicDescriptionInstance.createdAt = createdAtInstance;
              }
              
              var updatedAtElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'UPDATEDAT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (updatedAtElement2) {
                var updatedAtInstance = new Date(updatedAtElement2);
                topicDescriptionInstance.updatedAt = updatedAtInstance;
              }
              
              var accessedAtElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'ACCESSEDAT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (accessedAtElement2) {
                var accessedAtInstance = new Date(accessedAtElement2);
                topicDescriptionInstance.accessedAt = accessedAtInstance;
              }
              
              var supportOrderingElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'SUPPORTORDERING', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (supportOrderingElement2) {
                var supportOrderingInstance = supportOrderingElement2;
                topicDescriptionInstance.supportOrdering = supportOrderingInstance;
              }
              
              var countDetailsElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'COUNTDETAILS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (countDetailsElement2) {
                var countDetailsInstance = {};
                topicDescriptionInstance.countDetails = countDetailsInstance;
              }
              
              var subscriptionCountElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'SUBSCRIPTIONCOUNT', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (subscriptionCountElement2) {
                var subscriptionCountInstance = parseInt(subscriptionCountElement2, 10);
                topicDescriptionInstance.subscriptionCount = subscriptionCountInstance;
              }
              
              var autoDeleteOnIdleElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'AUTODELETEONIDLE', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (autoDeleteOnIdleElement2) {
                var autoDeleteOnIdleInstance = autoDeleteOnIdleElement2;
                topicDescriptionInstance.autoDeleteOnIdle = autoDeleteOnIdleInstance;
              }
              
              var entityAvailabilityStatusElement2 = js2xml.getElement(responseDoc, topicDescriptionElement2, 'ENTITYAVAILABILITYSTATUS', 'HTTP://SCHEMAS.MICROSOFT.COM/NETSERVICES/2010/10/SERVICEBUS/CONNECT');
              if (entityAvailabilityStatusElement2) {
                var entityAvailabilityStatusInstance = entityAvailabilityStatusElement2;
                topicDescriptionInstance.entityAvailabilityStatus = entityAvailabilityStatusInstance;
              }
            }
          }
        }
        
        return callback(null, result);
      });
    });
  };
  
  return TopicOperations;
})();
