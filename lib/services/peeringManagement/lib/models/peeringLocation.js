/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Peering location is where connectivity could be established to the Microsoft
 * Cloud Edge.
 *
 */
class PeeringLocation {
  /**
   * Create a PeeringLocation.
   * @property {string} [kind] The kind of peering that the peering location
   * supports. Possible values include: 'Direct', 'Exchange'
   * @property {object} [direct] The properties that define a direct peering
   * location.
   * @property {array} [direct.peeringFacilities] The list of direct peering
   * facilities at the peering location.
   * @property {array} [direct.bandwidthOffers] The list of bandwidth offers
   * avaiable at the peering location.
   * @property {object} [exchange] The properties that define an exchange
   * peering location.
   * @property {array} [exchange.peeringFacilities] The list of exchange
   * peering facilities at the peering location.
   * @property {string} [peeringLocation] The name of the peering location.
   * @property {string} [country] The country in which the peering location
   * exists.
   * @property {string} [azureRegion] The Azure region associated with the
   * peering location.
   * @property {string} [name] The name of the resource.
   * @property {string} [id] The ID of the resource.
   * @property {string} [type] The type of the resource.
   */
  constructor() {
  }

  /**
   * Defines the metadata of PeeringLocation
   *
   * @returns {object} metadata of PeeringLocation
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'PeeringLocation',
      type: {
        name: 'Composite',
        className: 'PeeringLocation',
        modelProperties: {
          kind: {
            required: false,
            serializedName: 'kind',
            type: {
              name: 'String'
            }
          },
          direct: {
            required: false,
            serializedName: 'properties.direct',
            type: {
              name: 'Composite',
              className: 'PeeringLocationPropertiesDirect'
            }
          },
          exchange: {
            required: false,
            serializedName: 'properties.exchange',
            type: {
              name: 'Composite',
              className: 'PeeringLocationPropertiesExchange'
            }
          },
          peeringLocation: {
            required: false,
            serializedName: 'properties.peeringLocation',
            type: {
              name: 'String'
            }
          },
          country: {
            required: false,
            serializedName: 'properties.country',
            type: {
              name: 'String'
            }
          },
          azureRegion: {
            required: false,
            serializedName: 'properties.azureRegion',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = PeeringLocation;
