/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Peering is a logical representation of a set of connections to the Microsoft
 * Cloud Edge at a location.
 *
 * @extends models['Resource']
 */
class Peering extends models['Resource'] {
  /**
   * Create a Peering.
   * @property {object} sku The SKU that defines the tier and kind of the
   * peering.
   * @property {string} [sku.name] The name of the peering SKU. Possible values
   * include: 'Basic_Exchange_Free', 'Basic_Direct_Free',
   * 'Premium_Direct_Free', 'Premium_Exchange_Metered'
   * @property {string} [sku.tier] The tier of the peering SKU. Possible values
   * include: 'Basic', 'Premium'
   * @property {string} [sku.family] The family of the peering SKU. Possible
   * values include: 'Direct', 'Exchange'
   * @property {string} [sku.size] The size of the peering SKU. Possible values
   * include: 'Free', 'Metered', 'Unlimited'
   * @property {string} kind The kind of the peering. Possible values include:
   * 'Direct', 'Exchange'
   * @property {object} [direct] The properties that define a direct peering.
   * @property {array} [direct.connections] The set of connections that
   * constitute a direct peering.
   * @property {boolean} [direct.useForPeeringService] The flag that indicates
   * whether or not the peering is used for peering service.
   * @property {object} [direct.peerAsn] The reference of the peer ASN.
   * @property {string} [direct.peerAsn.id] The identifier of the referenced
   * resource.
   * @property {object} [exchange] The properties that define an exchange
   * peering.
   * @property {array} [exchange.connections] The set of connections that
   * constitute an exchange peering.
   * @property {object} [exchange.peerAsn] The reference of the peer ASN.
   * @property {string} [exchange.peerAsn.id] The identifier of the referenced
   * resource.
   * @property {string} [peeringLocation] The location of the peering.
   * @property {string} [provisioningState] The provisioning state of the
   * resource. Possible values include: 'Succeeded', 'Updating', 'Deleting',
   * 'Failed'
   * @property {string} location The location of the resource.
   * @property {object} [tags] The resource tags.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Peering
   *
   * @returns {object} metadata of Peering
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Peering',
      type: {
        name: 'Composite',
        className: 'Peering',
        modelProperties: {
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          sku: {
            required: true,
            serializedName: 'sku',
            type: {
              name: 'Composite',
              className: 'PeeringSku'
            }
          },
          kind: {
            required: true,
            serializedName: 'kind',
            type: {
              name: 'String'
            }
          },
          direct: {
            required: false,
            serializedName: 'properties.direct',
            type: {
              name: 'Composite',
              className: 'PeeringPropertiesDirect'
            }
          },
          exchange: {
            required: false,
            serializedName: 'properties.exchange',
            type: {
              name: 'Composite',
              className: 'PeeringPropertiesExchange'
            }
          },
          peeringLocation: {
            required: false,
            serializedName: 'properties.peeringLocation',
            type: {
              name: 'String'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = Peering;
