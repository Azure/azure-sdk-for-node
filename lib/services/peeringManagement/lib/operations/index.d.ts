/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * LegacyPeerings
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PeeringManagementClient.
 */
export interface LegacyPeerings {


    /**
     * Lists all of the legacy peerings under the given subscription matching the
     * specified kind and location.
     *
     * @param {string} peeringLocation The location of the peering.
     *
     * @param {string} kind The kind of the peering. Possible values include:
     * 'Direct', 'Exchange'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PeeringListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(peeringLocation: string, kind: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PeeringListResult>>;

    /**
     * Lists all of the legacy peerings under the given subscription matching the
     * specified kind and location.
     *
     * @param {string} peeringLocation The location of the peering.
     *
     * @param {string} kind The kind of the peering. Possible values include:
     * 'Direct', 'Exchange'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PeeringListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PeeringListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PeeringListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(peeringLocation: string, kind: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PeeringListResult>;
    list(peeringLocation: string, kind: string, callback: ServiceCallback<models.PeeringListResult>): void;
    list(peeringLocation: string, kind: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PeeringListResult>): void;


    /**
     * Lists all of the legacy peerings under the given subscription matching the
     * specified kind and location.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PeeringListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PeeringListResult>>;

    /**
     * Lists all of the legacy peerings under the given subscription matching the
     * specified kind and location.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PeeringListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PeeringListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PeeringListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PeeringListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.PeeringListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PeeringListResult>): void;
}

/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PeeringManagementClient.
 */
export interface Operations {


    /**
     * Lists all of the available API operations for peering resources.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available API operations for peering resources.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(callback: ServiceCallback<models.OperationListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;


    /**
     * Lists all of the available API operations for peering resources.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available API operations for peering resources.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}

/**
 * @class
 * PeeringLocations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PeeringManagementClient.
 */
export interface PeeringLocations {


    /**
     * Lists all of the available peering locations for the specified kind of
     * peering.
     *
     * @param {string} kind The kind of the peering. Possible values include:
     * 'Direct', 'Exchange'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PeeringLocationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(kind: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PeeringLocationListResult>>;

    /**
     * Lists all of the available peering locations for the specified kind of
     * peering.
     *
     * @param {string} kind The kind of the peering. Possible values include:
     * 'Direct', 'Exchange'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PeeringLocationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PeeringLocationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PeeringLocationListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(kind: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PeeringLocationListResult>;
    list(kind: string, callback: ServiceCallback<models.PeeringLocationListResult>): void;
    list(kind: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PeeringLocationListResult>): void;


    /**
     * Lists all of the available peering locations for the specified kind of
     * peering.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PeeringLocationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PeeringLocationListResult>>;

    /**
     * Lists all of the available peering locations for the specified kind of
     * peering.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PeeringLocationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PeeringLocationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PeeringLocationListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PeeringLocationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.PeeringLocationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PeeringLocationListResult>): void;
}

/**
 * @class
 * Peerings
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the PeeringManagementClient.
 */
export interface Peerings {


    /**
     * Gets an existing peering with the specified name under the given
     * subscription and resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Peering>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, peeringName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Peering>>;

    /**
     * Gets an existing peering with the specified name under the given
     * subscription and resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Peering} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Peering} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Peering} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, peeringName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Peering>;
    get(resourceGroupName: string, peeringName: string, callback: ServiceCallback<models.Peering>): void;
    get(resourceGroupName: string, peeringName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Peering>): void;


    /**
     * Creates a new peering or updates an existing peering with the specified name
     * under the given subscription and resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} peering The properties needed to create or update a peering.
     *
     * @param {object} peering.sku The SKU that defines the tier and kind of the
     * peering.
     *
     * @param {string} [peering.sku.name] The name of the peering SKU. Possible
     * values include: 'Basic_Exchange_Free', 'Basic_Direct_Free',
     * 'Premium_Direct_Free', 'Premium_Exchange_Metered'
     *
     * @param {string} [peering.sku.tier] The tier of the peering SKU. Possible
     * values include: 'Basic', 'Premium'
     *
     * @param {string} [peering.sku.family] The family of the peering SKU. Possible
     * values include: 'Direct', 'Exchange'
     *
     * @param {string} [peering.sku.size] The size of the peering SKU. Possible
     * values include: 'Free', 'Metered', 'Unlimited'
     *
     * @param {string} peering.kind The kind of the peering. Possible values
     * include: 'Direct', 'Exchange'
     *
     * @param {object} [peering.direct] The properties that define a direct
     * peering.
     *
     * @param {array} [peering.direct.connections] The set of connections that
     * constitute a direct peering.
     *
     * @param {number} [peering.direct.peerAsn] The Autonomous System Number (ASN)
     * associated with the peering.
     *
     * @param {boolean} [peering.direct.useForPeeringService] The flag that
     * indicates whether or not the peering is used for peering service.
     *
     * @param {object} [peering.exchange] The properties that define an exchange
     * peering.
     *
     * @param {array} [peering.exchange.connections] The set of connections that
     * constitute an exchange peering.
     *
     * @param {number} [peering.exchange.peerAsn] The Autonomous System Number
     * (ASN) associated with the peering.
     *
     * @param {string} [peering.peeringLocation] The location of the peering.
     *
     * @param {string} peering.location The location of the resource.
     *
     * @param {object} [peering.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Peering>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, peeringName: string, peering: models.Peering, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Peering>>;

    /**
     * Creates a new peering or updates an existing peering with the specified name
     * under the given subscription and resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} peering The properties needed to create or update a peering.
     *
     * @param {object} peering.sku The SKU that defines the tier and kind of the
     * peering.
     *
     * @param {string} [peering.sku.name] The name of the peering SKU. Possible
     * values include: 'Basic_Exchange_Free', 'Basic_Direct_Free',
     * 'Premium_Direct_Free', 'Premium_Exchange_Metered'
     *
     * @param {string} [peering.sku.tier] The tier of the peering SKU. Possible
     * values include: 'Basic', 'Premium'
     *
     * @param {string} [peering.sku.family] The family of the peering SKU. Possible
     * values include: 'Direct', 'Exchange'
     *
     * @param {string} [peering.sku.size] The size of the peering SKU. Possible
     * values include: 'Free', 'Metered', 'Unlimited'
     *
     * @param {string} peering.kind The kind of the peering. Possible values
     * include: 'Direct', 'Exchange'
     *
     * @param {object} [peering.direct] The properties that define a direct
     * peering.
     *
     * @param {array} [peering.direct.connections] The set of connections that
     * constitute a direct peering.
     *
     * @param {number} [peering.direct.peerAsn] The Autonomous System Number (ASN)
     * associated with the peering.
     *
     * @param {boolean} [peering.direct.useForPeeringService] The flag that
     * indicates whether or not the peering is used for peering service.
     *
     * @param {object} [peering.exchange] The properties that define an exchange
     * peering.
     *
     * @param {array} [peering.exchange.connections] The set of connections that
     * constitute an exchange peering.
     *
     * @param {number} [peering.exchange.peerAsn] The Autonomous System Number
     * (ASN) associated with the peering.
     *
     * @param {string} [peering.peeringLocation] The location of the peering.
     *
     * @param {string} peering.location The location of the resource.
     *
     * @param {object} [peering.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Peering} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Peering} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Peering} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, peeringName: string, peering: models.Peering, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Peering>;
    createOrUpdate(resourceGroupName: string, peeringName: string, peering: models.Peering, callback: ServiceCallback<models.Peering>): void;
    createOrUpdate(resourceGroupName: string, peeringName: string, peering: models.Peering, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Peering>): void;


    /**
     * Deletes an existing peering with the specified name under the given
     * subscription and resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, peeringName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an existing peering with the specified name under the given
     * subscription and resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, peeringName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, peeringName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, peeringName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates tags for a peering with the specified name under the given
     * subscription and resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.tags] Gets or sets the tags, a dictionary of
     * descriptors arm object
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Peering>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, peeringName: string, options?: { tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Peering>>;

    /**
     * Updates tags for a peering with the specified name under the given
     * subscription and resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} peeringName The name of the peering.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.tags] Gets or sets the tags, a dictionary of
     * descriptors arm object
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Peering} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Peering} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Peering} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, peeringName: string, options?: { tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }): Promise<models.Peering>;
    update(resourceGroupName: string, peeringName: string, callback: ServiceCallback<models.Peering>): void;
    update(resourceGroupName: string, peeringName: string, options: { tags? : { [propertyName: string]: string }, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Peering>): void;


    /**
     * Lists all of the peerings under the given subscription and resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PeeringListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PeeringListResult>>;

    /**
     * Lists all of the peerings under the given subscription and resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PeeringListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PeeringListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PeeringListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PeeringListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.PeeringListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PeeringListResult>): void;


    /**
     * Lists all of the peerings under the given subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PeeringListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PeeringListResult>>;

    /**
     * Lists all of the peerings under the given subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PeeringListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PeeringListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PeeringListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscription(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PeeringListResult>;
    listBySubscription(callback: ServiceCallback<models.PeeringListResult>): void;
    listBySubscription(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PeeringListResult>): void;


    /**
     * Lists all of the peerings under the given subscription and resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PeeringListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PeeringListResult>>;

    /**
     * Lists all of the peerings under the given subscription and resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PeeringListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PeeringListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PeeringListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PeeringListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.PeeringListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PeeringListResult>): void;


    /**
     * Lists all of the peerings under the given subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PeeringListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PeeringListResult>>;

    /**
     * Lists all of the peerings under the given subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PeeringListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PeeringListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PeeringListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscriptionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PeeringListResult>;
    listBySubscriptionNext(nextPageLink: string, callback: ServiceCallback<models.PeeringListResult>): void;
    listBySubscriptionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PeeringListResult>): void;
}
