/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Describes a link to virtual network for a Private DNS zone.
 *
 * @extends models['TrackedResource']
 */
class VirtualNetworkLink extends models['TrackedResource'] {
  /**
   * Create a VirtualNetworkLink.
   * @property {string} [etag] The ETag of the virtual network link.
   * @property {object} [virtualNetwork] The reference of the virtual network.
   * @property {string} [virtualNetwork.id] Resource ID.
   * @property {boolean} [registrationEnabled] Is auto-registration of virtual
   * machine records in the virtual network in the Private DNS zone enabled?
   * @property {string} [virtualNetworkLinkState] The status of the virtual
   * network link to the Private DNS zone. Possible values are 'InProgress' and
   * 'Done'. This is a read-only property and any attempt to set this value
   * will be ignored. Possible values include: 'InProgress', 'Completed'
   * @property {string} [provisioningState] The provisioning state of the
   * resource. This is a read-only property and any attempt to set this value
   * will be ignored. Possible values include: 'Creating', 'Updating',
   * 'Deleting', 'Succeeded', 'Failed', 'Canceled'
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of VirtualNetworkLink
   *
   * @returns {object} metadata of VirtualNetworkLink
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'VirtualNetworkLink',
      type: {
        name: 'Composite',
        className: 'VirtualNetworkLink',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          etag: {
            required: false,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          },
          virtualNetwork: {
            required: false,
            serializedName: 'properties.virtualNetwork',
            type: {
              name: 'Composite',
              className: 'SubResource'
            }
          },
          registrationEnabled: {
            required: false,
            serializedName: 'properties.registrationEnabled',
            type: {
              name: 'Boolean'
            }
          },
          virtualNetworkLinkState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.virtualNetworkLinkState',
            type: {
              name: 'String'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = VirtualNetworkLink;
