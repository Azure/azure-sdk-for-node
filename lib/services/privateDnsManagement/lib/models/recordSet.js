/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Describes a DNS record set (a collection of DNS records with the same name
 * and type) in a Private DNS zone.
 *
 * @extends models['ProxyResource']
 */
class RecordSet extends models['ProxyResource'] {
  /**
   * Create a RecordSet.
   * @property {string} [etag] The ETag of the record set.
   * @property {object} [metadata] The metadata attached to the record set.
   * @property {number} [ttl] The TTL (time-to-live) of the records in the
   * record set.
   * @property {string} [fqdn] Fully qualified domain name of the record set.
   * @property {boolean} [isAutoRegistered] Is the record set auto-registered
   * in the Private DNS zone through a virtual network link?
   * @property {array} [aRecords] The list of A records in the record set.
   * @property {array} [aaaaRecords] The list of AAAA records in the record
   * set.
   * @property {object} [cnameRecord] The CNAME record in the record set.
   * @property {string} [cnameRecord.cname] The canonical name for this CNAME
   * record.
   * @property {array} [mxRecords] The list of MX records in the record set.
   * @property {array} [ptrRecords] The list of PTR records in the record set.
   * @property {object} [soaRecord] The SOA record in the record set.
   * @property {string} [soaRecord.host] The domain name of the authoritative
   * name server for this SOA record.
   * @property {string} [soaRecord.email] The email contact for this SOA
   * record.
   * @property {number} [soaRecord.serialNumber] The serial number for this SOA
   * record.
   * @property {number} [soaRecord.refreshTime] The refresh value for this SOA
   * record.
   * @property {number} [soaRecord.retryTime] The retry time for this SOA
   * record.
   * @property {number} [soaRecord.expireTime] The expire time for this SOA
   * record.
   * @property {number} [soaRecord.minimumTtl] The minimum value for this SOA
   * record. By convention this is used to determine the negative caching
   * duration.
   * @property {array} [srvRecords] The list of SRV records in the record set.
   * @property {array} [txtRecords] The list of TXT records in the record set.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of RecordSet
   *
   * @returns {object} metadata of RecordSet
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'RecordSet',
      type: {
        name: 'Composite',
        className: 'RecordSet',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          etag: {
            required: false,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          },
          metadata: {
            required: false,
            serializedName: 'properties.metadata',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          ttl: {
            required: false,
            serializedName: 'properties.ttl',
            type: {
              name: 'Number'
            }
          },
          fqdn: {
            required: false,
            readOnly: true,
            serializedName: 'properties.fqdn',
            type: {
              name: 'String'
            }
          },
          isAutoRegistered: {
            required: false,
            readOnly: true,
            serializedName: 'properties.isAutoRegistered',
            type: {
              name: 'Boolean'
            }
          },
          aRecords: {
            required: false,
            serializedName: 'properties.aRecords',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ARecordElementType',
                  type: {
                    name: 'Composite',
                    className: 'ARecord'
                  }
              }
            }
          },
          aaaaRecords: {
            required: false,
            serializedName: 'properties.aaaaRecords',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'AaaaRecordElementType',
                  type: {
                    name: 'Composite',
                    className: 'AaaaRecord'
                  }
              }
            }
          },
          cnameRecord: {
            required: false,
            serializedName: 'properties.cnameRecord',
            type: {
              name: 'Composite',
              className: 'CnameRecord'
            }
          },
          mxRecords: {
            required: false,
            serializedName: 'properties.mxRecords',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'MxRecordElementType',
                  type: {
                    name: 'Composite',
                    className: 'MxRecord'
                  }
              }
            }
          },
          ptrRecords: {
            required: false,
            serializedName: 'properties.ptrRecords',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'PtrRecordElementType',
                  type: {
                    name: 'Composite',
                    className: 'PtrRecord'
                  }
              }
            }
          },
          soaRecord: {
            required: false,
            serializedName: 'properties.soaRecord',
            type: {
              name: 'Composite',
              className: 'SoaRecord'
            }
          },
          srvRecords: {
            required: false,
            serializedName: 'properties.srvRecords',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'SrvRecordElementType',
                  type: {
                    name: 'Composite',
                    className: 'SrvRecord'
                  }
              }
            }
          },
          txtRecords: {
            required: false,
            serializedName: 'properties.txtRecords',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'TxtRecordElementType',
                  type: {
                    name: 'Composite',
                    className: 'TxtRecord'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = RecordSet;
