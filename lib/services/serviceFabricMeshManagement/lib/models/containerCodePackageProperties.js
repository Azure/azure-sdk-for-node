/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Describes a container and its runtime properties.
 *
 */
class ContainerCodePackageProperties {
  /**
   * Create a ContainerCodePackageProperties.
   * @member {string} name The name of the code package.
   * @member {string} image The Container image to use.
   * @member {object} [imageRegistryCredential] Image registry credential.
   * @member {string} [imageRegistryCredential.server] Docker image registry
   * server, without protocol such as `http` and `https`.
   * @member {string} [imageRegistryCredential.username] The username for the
   * private registry.
   * @member {string} [imageRegistryCredential.password] The password for the
   * private registry. The password is required for create or update
   * operations, however it is not returned in the get or list operations.
   * @member {string} [entrypoint] Override for the default entry point in the
   * container.
   * @member {array} [commands] Command array to execute within the container
   * in exec form.
   * @member {array} [environmentVariables] The environment variables to set in
   * this container
   * @member {array} [settings] The settings to set in this container. The
   * setting file path can be fetched from environment variable
   * "Fabric_SettingPath". The path for Windows container is "C:\\secrets". The
   * path for Linux container is "/var/secrets".
   * @member {array} [labels] The labels to set in this container.
   * @member {array} [endpoints] The endpoints exposed by this container.
   * @member {object} resources The resources required by this container.
   * @member {object} [resources.requests] Describes the requested resources
   * for a given container.
   * @member {number} [resources.requests.memoryInGB] The memory request in GB
   * for this container.
   * @member {number} [resources.requests.cpu] Requested number of CPU cores.
   * At present, only full cores are supported.
   * @member {object} [resources.limits] Describes the maximum limits on the
   * resources for a given container.
   * @member {number} [resources.limits.memoryInGB] The memory limit in GB.
   * @member {number} [resources.limits.cpu] CPU limits in cores. At present,
   * only full cores are supported.
   * @member {array} [volumeRefs] Volumes to be attached to the container. The
   * lifetime of these volumes is independent of the application's lifetime.
   * @member {array} [volumes] Volumes to be attached to the container. The
   * lifetime of these volumes is scoped to the application's lifetime.
   * @member {object} [diagnostics] Reference to sinks in
   * DiagnosticsDescription.
   * @member {boolean} [diagnostics.enabled] Status of whether or not sinks are
   * enabled.
   * @member {array} [diagnostics.sinkRefs] List of sinks to be used if
   * enabled. References the list of sinks in DiagnosticsDescription.
   * @member {array} [reliableCollectionsRefs] A list of ReliableCollection
   * resources used by this particular code package. Please refer to
   * ReliablecollectionsRef for more details.
   * @member {object} [instanceView] Runtime information of a container
   * instance.
   * @member {number} [instanceView.restartCount] The number of times the
   * container has been restarted.
   * @member {object} [instanceView.currentState] Current container instance
   * state.
   * @member {string} [instanceView.currentState.state] The state of this
   * container
   * @member {date} [instanceView.currentState.startTime] Date/time when the
   * container state started.
   * @member {string} [instanceView.currentState.exitCode] The container exit
   * code.
   * @member {date} [instanceView.currentState.finishTime] Date/time when the
   * container state finished.
   * @member {string} [instanceView.currentState.detailStatus] Human-readable
   * status of this state.
   * @member {object} [instanceView.previousState] Previous container instance
   * state.
   * @member {string} [instanceView.previousState.state] The state of this
   * container
   * @member {date} [instanceView.previousState.startTime] Date/time when the
   * container state started.
   * @member {string} [instanceView.previousState.exitCode] The container exit
   * code.
   * @member {date} [instanceView.previousState.finishTime] Date/time when the
   * container state finished.
   * @member {string} [instanceView.previousState.detailStatus] Human-readable
   * status of this state.
   * @member {array} [instanceView.events] The events of this container
   * instance.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ContainerCodePackageProperties
   *
   * @returns {object} metadata of ContainerCodePackageProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ContainerCodePackageProperties',
      type: {
        name: 'Composite',
        className: 'ContainerCodePackageProperties',
        modelProperties: {
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          image: {
            required: true,
            serializedName: 'image',
            type: {
              name: 'String'
            }
          },
          imageRegistryCredential: {
            required: false,
            serializedName: 'imageRegistryCredential',
            type: {
              name: 'Composite',
              className: 'ImageRegistryCredential'
            }
          },
          entrypoint: {
            required: false,
            serializedName: 'entrypoint',
            type: {
              name: 'String'
            }
          },
          commands: {
            required: false,
            serializedName: 'commands',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          environmentVariables: {
            required: false,
            serializedName: 'environmentVariables',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'EnvironmentVariableElementType',
                  type: {
                    name: 'Composite',
                    className: 'EnvironmentVariable'
                  }
              }
            }
          },
          settings: {
            required: false,
            serializedName: 'settings',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'SettingElementType',
                  type: {
                    name: 'Composite',
                    className: 'Setting'
                  }
              }
            }
          },
          labels: {
            required: false,
            serializedName: 'labels',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ContainerLabelElementType',
                  type: {
                    name: 'Composite',
                    className: 'ContainerLabel'
                  }
              }
            }
          },
          endpoints: {
            required: false,
            serializedName: 'endpoints',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'EndpointPropertiesElementType',
                  type: {
                    name: 'Composite',
                    className: 'EndpointProperties'
                  }
              }
            }
          },
          resources: {
            required: true,
            serializedName: 'resources',
            type: {
              name: 'Composite',
              className: 'ResourceRequirements'
            }
          },
          volumeRefs: {
            required: false,
            serializedName: 'volumeRefs',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'VolumeReferenceElementType',
                  type: {
                    name: 'Composite',
                    className: 'VolumeReference'
                  }
              }
            }
          },
          volumes: {
            required: false,
            serializedName: 'volumes',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ApplicationScopedVolumeElementType',
                  type: {
                    name: 'Composite',
                    className: 'ApplicationScopedVolume'
                  }
              }
            }
          },
          diagnostics: {
            required: false,
            serializedName: 'diagnostics',
            type: {
              name: 'Composite',
              className: 'DiagnosticsRef'
            }
          },
          reliableCollectionsRefs: {
            required: false,
            serializedName: 'reliableCollectionsRefs',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ReliableCollectionsRefElementType',
                  type: {
                    name: 'Composite',
                    className: 'ReliableCollectionsRef'
                  }
              }
            }
          },
          instanceView: {
            required: false,
            readOnly: true,
            serializedName: 'instanceView',
            type: {
              name: 'Composite',
              className: 'ContainerInstanceView'
            }
          }
        }
      }
    };
  }
}

module.exports = ContainerCodePackageProperties;
