/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * EndpointKeys
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the QnAMakerClient.
 */
export interface EndpointKeys {


    /**
     * @summary Gets endpoint keys for an endpoint
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EndpointKeysDTO>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getKeysWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EndpointKeysDTO>>;

    /**
     * @summary Gets endpoint keys for an endpoint
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EndpointKeysDTO} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EndpointKeysDTO} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EndpointKeysDTO} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getKeys(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EndpointKeysDTO>;
    getKeys(callback: ServiceCallback<models.EndpointKeysDTO>): void;
    getKeys(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EndpointKeysDTO>): void;


    /**
     * @summary Re-generates an endpoint key.
     *
     * @param {string} keyType Type of Key
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EndpointKeysDTO>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    refreshKeysWithHttpOperationResponse(keyType: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EndpointKeysDTO>>;

    /**
     * @summary Re-generates an endpoint key.
     *
     * @param {string} keyType Type of Key
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EndpointKeysDTO} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EndpointKeysDTO} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EndpointKeysDTO} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    refreshKeys(keyType: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EndpointKeysDTO>;
    refreshKeys(keyType: string, callback: ServiceCallback<models.EndpointKeysDTO>): void;
    refreshKeys(keyType: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EndpointKeysDTO>): void;
}

/**
 * @class
 * Alterations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the QnAMakerClient.
 */
export interface Alterations {


    /**
     * @summary Download alterations from runtime.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WordAlterationsDTO>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WordAlterationsDTO>>;

    /**
     * @summary Download alterations from runtime.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WordAlterationsDTO} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WordAlterationsDTO} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WordAlterationsDTO} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WordAlterationsDTO>;
    get(callback: ServiceCallback<models.WordAlterationsDTO>): void;
    get(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WordAlterationsDTO>): void;


    /**
     * @summary Replace alterations data.
     *
     * @param {object} wordAlterations New alterations data.
     *
     * @param {array} wordAlterations.wordAlterations Collection of word
     * alterations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    replaceWithHttpOperationResponse(wordAlterations: models.WordAlterationsDTO, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Replace alterations data.
     *
     * @param {object} wordAlterations New alterations data.
     *
     * @param {array} wordAlterations.wordAlterations Collection of word
     * alterations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    replace(wordAlterations: models.WordAlterationsDTO, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    replace(wordAlterations: models.WordAlterationsDTO, callback: ServiceCallback<void>): void;
    replace(wordAlterations: models.WordAlterationsDTO, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * Knowledgebase
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the QnAMakerClient.
 */
export interface Knowledgebase {


    /**
     * @summary Gets all knowledgebases for a user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<KnowledgebasesDTO>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAllWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.KnowledgebasesDTO>>;

    /**
     * @summary Gets all knowledgebases for a user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {KnowledgebasesDTO} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {KnowledgebasesDTO} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link KnowledgebasesDTO} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAll(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.KnowledgebasesDTO>;
    listAll(callback: ServiceCallback<models.KnowledgebasesDTO>): void;
    listAll(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KnowledgebasesDTO>): void;


    /**
     * @summary Gets details of a specific knowledgebase.
     *
     * @param {string} kbId Knowledgebase id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<KnowledgebaseDTO>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDetailsWithHttpOperationResponse(kbId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.KnowledgebaseDTO>>;

    /**
     * @summary Gets details of a specific knowledgebase.
     *
     * @param {string} kbId Knowledgebase id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {KnowledgebaseDTO} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {KnowledgebaseDTO} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link KnowledgebaseDTO} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDetails(kbId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.KnowledgebaseDTO>;
    getDetails(kbId: string, callback: ServiceCallback<models.KnowledgebaseDTO>): void;
    getDetails(kbId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KnowledgebaseDTO>): void;


    /**
     * @summary Deletes the knowledgebase and all its data.
     *
     * @param {string} kbId Knowledgebase id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(kbId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes the knowledgebase and all its data.
     *
     * @param {string} kbId Knowledgebase id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(kbId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(kbId: string, callback: ServiceCallback<void>): void;
    deleteMethod(kbId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Publishes all changes in test index of a knowledgebase to its prod
     * index.
     *
     * @param {string} kbId Knowledgebase id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    publishWithHttpOperationResponse(kbId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Publishes all changes in test index of a knowledgebase to its prod
     * index.
     *
     * @param {string} kbId Knowledgebase id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    publish(kbId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    publish(kbId: string, callback: ServiceCallback<void>): void;
    publish(kbId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Replace knowledgebase contents.
     *
     * @param {string} kbId Knowledgebase id.
     *
     * @param {object} replaceKb An instance of ReplaceKbDTO which contains list of
     * qnas to be uploaded
     *
     * @param {array} replaceKb.qnAList List of Q-A (QnADTO) to be added to the
     * knowledgebase. Q-A Ids are assigned by the service and should be omitted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    replaceWithHttpOperationResponse(kbId: string, replaceKb: models.ReplaceKbDTO, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Replace knowledgebase contents.
     *
     * @param {string} kbId Knowledgebase id.
     *
     * @param {object} replaceKb An instance of ReplaceKbDTO which contains list of
     * qnas to be uploaded
     *
     * @param {array} replaceKb.qnAList List of Q-A (QnADTO) to be added to the
     * knowledgebase. Q-A Ids are assigned by the service and should be omitted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    replace(kbId: string, replaceKb: models.ReplaceKbDTO, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    replace(kbId: string, replaceKb: models.ReplaceKbDTO, callback: ServiceCallback<void>): void;
    replace(kbId: string, replaceKb: models.ReplaceKbDTO, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Asynchronous operation to modify a knowledgebase.
     *
     * @param {string} kbId Knowledgebase id.
     *
     * @param {object} updateKb Post body of the request.
     *
     * @param {object} [updateKb.add] An instance of CreateKbInputDTO for add
     * operation
     *
     * @param {array} [updateKb.add.qnaList] List of QNA to be added to the index.
     * Ids are generated by the service and should be omitted.
     *
     * @param {array} [updateKb.add.urls] List of URLs to be added to
     * knowledgebase.
     *
     * @param {array} [updateKb.add.files] List of files to be added to
     * knowledgebase.
     *
     * @param {object} [updateKb.deleteProperty] An instance of DeleteKbContentsDTO
     * for delete Operation
     *
     * @param {array} [updateKb.deleteProperty.ids] List of Qna Ids to be deleted
     *
     * @param {array} [updateKb.deleteProperty.sources] List of sources to be
     * deleted from knowledgebase.
     *
     * @param {object} [updateKb.update] An instance of UpdateKbContentsDTO for
     * Update Operation
     *
     * @param {string} [updateKb.update.name] Friendly name for the knowledgebase.
     *
     * @param {array} [updateKb.update.qnaList] List of Q-A (UpdateQnaDTO) to be
     * added to the knowledgebase.
     *
     * @param {array} [updateKb.update.urls] List of existing URLs to be refreshed.
     * The content will be extracted again and re-indexed.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Operation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(kbId: string, updateKb: models.UpdateKbOperationDTO, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Operation>>;

    /**
     * @summary Asynchronous operation to modify a knowledgebase.
     *
     * @param {string} kbId Knowledgebase id.
     *
     * @param {object} updateKb Post body of the request.
     *
     * @param {object} [updateKb.add] An instance of CreateKbInputDTO for add
     * operation
     *
     * @param {array} [updateKb.add.qnaList] List of QNA to be added to the index.
     * Ids are generated by the service and should be omitted.
     *
     * @param {array} [updateKb.add.urls] List of URLs to be added to
     * knowledgebase.
     *
     * @param {array} [updateKb.add.files] List of files to be added to
     * knowledgebase.
     *
     * @param {object} [updateKb.deleteProperty] An instance of DeleteKbContentsDTO
     * for delete Operation
     *
     * @param {array} [updateKb.deleteProperty.ids] List of Qna Ids to be deleted
     *
     * @param {array} [updateKb.deleteProperty.sources] List of sources to be
     * deleted from knowledgebase.
     *
     * @param {object} [updateKb.update] An instance of UpdateKbContentsDTO for
     * Update Operation
     *
     * @param {string} [updateKb.update.name] Friendly name for the knowledgebase.
     *
     * @param {array} [updateKb.update.qnaList] List of Q-A (UpdateQnaDTO) to be
     * added to the knowledgebase.
     *
     * @param {array} [updateKb.update.urls] List of existing URLs to be refreshed.
     * The content will be extracted again and re-indexed.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Operation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Operation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Operation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(kbId: string, updateKb: models.UpdateKbOperationDTO, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Operation>;
    update(kbId: string, updateKb: models.UpdateKbOperationDTO, callback: ServiceCallback<models.Operation>): void;
    update(kbId: string, updateKb: models.UpdateKbOperationDTO, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Operation>): void;


    /**
     * @summary Asynchronous operation to create a new knowledgebase.
     *
     * @param {object} createKbPayload Post body of the request.
     *
     * @param {string} createKbPayload.name Friendly name for the knowledgebase.
     *
     * @param {array} [createKbPayload.qnaList] List of Q-A (QnADTO) to be added to
     * the knowledgebase. Q-A Ids are assigned by the service and should be
     * omitted.
     *
     * @param {array} [createKbPayload.urls] List of URLs to be used for extracting
     * Q-A.
     *
     * @param {array} [createKbPayload.files] List of files from which to Extract
     * Q-A.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Operation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(createKbPayload: models.CreateKbDTO, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Operation>>;

    /**
     * @summary Asynchronous operation to create a new knowledgebase.
     *
     * @param {object} createKbPayload Post body of the request.
     *
     * @param {string} createKbPayload.name Friendly name for the knowledgebase.
     *
     * @param {array} [createKbPayload.qnaList] List of Q-A (QnADTO) to be added to
     * the knowledgebase. Q-A Ids are assigned by the service and should be
     * omitted.
     *
     * @param {array} [createKbPayload.urls] List of URLs to be used for extracting
     * Q-A.
     *
     * @param {array} [createKbPayload.files] List of files from which to Extract
     * Q-A.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Operation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Operation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Operation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(createKbPayload: models.CreateKbDTO, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Operation>;
    create(createKbPayload: models.CreateKbDTO, callback: ServiceCallback<models.Operation>): void;
    create(createKbPayload: models.CreateKbDTO, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Operation>): void;


    /**
     * @summary Download the knowledgebase.
     *
     * @param {string} kbId Knowledgebase id.
     *
     * @param {string} environment Specifies whether environment is Test or Prod.
     * Possible values include: 'Prod', 'Test'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<QnADocumentsDTO>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    downloadWithHttpOperationResponse(kbId: string, environment: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.QnADocumentsDTO>>;

    /**
     * @summary Download the knowledgebase.
     *
     * @param {string} kbId Knowledgebase id.
     *
     * @param {string} environment Specifies whether environment is Test or Prod.
     * Possible values include: 'Prod', 'Test'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {QnADocumentsDTO} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {QnADocumentsDTO} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link QnADocumentsDTO} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    download(kbId: string, environment: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.QnADocumentsDTO>;
    download(kbId: string, environment: string, callback: ServiceCallback<models.QnADocumentsDTO>): void;
    download(kbId: string, environment: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.QnADocumentsDTO>): void;
}

/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the QnAMakerClient.
 */
export interface Operations {


    /**
     * @summary Gets details of a specific long running operation.
     *
     * @param {string} operationId Operation id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Operation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDetailsWithHttpOperationResponse(operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Operation>>;

    /**
     * @summary Gets details of a specific long running operation.
     *
     * @param {string} operationId Operation id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Operation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Operation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Operation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDetails(operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Operation>;
    getDetails(operationId: string, callback: ServiceCallback<models.Operation>): void;
    getDetails(operationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Operation>): void;
}
