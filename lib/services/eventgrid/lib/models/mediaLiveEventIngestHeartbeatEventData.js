/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Ingest fragment dropped event data.
 *
 */
class MediaLiveEventIngestHeartbeatEventData {
  /**
   * Create a MediaLiveEventIngestHeartbeatEventData.
   * @property {string} [trackType] Gets the type of the track (Audio / Video).
   * @property {string} [trackName] Gets the track name.
   * @property {number} [bitrate] Gets the bitrate of the track.
   * @property {number} [incomingBitrate] Gets the incoming bitrate.
   * @property {string} [lastTimestamp] Gets the last timestamp.
   * @property {string} [timescale] Gets the timescale of the last timestamp.
   * @property {number} [overlapCount] Gets the fragment Overlap count.
   * @property {number} [discontinuityCount] Gets the fragment Discontinuity
   * count.
   * @property {number} [nonincreasingCount] Gets Non increasing count.
   * @property {boolean} [unexpectedBitrate] Gets a value indicating whether
   * unexpected bitrate is present or not.
   * @property {string} [state] Gets the state of the live event.
   * @property {boolean} [healthy] Gets a value indicating whether preview is
   * healthy or not.
   */
  constructor() {
  }

  /**
   * Defines the metadata of MediaLiveEventIngestHeartbeatEventData
   *
   * @returns {object} metadata of MediaLiveEventIngestHeartbeatEventData
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'MediaLiveEventIngestHeartbeatEventData',
      type: {
        name: 'Composite',
        className: 'MediaLiveEventIngestHeartbeatEventData',
        modelProperties: {
          trackType: {
            required: false,
            readOnly: true,
            serializedName: 'trackType',
            type: {
              name: 'String'
            }
          },
          trackName: {
            required: false,
            readOnly: true,
            serializedName: 'trackName',
            type: {
              name: 'String'
            }
          },
          bitrate: {
            required: false,
            readOnly: true,
            serializedName: 'bitrate',
            type: {
              name: 'Number'
            }
          },
          incomingBitrate: {
            required: false,
            readOnly: true,
            serializedName: 'incomingBitrate',
            type: {
              name: 'Number'
            }
          },
          lastTimestamp: {
            required: false,
            readOnly: true,
            serializedName: 'lastTimestamp',
            type: {
              name: 'String'
            }
          },
          timescale: {
            required: false,
            readOnly: true,
            serializedName: 'timescale',
            type: {
              name: 'String'
            }
          },
          overlapCount: {
            required: false,
            readOnly: true,
            serializedName: 'overlapCount',
            type: {
              name: 'Number'
            }
          },
          discontinuityCount: {
            required: false,
            readOnly: true,
            serializedName: 'discontinuityCount',
            type: {
              name: 'Number'
            }
          },
          nonincreasingCount: {
            required: false,
            readOnly: true,
            serializedName: 'nonincreasingCount',
            type: {
              name: 'Number'
            }
          },
          unexpectedBitrate: {
            required: false,
            readOnly: true,
            serializedName: 'unexpectedBitrate',
            type: {
              name: 'Boolean'
            }
          },
          state: {
            required: false,
            readOnly: true,
            serializedName: 'state',
            type: {
              name: 'String'
            }
          },
          healthy: {
            required: false,
            readOnly: true,
            serializedName: 'healthy',
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = MediaLiveEventIngestHeartbeatEventData;
