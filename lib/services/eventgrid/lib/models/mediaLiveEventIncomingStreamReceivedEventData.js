/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Encoder connect event data.
 *
 */
class MediaLiveEventIncomingStreamReceivedEventData {
  /**
   * Create a MediaLiveEventIncomingStreamReceivedEventData.
   * @property {string} [ingestUrl] Gets the ingest URL provided by the live
   * event.
   * @property {string} [trackType] Gets the type of the track (Audio / Video).
   * @property {string} [trackName] Gets the track name.
   * @property {number} [bitrate] Gets the bitrate of the track.
   * @property {string} [encoderIp] Gets the remote IP.
   * @property {string} [encoderPort] Gets the remote port.
   * @property {string} [timestamp] Gets the first timestamp of the data chunk
   * received.
   * @property {string} [duration] Gets the duration of the first data chunk.
   * @property {string} [timescale] Gets the timescale in which timestamp is
   * represented.
   */
  constructor() {
  }

  /**
   * Defines the metadata of MediaLiveEventIncomingStreamReceivedEventData
   *
   * @returns {object} metadata of MediaLiveEventIncomingStreamReceivedEventData
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'MediaLiveEventIncomingStreamReceivedEventData',
      type: {
        name: 'Composite',
        className: 'MediaLiveEventIncomingStreamReceivedEventData',
        modelProperties: {
          ingestUrl: {
            required: false,
            readOnly: true,
            serializedName: 'ingestUrl',
            type: {
              name: 'String'
            }
          },
          trackType: {
            required: false,
            readOnly: true,
            serializedName: 'trackType',
            type: {
              name: 'String'
            }
          },
          trackName: {
            required: false,
            readOnly: true,
            serializedName: 'trackName',
            type: {
              name: 'String'
            }
          },
          bitrate: {
            required: false,
            readOnly: true,
            serializedName: 'bitrate',
            type: {
              name: 'Number'
            }
          },
          encoderIp: {
            required: false,
            readOnly: true,
            serializedName: 'encoderIp',
            type: {
              name: 'String'
            }
          },
          encoderPort: {
            required: false,
            readOnly: true,
            serializedName: 'encoderPort',
            type: {
              name: 'String'
            }
          },
          timestamp: {
            required: false,
            readOnly: true,
            serializedName: 'timestamp',
            type: {
              name: 'String'
            }
          },
          duration: {
            required: false,
            readOnly: true,
            serializedName: 'duration',
            type: {
              name: 'String'
            }
          },
          timescale: {
            required: false,
            readOnly: true,
            serializedName: 'timescale',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = MediaLiveEventIncomingStreamReceivedEventData;
