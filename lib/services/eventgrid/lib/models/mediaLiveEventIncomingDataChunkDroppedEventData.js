/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Ingest fragment dropped event data.
 *
 */
class MediaLiveEventIncomingDataChunkDroppedEventData {
  /**
   * Create a MediaLiveEventIncomingDataChunkDroppedEventData.
   * @member {string} [timestamp] Gets the timestamp of the data chunk dropped.
   * @member {string} [trackType] Gets the type of the track (Audio / Video).
   * @member {number} [bitrate] Gets the bitrate of the track.
   * @member {string} [timescale] Gets the timescale of the Timestamp.
   * @member {string} [resultCode] Gets the result code for fragment drop
   * operation.
   * @member {string} [trackName] Gets the name of the track for which fragment
   * is dropped.
   */
  constructor() {
  }

  /**
   * Defines the metadata of MediaLiveEventIncomingDataChunkDroppedEventData
   *
   * @returns {object} metadata of MediaLiveEventIncomingDataChunkDroppedEventData
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'MediaLiveEventIncomingDataChunkDroppedEventData',
      type: {
        name: 'Composite',
        className: 'MediaLiveEventIncomingDataChunkDroppedEventData',
        modelProperties: {
          timestamp: {
            required: false,
            readOnly: true,
            serializedName: 'timestamp',
            type: {
              name: 'String'
            }
          },
          trackType: {
            required: false,
            readOnly: true,
            serializedName: 'trackType',
            type: {
              name: 'String'
            }
          },
          bitrate: {
            required: false,
            readOnly: true,
            serializedName: 'bitrate',
            type: {
              name: 'Number'
            }
          },
          timescale: {
            required: false,
            readOnly: true,
            serializedName: 'timescale',
            type: {
              name: 'String'
            }
          },
          resultCode: {
            required: false,
            readOnly: true,
            serializedName: 'resultCode',
            type: {
              name: 'String'
            }
          },
          trackName: {
            required: false,
            readOnly: true,
            serializedName: 'trackName',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = MediaLiveEventIncomingDataChunkDroppedEventData;
