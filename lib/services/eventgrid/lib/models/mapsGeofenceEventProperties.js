/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Schema of the Data property of an EventGridEvent for a Geofence event
 * (GeofenceEntered, GeofenceExited, GeofenceResult).
 *
 */
class MapsGeofenceEventProperties {
  /**
   * Create a MapsGeofenceEventProperties.
   * @member {array} [expiredGeofenceGeometryId] Lists of the geometry ID of
   * the geofence which is expired relative to the user time in the request.
   * @member {array} [geometries] Lists the fence geometries that either fully
   * contain the coordinate position or have an overlap with the searchBuffer
   * around the fence.
   * @member {array} [invalidPeriodGeofenceGeometryId] Lists of the geometry ID
   * of the geofence which is in invalid period relative to the user time in
   * the request.
   * @member {boolean} [isEventPublished] True if at least one event is
   * published to the Azure Maps event subscriber, false if no event is
   * published to the Azure Maps event subscriber.
   */
  constructor() {
  }

  /**
   * Defines the metadata of MapsGeofenceEventProperties
   *
   * @returns {object} metadata of MapsGeofenceEventProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'MapsGeofenceEventProperties',
      type: {
        name: 'Composite',
        className: 'MapsGeofenceEventProperties',
        modelProperties: {
          expiredGeofenceGeometryId: {
            required: false,
            serializedName: 'expiredGeofenceGeometryId',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          geometries: {
            required: false,
            serializedName: 'geometries',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'MapsGeofenceGeometryElementType',
                  type: {
                    name: 'Composite',
                    className: 'MapsGeofenceGeometry'
                  }
              }
            }
          },
          invalidPeriodGeofenceGeometryId: {
            required: false,
            serializedName: 'invalidPeriodGeofenceGeometryId',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          isEventPublished: {
            required: false,
            serializedName: 'isEventPublished',
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = MapsGeofenceEventProperties;
