/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Schema of the Data property of an EventGridEvent for a device life cycle
 * event (DeviceCreated, DeviceDeleted).
 *
 */
class DeviceLifeCycleEventProperties {
  /**
   * Create a DeviceLifeCycleEventProperties.
   * @member {string} [deviceId] The unique identifier of the device. This
   * case-sensitive string can be up to 128 characters long, and supports ASCII
   * 7-bit alphanumeric characters plus the following special characters: - : .
   * + % _ &#35; * ? ! ( ) , = @ ; $ '.
   * @member {string} [hubName] Name of the IoT Hub where the device was
   * created or deleted.
   * @member {object} [twin] Information about the device twin, which is the
   * cloud representation of application device metadata.
   * @member {string} [twin.authenticationType] Authentication type used for
   * this device: either SAS, SelfSigned, or CertificateAuthority.
   * @member {number} [twin.cloudToDeviceMessageCount] Count of cloud to device
   * messages sent to this device.
   * @member {string} [twin.connectionState] Whether the device is connected or
   * disconnected.
   * @member {string} [twin.deviceId] The unique identifier of the device twin.
   * @member {string} [twin.etag] A piece of information that describes the
   * content of the device twin. Each etag is guaranteed to be unique per
   * device twin.
   * @member {string} [twin.lastActivityTime] The ISO8601 timestamp of the last
   * activity.
   * @member {object} [twin.properties] Properties JSON element.
   * @member {object} [twin.properties.desired] A portion of the properties
   * that can be written only by the application back-end, and read by the
   * device.
   * @member {object} [twin.properties.desired.metadata] Metadata information
   * for the properties JSON document.
   * @member {string} [twin.properties.desired.metadata.lastUpdated] The
   * ISO8601 timestamp of the last time the properties were updated.
   * @member {number} [twin.properties.desired.version] Version of device twin
   * properties.
   * @member {object} [twin.properties.reported] A portion of the properties
   * that can be written only by the device, and read by the application
   * back-end.
   * @member {object} [twin.properties.reported.metadata] Metadata information
   * for the properties JSON document.
   * @member {string} [twin.properties.reported.metadata.lastUpdated] The
   * ISO8601 timestamp of the last time the properties were updated.
   * @member {number} [twin.properties.reported.version] Version of device twin
   * properties.
   * @member {string} [twin.status] Whether the device twin is enabled or
   * disabled.
   * @member {string} [twin.statusUpdateTime] The ISO8601 timestamp of the last
   * device twin status update.
   * @member {number} [twin.version] An integer that is incremented by one each
   * time the device twin is updated.
   * @member {object} [twin.x509Thumbprint] The thumbprint is a unique value
   * for the x509 certificate, commonly used to find a particular certificate
   * in a certificate store. The thumbprint is dynamically generated using the
   * SHA1 algorithm, and does not physically exist in the certificate.
   * @member {string} [twin.x509Thumbprint.primaryThumbprint] Primary
   * thumbprint for the x509 certificate.
   * @member {string} [twin.x509Thumbprint.secondaryThumbprint] Secondary
   * thumbprint for the x509 certificate.
   */
  constructor() {
  }

  /**
   * Defines the metadata of DeviceLifeCycleEventProperties
   *
   * @returns {object} metadata of DeviceLifeCycleEventProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DeviceLifeCycleEventProperties',
      type: {
        name: 'Composite',
        className: 'DeviceLifeCycleEventProperties',
        modelProperties: {
          deviceId: {
            required: false,
            serializedName: 'deviceId',
            type: {
              name: 'String'
            }
          },
          hubName: {
            required: false,
            serializedName: 'hubName',
            type: {
              name: 'String'
            }
          },
          twin: {
            required: false,
            serializedName: 'twin',
            type: {
              name: 'Composite',
              className: 'DeviceTwinInfo'
            }
          }
        }
      }
    };
  }
}

module.exports = DeviceLifeCycleEventProperties;
