/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Information about the device twin, which is the cloud representation of
 * application device metadata.
 *
 */
class DeviceTwinInfo {
  /**
   * Create a DeviceTwinInfo.
   * @member {string} [authenticationType] Authentication type used for this
   * device: either SAS, SelfSigned, or CertificateAuthority.
   * @member {number} [cloudToDeviceMessageCount] Count of cloud to device
   * messages sent to this device.
   * @member {string} [connectionState] Whether the device is connected or
   * disconnected.
   * @member {string} [deviceId] The unique identifier of the device twin.
   * @member {string} [etag] A piece of information that describes the content
   * of the device twin. Each etag is guaranteed to be unique per device twin.
   * @member {string} [lastActivityTime] The ISO8601 timestamp of the last
   * activity.
   * @member {object} [properties] Properties JSON element.
   * @member {object} [properties.desired] A portion of the properties that can
   * be written only by the application back-end, and read by the device.
   * @member {object} [properties.desired.metadata] Metadata information for
   * the properties JSON document.
   * @member {string} [properties.desired.metadata.lastUpdated] The ISO8601
   * timestamp of the last time the properties were updated.
   * @member {number} [properties.desired.version] Version of device twin
   * properties.
   * @member {object} [properties.reported] A portion of the properties that
   * can be written only by the device, and read by the application back-end.
   * @member {object} [properties.reported.metadata] Metadata information for
   * the properties JSON document.
   * @member {string} [properties.reported.metadata.lastUpdated] The ISO8601
   * timestamp of the last time the properties were updated.
   * @member {number} [properties.reported.version] Version of device twin
   * properties.
   * @member {string} [status] Whether the device twin is enabled or disabled.
   * @member {string} [statusUpdateTime] The ISO8601 timestamp of the last
   * device twin status update.
   * @member {number} [version] An integer that is incremented by one each time
   * the device twin is updated.
   * @member {object} [x509Thumbprint] The thumbprint is a unique value for the
   * x509 certificate, commonly used to find a particular certificate in a
   * certificate store. The thumbprint is dynamically generated using the SHA1
   * algorithm, and does not physically exist in the certificate.
   * @member {string} [x509Thumbprint.primaryThumbprint] Primary thumbprint for
   * the x509 certificate.
   * @member {string} [x509Thumbprint.secondaryThumbprint] Secondary thumbprint
   * for the x509 certificate.
   */
  constructor() {
  }

  /**
   * Defines the metadata of DeviceTwinInfo
   *
   * @returns {object} metadata of DeviceTwinInfo
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DeviceTwinInfo',
      type: {
        name: 'Composite',
        className: 'DeviceTwinInfo',
        modelProperties: {
          authenticationType: {
            required: false,
            serializedName: 'authenticationType',
            type: {
              name: 'String'
            }
          },
          cloudToDeviceMessageCount: {
            required: false,
            serializedName: 'cloudToDeviceMessageCount',
            type: {
              name: 'Number'
            }
          },
          connectionState: {
            required: false,
            serializedName: 'connectionState',
            type: {
              name: 'String'
            }
          },
          deviceId: {
            required: false,
            serializedName: 'deviceId',
            type: {
              name: 'String'
            }
          },
          etag: {
            required: false,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          },
          lastActivityTime: {
            required: false,
            serializedName: 'lastActivityTime',
            type: {
              name: 'String'
            }
          },
          properties: {
            required: false,
            serializedName: 'properties',
            type: {
              name: 'Composite',
              className: 'DeviceTwinInfoProperties'
            }
          },
          status: {
            required: false,
            serializedName: 'status',
            type: {
              name: 'String'
            }
          },
          statusUpdateTime: {
            required: false,
            serializedName: 'statusUpdateTime',
            type: {
              name: 'String'
            }
          },
          version: {
            required: false,
            serializedName: 'version',
            type: {
              name: 'Number'
            }
          },
          x509Thumbprint: {
            required: false,
            serializedName: 'x509Thumbprint',
            type: {
              name: 'Composite',
              className: 'DeviceTwinInfoX509Thumbprint'
            }
          }
        }
      }
    };
  }
}

module.exports = DeviceTwinInfo;
