/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Ingest track discontinuity detected event data.
 *
 */
class MediaLiveEventTrackDiscontinuityDetectedEventData {
  /**
   * Create a MediaLiveEventTrackDiscontinuityDetectedEventData.
   * @member {string} [trackType] Gets the type of the track (Audio / Video).
   * @member {string} [trackName] Gets the track name.
   * @member {number} [bitrate] Gets the bitrate.
   * @member {string} [previousTimestamp] Gets the timestamp of the previous
   * fragment.
   * @member {string} [newTimestamp] Gets the timestamp of the current
   * fragment.
   * @member {string} [timescale] Gets the timescale in which both timestamps
   * and discontinuity gap are represented.
   * @member {string} [discontinuityGap] Gets the discontinuity gap between
   * PreviousTimestamp and NewTimestamp.
   */
  constructor() {
  }

  /**
   * Defines the metadata of MediaLiveEventTrackDiscontinuityDetectedEventData
   *
   * @returns {object} metadata of MediaLiveEventTrackDiscontinuityDetectedEventData
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'MediaLiveEventTrackDiscontinuityDetectedEventData',
      type: {
        name: 'Composite',
        className: 'MediaLiveEventTrackDiscontinuityDetectedEventData',
        modelProperties: {
          trackType: {
            required: false,
            readOnly: true,
            serializedName: 'trackType',
            type: {
              name: 'String'
            }
          },
          trackName: {
            required: false,
            readOnly: true,
            serializedName: 'trackName',
            type: {
              name: 'String'
            }
          },
          bitrate: {
            required: false,
            readOnly: true,
            serializedName: 'bitrate',
            type: {
              name: 'Number'
            }
          },
          previousTimestamp: {
            required: false,
            readOnly: true,
            serializedName: 'previousTimestamp',
            type: {
              name: 'String'
            }
          },
          newTimestamp: {
            required: false,
            readOnly: true,
            serializedName: 'newTimestamp',
            type: {
              name: 'String'
            }
          },
          timescale: {
            required: false,
            readOnly: true,
            serializedName: 'timescale',
            type: {
              name: 'String'
            }
          },
          discontinuityGap: {
            required: false,
            readOnly: true,
            serializedName: 'discontinuityGap',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = MediaLiveEventTrackDiscontinuityDetectedEventData;
