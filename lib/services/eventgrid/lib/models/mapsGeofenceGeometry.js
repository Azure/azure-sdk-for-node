/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * The geofence geometry.
 *
 */
class MapsGeofenceGeometry {
  /**
   * Create a MapsGeofenceGeometry.
   * @member {string} [deviceId] ID of the device.
   * @member {number} [distance] Distance from the coordinate to the closest
   * border of the geofence. Positive means the coordinate is outside of the
   * geofence. If the coordinate is outside of the geofence, but more than the
   * value of searchBuffer away from the closest geofence border, then the
   * value is 999. Negative means the coordinate is inside of the geofence. If
   * the coordinate is inside the polygon, but more than the value of
   * searchBuffer away from the closest geofencing border,then the value is
   * -999. A value of 999 means that there is great confidence the coordinate
   * is well outside the geofence. A value of -999 means that there is great
   * confidence the coordinate is well within the geofence.
   * @member {string} [geometryId] The unique ID for the geofence geometry.
   * @member {number} [nearestLat] Latitude of the nearest point of the
   * geometry.
   * @member {number} [nearestLon] Longitude of the nearest point of the
   * geometry.
   * @member {string} [udId] The unique id returned from user upload service
   * when uploading a geofence. Will not be included in geofencing post API.
   */
  constructor() {
  }

  /**
   * Defines the metadata of MapsGeofenceGeometry
   *
   * @returns {object} metadata of MapsGeofenceGeometry
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'MapsGeofenceGeometry',
      type: {
        name: 'Composite',
        className: 'MapsGeofenceGeometry',
        modelProperties: {
          deviceId: {
            required: false,
            serializedName: 'deviceId',
            type: {
              name: 'String'
            }
          },
          distance: {
            required: false,
            serializedName: 'distance',
            type: {
              name: 'Number'
            }
          },
          geometryId: {
            required: false,
            serializedName: 'geometryId',
            type: {
              name: 'String'
            }
          },
          nearestLat: {
            required: false,
            serializedName: 'nearestLat',
            type: {
              name: 'Number'
            }
          },
          nearestLon: {
            required: false,
            serializedName: 'nearestLon',
            type: {
              name: 'Number'
            }
          },
          udId: {
            required: false,
            serializedName: 'udId',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = MapsGeofenceGeometry;
