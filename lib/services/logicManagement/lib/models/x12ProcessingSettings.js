/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * The X12 processing settings.
 *
 */
class X12ProcessingSettings {
  /**
   * Create a X12ProcessingSettings.
   * @property {boolean} maskSecurityInfo The value indicating whether to mask
   * security information.
   * @property {boolean} convertImpliedDecimal The value indicating whether to
   * convert numerical type to implied decimal.
   * @property {boolean} preserveInterchange The value indicating whether to
   * preserve interchange.
   * @property {boolean} suspendInterchangeOnError The value indicating whether
   * to suspend interchange on error.
   * @property {boolean} createEmptyXmlTagsForTrailingSeparators The value
   * indicating whether to create empty xml tags for trailing separators.
   * @property {boolean} useDotAsDecimalSeparator The value indicating whether
   * to use dot as decimal separator.
   */
  constructor() {
  }

  /**
   * Defines the metadata of X12ProcessingSettings
   *
   * @returns {object} metadata of X12ProcessingSettings
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'X12ProcessingSettings',
      type: {
        name: 'Composite',
        className: 'X12ProcessingSettings',
        modelProperties: {
          maskSecurityInfo: {
            required: true,
            serializedName: 'maskSecurityInfo',
            type: {
              name: 'Boolean'
            }
          },
          convertImpliedDecimal: {
            required: true,
            serializedName: 'convertImpliedDecimal',
            type: {
              name: 'Boolean'
            }
          },
          preserveInterchange: {
            required: true,
            serializedName: 'preserveInterchange',
            type: {
              name: 'Boolean'
            }
          },
          suspendInterchangeOnError: {
            required: true,
            serializedName: 'suspendInterchangeOnError',
            type: {
              name: 'Boolean'
            }
          },
          createEmptyXmlTagsForTrailingSeparators: {
            required: true,
            serializedName: 'createEmptyXmlTagsForTrailingSeparators',
            type: {
              name: 'Boolean'
            }
          },
          useDotAsDecimalSeparator: {
            required: true,
            serializedName: 'useDotAsDecimalSeparator',
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = X12ProcessingSettings;
