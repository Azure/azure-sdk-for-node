/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * The AS2 agreement security settings.
 *
 */
class AS2SecuritySettings {
  /**
   * Create a AS2SecuritySettings.
   * @property {boolean} overrideGroupSigningCertificate The value indicating
   * whether to send or request a MDN.
   * @property {string} [signingCertificateName] The name of the signing
   * certificate.
   * @property {string} [encryptionCertificateName] The name of the encryption
   * certificate.
   * @property {boolean} enableNrrForInboundEncodedMessages The value
   * indicating whether to enable NRR for inbound encoded messages.
   * @property {boolean} enableNrrForInboundDecodedMessages The value
   * indicating whether to enable NRR for inbound decoded messages.
   * @property {boolean} enableNrrForOutboundMdn The value indicating whether
   * to enable NRR for outbound MDN.
   * @property {boolean} enableNrrForOutboundEncodedMessages The value
   * indicating whether to enable NRR for outbound encoded messages.
   * @property {boolean} enableNrrForOutboundDecodedMessages The value
   * indicating whether to enable NRR for outbound decoded messages.
   * @property {boolean} enableNrrForInboundMdn The value indicating whether to
   * enable NRR for inbound MDN.
   * @property {string} [sha2AlgorithmFormat] The Sha2 algorithm format. Valid
   * values are Sha2, ShaHashSize, ShaHyphenHashSize, Sha2UnderscoreHashSize.
   */
  constructor() {
  }

  /**
   * Defines the metadata of AS2SecuritySettings
   *
   * @returns {object} metadata of AS2SecuritySettings
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'AS2SecuritySettings',
      type: {
        name: 'Composite',
        className: 'AS2SecuritySettings',
        modelProperties: {
          overrideGroupSigningCertificate: {
            required: true,
            serializedName: 'overrideGroupSigningCertificate',
            type: {
              name: 'Boolean'
            }
          },
          signingCertificateName: {
            required: false,
            serializedName: 'signingCertificateName',
            type: {
              name: 'String'
            }
          },
          encryptionCertificateName: {
            required: false,
            serializedName: 'encryptionCertificateName',
            type: {
              name: 'String'
            }
          },
          enableNrrForInboundEncodedMessages: {
            required: true,
            serializedName: 'enableNrrForInboundEncodedMessages',
            type: {
              name: 'Boolean'
            }
          },
          enableNrrForInboundDecodedMessages: {
            required: true,
            serializedName: 'enableNrrForInboundDecodedMessages',
            type: {
              name: 'Boolean'
            }
          },
          enableNrrForOutboundMdn: {
            required: true,
            serializedName: 'enableNrrForOutboundMdn',
            type: {
              name: 'Boolean'
            }
          },
          enableNrrForOutboundEncodedMessages: {
            required: true,
            serializedName: 'enableNrrForOutboundEncodedMessages',
            type: {
              name: 'Boolean'
            }
          },
          enableNrrForOutboundDecodedMessages: {
            required: true,
            serializedName: 'enableNrrForOutboundDecodedMessages',
            type: {
              name: 'Boolean'
            }
          },
          enableNrrForInboundMdn: {
            required: true,
            serializedName: 'enableNrrForInboundMdn',
            type: {
              name: 'Boolean'
            }
          },
          sha2AlgorithmFormat: {
            required: false,
            serializedName: 'sha2AlgorithmFormat',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = AS2SecuritySettings;
