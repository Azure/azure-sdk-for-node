/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError } from "ms-rest-azure";
import * as moment from "moment";

export {

  BaseResource,
  CloudError
};

/**
 * The base resource type.
 */
export interface Resource extends BaseResource {
  /**
   * The resource id.
   */
  readonly id?: string;
  /**
   * Gets the resource name.
   */
  readonly name?: string;
  /**
   * Gets the resource type.
   */
  readonly type?: string;
  /**
   * The resource location.
   */
  location?: string;
  /**
   * The resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The sub resource type.
 */
export interface SubResource extends BaseResource {
  /**
   * The resource id.
   */
  readonly id?: string;
}

/**
 * The resource reference.
 */
export interface ResourceReference {
  /**
   * The resource id.
   */
  id?: string;
  /**
   * Gets the resource name.
   */
  readonly name?: string;
  /**
   * Gets the resource type.
   */
  readonly type?: string;
}

/**
 * The sku type.
 */
export interface Sku {
  /**
   * The name. Possible values include: 'NotSpecified', 'Free', 'Shared', 'Basic', 'Standard',
   * 'Premium'
   */
  name: string;
  /**
   * The reference to plan.
   */
  plan?: ResourceReference;
}

/**
 * The workflow parameters.
 */
export interface WorkflowParameter {
  /**
   * The type. Possible values include: 'NotSpecified', 'String', 'SecureString', 'Int', 'Float',
   * 'Bool', 'Array', 'Object', 'SecureObject'
   */
  type?: string;
  /**
   * The value.
   */
  value?: any;
  /**
   * The metadata.
   */
  metadata?: any;
  /**
   * The description.
   */
  description?: string;
}

/**
 * The workflow type.
 */
export interface Workflow extends Resource {
  /**
   * Gets the provisioning state. Possible values include: 'NotSpecified', 'Accepted', 'Running',
   * 'Ready', 'Creating', 'Created', 'Deleting', 'Deleted', 'Canceled', 'Failed', 'Succeeded',
   * 'Moving', 'Updating', 'Registering', 'Registered', 'Unregistering', 'Unregistered',
   * 'Completed'
   */
  readonly provisioningState?: string;
  /**
   * Gets the created time.
   */
  readonly createdTime?: Date;
  /**
   * Gets the changed time.
   */
  readonly changedTime?: Date;
  /**
   * The state. Possible values include: 'NotSpecified', 'Completed', 'Enabled', 'Disabled',
   * 'Deleted', 'Suspended'
   */
  state?: string;
  /**
   * Gets the version.
   */
  readonly version?: string;
  /**
   * Gets the access endpoint.
   */
  readonly accessEndpoint?: string;
  /**
   * The sku.
   */
  sku?: Sku;
  /**
   * The integration account.
   */
  integrationAccount?: ResourceReference;
  /**
   * The definition.
   */
  definition?: any;
  /**
   * The parameters.
   */
  parameters?: { [propertyName: string]: WorkflowParameter };
}

/**
 * The workflow filter.
 */
export interface WorkflowFilter {
  /**
   * The state of workflows. Possible values include: 'NotSpecified', 'Completed', 'Enabled',
   * 'Disabled', 'Deleted', 'Suspended'
   */
  state?: string;
}

/**
 * The workflow version.
 */
export interface WorkflowVersion extends Resource {
  /**
   * Gets the created time.
   */
  readonly createdTime?: Date;
  /**
   * Gets the changed time.
   */
  readonly changedTime?: Date;
  /**
   * The state. Possible values include: 'NotSpecified', 'Completed', 'Enabled', 'Disabled',
   * 'Deleted', 'Suspended'
   */
  state?: string;
  /**
   * Gets the version.
   */
  readonly version?: string;
  /**
   * Gets the access endpoint.
   */
  readonly accessEndpoint?: string;
  /**
   * The sku.
   */
  sku?: Sku;
  /**
   * The integration account.
   */
  integrationAccount?: ResourceReference;
  /**
   * The definition.
   */
  definition?: any;
  /**
   * The parameters.
   */
  parameters?: { [propertyName: string]: WorkflowParameter };
}

/**
 * The recurrence schedule occurrence.
 */
export interface RecurrenceScheduleOccurrence {
  /**
   * The day of the week. Possible values include: 'Sunday', 'Monday', 'Tuesday', 'Wednesday',
   * 'Thursday', 'Friday', 'Saturday'
   */
  day?: string;
  /**
   * The occurrence.
   */
  occurrence?: number;
}

/**
 * The recurrence schedule.
 */
export interface RecurrenceSchedule {
  /**
   * The minutes.
   */
  minutes?: number[];
  /**
   * The hours.
   */
  hours?: number[];
  /**
   * The days of the week.
   */
  weekDays?: string[];
  /**
   * The month days.
   */
  monthDays?: number[];
  /**
   * The monthly occurrences.
   */
  monthlyOccurrences?: RecurrenceScheduleOccurrence[];
}

/**
 * The workflow trigger recurrence.
 */
export interface WorkflowTriggerRecurrence {
  /**
   * The frequency. Possible values include: 'NotSpecified', 'Second', 'Minute', 'Hour', 'Day',
   * 'Week', 'Month', 'Year'
   */
  frequency?: string;
  /**
   * The interval.
   */
  interval?: number;
  /**
   * The start time.
   */
  startTime?: string;
  /**
   * The end time.
   */
  endTime?: string;
  /**
   * The time zone.
   */
  timeZone?: string;
  /**
   * The recurrence schedule.
   */
  schedule?: RecurrenceSchedule;
}

/**
 * The workflow trigger.
 */
export interface WorkflowTrigger extends SubResource {
  /**
   * Gets the provisioning state. Possible values include: 'NotSpecified', 'Accepted', 'Running',
   * 'Ready', 'Creating', 'Created', 'Deleting', 'Deleted', 'Canceled', 'Failed', 'Succeeded',
   * 'Moving', 'Updating', 'Registering', 'Registered', 'Unregistering', 'Unregistered',
   * 'Completed'
   */
  readonly provisioningState?: string;
  /**
   * Gets the created time.
   */
  readonly createdTime?: Date;
  /**
   * Gets the changed time.
   */
  readonly changedTime?: Date;
  /**
   * Gets the state. Possible values include: 'NotSpecified', 'Completed', 'Enabled', 'Disabled',
   * 'Deleted', 'Suspended'
   */
  readonly state?: string;
  /**
   * Gets the status. Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting',
   * 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted',
   * 'Ignored'
   */
  readonly status?: string;
  /**
   * Gets the last execution time.
   */
  readonly lastExecutionTime?: Date;
  /**
   * Gets the next execution time.
   */
  readonly nextExecutionTime?: Date;
  /**
   * Gets the workflow trigger recurrence.
   */
  readonly recurrence?: WorkflowTriggerRecurrence;
  /**
   * Gets the reference to workflow.
   */
  readonly workflow?: ResourceReference;
  /**
   * Gets the workflow trigger name.
   */
  readonly name?: string;
  /**
   * Gets the workflow trigger type.
   */
  readonly type?: string;
}

/**
 * The workflow trigger filter.
 */
export interface WorkflowTriggerFilter {
  /**
   * The state of workflow trigger. Possible values include: 'NotSpecified', 'Completed',
   * 'Enabled', 'Disabled', 'Deleted', 'Suspended'
   */
  state?: string;
}

/**
 * Gets the workflow trigger callback URL query parameters.
 */
export interface WorkflowTriggerListCallbackUrlQueries {
  /**
   * The api version.
   */
  apiVersion?: string;
  /**
   * The SAS permissions.
   */
  sp?: string;
  /**
   * The SAS version.
   */
  sv?: string;
  /**
   * The SAS signature.
   */
  sig?: string;
  /**
   * The SAS timestamp.
   */
  se?: string;
}

/**
 * The workflow trigger callback URL.
 */
export interface WorkflowTriggerCallbackUrl {
  /**
   * Gets the workflow trigger callback URL.
   */
  readonly value?: string;
  /**
   * Gets the workflow trigger callback URL HTTP method.
   */
  readonly method?: string;
  /**
   * Gets the workflow trigger callback URL base path.
   */
  readonly basePath?: string;
  /**
   * Gets the workflow trigger callback URL relative path.
   */
  readonly relativePath?: string;
  /**
   * Gets the workflow trigger callback URL relative path parameters.
   */
  relativePathParameters?: string[];
  /**
   * Gets the workflow trigger callback URL query parameters.
   */
  queries?: WorkflowTriggerListCallbackUrlQueries;
}

/**
 * The correlation property.
 */
export interface Correlation {
  /**
   * The client tracking id.
   */
  clientTrackingId?: string;
}

/**
 * The content hash.
 */
export interface ContentHash {
  /**
   * The algorithm of the content hash.
   */
  algorithm?: string;
  /**
   * The value of the content hash.
   */
  value?: string;
}

/**
 * The content link.
 */
export interface ContentLink {
  /**
   * The content link URI.
   */
  uri?: string;
  /**
   * The content version.
   */
  contentVersion?: string;
  /**
   * The content size.
   */
  contentSize?: number;
  /**
   * The content hash.
   */
  contentHash?: ContentHash;
  /**
   * The metadata.
   */
  metadata?: any;
}

/**
 * The workflow trigger history.
 */
export interface WorkflowTriggerHistory extends SubResource {
  /**
   * Gets the start time.
   */
  readonly startTime?: Date;
  /**
   * Gets the end time.
   */
  readonly endTime?: Date;
  /**
   * Gets the status. Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting',
   * 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted',
   * 'Ignored'
   */
  readonly status?: string;
  /**
   * Gets the code.
   */
  readonly code?: string;
  /**
   * Gets the error.
   */
  readonly error?: any;
  /**
   * Gets the tracking id.
   */
  readonly trackingId?: string;
  /**
   * The run correlation.
   */
  correlation?: Correlation;
  /**
   * Gets the link to input parameters.
   */
  readonly inputsLink?: ContentLink;
  /**
   * Gets the link to output parameters.
   */
  readonly outputsLink?: ContentLink;
  /**
   * Gets a value indicating whether trigger was fired.
   */
  readonly fired?: boolean;
  /**
   * Gets the reference to workflow run.
   */
  readonly run?: ResourceReference;
  /**
   * Gets the workflow trigger history name.
   */
  readonly name?: string;
  /**
   * Gets the workflow trigger history type.
   */
  readonly type?: string;
}

/**
 * The workflow trigger history filter.
 */
export interface WorkflowTriggerHistoryFilter {
  /**
   * The status of workflow trigger history. Possible values include: 'NotSpecified', 'Paused',
   * 'Running', 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted',
   * 'TimedOut', 'Aborted', 'Ignored'
   */
  status?: string;
}

/**
 * The workflow run trigger.
 */
export interface WorkflowRunTrigger {
  /**
   * Gets the name.
   */
  readonly name?: string;
  /**
   * Gets the inputs.
   */
  readonly inputs?: any;
  /**
   * Gets the link to inputs.
   */
  readonly inputsLink?: ContentLink;
  /**
   * Gets the outputs.
   */
  readonly outputs?: any;
  /**
   * Gets the link to outputs.
   */
  readonly outputsLink?: ContentLink;
  /**
   * Gets the scheduled time.
   */
  readonly scheduledTime?: Date;
  /**
   * Gets the start time.
   */
  readonly startTime?: Date;
  /**
   * Gets the end time.
   */
  readonly endTime?: Date;
  /**
   * Gets the tracking id.
   */
  readonly trackingId?: string;
  /**
   * The run correlation.
   */
  correlation?: Correlation;
  /**
   * Gets the code.
   */
  readonly code?: string;
  /**
   * Gets the status. Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting',
   * 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted',
   * 'Ignored'
   */
  readonly status?: string;
  /**
   * Gets the error.
   */
  readonly error?: any;
  /**
   * Gets the tracked properties.
   */
  readonly trackedProperties?: any;
}

/**
 * The workflow output parameter.
 */
export interface WorkflowOutputParameter extends WorkflowParameter {
  /**
   * Gets the error.
   */
  readonly error?: any;
}

/**
 * The workflow run.
 */
export interface WorkflowRun extends SubResource {
  /**
   * Gets the wait end time.
   */
  readonly waitEndTime?: Date;
  /**
   * Gets the start time.
   */
  readonly startTime?: Date;
  /**
   * Gets the end time.
   */
  readonly endTime?: Date;
  /**
   * Gets the status. Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting',
   * 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted',
   * 'Ignored'
   */
  readonly status?: string;
  /**
   * Gets the code.
   */
  readonly code?: string;
  /**
   * Gets the error.
   */
  readonly error?: any;
  /**
   * Gets the correlation id.
   */
  readonly correlationId?: string;
  /**
   * The run correlation.
   */
  correlation?: Correlation;
  /**
   * Gets the reference to workflow version.
   */
  readonly workflow?: ResourceReference;
  /**
   * Gets the fired trigger.
   */
  readonly trigger?: WorkflowRunTrigger;
  /**
   * Gets the outputs.
   */
  readonly outputs?: { [propertyName: string]: WorkflowOutputParameter };
  /**
   * Gets the response of the flow run.
   */
  readonly response?: WorkflowRunTrigger;
  /**
   * Gets the workflow run name.
   */
  readonly name?: string;
  /**
   * Gets the workflow run type.
   */
  readonly type?: string;
}

/**
 * The workflow run filter.
 */
export interface WorkflowRunFilter {
  /**
   * The status of workflow run. Possible values include: 'NotSpecified', 'Paused', 'Running',
   * 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut',
   * 'Aborted', 'Ignored'
   */
  status?: string;
}

/**
 * Error properties indicate why the Logic service was not able to process the incoming request.
 * The reason is provided in the error message.
 */
export interface ErrorProperties {
  /**
   * Error code.
   */
  code?: string;
  /**
   * Error message indicating why the operation failed.
   */
  message?: string;
}

/**
 * Error response indicates Logic service is not able to process the incoming request. The error
 * property contains the error details.
 */
export interface ErrorResponse {
  /**
   * The error properties.
   */
  error?: ErrorProperties;
}

/**
 * The retry history.
 */
export interface RetryHistory {
  /**
   * Gets the start time.
   */
  startTime?: Date;
  /**
   * Gets the end time.
   */
  endTime?: Date;
  /**
   * Gets the status code.
   */
  code?: string;
  /**
   * Gets the client request Id.
   */
  clientRequestId?: string;
  /**
   * Gets the service request Id.
   */
  serviceRequestId?: string;
  /**
   * Gets the error response.
   */
  error?: ErrorResponse;
}

/**
 * The workflow run action.
 */
export interface WorkflowRunAction extends SubResource {
  /**
   * Gets the start time.
   */
  readonly startTime?: Date;
  /**
   * Gets the end time.
   */
  readonly endTime?: Date;
  /**
   * Gets the status. Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting',
   * 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted',
   * 'Ignored'
   */
  readonly status?: string;
  /**
   * Gets the code.
   */
  readonly code?: string;
  /**
   * Gets the error.
   */
  readonly error?: any;
  /**
   * Gets the tracking id.
   */
  readonly trackingId?: string;
  /**
   * The correlation properties.
   */
  correlation?: Correlation;
  /**
   * Gets the link to inputs.
   */
  readonly inputsLink?: ContentLink;
  /**
   * Gets the link to outputs.
   */
  readonly outputsLink?: ContentLink;
  /**
   * Gets the tracked properties.
   */
  readonly trackedProperties?: any;
  /**
   * Gets the retry histories.
   */
  retryHistory?: RetryHistory[];
  /**
   * Gets the workflow run action name.
   */
  readonly name?: string;
  /**
   * Gets the workflow run action type.
   */
  readonly type?: string;
}

/**
 * The workflow run action filter.
 */
export interface WorkflowRunActionFilter {
  /**
   * The status of workflow run action. Possible values include: 'NotSpecified', 'Paused',
   * 'Running', 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted',
   * 'TimedOut', 'Aborted', 'Ignored'
   */
  status?: string;
}

/**
 * The access key regenerate action content.
 */
export interface RegenerateActionParameter {
  /**
   * The key type. Possible values include: 'NotSpecified', 'Primary', 'Secondary'
   */
  keyType?: string;
}

/**
 * The parameters to generate upgraded definition.
 */
export interface GenerateUpgradedDefinitionParameters {
  /**
   * The target schema version.
   */
  targetSchemaVersion?: string;
}

/**
 * The integration account sku.
 */
export interface IntegrationAccountSku {
  /**
   * The sku name. Possible values include: 'NotSpecified', 'Free', 'Basic', 'Standard'
   */
  name: string;
}

/**
 * The integration account.
 */
export interface IntegrationAccount extends Resource {
  /**
   * The integration account properties.
   */
  properties?: any;
  /**
   * The sku.
   */
  sku?: IntegrationAccountSku;
}

/**
 * The callback url parameters.
 */
export interface GetCallbackUrlParameters {
  /**
   * The expiry time.
   */
  notAfter?: Date;
  /**
   * The key type. Possible values include: 'NotSpecified', 'Primary', 'Secondary'
   */
  keyType?: string;
}

/**
 * The callback url.
 */
export interface CallbackUrl {
  /**
   * The URL value.
   */
  value?: string;
}

/**
 * The integration account schema.
 */
export interface IntegrationAccountSchema extends Resource {
  /**
   * The schema type. Possible values include: 'NotSpecified', 'Xml'
   */
  schemaType: string;
  /**
   * The target namespace of the schema.
   */
  targetNamespace?: string;
  /**
   * The document name.
   */
  documentName?: string;
  /**
   * The file name.
   */
  fileName?: string;
  /**
   * The created time.
   */
  readonly createdTime?: Date;
  /**
   * The changed time.
   */
  readonly changedTime?: Date;
  /**
   * The metadata.
   */
  metadata?: any;
  /**
   * The content.
   */
  content?: string;
  /**
   * The content type.
   */
  contentType?: string;
  /**
   * The content link.
   */
  readonly contentLink?: ContentLink;
}

/**
 * The integration account schema filter for odata query.
 */
export interface IntegrationAccountSchemaFilter {
  /**
   * The schema type of integration account schema. Possible values include: 'NotSpecified', 'Xml'
   */
  schemaType: string;
}

/**
 * The parameters schema of integration account map.
 */
export interface IntegrationAccountMapPropertiesParametersSchema {
  /**
   * The reference name.
   */
  ref?: string;
}

/**
 * The integration account map.
 */
export interface IntegrationAccountMap extends Resource {
  /**
   * The map type. Possible values include: 'NotSpecified', 'Xslt', 'Xslt20', 'Xslt30', 'Liquid'
   */
  mapType: string;
  /**
   * The parameters schema of integration account map.
   */
  parametersSchema?: IntegrationAccountMapPropertiesParametersSchema;
  /**
   * The created time.
   */
  readonly createdTime?: Date;
  /**
   * The changed time.
   */
  readonly changedTime?: Date;
  /**
   * The content.
   */
  content?: string;
  /**
   * The content type.
   */
  contentType?: string;
  /**
   * The content link.
   */
  readonly contentLink?: ContentLink;
  /**
   * The metadata.
   */
  metadata?: any;
}

/**
 * The integration account map filter for odata query.
 */
export interface IntegrationAccountMapFilter {
  /**
   * The map type of integration account map. Possible values include: 'NotSpecified', 'Xslt',
   * 'Xslt20', 'Xslt30', 'Liquid'
   */
  mapType: string;
}

/**
 * The integration account partner's business identity.
 */
export interface BusinessIdentity {
  /**
   * The business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
   */
  qualifier: string;
  /**
   * The user defined business identity value.
   */
  value: string;
}

/**
 * The B2B partner content.
 */
export interface B2BPartnerContent {
  /**
   * The list of partner business identities.
   */
  businessIdentities?: BusinessIdentity[];
}

/**
 * The integration account partner content.
 */
export interface PartnerContent {
  /**
   * The B2B partner content.
   */
  b2b?: B2BPartnerContent;
}

/**
 * The integration account partner.
 */
export interface IntegrationAccountPartner extends Resource {
  /**
   * The partner type. Possible values include: 'NotSpecified', 'B2B'
   */
  partnerType: string;
  /**
   * The created time.
   */
  readonly createdTime?: Date;
  /**
   * The changed time.
   */
  readonly changedTime?: Date;
  /**
   * The metadata.
   */
  metadata?: any;
  /**
   * The partner content.
   */
  content: PartnerContent;
}

/**
 * The integration account partner filter for odata query.
 */
export interface IntegrationAccountPartnerFilter {
  /**
   * The partner type of integration account partner. Possible values include: 'NotSpecified',
   * 'B2B'
   */
  partnerType: string;
}

/**
 * The AS2 agreement message connection settings.
 */
export interface AS2MessageConnectionSettings {
  /**
   * The value indicating whether to ignore mismatch in certificate name.
   */
  ignoreCertificateNameMismatch: boolean;
  /**
   * The value indicating whether to support HTTP status code 'CONTINUE'.
   */
  supportHttpStatusCodeContinue: boolean;
  /**
   * The value indicating whether to keep the connection alive.
   */
  keepHttpConnectionAlive: boolean;
  /**
   * The value indicating whether to unfold the HTTP headers.
   */
  unfoldHttpHeaders: boolean;
}

/**
 * The AS2 agreement acknowledgement connection settings.
 */
export interface AS2AcknowledgementConnectionSettings {
  /**
   * The value indicating whether to ignore mismatch in certificate name.
   */
  ignoreCertificateNameMismatch: boolean;
  /**
   * The value indicating whether to support HTTP status code 'CONTINUE'.
   */
  supportHttpStatusCodeContinue: boolean;
  /**
   * The value indicating whether to keep the connection alive.
   */
  keepHttpConnectionAlive: boolean;
  /**
   * The value indicating whether to unfold the HTTP headers.
   */
  unfoldHttpHeaders: boolean;
}

/**
 * The AS2 agreement mdn settings.
 */
export interface AS2MdnSettings {
  /**
   * The value indicating whether to send or request a MDN.
   */
  needMdn: boolean;
  /**
   * The value indicating whether the MDN needs to be signed or not.
   */
  signMdn: boolean;
  /**
   * The value indicating whether to send the asynchronous MDN.
   */
  sendMdnAsynchronously: boolean;
  /**
   * The receipt delivery URL.
   */
  receiptDeliveryUrl?: string;
  /**
   * The disposition notification to header value.
   */
  dispositionNotificationTo?: string;
  /**
   * The value indicating whether to sign the outbound MDN if optional.
   */
  signOutboundMdnIfOptional: boolean;
  /**
   * The MDN text.
   */
  mdnText?: string;
  /**
   * The value indicating whether to send inbound MDN to message box.
   */
  sendInboundMdnToMessageBox: boolean;
  /**
   * The signing or hashing algorithm. Possible values include: 'NotSpecified', 'None', 'MD5',
   * 'SHA1', 'SHA2256', 'SHA2384', 'SHA2512'
   */
  micHashingAlgorithm: string;
}

/**
 * The AS2 agreement security settings.
 */
export interface AS2SecuritySettings {
  /**
   * The value indicating whether to send or request a MDN.
   */
  overrideGroupSigningCertificate: boolean;
  /**
   * The name of the signing certificate.
   */
  signingCertificateName?: string;
  /**
   * The name of the encryption certificate.
   */
  encryptionCertificateName?: string;
  /**
   * The value indicating whether to enable NRR for inbound encoded messages.
   */
  enableNrrForInboundEncodedMessages: boolean;
  /**
   * The value indicating whether to enable NRR for inbound decoded messages.
   */
  enableNrrForInboundDecodedMessages: boolean;
  /**
   * The value indicating whether to enable NRR for outbound MDN.
   */
  enableNrrForOutboundMdn: boolean;
  /**
   * The value indicating whether to enable NRR for outbound encoded messages.
   */
  enableNrrForOutboundEncodedMessages: boolean;
  /**
   * The value indicating whether to enable NRR for outbound decoded messages.
   */
  enableNrrForOutboundDecodedMessages: boolean;
  /**
   * The value indicating whether to enable NRR for inbound MDN.
   */
  enableNrrForInboundMdn: boolean;
  /**
   * The Sha2 algorithm format. Valid values are Sha2, ShaHashSize, ShaHyphenHashSize,
   * Sha2UnderscoreHashSize.
   */
  sha2AlgorithmFormat?: string;
}

/**
 * The AS2 agreement validation settings.
 */
export interface AS2ValidationSettings {
  /**
   * The value indicating whether to override incoming message properties with those in agreement.
   */
  overrideMessageProperties: boolean;
  /**
   * The value indicating whether the message has to be encrypted.
   */
  encryptMessage: boolean;
  /**
   * The value indicating whether the message has to be signed.
   */
  signMessage: boolean;
  /**
   * The value indicating whether the message has to be compressed.
   */
  compressMessage: boolean;
  /**
   * The value indicating whether to check for duplicate message.
   */
  checkDuplicateMessage: boolean;
  /**
   * The number of days to look back for duplicate interchange.
   */
  interchangeDuplicatesValidityDays: number;
  /**
   * The value indicating whether to check for certificate revocation list on send.
   */
  checkCertificateRevocationListOnSend: boolean;
  /**
   * The value indicating whether to check for certificate revocation list on receive.
   */
  checkCertificateRevocationListOnReceive: boolean;
  /**
   * The encryption algorithm. Possible values include: 'NotSpecified', 'None', 'DES3', 'RC2',
   * 'AES128', 'AES192', 'AES256'
   */
  encryptionAlgorithm: string;
  /**
   * The signing algorithm. Possible values include: 'NotSpecified', 'Default', 'SHA1', 'SHA2256',
   * 'SHA2384', 'SHA2512'
   */
  signingAlgorithm?: string;
}

/**
 * The AS2 agreement envelope settings.
 */
export interface AS2EnvelopeSettings {
  /**
   * The message content type.
   */
  messageContentType: string;
  /**
   * The value indicating whether to transmit file name in mime header.
   */
  transmitFileNameInMimeHeader: boolean;
  /**
   * The template for file name.
   */
  fileNameTemplate: string;
  /**
   * The value indicating whether to suspend message on file name generation error.
   */
  suspendMessageOnFileNameGenerationError: boolean;
  /**
   * The value indicating whether to auto generate file name.
   */
  autogenerateFileName: boolean;
}

/**
 * The AS2 agreement error settings.
 */
export interface AS2ErrorSettings {
  /**
   * The value indicating whether to suspend duplicate message.
   */
  suspendDuplicateMessage: boolean;
  /**
   * The value indicating whether to resend message If MDN is not received.
   */
  resendIfMdnNotReceived: boolean;
}

/**
 * The AS2 agreement protocol settings.
 */
export interface AS2ProtocolSettings {
  /**
   * The message connection settings.
   */
  messageConnectionSettings: AS2MessageConnectionSettings;
  /**
   * The acknowledgement connection settings.
   */
  acknowledgementConnectionSettings: AS2AcknowledgementConnectionSettings;
  /**
   * The MDN settings.
   */
  mdnSettings: AS2MdnSettings;
  /**
   * The security settings.
   */
  securitySettings: AS2SecuritySettings;
  /**
   * The validation settings.
   */
  validationSettings: AS2ValidationSettings;
  /**
   * The envelope settings.
   */
  envelopeSettings: AS2EnvelopeSettings;
  /**
   * The error settings.
   */
  errorSettings: AS2ErrorSettings;
}

/**
 * The integration account AS2 one-way agreement.
 */
export interface AS2OneWayAgreement {
  /**
   * The sender business identity
   */
  senderBusinessIdentity: BusinessIdentity;
  /**
   * The receiver business identity
   */
  receiverBusinessIdentity: BusinessIdentity;
  /**
   * The AS2 protocol settings.
   */
  protocolSettings: AS2ProtocolSettings;
}

/**
 * The integration account AS2 agreement content.
 */
export interface AS2AgreementContent {
  /**
   * The AS2 one-way receive agreement.
   */
  receiveAgreement: AS2OneWayAgreement;
  /**
   * The AS2 one-way send agreement.
   */
  sendAgreement: AS2OneWayAgreement;
}

/**
 * The X12 agreement validation settings.
 */
export interface X12ValidationSettings {
  /**
   * The value indicating whether to validate character set in the message.
   */
  validateCharacterSet: boolean;
  /**
   * The value indicating whether to check for duplicate interchange control number.
   */
  checkDuplicateInterchangeControlNumber: boolean;
  /**
   * The validity period of interchange control number.
   */
  interchangeControlNumberValidityDays: number;
  /**
   * The value indicating whether to check for duplicate group control number.
   */
  checkDuplicateGroupControlNumber: boolean;
  /**
   * The value indicating whether to check for duplicate transaction set control number.
   */
  checkDuplicateTransactionSetControlNumber: boolean;
  /**
   * The value indicating whether to Whether to validate EDI types.
   */
  validateEdiTypes: boolean;
  /**
   * The value indicating whether to Whether to validate XSD types.
   */
  validateXsdTypes: boolean;
  /**
   * The value indicating whether to allow leading and trailing spaces and zeroes.
   */
  allowLeadingAndTrailingSpacesAndZeroes: boolean;
  /**
   * The value indicating whether to trim leading and trailing spaces and zeroes.
   */
  trimLeadingAndTrailingSpacesAndZeroes: boolean;
  /**
   * The trailing separator policy. Possible values include: 'NotSpecified', 'NotAllowed',
   * 'Optional', 'Mandatory'
   */
  trailingSeparatorPolicy: string;
}

/**
 * The X12 agreement framing settings.
 */
export interface X12FramingSettings {
  /**
   * The data element separator.
   */
  dataElementSeparator: number;
  /**
   * The component separator.
   */
  componentSeparator: number;
  /**
   * The value indicating whether to replace separators in payload.
   */
  replaceSeparatorsInPayload: boolean;
  /**
   * The replacement character.
   */
  replaceCharacter: number;
  /**
   * The segment terminator.
   */
  segmentTerminator: number;
  /**
   * The X12 character set. Possible values include: 'NotSpecified', 'Basic', 'Extended', 'UTF8'
   */
  characterSet: string;
  /**
   * The segment terminator suffix. Possible values include: 'NotSpecified', 'None', 'CR', 'LF',
   * 'CRLF'
   */
  segmentTerminatorSuffix: string;
}

/**
 * The X12 agreement envelope settings.
 */
export interface X12EnvelopeSettings {
  /**
   * The controls standards id.
   */
  controlStandardsId: number;
  /**
   * The value indicating whether to use control standards id as repetition character.
   */
  useControlStandardsIdAsRepetitionCharacter: boolean;
  /**
   * The sender application id.
   */
  senderApplicationId: string;
  /**
   * The receiver application id.
   */
  receiverApplicationId: string;
  /**
   * The control version number.
   */
  controlVersionNumber: string;
  /**
   * The interchange  control number lower bound.
   */
  interchangeControlNumberLowerBound: number;
  /**
   * The interchange  control number upper bound.
   */
  interchangeControlNumberUpperBound: number;
  /**
   * The value indicating whether to rollover interchange control number.
   */
  rolloverInterchangeControlNumber: boolean;
  /**
   * The value indicating whether to enable default group headers.
   */
  enableDefaultGroupHeaders: boolean;
  /**
   * The functional group id.
   */
  functionalGroupId?: string;
  /**
   * The group control number lower bound.
   */
  groupControlNumberLowerBound: number;
  /**
   * The group control number upper bound.
   */
  groupControlNumberUpperBound: number;
  /**
   * The value indicating whether to rollover group control number.
   */
  rolloverGroupControlNumber: boolean;
  /**
   * The group header agency code.
   */
  groupHeaderAgencyCode: string;
  /**
   * The group header version.
   */
  groupHeaderVersion: string;
  /**
   * The transaction set control number lower bound.
   */
  transactionSetControlNumberLowerBound: number;
  /**
   * The transaction set control number upper bound.
   */
  transactionSetControlNumberUpperBound: number;
  /**
   * The value indicating whether to rollover transaction set control number.
   */
  rolloverTransactionSetControlNumber: boolean;
  /**
   * The transaction set control number prefix.
   */
  transactionSetControlNumberPrefix?: string;
  /**
   * The transaction set control number suffix.
   */
  transactionSetControlNumberSuffix?: string;
  /**
   * The value indicating whether to overwrite existing transaction set control number.
   */
  overwriteExistingTransactionSetControlNumber: boolean;
  /**
   * The group header date format. Possible values include: 'NotSpecified', 'CCYYMMDD', 'YYMMDD'
   */
  groupHeaderDateFormat: string;
  /**
   * The group header time format. Possible values include: 'NotSpecified', 'HHMM', 'HHMMSS',
   * 'HHMMSSdd', 'HHMMSSd'
   */
  groupHeaderTimeFormat: string;
  /**
   * The usage indicator. Possible values include: 'NotSpecified', 'Test', 'Information',
   * 'Production'
   */
  usageIndicator: string;
}

/**
 * The X12 agreement acknowledgement settings.
 */
export interface X12AcknowledgementSettings {
  /**
   * The value indicating whether technical acknowledgement is needed.
   */
  needTechnicalAcknowledgement: boolean;
  /**
   * The value indicating whether to batch the technical acknowledgements.
   */
  batchTechnicalAcknowledgements: boolean;
  /**
   * The value indicating whether functional acknowledgement is needed.
   */
  needFunctionalAcknowledgement: boolean;
  /**
   * The functional acknowledgement version.
   */
  functionalAcknowledgementVersion?: string;
  /**
   * The value indicating whether to batch functional acknowledgements.
   */
  batchFunctionalAcknowledgements: boolean;
  /**
   * The value indicating whether implementation acknowledgement is needed.
   */
  needImplementationAcknowledgement: boolean;
  /**
   * The implementation acknowledgement version.
   */
  implementationAcknowledgementVersion?: string;
  /**
   * The value indicating whether to batch implementation acknowledgements.
   */
  batchImplementationAcknowledgements: boolean;
  /**
   * The value indicating whether a loop is needed for valid messages.
   */
  needLoopForValidMessages: boolean;
  /**
   * The value indicating whether to send synchronous acknowledgement.
   */
  sendSynchronousAcknowledgement: boolean;
  /**
   * The acknowledgement control number prefix.
   */
  acknowledgementControlNumberPrefix?: string;
  /**
   * The acknowledgement control number suffix.
   */
  acknowledgementControlNumberSuffix?: string;
  /**
   * The acknowledgement control number lower bound.
   */
  acknowledgementControlNumberLowerBound: number;
  /**
   * The acknowledgement control number upper bound.
   */
  acknowledgementControlNumberUpperBound: number;
  /**
   * The value indicating whether to rollover acknowledgement control number.
   */
  rolloverAcknowledgementControlNumber: boolean;
}

/**
 * The X12 message filter for odata query.
 */
export interface X12MessageFilter {
  /**
   * The message filter type. Possible values include: 'NotSpecified', 'Include', 'Exclude'
   */
  messageFilterType: string;
}

/**
 * The X12 agreement security settings.
 */
export interface X12SecuritySettings {
  /**
   * The authorization qualifier.
   */
  authorizationQualifier: string;
  /**
   * The authorization value.
   */
  authorizationValue?: string;
  /**
   * The security qualifier.
   */
  securityQualifier: string;
  /**
   * The password value.
   */
  passwordValue?: string;
}

/**
 * The X12 processing settings.
 */
export interface X12ProcessingSettings {
  /**
   * The value indicating whether to mask security information.
   */
  maskSecurityInfo: boolean;
  /**
   * The value indicating whether to convert numerical type to implied decimal.
   */
  convertImpliedDecimal: boolean;
  /**
   * The value indicating whether to preserve interchange.
   */
  preserveInterchange: boolean;
  /**
   * The value indicating whether to suspend interchange on error.
   */
  suspendInterchangeOnError: boolean;
  /**
   * The value indicating whether to create empty xml tags for trailing separators.
   */
  createEmptyXmlTagsForTrailingSeparators: boolean;
  /**
   * The value indicating whether to use dot as decimal separator.
   */
  useDotAsDecimalSeparator: boolean;
}

/**
 * The X12 envelope override settings.
 */
export interface X12EnvelopeOverride {
  /**
   * The target namespace on which this envelope settings has to be applied.
   */
  targetNamespace: string;
  /**
   * The protocol version on which this envelope settings has to be applied.
   */
  protocolVersion: string;
  /**
   * The message id on which this envelope settings has to be applied.
   */
  messageId: string;
  /**
   * The responsible agency code.
   */
  responsibleAgencyCode: string;
  /**
   * The header version.
   */
  headerVersion: string;
  /**
   * The sender application id.
   */
  senderApplicationId: string;
  /**
   * The receiver application id.
   */
  receiverApplicationId: string;
  /**
   * The functional identifier code.
   */
  functionalIdentifierCode?: string;
  /**
   * The date format. Possible values include: 'NotSpecified', 'CCYYMMDD', 'YYMMDD'
   */
  dateFormat: string;
  /**
   * The time format. Possible values include: 'NotSpecified', 'HHMM', 'HHMMSS', 'HHMMSSdd',
   * 'HHMMSSd'
   */
  timeFormat: string;
}

/**
 * The X12 validation override settings.
 */
export interface X12ValidationOverride {
  /**
   * The message id on which the validation settings has to be applied.
   */
  messageId: string;
  /**
   * The value indicating whether to validate EDI types.
   */
  validateEdiTypes: boolean;
  /**
   * The value indicating whether to validate XSD types.
   */
  validateXsdTypes: boolean;
  /**
   * The value indicating whether to allow leading and trailing spaces and zeroes.
   */
  allowLeadingAndTrailingSpacesAndZeroes: boolean;
  /**
   * The value indicating whether to validate character Set.
   */
  validateCharacterSet: boolean;
  /**
   * The value indicating whether to trim leading and trailing spaces and zeroes.
   */
  trimLeadingAndTrailingSpacesAndZeroes: boolean;
  /**
   * The trailing separator policy. Possible values include: 'NotSpecified', 'NotAllowed',
   * 'Optional', 'Mandatory'
   */
  trailingSeparatorPolicy: string;
}

/**
 * The X12 message identifier.
 */
export interface X12MessageIdentifier {
  /**
   * The message id.
   */
  messageId: string;
}

/**
 * The X12 schema reference.
 */
export interface X12SchemaReference {
  /**
   * The message id.
   */
  messageId: string;
  /**
   * The sender application id.
   */
  senderApplicationId?: string;
  /**
   * The schema version.
   */
  schemaVersion: string;
  /**
   * The schema name.
   */
  schemaName: string;
}

/**
 * The X12 delimiter override settings.
 */
export interface X12DelimiterOverrides {
  /**
   * The protocol version.
   */
  protocolVersion?: string;
  /**
   * The message id.
   */
  messageId?: string;
  /**
   * The data element separator.
   */
  dataElementSeparator: number;
  /**
   * The component separator.
   */
  componentSeparator: number;
  /**
   * The segment terminator.
   */
  segmentTerminator: number;
  /**
   * The segment terminator suffix. Possible values include: 'NotSpecified', 'None', 'CR', 'LF',
   * 'CRLF'
   */
  segmentTerminatorSuffix: string;
  /**
   * The replacement character.
   */
  replaceCharacter: number;
  /**
   * The value indicating whether to replace separators in payload.
   */
  replaceSeparatorsInPayload: boolean;
  /**
   * The target namespace on which this delimiter settings has to be applied.
   */
  targetNamespace?: string;
}

/**
 * The X12 agreement protocol settings.
 */
export interface X12ProtocolSettings {
  /**
   * The X12 validation settings.
   */
  validationSettings: X12ValidationSettings;
  /**
   * The X12 framing settings.
   */
  framingSettings: X12FramingSettings;
  /**
   * The X12 envelope settings.
   */
  envelopeSettings: X12EnvelopeSettings;
  /**
   * The X12 acknowledgment settings.
   */
  acknowledgementSettings: X12AcknowledgementSettings;
  /**
   * The X12 message filter.
   */
  messageFilter: X12MessageFilter;
  /**
   * The X12 security settings.
   */
  securitySettings: X12SecuritySettings;
  /**
   * The X12 processing settings.
   */
  processingSettings: X12ProcessingSettings;
  /**
   * The X12 envelope override settings.
   */
  envelopeOverrides?: X12EnvelopeOverride[];
  /**
   * The X12 validation override settings.
   */
  validationOverrides?: X12ValidationOverride[];
  /**
   * The X12 message filter list.
   */
  messageFilterList?: X12MessageIdentifier[];
  /**
   * The X12 schema references.
   */
  schemaReferences: X12SchemaReference[];
  /**
   * The X12 delimiter override settings.
   */
  x12DelimiterOverrides?: X12DelimiterOverrides[];
}

/**
 * The X12 one-way agreement.
 */
export interface X12OneWayAgreement {
  /**
   * The sender business identity
   */
  senderBusinessIdentity: BusinessIdentity;
  /**
   * The receiver business identity
   */
  receiverBusinessIdentity: BusinessIdentity;
  /**
   * The X12 protocol settings.
   */
  protocolSettings: X12ProtocolSettings;
}

/**
 * The X12 agreement content.
 */
export interface X12AgreementContent {
  /**
   * The X12 one-way receive agreement.
   */
  receiveAgreement: X12OneWayAgreement;
  /**
   * The X12 one-way send agreement.
   */
  sendAgreement: X12OneWayAgreement;
}

/**
 * The Edifact agreement validation settings.
 */
export interface EdifactValidationSettings {
  /**
   * The value indicating whether to validate character set in the message.
   */
  validateCharacterSet: boolean;
  /**
   * The value indicating whether to check for duplicate interchange control number.
   */
  checkDuplicateInterchangeControlNumber: boolean;
  /**
   * The validity period of interchange control number.
   */
  interchangeControlNumberValidityDays: number;
  /**
   * The value indicating whether to check for duplicate group control number.
   */
  checkDuplicateGroupControlNumber: boolean;
  /**
   * The value indicating whether to check for duplicate transaction set control number.
   */
  checkDuplicateTransactionSetControlNumber: boolean;
  /**
   * The value indicating whether to Whether to validate EDI types.
   */
  validateEdiTypes: boolean;
  /**
   * The value indicating whether to Whether to validate XSD types.
   */
  validateXsdTypes: boolean;
  /**
   * The value indicating whether to allow leading and trailing spaces and zeroes.
   */
  allowLeadingAndTrailingSpacesAndZeroes: boolean;
  /**
   * The value indicating whether to trim leading and trailing spaces and zeroes.
   */
  trimLeadingAndTrailingSpacesAndZeroes: boolean;
  /**
   * The trailing separator policy. Possible values include: 'NotSpecified', 'NotAllowed',
   * 'Optional', 'Mandatory'
   */
  trailingSeparatorPolicy: string;
}

/**
 * The Edifact agreement framing settings.
 */
export interface EdifactFramingSettings {
  /**
   * The service code list directory version.
   */
  serviceCodeListDirectoryVersion?: string;
  /**
   * The character encoding.
   */
  characterEncoding?: string;
  /**
   * The protocol version.
   */
  protocolVersion: number;
  /**
   * The data element separator.
   */
  dataElementSeparator: number;
  /**
   * The component separator.
   */
  componentSeparator: number;
  /**
   * The segment terminator.
   */
  segmentTerminator: number;
  /**
   * The release indicator.
   */
  releaseIndicator: number;
  /**
   * The repetition separator.
   */
  repetitionSeparator: number;
  /**
   * The EDIFACT frame setting characterSet. Possible values include: 'NotSpecified', 'UNOB',
   * 'UNOA', 'UNOC', 'UNOD', 'UNOE', 'UNOF', 'UNOG', 'UNOH', 'UNOI', 'UNOJ', 'UNOK', 'UNOX',
   * 'UNOY', 'KECA'
   */
  characterSet: string;
  /**
   * The EDIFACT frame setting decimal indicator. Possible values include: 'NotSpecified', 'Comma',
   * 'Decimal'
   */
  decimalPointIndicator: string;
  /**
   * The EDIFACT frame setting segment terminator suffix. Possible values include: 'NotSpecified',
   * 'None', 'CR', 'LF', 'CRLF'
   */
  segmentTerminatorSuffix: string;
}

/**
 * The Edifact agreement envelope settings.
 */
export interface EdifactEnvelopeSettings {
  /**
   * The group association assigned code.
   */
  groupAssociationAssignedCode?: string;
  /**
   * The communication agreement id.
   */
  communicationAgreementId?: string;
  /**
   * The value indicating whether to apply delimiter string advice.
   */
  applyDelimiterStringAdvice: boolean;
  /**
   * The value indicating whether to create grouping segments.
   */
  createGroupingSegments: boolean;
  /**
   * The value indicating whether to enable default group headers.
   */
  enableDefaultGroupHeaders: boolean;
  /**
   * The recipient reference password value.
   */
  recipientReferencePasswordValue?: string;
  /**
   * The recipient reference password qualifier.
   */
  recipientReferencePasswordQualifier?: string;
  /**
   * The application reference id.
   */
  applicationReferenceId?: string;
  /**
   * The processing priority code.
   */
  processingPriorityCode?: string;
  /**
   * The interchange control number lower bound.
   */
  interchangeControlNumberLowerBound: number;
  /**
   * The interchange control number upper bound.
   */
  interchangeControlNumberUpperBound: number;
  /**
   * The value indicating whether to rollover interchange control number.
   */
  rolloverInterchangeControlNumber: boolean;
  /**
   * The interchange control number prefix.
   */
  interchangeControlNumberPrefix?: string;
  /**
   * The interchange control number suffix.
   */
  interchangeControlNumberSuffix?: string;
  /**
   * The sender reverse routing address.
   */
  senderReverseRoutingAddress?: string;
  /**
   * The receiver reverse routing address.
   */
  receiverReverseRoutingAddress?: string;
  /**
   * The functional group id.
   */
  functionalGroupId?: string;
  /**
   * The group controlling agency code.
   */
  groupControllingAgencyCode?: string;
  /**
   * The group message version.
   */
  groupMessageVersion?: string;
  /**
   * The group message release.
   */
  groupMessageRelease?: string;
  /**
   * The group control number lower bound.
   */
  groupControlNumberLowerBound: number;
  /**
   * The group control number upper bound.
   */
  groupControlNumberUpperBound: number;
  /**
   * The value indicating whether to rollover group control number.
   */
  rolloverGroupControlNumber: boolean;
  /**
   * The group control number prefix.
   */
  groupControlNumberPrefix?: string;
  /**
   * The group control number suffix.
   */
  groupControlNumberSuffix?: string;
  /**
   * The group application receiver qualifier.
   */
  groupApplicationReceiverQualifier?: string;
  /**
   * The group application receiver id.
   */
  groupApplicationReceiverId?: string;
  /**
   * The group application sender qualifier.
   */
  groupApplicationSenderQualifier?: string;
  /**
   * The group application sender id.
   */
  groupApplicationSenderId?: string;
  /**
   * The group application password.
   */
  groupApplicationPassword?: string;
  /**
   * The value indicating whether to overwrite existing transaction set control number.
   */
  overwriteExistingTransactionSetControlNumber: boolean;
  /**
   * The transaction set control number prefix.
   */
  transactionSetControlNumberPrefix?: string;
  /**
   * The transaction set control number suffix.
   */
  transactionSetControlNumberSuffix?: string;
  /**
   * The transaction set control number lower bound.
   */
  transactionSetControlNumberLowerBound: number;
  /**
   * The transaction set control number upper bound.
   */
  transactionSetControlNumberUpperBound: number;
  /**
   * The value indicating whether to rollover transaction set control number.
   */
  rolloverTransactionSetControlNumber: boolean;
  /**
   * The value indicating whether the message is a test interchange.
   */
  isTestInterchange: boolean;
  /**
   * The sender internal identification.
   */
  senderInternalIdentification?: string;
  /**
   * The sender internal sub identification.
   */
  senderInternalSubIdentification?: string;
  /**
   * The receiver internal identification.
   */
  receiverInternalIdentification?: string;
  /**
   * The receiver internal sub identification.
   */
  receiverInternalSubIdentification?: string;
}

/**
 * The Edifact agreement acknowledgement settings.
 */
export interface EdifactAcknowledgementSettings {
  /**
   * The value indicating whether technical acknowledgement is needed.
   */
  needTechnicalAcknowledgement: boolean;
  /**
   * The value indicating whether to batch the technical acknowledgements.
   */
  batchTechnicalAcknowledgements: boolean;
  /**
   * The value indicating whether functional acknowledgement is needed.
   */
  needFunctionalAcknowledgement: boolean;
  /**
   * The value indicating whether to batch functional acknowledgements.
   */
  batchFunctionalAcknowledgements: boolean;
  /**
   * The value indicating whether a loop is needed for valid messages.
   */
  needLoopForValidMessages: boolean;
  /**
   * The value indicating whether to send synchronous acknowledgement.
   */
  sendSynchronousAcknowledgement: boolean;
  /**
   * The acknowledgement control number prefix.
   */
  acknowledgementControlNumberPrefix?: string;
  /**
   * The acknowledgement control number suffix.
   */
  acknowledgementControlNumberSuffix?: string;
  /**
   * The acknowledgement control number lower bound.
   */
  acknowledgementControlNumberLowerBound: number;
  /**
   * The acknowledgement control number upper bound.
   */
  acknowledgementControlNumberUpperBound: number;
  /**
   * The value indicating whether to rollover acknowledgement control number.
   */
  rolloverAcknowledgementControlNumber: boolean;
}

/**
 * The Edifact message filter for odata query.
 */
export interface EdifactMessageFilter {
  /**
   * The message filter type. Possible values include: 'NotSpecified', 'Include', 'Exclude'
   */
  messageFilterType: string;
}

/**
 * The Edifact agreement protocol settings.
 */
export interface EdifactProcessingSettings {
  /**
   * The value indicating whether to mask security information.
   */
  maskSecurityInfo: boolean;
  /**
   * The value indicating whether to preserve interchange.
   */
  preserveInterchange: boolean;
  /**
   * The value indicating whether to suspend interchange on error.
   */
  suspendInterchangeOnError: boolean;
  /**
   * The value indicating whether to create empty xml tags for trailing separators.
   */
  createEmptyXmlTagsForTrailingSeparators: boolean;
  /**
   * The value indicating whether to use dot as decimal separator.
   */
  useDotAsDecimalSeparator: boolean;
}

/**
 * The Edifact envelope override settings.
 */
export interface EdifactEnvelopeOverride {
  /**
   * The message id on which this envelope settings has to be applied.
   */
  messageId?: string;
  /**
   * The message version on which this envelope settings has to be applied.
   */
  messageVersion?: string;
  /**
   * The message release version on which this envelope settings has to be applied.
   */
  messageRelease?: string;
  /**
   * The message association assigned code.
   */
  messageAssociationAssignedCode?: string;
  /**
   * The target namespace on which this envelope settings has to be applied.
   */
  targetNamespace?: string;
  /**
   * The functional group id.
   */
  functionalGroupId?: string;
  /**
   * The sender application qualifier.
   */
  senderApplicationQualifier?: string;
  /**
   * The sender application id.
   */
  senderApplicationId?: string;
  /**
   * The receiver application qualifier.
   */
  receiverApplicationQualifier?: string;
  /**
   * The receiver application id.
   */
  receiverApplicationId?: string;
  /**
   * The controlling agency code.
   */
  controllingAgencyCode?: string;
  /**
   * The group header message version.
   */
  groupHeaderMessageVersion?: string;
  /**
   * The group header message release.
   */
  groupHeaderMessageRelease?: string;
  /**
   * The association assigned code.
   */
  associationAssignedCode?: string;
  /**
   * The application password.
   */
  applicationPassword?: string;
}

/**
 * The Edifact message identifier.
 */
export interface EdifactMessageIdentifier {
  /**
   * The message id on which this envelope settings has to be applied.
   */
  messageId: string;
}

/**
 * The Edifact schema reference.
 */
export interface EdifactSchemaReference {
  /**
   * The message id.
   */
  messageId: string;
  /**
   * The message version.
   */
  messageVersion: string;
  /**
   * The message release version.
   */
  messageRelease: string;
  /**
   * The sender application id.
   */
  senderApplicationId?: string;
  /**
   * The sender application qualifier.
   */
  senderApplicationQualifier?: string;
  /**
   * The association assigned code.
   */
  associationAssignedCode?: string;
  /**
   * The schema name.
   */
  schemaName: string;
}

/**
 * The Edifact validation override settings.
 */
export interface EdifactValidationOverride {
  /**
   * The message id on which the validation settings has to be applied.
   */
  messageId: string;
  /**
   * The value indicating whether to validate character Set.
   */
  enforceCharacterSet: boolean;
  /**
   * The value indicating whether to validate EDI types.
   */
  validateEdiTypes: boolean;
  /**
   * The value indicating whether to validate XSD types.
   */
  validateXsdTypes: boolean;
  /**
   * The value indicating whether to allow leading and trailing spaces and zeroes.
   */
  allowLeadingAndTrailingSpacesAndZeroes: boolean;
  /**
   * The trailing separator policy. Possible values include: 'NotSpecified', 'NotAllowed',
   * 'Optional', 'Mandatory'
   */
  trailingSeparatorPolicy: string;
  /**
   * The value indicating whether to trim leading and trailing spaces and zeroes.
   */
  trimLeadingAndTrailingSpacesAndZeroes: boolean;
}

/**
 * The Edifact delimiter override settings.
 */
export interface EdifactDelimiterOverride {
  /**
   * The message id.
   */
  messageId?: string;
  /**
   * The message version.
   */
  messageVersion?: string;
  /**
   * The message release.
   */
  messageRelease?: string;
  /**
   * The data element separator.
   */
  dataElementSeparator: number;
  /**
   * The component separator.
   */
  componentSeparator: number;
  /**
   * The segment terminator.
   */
  segmentTerminator: number;
  /**
   * The repetition separator.
   */
  repetitionSeparator: number;
  /**
   * The segment terminator suffix. Possible values include: 'NotSpecified', 'None', 'CR', 'LF',
   * 'CRLF'
   */
  segmentTerminatorSuffix: string;
  /**
   * The decimal point indicator. Possible values include: 'NotSpecified', 'Comma', 'Decimal'
   */
  decimalPointIndicator: string;
  /**
   * The release indicator.
   */
  releaseIndicator: number;
  /**
   * The message association assigned code.
   */
  messageAssociationAssignedCode?: string;
  /**
   * The target namespace on which this delimiter settings has to be applied.
   */
  targetNamespace?: string;
}

/**
 * The Edifact agreement protocol settings.
 */
export interface EdifactProtocolSettings {
  /**
   * The EDIFACT validation settings.
   */
  validationSettings: EdifactValidationSettings;
  /**
   * The EDIFACT framing settings.
   */
  framingSettings: EdifactFramingSettings;
  /**
   * The EDIFACT envelope settings.
   */
  envelopeSettings: EdifactEnvelopeSettings;
  /**
   * The EDIFACT acknowledgement settings.
   */
  acknowledgementSettings: EdifactAcknowledgementSettings;
  /**
   * The EDIFACT message filter.
   */
  messageFilter: EdifactMessageFilter;
  /**
   * The EDIFACT processing Settings.
   */
  processingSettings: EdifactProcessingSettings;
  /**
   * The EDIFACT envelope override settings.
   */
  envelopeOverrides?: EdifactEnvelopeOverride[];
  /**
   * The EDIFACT message filter list.
   */
  messageFilterList?: EdifactMessageIdentifier[];
  /**
   * The EDIFACT schema references.
   */
  schemaReferences: EdifactSchemaReference[];
  /**
   * The EDIFACT validation override settings.
   */
  validationOverrides?: EdifactValidationOverride[];
  /**
   * The EDIFACT delimiter override settings.
   */
  edifactDelimiterOverrides?: EdifactDelimiterOverride[];
}

/**
 * The Edifact one way agreement.
 */
export interface EdifactOneWayAgreement {
  /**
   * The sender business identity
   */
  senderBusinessIdentity: BusinessIdentity;
  /**
   * The receiver business identity
   */
  receiverBusinessIdentity: BusinessIdentity;
  /**
   * The EDIFACT protocol settings.
   */
  protocolSettings: EdifactProtocolSettings;
}

/**
 * The Edifact agreement content.
 */
export interface EdifactAgreementContent {
  /**
   * The EDIFACT one-way receive agreement.
   */
  receiveAgreement: EdifactOneWayAgreement;
  /**
   * The EDIFACT one-way send agreement.
   */
  sendAgreement: EdifactOneWayAgreement;
}

/**
 * The integration account agreement content.
 */
export interface AgreementContent {
  /**
   * The AS2 agreement content.
   */
  aS2?: AS2AgreementContent;
  /**
   * The X12 agreement content.
   */
  x12?: X12AgreementContent;
  /**
   * The EDIFACT agreement content.
   */
  edifact?: EdifactAgreementContent;
}

/**
 * The integration account agreement.
 */
export interface IntegrationAccountAgreement extends Resource {
  /**
   * The created time.
   */
  readonly createdTime?: Date;
  /**
   * The changed time.
   */
  readonly changedTime?: Date;
  /**
   * The metadata.
   */
  metadata?: any;
  /**
   * The agreement type. Possible values include: 'NotSpecified', 'AS2', 'X12', 'Edifact'
   */
  agreementType: string;
  /**
   * The integration account partner that is set as host partner for this agreement.
   */
  hostPartner: string;
  /**
   * The integration account partner that is set as guest partner for this agreement.
   */
  guestPartner: string;
  /**
   * The business identity of the host partner.
   */
  hostIdentity: BusinessIdentity;
  /**
   * The business identity of the guest partner.
   */
  guestIdentity: BusinessIdentity;
  /**
   * The agreement content.
   */
  content: AgreementContent;
}

/**
 * The integration account agreement filter for odata query.
 */
export interface IntegrationAccountAgreementFilter {
  /**
   * The agreement type of integration account agreement. Possible values include: 'NotSpecified',
   * 'AS2', 'X12', 'Edifact'
   */
  agreementType: string;
}

/**
 * The key vault reference.
 */
export interface KeyVaultKeyReferenceKeyVault {
  /**
   * The resource id.
   */
  id?: string;
  /**
   * The resource name.
   */
  readonly name?: string;
  /**
   * The resource type.
   */
  readonly type?: string;
}

/**
 * The reference to the key vault key.
 */
export interface KeyVaultKeyReference {
  /**
   * The key vault reference.
   */
  keyVault: KeyVaultKeyReferenceKeyVault;
  /**
   * The private key name in key vault.
   */
  keyName: string;
  /**
   * The private key version in key vault.
   */
  keyVersion?: string;
}

/**
 * The integration account certificate.
 */
export interface IntegrationAccountCertificate extends Resource {
  /**
   * The created time.
   */
  readonly createdTime?: Date;
  /**
   * The changed time.
   */
  readonly changedTime?: Date;
  /**
   * The metadata.
   */
  metadata?: any;
  /**
   * The key details in the key vault.
   */
  key?: KeyVaultKeyReference;
  /**
   * The public certificate.
   */
  publicCertificate?: string;
}

/**
 * The integration account session filter.
 */
export interface IntegrationAccountSessionFilter {
  /**
   * The changed time of integration account sessions.
   */
  changedTime: Date;
}

/**
 * The integration account session.
 */
export interface IntegrationAccountSession extends Resource {
  /**
   * The created time.
   */
  readonly createdTime?: Date;
  /**
   * The changed time.
   */
  readonly changedTime?: Date;
  /**
   * The session content.
   */
  content?: any;
}

/**
 * The object that represents the operation.
 */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft.Logic
   */
  provider?: string;
  /**
   * Resource on which the operation is performed: Profile, endpoint, etc.
   */
  resource?: string;
  /**
   * Operation type: Read, write, delete, etc.
   */
  operation?: string;
}

/**
 * Logic REST API operation
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * The object that represents the operation.
   */
  display?: OperationDisplay;
}

/**
 * The key vault reference.
 */
export interface KeyVaultReference extends ResourceReference {
}

/**
 * The list key vault keys definition.
 */
export interface ListKeyVaultKeysDefinition {
  /**
   * The key vault reference.
   */
  keyVault: KeyVaultReference;
  /**
   * The skip token.
   */
  skipToken?: string;
}

/**
 * The key attributes.
 */
export interface KeyVaultKeyAttributes {
  /**
   * Whether the key is enabled or not.
   */
  enabled?: boolean;
  /**
   * When the key was created.
   */
  created?: number;
  /**
   * When the key was updated.
   */
  updated?: number;
}

/**
 * The key vault key.
 */
export interface KeyVaultKey {
  /**
   * The key id.
   */
  kid?: string;
  /**
   * The key attributes.
   */
  attributes?: KeyVaultKeyAttributes;
}

export interface TrackingEventErrorInfo {
  message?: string;
  code?: string;
}

export interface TrackingEvent {
  /**
   * Possible values include: 'LogAlways', 'Critical', 'Error', 'Warning', 'Informational',
   * 'Verbose'
  */
  eventLevel: string;
  eventTime: Date;
  /**
   * Possible values include: 'NotSpecified', 'Custom', 'AS2Message', 'AS2MDN', 'X12Interchange',
   * 'X12FunctionalGroup', 'X12TransactionSet', 'X12InterchangeAcknowledgment',
   * 'X12FunctionalGroupAcknowledgment', 'X12TransactionSetAcknowledgment', 'EdifactInterchange',
   * 'EdifactFunctionalGroup', 'EdifactTransactionSet', 'EdifactInterchangeAcknowledgment',
   * 'EdifactFunctionalGroupAcknowledgment', 'EdifactTransactionSetAcknowledgment'
  */
  recordType: string;
  error?: TrackingEventErrorInfo;
}

export interface TrackingEventsDefinition {
  sourceType: string;
  /**
   * Possible values include: 'None', 'DisableSourceInfoEnrich'
  */
  trackEventsOptions?: string;
  events: TrackingEvent[];
}

export interface SetTriggerStateActionDefinition {
  source: WorkflowTrigger;
}

export interface Expression {
  text?: string;
  value?: any;
  subexpressions?: Expression[];
  error?: AzureResourceErrorInfo;
}

export interface ExpressionRoot extends Expression {
  /**
   * The path.
  */
  path?: string;
}

/**
 * The error info.
*/
export interface ErrorInfo {
  /**
   * The error code.
  */
  code: string;
}

/**
 * The azure resource error info.
*/
export interface AzureResourceErrorInfo extends ErrorInfo {
  /**
   * The error message.
  */
  message: string;
  /**
   * The error details.
  */
  details?: AzureResourceErrorInfo[];
}

/**
 * The workflow run action repetition index.
*/
export interface RepetitionIndex {
  /**
   * The scope.
  */
  scopeName?: string;
  /**
   * The index.
  */
  itemIndex: number;
}

/**
 * The workflow run action repetition definition.
*/
export interface WorkflowRunActionRepetitionDefinition extends Resource {
  /**
   * The start time of the workflow scope repetition.
  */
  startTime?: Date;
  /**
   * The end time of the workflow scope repetition.
  */
  endTime?: Date;
  /**
   * The correlation properties.
  */
  correlation?: RunActionCorrelation;
  /**
   * The status of the workflow scope repetition. Possible values include: 'NotSpecified',
   * 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed',
   * 'Faulted', 'TimedOut', 'Aborted', 'Ignored'
  */
  status?: string;
  /**
   * The workflow scope repetition code.
  */
  code?: string;
  error?: any;
  /**
   * Gets the tracking id.
  */
  readonly trackingId?: string;
  /**
   * Gets the inputs.
  */
  readonly inputs?: any;
  /**
   * Gets the link to inputs.
  */
  readonly inputsLink?: ContentLink;
  /**
   * Gets the outputs.
  */
  readonly outputs?: any;
  /**
   * Gets the link to outputs.
  */
  readonly outputsLink?: ContentLink;
  /**
   * Gets the tracked properties.
  */
  readonly trackedProperties?: any;
  /**
   * Gets the retry histories.
  */
  retryHistory?: RetryHistory[];
  iterationCount?: number;
  /**
   * The repetition indexes.
  */
  repetitionIndexes?: RepetitionIndex[];
}

/**
 * The run operation result properties.
*/
export interface OperationResultProperties {
  /**
   * The start time of the workflow scope repetition.
  */
  startTime?: Date;
  /**
   * The end time of the workflow scope repetition.
  */
  endTime?: Date;
  /**
   * The correlation properties.
  */
  correlation?: RunActionCorrelation;
  /**
   * The status of the workflow scope repetition. Possible values include: 'NotSpecified',
   * 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed',
   * 'Faulted', 'TimedOut', 'Aborted', 'Ignored'
  */
  status?: string;
  /**
   * The workflow scope repetition code.
  */
  code?: string;
  error?: any;
}

/**
 * The operation result definition.
*/
export interface OperationResult extends OperationResultProperties {
  /**
   * Gets the tracking id.
  */
  readonly trackingId?: string;
  /**
   * Gets the inputs.
  */
  readonly inputs?: any;
  /**
   * Gets the link to inputs.
  */
  readonly inputsLink?: ContentLink;
  /**
   * Gets the outputs.
  */
  readonly outputs?: any;
  /**
   * Gets the link to outputs.
  */
  readonly outputsLink?: ContentLink;
  /**
   * Gets the tracked properties.
  */
  readonly trackedProperties?: any;
  /**
   * Gets the retry histories.
  */
  retryHistory?: RetryHistory[];
  iterationCount?: number;
}

/**
 * The correlation properties.
*/
export interface RunCorrelation {
  /**
   * The client tracking identifier.
  */
  clientTrackingId?: string;
  /**
   * The client keywords.
  */
  clientKeywords?: string[];
}

/**
 * The workflow run action correlation properties.
*/
export interface RunActionCorrelation extends RunCorrelation {
  /**
   * The action tracking identifier.
  */
  actionTrackingId?: string;
}

/**
 * The JSON schema.
*/
export interface JsonSchema {
  /**
   * The JSON title.
  */
  title?: string;
  /**
   * The JSON content.
  */
  content?: string;
}

/**
 * The artifact properties definition.
*/
export interface ArtifactProperties {
  /**
   * The artifact creation time.
  */
  createdTime?: Date;
  /**
   * The artifact changed time.
  */
  changedTime?: Date;
  metadata?: any;
}

/**
 * The artifact content properties definition.
*/
export interface ArtifactContentPropertiesDefinition extends ArtifactProperties {
  content?: any;
  /**
   * The content type.
  */
  contentType?: string;
  /**
   * The content link.
  */
  contentLink?: ContentLink;
}

/**
 * The assembly properties definition.
*/
export interface AssemblyProperties extends ArtifactContentPropertiesDefinition {
  /**
   * The assembly name.
  */
  assemblyName: string;
  /**
   * The assembly version.
  */
  assemblyVersion?: string;
  /**
   * The assembly culture.
  */
  assemblyCulture?: string;
  /**
   * The assembly public key token.
  */
  assemblyPublicKeyToken?: string;
}

/**
 * The assembly definition.
*/
export interface AssemblyDefinition extends Resource {
  /**
   * The assembly properties.
  */
  properties: AssemblyProperties;
}

/**
 * The batch release criteria.
*/
export interface BatchReleaseCriteria {
  /**
   * The message count.
  */
  messageCount?: number;
  /**
   * The batch size in bytes.
  */
  batchSize?: number;
  /**
   * The recurrence.
  */
  recurrence?: WorkflowTriggerRecurrence;
}

/**
 * The batch configuration properties definition.
*/
export interface BatchConfigurationProperties extends ArtifactProperties {
  /**
   * The name of the batch group.
  */
  batchGroupName: string;
  /**
   * The batch release criteria.
  */
  releaseCriteria: BatchReleaseCriteria;
}

/**
 * The batch configuration resource definition.
*/
export interface BatchConfiguration extends Resource {
  /**
   * The batch configuration properties.
  */
  properties: BatchConfigurationProperties;
}

/**
 * A request.
*/
export interface Request {
  /**
   * A list of all the headers attached to the request.
  */
  headers?: any;
  /**
   * The destination for the request.
  */
  uri?: string;
  /**
   * The HTTP method used for the request.
  */
  method?: string;
}

/**
 * A response.
*/
export interface Response {
  /**
   * A list of all the headers attached to the response.
  */
  headers?: any;
  /**
   * The status code of the response.
  */
  statusCode?: number;
  /**
   * Details on the location of the body content.
  */
  bodyLink?: ContentLink;
}

/**
 * The request history.
*/
export interface RequestHistoryProperties {
  /**
   * The time the request started.
  */
  startTime?: Date;
  /**
   * The time the request ended.
  */
  endTime?: Date;
  /**
   * The request.
  */
  request?: Request;
  /**
   * The response.
  */
  response?: Response;
}

/**
 * The request history.
*/
export interface RequestHistory extends Resource {
  /**
   * The request history properties.
  */
  properties?: RequestHistoryProperties;
}

/**
 * The list of workflows.
*/
export interface WorkflowListResult extends Array<Workflow> {
  /**
   * The URL to get the next set of results.
  */
  nextLink?: string;
}

/**
 * The list of workflow versions.
*/
export interface WorkflowVersionListResult extends Array<WorkflowVersion> {
  /**
   * The URL to get the next set of results.
  */
  nextLink?: string;
}

/**
 * The list of workflow triggers.
*/
export interface WorkflowTriggerListResult extends Array<WorkflowTrigger> {
  /**
   * The URL to get the next set of results.
  */
  nextLink?: string;
}

/**
 * The list of workflow trigger histories.
*/
export interface WorkflowTriggerHistoryListResult extends Array<WorkflowTriggerHistory> {
  /**
   * The URL to get the next set of results.
  */
  nextLink?: string;
}

/**
 * The list of workflow runs.
*/
export interface WorkflowRunListResult extends Array<WorkflowRun> {
  /**
   * The URL to get the next set of results.
  */
  nextLink?: string;
}

/**
 * The list of workflow run actions.
*/
export interface WorkflowRunActionListResult extends Array<WorkflowRunAction> {
  /**
   * The URL to get the next set of results.
  */
  nextLink?: string;
}

export interface ExpressionTraces extends Array<ExpressionRoot> {
}

/**
 * A collection of workflow run action repetitions.
*/
export interface WorkflowRunActionRepetitionDefinitionCollection extends
Array<WorkflowRunActionRepetitionDefinition> {
}

/**
 * The list of workflow request histories.
*/
export interface RequestHistoryListResult extends Array<RequestHistory> {
  /**
   * The URL to get the next set of results.
  */
  nextLink?: string;
}

/**
 * The list of integration accounts.
*/
export interface IntegrationAccountListResult extends Array<IntegrationAccount> {
  /**
   * The URL to get the next set of results.
  */
  nextLink?: string;
}

/**
 * Collection of key vault keys.
*/
export interface KeyVaultKeyCollection extends Array<KeyVaultKey> {
}

/**
 * A collection of assembly definitions.
*/
export interface AssemblyCollection extends Array<AssemblyDefinition> {
}

/**
 * A collection of batch configurations.
*/
export interface BatchConfigurationCollection extends Array<BatchConfiguration> {
}

/**
 * The list of integration account schemas.
*/
export interface IntegrationAccountSchemaListResult extends Array<IntegrationAccountSchema> {
  /**
   * The URL to get the next set of results.
  */
  nextLink?: string;
}

/**
 * The list of integration account maps.
*/
export interface IntegrationAccountMapListResult extends Array<IntegrationAccountMap> {
  /**
   * The URL to get the next set of results.
  */
  nextLink?: string;
}

/**
 * The list of integration account partners.
*/
export interface IntegrationAccountPartnerListResult extends Array<IntegrationAccountPartner> {
  /**
   * The URL to get the next set of results.
  */
  nextLink?: string;
}

/**
 * The list of integration account agreements.
*/
export interface IntegrationAccountAgreementListResult extends Array<IntegrationAccountAgreement> {
  /**
   * The URL to get the next set of results.
  */
  nextLink?: string;
}

/**
 * The list of integration account certificates.
*/
export interface IntegrationAccountCertificateListResult extends
Array<IntegrationAccountCertificate> {
  /**
   * The URL to get the next set of results.
  */
  nextLink?: string;
}

/**
 * The list of integration account sessions.
*/
export interface IntegrationAccountSessionListResult extends Array<IntegrationAccountSession> {
  /**
   * The URL to get the next set of results.
  */
  nextLink?: string;
}

/**
 * Result of the request to list Logic operations. It contains a list of operations and a URL link
 * to get the next set of results.
*/
export interface OperationListResult extends Array<Operation> {
  /**
   * URL to get the next set of operation list results if there are any.
  */
  nextLink?: string;
}
