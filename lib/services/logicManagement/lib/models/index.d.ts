/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource } from 'ms-rest-azure';
import { CloudError } from 'ms-rest-azure';
import * as moment from 'moment';

export { BaseResource } from 'ms-rest-azure';
export { CloudError } from 'ms-rest-azure';


/**
 * @class
 * Initializes a new instance of the Resource class.
 * @constructor
 * The base resource type.
 *
 * @member {string} [id] The resource id.
 * @member {string} [name] Gets the resource name.
 * @member {string} [type] Gets the resource type.
 * @member {string} [location] The resource location.
 * @member {object} [tags] The resource tags.
 */
export interface Resource extends BaseResource {
  readonly id?: string;
  readonly name?: string;
  readonly type?: string;
  location?: string;
  tags?: { [propertyName: string]: string };
}

/**
 * @class
 * Initializes a new instance of the SubResource class.
 * @constructor
 * The sub resource type.
 *
 * @member {string} [id] The resource id.
 */
export interface SubResource extends BaseResource {
  readonly id?: string;
}

/**
 * @class
 * Initializes a new instance of the ResourceReference class.
 * @constructor
 * The resource reference.
 *
 * @member {string} [id] The resource id.
 * @member {string} [name] Gets the resource name.
 * @member {string} [type] Gets the resource type.
 */
export interface ResourceReference {
  readonly id?: string;
  readonly name?: string;
  readonly type?: string;
}

/**
 * @class
 * Initializes a new instance of the Sku class.
 * @constructor
 * The sku type.
 *
 * @member {string} name The name. Possible values include: 'NotSpecified',
 * 'Free', 'Shared', 'Basic', 'Standard', 'Premium'
 * @member {object} [plan] The reference to plan.
 * @member {string} [plan.id] The resource id.
 * @member {string} [plan.name] Gets the resource name.
 * @member {string} [plan.type] Gets the resource type.
 */
export interface Sku {
  name: string;
  plan?: ResourceReference;
}

/**
 * @class
 * Initializes a new instance of the WorkflowParameter class.
 * @constructor
 * The workflow parameters.
 *
 * @member {string} [type] The type. Possible values include: 'NotSpecified',
 * 'String', 'SecureString', 'Int', 'Float', 'Bool', 'Array', 'Object',
 * 'SecureObject'
 * @member {object} [value] The value.
 * @member {object} [metadata] The metadata.
 * @member {string} [description] The description.
 */
export interface WorkflowParameter {
  type?: string;
  value?: any;
  metadata?: any;
  description?: string;
}

/**
 * @class
 * Initializes a new instance of the Workflow class.
 * @constructor
 * The workflow type.
 *
 * @member {string} [provisioningState] Gets the provisioning state. Possible
 * values include: 'NotSpecified', 'Accepted', 'Running', 'Ready', 'Creating',
 * 'Created', 'Deleting', 'Deleted', 'Canceled', 'Failed', 'Succeeded',
 * 'Moving', 'Updating', 'Registering', 'Registered', 'Unregistering',
 * 'Unregistered', 'Completed'
 * @member {date} [createdTime] Gets the created time.
 * @member {date} [changedTime] Gets the changed time.
 * @member {string} [state] The state. Possible values include: 'NotSpecified',
 * 'Completed', 'Enabled', 'Disabled', 'Deleted', 'Suspended'
 * @member {string} [version] Gets the version.
 * @member {string} [accessEndpoint] Gets the access endpoint.
 * @member {object} [sku] The sku.
 * @member {string} [sku.name] The name. Possible values include:
 * 'NotSpecified', 'Free', 'Shared', 'Basic', 'Standard', 'Premium'
 * @member {object} [sku.plan] The reference to plan.
 * @member {string} [sku.plan.id] The resource id.
 * @member {string} [sku.plan.name] Gets the resource name.
 * @member {string} [sku.plan.type] Gets the resource type.
 * @member {object} [integrationAccount] The integration account.
 * @member {string} [integrationAccount.id] The resource id.
 * @member {string} [integrationAccount.name] Gets the resource name.
 * @member {string} [integrationAccount.type] Gets the resource type.
 * @member {object} [definition] The definition.
 * @member {object} [parameters] The parameters.
 */
export interface Workflow extends Resource {
  readonly provisioningState?: string;
  readonly createdTime?: Date;
  readonly changedTime?: Date;
  state?: string;
  readonly version?: string;
  readonly accessEndpoint?: string;
  sku?: Sku;
  integrationAccount?: ResourceReference;
  definition?: any;
  parameters?: { [propertyName: string]: WorkflowParameter };
}

/**
 * @class
 * Initializes a new instance of the WorkflowFilter class.
 * @constructor
 * The workflow filter.
 *
 * @member {string} [state] The state of workflows. Possible values include:
 * 'NotSpecified', 'Completed', 'Enabled', 'Disabled', 'Deleted', 'Suspended'
 */
export interface WorkflowFilter {
  state?: string;
}

/**
 * @class
 * Initializes a new instance of the WorkflowVersion class.
 * @constructor
 * The workflow version.
 *
 * @member {date} [createdTime] Gets the created time.
 * @member {date} [changedTime] Gets the changed time.
 * @member {string} [state] The state. Possible values include: 'NotSpecified',
 * 'Completed', 'Enabled', 'Disabled', 'Deleted', 'Suspended'
 * @member {string} [version] Gets the version.
 * @member {string} [accessEndpoint] Gets the access endpoint.
 * @member {object} [sku] The sku.
 * @member {string} [sku.name] The name. Possible values include:
 * 'NotSpecified', 'Free', 'Shared', 'Basic', 'Standard', 'Premium'
 * @member {object} [sku.plan] The reference to plan.
 * @member {string} [sku.plan.id] The resource id.
 * @member {string} [sku.plan.name] Gets the resource name.
 * @member {string} [sku.plan.type] Gets the resource type.
 * @member {object} [integrationAccount] The integration account.
 * @member {string} [integrationAccount.id] The resource id.
 * @member {string} [integrationAccount.name] Gets the resource name.
 * @member {string} [integrationAccount.type] Gets the resource type.
 * @member {object} [definition] The definition.
 * @member {object} [parameters] The parameters.
 */
export interface WorkflowVersion extends Resource {
  readonly createdTime?: Date;
  readonly changedTime?: Date;
  state?: string;
  readonly version?: string;
  readonly accessEndpoint?: string;
  sku?: Sku;
  integrationAccount?: ResourceReference;
  definition?: any;
  parameters?: { [propertyName: string]: WorkflowParameter };
}

/**
 * @class
 * Initializes a new instance of the RecurrenceScheduleOccurrence class.
 * @constructor
 * The recurrence schedule occurence.
 *
 * @member {string} [day] The day of the week. Possible values include:
 * 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'
 * @member {number} [occurrence] The occurrence.
 */
export interface RecurrenceScheduleOccurrence {
  day?: string;
  occurrence?: number;
}

/**
 * @class
 * Initializes a new instance of the RecurrenceSchedule class.
 * @constructor
 * The recurrence schedule.
 *
 * @member {array} [minutes] The minutes.
 * @member {array} [hours] The hours.
 * @member {array} [weekDays] The days of the week.
 * @member {array} [monthDays] The month days.
 * @member {array} [monthlyOccurrences] The monthly occurrences.
 */
export interface RecurrenceSchedule {
  minutes?: number[];
  hours?: number[];
  weekDays?: string[];
  monthDays?: number[];
  monthlyOccurrences?: RecurrenceScheduleOccurrence[];
}

/**
 * @class
 * Initializes a new instance of the WorkflowTriggerRecurrence class.
 * @constructor
 * The workflow trigger recurrence.
 *
 * @member {string} [frequency] The frequency. Possible values include:
 * 'NotSpecified', 'Second', 'Minute', 'Hour', 'Day', 'Week', 'Month', 'Year'
 * @member {number} [interval] The interval.
 * @member {date} [startTime] The start time.
 * @member {date} [endTime] The end time.
 * @member {string} [timeZone] The time zone.
 * @member {object} [schedule] The recurrence schedule.
 * @member {array} [schedule.minutes] The minutes.
 * @member {array} [schedule.hours] The hours.
 * @member {array} [schedule.weekDays] The days of the week.
 * @member {array} [schedule.monthDays] The month days.
 * @member {array} [schedule.monthlyOccurrences] The monthly occurrences.
 */
export interface WorkflowTriggerRecurrence {
  frequency?: string;
  interval?: number;
  startTime?: Date;
  endTime?: Date;
  timeZone?: string;
  schedule?: RecurrenceSchedule;
}

/**
 * @class
 * Initializes a new instance of the WorkflowTrigger class.
 * @constructor
 * The workflow trigger.
 *
 * @member {string} [provisioningState] Gets the provisioning state. Possible
 * values include: 'NotSpecified', 'Accepted', 'Running', 'Ready', 'Creating',
 * 'Created', 'Deleting', 'Deleted', 'Canceled', 'Failed', 'Succeeded',
 * 'Moving', 'Updating', 'Registering', 'Registered', 'Unregistering',
 * 'Unregistered', 'Completed'
 * @member {date} [createdTime] Gets the created time.
 * @member {date} [changedTime] Gets the changed time.
 * @member {string} [state] Gets the state. Possible values include:
 * 'NotSpecified', 'Completed', 'Enabled', 'Disabled', 'Deleted', 'Suspended'
 * @member {string} [status] Gets the status. Possible values include:
 * 'NotSpecified', 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped',
 * 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted',
 * 'Ignored'
 * @member {date} [lastExecutionTime] Gets the last execution time.
 * @member {date} [nextExecutionTime] Gets the next execution time.
 * @member {object} [recurrence] Gets the workflow trigger recurrence.
 * @member {string} [recurrence.frequency] The frequency. Possible values
 * include: 'NotSpecified', 'Second', 'Minute', 'Hour', 'Day', 'Week', 'Month',
 * 'Year'
 * @member {number} [recurrence.interval] The interval.
 * @member {date} [recurrence.startTime] The start time.
 * @member {date} [recurrence.endTime] The end time.
 * @member {string} [recurrence.timeZone] The time zone.
 * @member {object} [recurrence.schedule] The recurrence schedule.
 * @member {array} [recurrence.schedule.minutes] The minutes.
 * @member {array} [recurrence.schedule.hours] The hours.
 * @member {array} [recurrence.schedule.weekDays] The days of the week.
 * @member {array} [recurrence.schedule.monthDays] The month days.
 * @member {array} [recurrence.schedule.monthlyOccurrences] The monthly
 * occurrences.
 * @member {object} [workflow] Gets the reference to workflow.
 * @member {string} [workflow.id] The resource id.
 * @member {string} [workflow.name] Gets the resource name.
 * @member {string} [workflow.type] Gets the resource type.
 * @member {string} [name] Gets the workflow trigger name.
 * @member {string} [type] Gets the workflow trigger type.
 */
export interface WorkflowTrigger extends SubResource {
  readonly provisioningState?: string;
  readonly createdTime?: Date;
  readonly changedTime?: Date;
  readonly state?: string;
  readonly status?: string;
  readonly lastExecutionTime?: Date;
  readonly nextExecutionTime?: Date;
  readonly recurrence?: WorkflowTriggerRecurrence;
  readonly workflow?: ResourceReference;
  readonly name?: string;
  readonly type?: string;
}

/**
 * @class
 * Initializes a new instance of the WorkflowTriggerFilter class.
 * @constructor
 * The workflow trigger filter.
 *
 * @member {string} [state] The state of workflow trigger. Possible values
 * include: 'NotSpecified', 'Completed', 'Enabled', 'Disabled', 'Deleted',
 * 'Suspended'
 */
export interface WorkflowTriggerFilter {
  state?: string;
}

/**
 * @class
 * Initializes a new instance of the WorkflowTriggerListCallbackUrlQueries class.
 * @constructor
 * Gets the workflow trigger callback URL query parameters.
 *
 * @member {string} [apiVersion] The api version.
 * @member {string} [sp] The SAS permissions.
 * @member {string} [sv] The SAS version.
 * @member {string} [sig] The SAS signature.
 */
export interface WorkflowTriggerListCallbackUrlQueries {
  apiVersion?: string;
  sp?: string;
  sv?: string;
  sig?: string;
}

/**
 * @class
 * Initializes a new instance of the WorkflowTriggerCallbackUrl class.
 * @constructor
 * The workflow trigger callback URL.
 *
 * @member {string} [value] Gets the workflow trigger callback URL.
 * @member {string} [method] Gets the workflow trigger callback URL HTTP
 * method.
 * @member {string} [basePath] Gets the workflow trigger callback URL base
 * path.
 * @member {string} [relativePath] Gets the workflow trigger callback URL
 * relative path.
 * @member {array} [relativePathParameters] Gets the workflow trigger callback
 * URL relative path parameters.
 * @member {object} [queries] Gets the workflow trigger callback URL query
 * parameters.
 * @member {string} [queries.apiVersion] The api version.
 * @member {string} [queries.sp] The SAS permissions.
 * @member {string} [queries.sv] The SAS version.
 * @member {string} [queries.sig] The SAS signature.
 */
export interface WorkflowTriggerCallbackUrl {
  readonly value?: string;
  readonly method?: string;
  readonly basePath?: string;
  readonly relativePath?: string;
  relativePathParameters?: string[];
  queries?: WorkflowTriggerListCallbackUrlQueries;
}

/**
 * @class
 * Initializes a new instance of the Correlation class.
 * @constructor
 * The correlation property.
 *
 * @member {string} [clientTrackingId] The client tracking id.
 */
export interface Correlation {
  clientTrackingId?: string;
}

/**
 * @class
 * Initializes a new instance of the ContentHash class.
 * @constructor
 * The content hash.
 *
 * @member {string} [algorithm] The algorithm of the content hash.
 * @member {string} [value] The value of the content hash.
 */
export interface ContentHash {
  algorithm?: string;
  value?: string;
}

/**
 * @class
 * Initializes a new instance of the ContentLink class.
 * @constructor
 * The content link.
 *
 * @member {string} [uri] The content link URI.
 * @member {string} [contentVersion] The content version.
 * @member {number} [contentSize] The content size.
 * @member {object} [contentHash] The content hash.
 * @member {string} [contentHash.algorithm] The algorithm of the content hash.
 * @member {string} [contentHash.value] The value of the content hash.
 * @member {object} [metadata] The metadata.
 */
export interface ContentLink {
  uri?: string;
  contentVersion?: string;
  contentSize?: number;
  contentHash?: ContentHash;
  metadata?: any;
}

/**
 * @class
 * Initializes a new instance of the WorkflowTriggerHistory class.
 * @constructor
 * The workflow trigger history.
 *
 * @member {date} [startTime] Gets the start time.
 * @member {date} [endTime] Gets the end time.
 * @member {string} [status] Gets the status. Possible values include:
 * 'NotSpecified', 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped',
 * 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted',
 * 'Ignored'
 * @member {string} [code] Gets the code.
 * @member {object} [error] Gets the error.
 * @member {string} [trackingId] Gets the tracking id.
 * @member {object} [correlation] The run correlation.
 * @member {string} [correlation.clientTrackingId] The client tracking id.
 * @member {object} [inputsLink] Gets the link to input parameters.
 * @member {string} [inputsLink.uri] The content link URI.
 * @member {string} [inputsLink.contentVersion] The content version.
 * @member {number} [inputsLink.contentSize] The content size.
 * @member {object} [inputsLink.contentHash] The content hash.
 * @member {string} [inputsLink.contentHash.algorithm] The algorithm of the
 * content hash.
 * @member {string} [inputsLink.contentHash.value] The value of the content
 * hash.
 * @member {object} [inputsLink.metadata] The metadata.
 * @member {object} [outputsLink] Gets the link to output parameters.
 * @member {string} [outputsLink.uri] The content link URI.
 * @member {string} [outputsLink.contentVersion] The content version.
 * @member {number} [outputsLink.contentSize] The content size.
 * @member {object} [outputsLink.contentHash] The content hash.
 * @member {string} [outputsLink.contentHash.algorithm] The algorithm of the
 * content hash.
 * @member {string} [outputsLink.contentHash.value] The value of the content
 * hash.
 * @member {object} [outputsLink.metadata] The metadata.
 * @member {boolean} [fired] Gets a value indicating whether trigger was fired.
 * @member {object} [run] Gets the reference to workflow run.
 * @member {string} [run.id] The resource id.
 * @member {string} [run.name] Gets the resource name.
 * @member {string} [run.type] Gets the resource type.
 * @member {string} [name] Gets the workflow trigger history name.
 * @member {string} [type] Gets the workflow trigger history type.
 */
export interface WorkflowTriggerHistory extends SubResource {
  readonly startTime?: Date;
  readonly endTime?: Date;
  readonly status?: string;
  readonly code?: string;
  readonly error?: any;
  readonly trackingId?: string;
  correlation?: Correlation;
  readonly inputsLink?: ContentLink;
  readonly outputsLink?: ContentLink;
  readonly fired?: boolean;
  readonly run?: ResourceReference;
  readonly name?: string;
  readonly type?: string;
}

/**
 * @class
 * Initializes a new instance of the WorkflowTriggerHistoryFilter class.
 * @constructor
 * The workflow trigger history filter.
 *
 * @member {string} [status] The status of workflow trigger history. Possible
 * values include: 'NotSpecified', 'Paused', 'Running', 'Waiting', 'Succeeded',
 * 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut',
 * 'Aborted', 'Ignored'
 */
export interface WorkflowTriggerHistoryFilter {
  status?: string;
}

/**
 * @class
 * Initializes a new instance of the WorkflowRunTrigger class.
 * @constructor
 * The workflow run trigger.
 *
 * @member {string} [name] Gets the name.
 * @member {object} [inputs] Gets the inputs.
 * @member {object} [inputsLink] Gets the link to inputs.
 * @member {string} [inputsLink.uri] The content link URI.
 * @member {string} [inputsLink.contentVersion] The content version.
 * @member {number} [inputsLink.contentSize] The content size.
 * @member {object} [inputsLink.contentHash] The content hash.
 * @member {string} [inputsLink.contentHash.algorithm] The algorithm of the
 * content hash.
 * @member {string} [inputsLink.contentHash.value] The value of the content
 * hash.
 * @member {object} [inputsLink.metadata] The metadata.
 * @member {object} [outputs] Gets the outputs.
 * @member {object} [outputsLink] Gets the link to outputs.
 * @member {string} [outputsLink.uri] The content link URI.
 * @member {string} [outputsLink.contentVersion] The content version.
 * @member {number} [outputsLink.contentSize] The content size.
 * @member {object} [outputsLink.contentHash] The content hash.
 * @member {string} [outputsLink.contentHash.algorithm] The algorithm of the
 * content hash.
 * @member {string} [outputsLink.contentHash.value] The value of the content
 * hash.
 * @member {object} [outputsLink.metadata] The metadata.
 * @member {date} [startTime] Gets the start time.
 * @member {date} [endTime] Gets the end time.
 * @member {string} [trackingId] Gets the tracking id.
 * @member {object} [correlation] The run correlation.
 * @member {string} [correlation.clientTrackingId] The client tracking id.
 * @member {string} [code] Gets the code.
 * @member {string} [status] Gets the status. Possible values include:
 * 'NotSpecified', 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped',
 * 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted',
 * 'Ignored'
 * @member {object} [error] Gets the error.
 * @member {object} [trackedProperties] Gets the tracked properties.
 */
export interface WorkflowRunTrigger {
  readonly name?: string;
  readonly inputs?: any;
  readonly inputsLink?: ContentLink;
  readonly outputs?: any;
  readonly outputsLink?: ContentLink;
  readonly startTime?: Date;
  readonly endTime?: Date;
  readonly trackingId?: string;
  correlation?: Correlation;
  readonly code?: string;
  readonly status?: string;
  readonly error?: any;
  readonly trackedProperties?: any;
}

/**
 * @class
 * Initializes a new instance of the WorkflowOutputParameter class.
 * @constructor
 * The workflow output parameter.
 *
 * @member {object} [error] Gets the error.
 */
export interface WorkflowOutputParameter extends WorkflowParameter {
  readonly error?: any;
}

/**
 * @class
 * Initializes a new instance of the WorkflowRun class.
 * @constructor
 * The workflow run.
 *
 * @member {date} [startTime] Gets the start time.
 * @member {date} [endTime] Gets the end time.
 * @member {string} [status] Gets the status. Possible values include:
 * 'NotSpecified', 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped',
 * 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted',
 * 'Ignored'
 * @member {string} [code] Gets the code.
 * @member {object} [error] Gets the error.
 * @member {string} [correlationId] Gets the correlation id.
 * @member {object} [correlation] The run correlation.
 * @member {string} [correlation.clientTrackingId] The client tracking id.
 * @member {object} [workflow] Gets the reference to workflow version.
 * @member {string} [workflow.id] The resource id.
 * @member {string} [workflow.name] Gets the resource name.
 * @member {string} [workflow.type] Gets the resource type.
 * @member {object} [trigger] Gets the fired trigger.
 * @member {string} [trigger.name] Gets the name.
 * @member {object} [trigger.inputs] Gets the inputs.
 * @member {object} [trigger.inputsLink] Gets the link to inputs.
 * @member {string} [trigger.inputsLink.uri] The content link URI.
 * @member {string} [trigger.inputsLink.contentVersion] The content version.
 * @member {number} [trigger.inputsLink.contentSize] The content size.
 * @member {object} [trigger.inputsLink.contentHash] The content hash.
 * @member {string} [trigger.inputsLink.contentHash.algorithm] The algorithm of
 * the content hash.
 * @member {string} [trigger.inputsLink.contentHash.value] The value of the
 * content hash.
 * @member {object} [trigger.inputsLink.metadata] The metadata.
 * @member {object} [trigger.outputs] Gets the outputs.
 * @member {object} [trigger.outputsLink] Gets the link to outputs.
 * @member {string} [trigger.outputsLink.uri] The content link URI.
 * @member {string} [trigger.outputsLink.contentVersion] The content version.
 * @member {number} [trigger.outputsLink.contentSize] The content size.
 * @member {object} [trigger.outputsLink.contentHash] The content hash.
 * @member {string} [trigger.outputsLink.contentHash.algorithm] The algorithm
 * of the content hash.
 * @member {string} [trigger.outputsLink.contentHash.value] The value of the
 * content hash.
 * @member {object} [trigger.outputsLink.metadata] The metadata.
 * @member {date} [trigger.startTime] Gets the start time.
 * @member {date} [trigger.endTime] Gets the end time.
 * @member {string} [trigger.trackingId] Gets the tracking id.
 * @member {object} [trigger.correlation] The run correlation.
 * @member {string} [trigger.correlation.clientTrackingId] The client tracking
 * id.
 * @member {string} [trigger.code] Gets the code.
 * @member {string} [trigger.status] Gets the status. Possible values include:
 * 'NotSpecified', 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped',
 * 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted',
 * 'Ignored'
 * @member {object} [trigger.error] Gets the error.
 * @member {object} [trigger.trackedProperties] Gets the tracked properties.
 * @member {object} [outputs] Gets the outputs.
 * @member {object} [response] Gets the response of the flow run.
 * @member {string} [response.name] Gets the name.
 * @member {object} [response.inputs] Gets the inputs.
 * @member {object} [response.inputsLink] Gets the link to inputs.
 * @member {string} [response.inputsLink.uri] The content link URI.
 * @member {string} [response.inputsLink.contentVersion] The content version.
 * @member {number} [response.inputsLink.contentSize] The content size.
 * @member {object} [response.inputsLink.contentHash] The content hash.
 * @member {string} [response.inputsLink.contentHash.algorithm] The algorithm
 * of the content hash.
 * @member {string} [response.inputsLink.contentHash.value] The value of the
 * content hash.
 * @member {object} [response.inputsLink.metadata] The metadata.
 * @member {object} [response.outputs] Gets the outputs.
 * @member {object} [response.outputsLink] Gets the link to outputs.
 * @member {string} [response.outputsLink.uri] The content link URI.
 * @member {string} [response.outputsLink.contentVersion] The content version.
 * @member {number} [response.outputsLink.contentSize] The content size.
 * @member {object} [response.outputsLink.contentHash] The content hash.
 * @member {string} [response.outputsLink.contentHash.algorithm] The algorithm
 * of the content hash.
 * @member {string} [response.outputsLink.contentHash.value] The value of the
 * content hash.
 * @member {object} [response.outputsLink.metadata] The metadata.
 * @member {date} [response.startTime] Gets the start time.
 * @member {date} [response.endTime] Gets the end time.
 * @member {string} [response.trackingId] Gets the tracking id.
 * @member {object} [response.correlation] The run correlation.
 * @member {string} [response.correlation.clientTrackingId] The client tracking
 * id.
 * @member {string} [response.code] Gets the code.
 * @member {string} [response.status] Gets the status. Possible values include:
 * 'NotSpecified', 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped',
 * 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted',
 * 'Ignored'
 * @member {object} [response.error] Gets the error.
 * @member {object} [response.trackedProperties] Gets the tracked properties.
 * @member {string} [name] Gets the workflow run name.
 * @member {string} [type] Gets the workflow run type.
 */
export interface WorkflowRun extends SubResource {
  readonly startTime?: Date;
  readonly endTime?: Date;
  readonly status?: string;
  readonly code?: string;
  readonly error?: any;
  readonly correlationId?: string;
  correlation?: Correlation;
  readonly workflow?: ResourceReference;
  readonly trigger?: WorkflowRunTrigger;
  readonly outputs?: { [propertyName: string]: WorkflowOutputParameter };
  readonly response?: WorkflowRunTrigger;
  readonly name?: string;
  readonly type?: string;
}

/**
 * @class
 * Initializes a new instance of the WorkflowRunFilter class.
 * @constructor
 * The workflow run filter.
 *
 * @member {string} [status] The status of workflow run. Possible values
 * include: 'NotSpecified', 'Paused', 'Running', 'Waiting', 'Succeeded',
 * 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut',
 * 'Aborted', 'Ignored'
 */
export interface WorkflowRunFilter {
  status?: string;
}

/**
 * @class
 * Initializes a new instance of the ErrorProperties class.
 * @constructor
 * Error properties indicate why the Logic service was not able to process the
 * incoming request. The reason is provided in the error message.
 *
 * @member {string} [code] Error code.
 * @member {string} [message] Error message indicating why the operation
 * failed.
 */
export interface ErrorProperties {
  code?: string;
  message?: string;
}

/**
 * @class
 * Initializes a new instance of the ErrorResponse class.
 * @constructor
 * Error reponse indicates Logic service is not able to process the incoming
 * request. The error property contains the error details.
 *
 * @member {object} [error] The error properties.
 * @member {string} [error.code] Error code.
 * @member {string} [error.message] Error message indicating why the operation
 * failed.
 */
export interface ErrorResponse {
  error?: ErrorProperties;
}

/**
 * @class
 * Initializes a new instance of the RetryHistory class.
 * @constructor
 * The retry history.
 *
 * @member {date} [startTime] Gets the start time.
 * @member {date} [endTime] Gets the end time.
 * @member {string} [code] Gets the status code.
 * @member {string} [clientRequestId] Gets the client request Id.
 * @member {string} [serviceRequestId] Gets the service request Id.
 * @member {object} [error] Gets the error response.
 * @member {object} [error.error] The error properties.
 * @member {string} [error.error.code] Error code.
 * @member {string} [error.error.message] Error message indicating why the
 * operation failed.
 */
export interface RetryHistory {
  startTime?: Date;
  endTime?: Date;
  code?: string;
  clientRequestId?: string;
  serviceRequestId?: string;
  error?: ErrorResponse;
}

/**
 * @class
 * Initializes a new instance of the WorkflowRunAction class.
 * @constructor
 * The workflow run action.
 *
 * @member {date} [startTime] Gets the start time.
 * @member {date} [endTime] Gets the end time.
 * @member {string} [status] Gets the status. Possible values include:
 * 'NotSpecified', 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped',
 * 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted',
 * 'Ignored'
 * @member {string} [code] Gets the code.
 * @member {object} [error] Gets the error.
 * @member {string} [trackingId] Gets the tracking id.
 * @member {object} [correlation] The correlation properties.
 * @member {string} [correlation.clientTrackingId] The client tracking id.
 * @member {object} [inputsLink] Gets the link to inputs.
 * @member {string} [inputsLink.uri] The content link URI.
 * @member {string} [inputsLink.contentVersion] The content version.
 * @member {number} [inputsLink.contentSize] The content size.
 * @member {object} [inputsLink.contentHash] The content hash.
 * @member {string} [inputsLink.contentHash.algorithm] The algorithm of the
 * content hash.
 * @member {string} [inputsLink.contentHash.value] The value of the content
 * hash.
 * @member {object} [inputsLink.metadata] The metadata.
 * @member {object} [outputsLink] Gets the link to outputs.
 * @member {string} [outputsLink.uri] The content link URI.
 * @member {string} [outputsLink.contentVersion] The content version.
 * @member {number} [outputsLink.contentSize] The content size.
 * @member {object} [outputsLink.contentHash] The content hash.
 * @member {string} [outputsLink.contentHash.algorithm] The algorithm of the
 * content hash.
 * @member {string} [outputsLink.contentHash.value] The value of the content
 * hash.
 * @member {object} [outputsLink.metadata] The metadata.
 * @member {object} [trackedProperties] Gets the tracked properties.
 * @member {array} [retryHistory] Gets the retry histories.
 * @member {string} [name] Gets the workflow run action name.
 * @member {string} [type] Gets the workflow run action type.
 */
export interface WorkflowRunAction extends SubResource {
  readonly startTime?: Date;
  readonly endTime?: Date;
  readonly status?: string;
  readonly code?: string;
  readonly error?: any;
  readonly trackingId?: string;
  correlation?: Correlation;
  readonly inputsLink?: ContentLink;
  readonly outputsLink?: ContentLink;
  readonly trackedProperties?: any;
  retryHistory?: RetryHistory[];
  readonly name?: string;
  readonly type?: string;
}

/**
 * @class
 * Initializes a new instance of the WorkflowRunActionFilter class.
 * @constructor
 * The workflow run action filter.
 *
 * @member {string} [status] The status of workflow run action. Possible values
 * include: 'NotSpecified', 'Paused', 'Running', 'Waiting', 'Succeeded',
 * 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut',
 * 'Aborted', 'Ignored'
 */
export interface WorkflowRunActionFilter {
  status?: string;
}

/**
 * @class
 * Initializes a new instance of the RegenerateActionParameter class.
 * @constructor
 * The access key regenerate action content.
 *
 * @member {string} [keyType] The key type. Possible values include:
 * 'NotSpecified', 'Primary', 'Secondary'
 */
export interface RegenerateActionParameter {
  keyType?: string;
}

/**
 * @class
 * Initializes a new instance of the GenerateUpgradedDefinitionParameters class.
 * @constructor
 * The parameters to generate upgraded definition.
 *
 * @member {string} [targetSchemaVersion] The target schema version.
 */
export interface GenerateUpgradedDefinitionParameters {
  targetSchemaVersion?: string;
}

/**
 * @class
 * Initializes a new instance of the IntegrationAccountSku class.
 * @constructor
 * The integration account sku.
 *
 * @member {string} name The sku name. Possible values include: 'NotSpecified',
 * 'Free', 'Standard'
 */
export interface IntegrationAccountSku {
  name: string;
}

/**
 * @class
 * Initializes a new instance of the IntegrationAccount class.
 * @constructor
 * The integration account.
 *
 * @member {object} [properties] The integration account properties.
 * @member {object} [sku] The sku.
 * @member {string} [sku.name] The sku name. Possible values include:
 * 'NotSpecified', 'Free', 'Standard'
 */
export interface IntegrationAccount extends Resource {
  properties?: any;
  sku?: IntegrationAccountSku;
}

/**
 * @class
 * Initializes a new instance of the GetCallbackUrlParameters class.
 * @constructor
 * The callback url parameters.
 *
 * @member {date} [notAfter] The expiry time.
 * @member {string} [keyType] The key type. Possible values include:
 * 'NotSpecified', 'Primary', 'Secondary'
 */
export interface GetCallbackUrlParameters {
  notAfter?: Date;
  keyType?: string;
}

/**
 * @class
 * Initializes a new instance of the CallbackUrl class.
 * @constructor
 * The callback url.
 *
 * @member {string} [value] The URL value.
 */
export interface CallbackUrl {
  value?: string;
}

/**
 * @class
 * Initializes a new instance of the IntegrationAccountSchema class.
 * @constructor
 * The integration account schema.
 *
 * @member {string} schemaType The schema type. Possible values include:
 * 'NotSpecified', 'Xml'
 * @member {string} [targetNamespace] The target namespace of the schema.
 * @member {string} [documentName] The document name.
 * @member {string} [fileName] The file name.
 * @member {date} [createdTime] The created time.
 * @member {date} [changedTime] The changed time.
 * @member {object} [metadata] The metadata.
 * @member {string} [content] The content.
 * @member {string} [contentType] The content type.
 * @member {object} [contentLink] The content link.
 * @member {string} [contentLink.uri] The content link URI.
 * @member {string} [contentLink.contentVersion] The content version.
 * @member {number} [contentLink.contentSize] The content size.
 * @member {object} [contentLink.contentHash] The content hash.
 * @member {string} [contentLink.contentHash.algorithm] The algorithm of the
 * content hash.
 * @member {string} [contentLink.contentHash.value] The value of the content
 * hash.
 * @member {object} [contentLink.metadata] The metadata.
 */
export interface IntegrationAccountSchema extends Resource {
  schemaType: string;
  targetNamespace?: string;
  documentName?: string;
  fileName?: string;
  readonly createdTime?: Date;
  readonly changedTime?: Date;
  metadata?: any;
  content?: string;
  contentType?: string;
  readonly contentLink?: ContentLink;
}

/**
 * @class
 * Initializes a new instance of the IntegrationAccountSchemaFilter class.
 * @constructor
 * The integration account schema filter for odata query.
 *
 * @member {string} schemaType The schema type of integration account schema.
 * Possible values include: 'NotSpecified', 'Xml'
 */
export interface IntegrationAccountSchemaFilter {
  schemaType: string;
}

/**
 * @class
 * Initializes a new instance of the IntegrationAccountMapPropertiesParametersSchema class.
 * @constructor
 * The parameters schema of integration account map.
 *
 * @member {string} [ref] The reference name.
 */
export interface IntegrationAccountMapPropertiesParametersSchema {
  ref?: string;
}

/**
 * @class
 * Initializes a new instance of the IntegrationAccountMap class.
 * @constructor
 * The integration account map.
 *
 * @member {string} mapType The map type. Possible values include:
 * 'NotSpecified', 'Xslt'
 * @member {object} [parametersSchema] The parameters schema of integration
 * account map.
 * @member {string} [parametersSchema.ref] The reference name.
 * @member {date} [createdTime] The created time.
 * @member {date} [changedTime] The changed time.
 * @member {string} [content] The content.
 * @member {string} [contentType] The content type.
 * @member {object} [contentLink] The content link.
 * @member {string} [contentLink.uri] The content link URI.
 * @member {string} [contentLink.contentVersion] The content version.
 * @member {number} [contentLink.contentSize] The content size.
 * @member {object} [contentLink.contentHash] The content hash.
 * @member {string} [contentLink.contentHash.algorithm] The algorithm of the
 * content hash.
 * @member {string} [contentLink.contentHash.value] The value of the content
 * hash.
 * @member {object} [contentLink.metadata] The metadata.
 * @member {object} [metadata] The metadata.
 */
export interface IntegrationAccountMap extends Resource {
  mapType: string;
  parametersSchema?: IntegrationAccountMapPropertiesParametersSchema;
  readonly createdTime?: Date;
  readonly changedTime?: Date;
  content?: string;
  contentType?: string;
  readonly contentLink?: ContentLink;
  metadata?: any;
}

/**
 * @class
 * Initializes a new instance of the IntegrationAccountMapFilter class.
 * @constructor
 * The integration account map filter for odata query.
 *
 * @member {string} mapType The map type of integration account map. Possible
 * values include: 'NotSpecified', 'Xslt'
 */
export interface IntegrationAccountMapFilter {
  mapType: string;
}

/**
 * @class
 * Initializes a new instance of the BusinessIdentity class.
 * @constructor
 * The integration account partner's business identity.
 *
 * @member {string} qualifier The business identity qualifier e.g. as2identity,
 * ZZ, ZZZ, 31, 32
 * @member {string} value The user defined business identity value.
 */
export interface BusinessIdentity {
  qualifier: string;
  value: string;
}

/**
 * @class
 * Initializes a new instance of the B2BPartnerContent class.
 * @constructor
 * The B2B partner content.
 *
 * @member {array} [businessIdentities] The list of partner business
 * identities.
 */
export interface B2BPartnerContent {
  businessIdentities?: BusinessIdentity[];
}

/**
 * @class
 * Initializes a new instance of the PartnerContent class.
 * @constructor
 * The integration account partner content.
 *
 * @member {object} [b2b] The B2B partner content.
 * @member {array} [b2b.businessIdentities] The list of partner business
 * identities.
 */
export interface PartnerContent {
  b2b?: B2BPartnerContent;
}

/**
 * @class
 * Initializes a new instance of the IntegrationAccountPartner class.
 * @constructor
 * The integration account partner.
 *
 * @member {string} partnerType The partner type. Possible values include:
 * 'NotSpecified', 'B2B'
 * @member {date} [createdTime] The created time.
 * @member {date} [changedTime] The changed time.
 * @member {object} [metadata] The metadata.
 * @member {object} content The partner content.
 * @member {object} [content.b2b] The B2B partner content.
 * @member {array} [content.b2b.businessIdentities] The list of partner
 * business identities.
 */
export interface IntegrationAccountPartner extends Resource {
  partnerType: string;
  readonly createdTime?: Date;
  readonly changedTime?: Date;
  metadata?: any;
  content: PartnerContent;
}

/**
 * @class
 * Initializes a new instance of the IntegrationAccountPartnerFilter class.
 * @constructor
 * The integration account partner filter for odata query.
 *
 * @member {string} partnerType The partner type of integration account
 * partner. Possible values include: 'NotSpecified', 'B2B'
 */
export interface IntegrationAccountPartnerFilter {
  partnerType: string;
}

/**
 * @class
 * Initializes a new instance of the AS2MessageConnectionSettings class.
 * @constructor
 * The AS2 agreement message connection settings.
 *
 * @member {boolean} ignoreCertificateNameMismatch The value indicating whether
 * to ignore mismatch in certificate name.
 * @member {boolean} supportHttpStatusCodeContinue The value indicating whether
 * to support HTTP status code 'CONTINUE'.
 * @member {boolean} keepHttpConnectionAlive The value indicating whether to
 * keep the connection alive.
 * @member {boolean} unfoldHttpHeaders The value indicating whether to unfold
 * the HTTP headers.
 */
export interface AS2MessageConnectionSettings {
  ignoreCertificateNameMismatch: boolean;
  supportHttpStatusCodeContinue: boolean;
  keepHttpConnectionAlive: boolean;
  unfoldHttpHeaders: boolean;
}

/**
 * @class
 * Initializes a new instance of the AS2AcknowledgementConnectionSettings class.
 * @constructor
 * The AS2 agreement acknowledegment connection settings.
 *
 * @member {boolean} ignoreCertificateNameMismatch The value indicating whether
 * to ignore mismatch in certificate name.
 * @member {boolean} supportHttpStatusCodeContinue The value indicating whether
 * to support HTTP status code 'CONTINUE'.
 * @member {boolean} keepHttpConnectionAlive The value indicating whether to
 * keep the connection alive.
 * @member {boolean} unfoldHttpHeaders The value indicating whether to unfold
 * the HTTP headers.
 */
export interface AS2AcknowledgementConnectionSettings {
  ignoreCertificateNameMismatch: boolean;
  supportHttpStatusCodeContinue: boolean;
  keepHttpConnectionAlive: boolean;
  unfoldHttpHeaders: boolean;
}

/**
 * @class
 * Initializes a new instance of the AS2MdnSettings class.
 * @constructor
 * The AS2 agreement mdn settings.
 *
 * @member {boolean} needMdn The value indicating whether to send or request a
 * MDN.
 * @member {boolean} signMdn The value indicating whether the MDN needs to be
 * signed or not.
 * @member {boolean} sendMdnAsynchronously The value indicating whether to send
 * the asynchronous MDN.
 * @member {string} [receiptDeliveryUrl] The receipt delivery URL.
 * @member {string} [dispositionNotificationTo] The disposition notification to
 * header value.
 * @member {boolean} signOutboundMdnIfOptional The value indicating whether to
 * sign the outbound MDN if optional.
 * @member {string} [mdnText] The MDN text.
 * @member {boolean} sendInboundMdnToMessageBox The value indicating whether to
 * send inbound MDN to message box.
 * @member {string} micHashingAlgorithm The signing or hashing algorithm.
 * Possible values include: 'NotSpecified', 'None', 'MD5', 'SHA1', 'SHA2256',
 * 'SHA2384', 'SHA2512'
 */
export interface AS2MdnSettings {
  needMdn: boolean;
  signMdn: boolean;
  sendMdnAsynchronously: boolean;
  receiptDeliveryUrl?: string;
  dispositionNotificationTo?: string;
  signOutboundMdnIfOptional: boolean;
  mdnText?: string;
  sendInboundMdnToMessageBox: boolean;
  micHashingAlgorithm: string;
}

/**
 * @class
 * Initializes a new instance of the AS2SecuritySettings class.
 * @constructor
 * The AS2 agreement security settings.
 *
 * @member {boolean} overrideGroupSigningCertificate The value indicating
 * whether to send or request a MDN.
 * @member {string} [signingCertificateName] The name of the signing
 * certificate.
 * @member {string} [encryptionCertificateName] The name of the encryption
 * certificate.
 * @member {boolean} enableNrrForInboundEncodedMessages The value indicating
 * whether to enable NRR for inbound encoded messages.
 * @member {boolean} enableNrrForInboundDecodedMessages The value indicating
 * whether to enable NRR for inbound decoded messages.
 * @member {boolean} enableNrrForOutboundMdn The value indicating whether to
 * enable NRR for outbound MDN.
 * @member {boolean} enableNrrForOutboundEncodedMessages The value indicating
 * whether to enable NRR for outbound encoded messages.
 * @member {boolean} enableNrrForOutboundDecodedMessages The value indicating
 * whether to enable NRR for outbound decoded messages.
 * @member {boolean} enableNrrForInboundMdn The value indicating whether to
 * enable NRR for inbound MDN.
 * @member {string} [sha2AlgorithmFormat] The Sha2 algorithm format. Valid
 * values are Sha2, ShaHashSize, ShaHyphenHashSize, Sha2UnderscoreHashSize.
 */
export interface AS2SecuritySettings {
  overrideGroupSigningCertificate: boolean;
  signingCertificateName?: string;
  encryptionCertificateName?: string;
  enableNrrForInboundEncodedMessages: boolean;
  enableNrrForInboundDecodedMessages: boolean;
  enableNrrForOutboundMdn: boolean;
  enableNrrForOutboundEncodedMessages: boolean;
  enableNrrForOutboundDecodedMessages: boolean;
  enableNrrForInboundMdn: boolean;
  sha2AlgorithmFormat?: string;
}

/**
 * @class
 * Initializes a new instance of the AS2ValidationSettings class.
 * @constructor
 * The AS2 agreement validation settings.
 *
 * @member {boolean} overrideMessageProperties The value indicating whether to
 * override incoming message properties with those in agreement.
 * @member {boolean} encryptMessage The value indicating whether the message
 * has to be encrypted.
 * @member {boolean} signMessage The value indicating whether the message has
 * to be signed.
 * @member {boolean} compressMessage The value indicating whether the message
 * has to be compressed.
 * @member {boolean} checkDuplicateMessage The value indicating whether to
 * check for duplicate message.
 * @member {number} interchangeDuplicatesValidityDays The number of days to
 * look back for duplicate interchange.
 * @member {boolean} checkCertificateRevocationListOnSend The value indicating
 * whether to check for certificate revocation list on send.
 * @member {boolean} checkCertificateRevocationListOnReceive The value
 * indicating whether to check for certificate revocation list on receive.
 * @member {string} encryptionAlgorithm The encryption algorithm. Possible
 * values include: 'NotSpecified', 'None', 'DES3', 'RC2', 'AES128', 'AES192',
 * 'AES256'
 * @member {string} [signingAlgorithm] The signing algorithm. Possible values
 * include: 'NotSpecified', 'Default', 'SHA1', 'SHA2256', 'SHA2384', 'SHA2512'
 */
export interface AS2ValidationSettings {
  overrideMessageProperties: boolean;
  encryptMessage: boolean;
  signMessage: boolean;
  compressMessage: boolean;
  checkDuplicateMessage: boolean;
  interchangeDuplicatesValidityDays: number;
  checkCertificateRevocationListOnSend: boolean;
  checkCertificateRevocationListOnReceive: boolean;
  encryptionAlgorithm: string;
  signingAlgorithm?: string;
}

/**
 * @class
 * Initializes a new instance of the AS2EnvelopeSettings class.
 * @constructor
 * The AS2 agreement envelope settings.
 *
 * @member {string} messageContentType The message content type.
 * @member {boolean} transmitFileNameInMimeHeader The value indicating whether
 * to transmit file name in mime header.
 * @member {string} fileNameTemplate The template for file name.
 * @member {boolean} suspendMessageOnFileNameGenerationError The value
 * indicating whether to suspend message on file name generation error.
 * @member {boolean} autogenerateFileName The value indicating whether to auto
 * generate file name.
 */
export interface AS2EnvelopeSettings {
  messageContentType: string;
  transmitFileNameInMimeHeader: boolean;
  fileNameTemplate: string;
  suspendMessageOnFileNameGenerationError: boolean;
  autogenerateFileName: boolean;
}

/**
 * @class
 * Initializes a new instance of the AS2ErrorSettings class.
 * @constructor
 * The AS2 agreement error settings.
 *
 * @member {boolean} suspendDuplicateMessage The value indicating whether to
 * suspend duplicate message.
 * @member {boolean} resendIfMdnNotReceived The value indicating whether to
 * resend message If MDN is not received.
 */
export interface AS2ErrorSettings {
  suspendDuplicateMessage: boolean;
  resendIfMdnNotReceived: boolean;
}

/**
 * @class
 * Initializes a new instance of the AS2ProtocolSettings class.
 * @constructor
 * The AS2 agreement protocol settings.
 *
 * @member {object} messageConnectionSettings The message connection settings.
 * @member {boolean} [messageConnectionSettings.ignoreCertificateNameMismatch]
 * The value indicating whether to ignore mismatch in certificate name.
 * @member {boolean} [messageConnectionSettings.supportHttpStatusCodeContinue]
 * The value indicating whether to support HTTP status code 'CONTINUE'.
 * @member {boolean} [messageConnectionSettings.keepHttpConnectionAlive] The
 * value indicating whether to keep the connection alive.
 * @member {boolean} [messageConnectionSettings.unfoldHttpHeaders] The value
 * indicating whether to unfold the HTTP headers.
 * @member {object} acknowledgementConnectionSettings The acknowledgement
 * connection settings.
 * @member {boolean}
 * [acknowledgementConnectionSettings.ignoreCertificateNameMismatch] The value
 * indicating whether to ignore mismatch in certificate name.
 * @member {boolean}
 * [acknowledgementConnectionSettings.supportHttpStatusCodeContinue] The value
 * indicating whether to support HTTP status code 'CONTINUE'.
 * @member {boolean}
 * [acknowledgementConnectionSettings.keepHttpConnectionAlive] The value
 * indicating whether to keep the connection alive.
 * @member {boolean} [acknowledgementConnectionSettings.unfoldHttpHeaders] The
 * value indicating whether to unfold the HTTP headers.
 * @member {object} mdnSettings The MDN settings.
 * @member {boolean} [mdnSettings.needMdn] The value indicating whether to send
 * or request a MDN.
 * @member {boolean} [mdnSettings.signMdn] The value indicating whether the MDN
 * needs to be signed or not.
 * @member {boolean} [mdnSettings.sendMdnAsynchronously] The value indicating
 * whether to send the asynchronous MDN.
 * @member {string} [mdnSettings.receiptDeliveryUrl] The receipt delivery URL.
 * @member {string} [mdnSettings.dispositionNotificationTo] The disposition
 * notification to header value.
 * @member {boolean} [mdnSettings.signOutboundMdnIfOptional] The value
 * indicating whether to sign the outbound MDN if optional.
 * @member {string} [mdnSettings.mdnText] The MDN text.
 * @member {boolean} [mdnSettings.sendInboundMdnToMessageBox] The value
 * indicating whether to send inbound MDN to message box.
 * @member {string} [mdnSettings.micHashingAlgorithm] The signing or hashing
 * algorithm. Possible values include: 'NotSpecified', 'None', 'MD5', 'SHA1',
 * 'SHA2256', 'SHA2384', 'SHA2512'
 * @member {object} securitySettings The security settings.
 * @member {boolean} [securitySettings.overrideGroupSigningCertificate] The
 * value indicating whether to send or request a MDN.
 * @member {string} [securitySettings.signingCertificateName] The name of the
 * signing certificate.
 * @member {string} [securitySettings.encryptionCertificateName] The name of
 * the encryption certificate.
 * @member {boolean} [securitySettings.enableNrrForInboundEncodedMessages] The
 * value indicating whether to enable NRR for inbound encoded messages.
 * @member {boolean} [securitySettings.enableNrrForInboundDecodedMessages] The
 * value indicating whether to enable NRR for inbound decoded messages.
 * @member {boolean} [securitySettings.enableNrrForOutboundMdn] The value
 * indicating whether to enable NRR for outbound MDN.
 * @member {boolean} [securitySettings.enableNrrForOutboundEncodedMessages] The
 * value indicating whether to enable NRR for outbound encoded messages.
 * @member {boolean} [securitySettings.enableNrrForOutboundDecodedMessages] The
 * value indicating whether to enable NRR for outbound decoded messages.
 * @member {boolean} [securitySettings.enableNrrForInboundMdn] The value
 * indicating whether to enable NRR for inbound MDN.
 * @member {string} [securitySettings.sha2AlgorithmFormat] The Sha2 algorithm
 * format. Valid values are Sha2, ShaHashSize, ShaHyphenHashSize,
 * Sha2UnderscoreHashSize.
 * @member {object} validationSettings The validation settings.
 * @member {boolean} [validationSettings.overrideMessageProperties] The value
 * indicating whether to override incoming message properties with those in
 * agreement.
 * @member {boolean} [validationSettings.encryptMessage] The value indicating
 * whether the message has to be encrypted.
 * @member {boolean} [validationSettings.signMessage] The value indicating
 * whether the message has to be signed.
 * @member {boolean} [validationSettings.compressMessage] The value indicating
 * whether the message has to be compressed.
 * @member {boolean} [validationSettings.checkDuplicateMessage] The value
 * indicating whether to check for duplicate message.
 * @member {number} [validationSettings.interchangeDuplicatesValidityDays] The
 * number of days to look back for duplicate interchange.
 * @member {boolean} [validationSettings.checkCertificateRevocationListOnSend]
 * The value indicating whether to check for certificate revocation list on
 * send.
 * @member {boolean}
 * [validationSettings.checkCertificateRevocationListOnReceive] The value
 * indicating whether to check for certificate revocation list on receive.
 * @member {string} [validationSettings.encryptionAlgorithm] The encryption
 * algorithm. Possible values include: 'NotSpecified', 'None', 'DES3', 'RC2',
 * 'AES128', 'AES192', 'AES256'
 * @member {string} [validationSettings.signingAlgorithm] The signing
 * algorithm. Possible values include: 'NotSpecified', 'Default', 'SHA1',
 * 'SHA2256', 'SHA2384', 'SHA2512'
 * @member {object} envelopeSettings The envelope settings.
 * @member {string} [envelopeSettings.messageContentType] The message content
 * type.
 * @member {boolean} [envelopeSettings.transmitFileNameInMimeHeader] The value
 * indicating whether to transmit file name in mime header.
 * @member {string} [envelopeSettings.fileNameTemplate] The template for file
 * name.
 * @member {boolean} [envelopeSettings.suspendMessageOnFileNameGenerationError]
 * The value indicating whether to suspend message on file name generation
 * error.
 * @member {boolean} [envelopeSettings.autogenerateFileName] The value
 * indicating whether to auto generate file name.
 * @member {object} errorSettings The error settings.
 * @member {boolean} [errorSettings.suspendDuplicateMessage] The value
 * indicating whether to suspend duplicate message.
 * @member {boolean} [errorSettings.resendIfMdnNotReceived] The value
 * indicating whether to resend message If MDN is not received.
 */
export interface AS2ProtocolSettings {
  messageConnectionSettings: AS2MessageConnectionSettings;
  acknowledgementConnectionSettings: AS2AcknowledgementConnectionSettings;
  mdnSettings: AS2MdnSettings;
  securitySettings: AS2SecuritySettings;
  validationSettings: AS2ValidationSettings;
  envelopeSettings: AS2EnvelopeSettings;
  errorSettings: AS2ErrorSettings;
}

/**
 * @class
 * Initializes a new instance of the AS2OneWayAgreement class.
 * @constructor
 * The integration account AS2 oneway agreement.
 *
 * @member {object} senderBusinessIdentity The sender business identity
 * @member {string} [senderBusinessIdentity.qualifier] The business identity
 * qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [senderBusinessIdentity.value] The user defined business
 * identity value.
 * @member {object} receiverBusinessIdentity The receiver business identity
 * @member {string} [receiverBusinessIdentity.qualifier] The business identity
 * qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [receiverBusinessIdentity.value] The user defined business
 * identity value.
 * @member {object} protocolSettings The AS2 protocol settings.
 * @member {object} [protocolSettings.messageConnectionSettings] The message
 * connection settings.
 * @member {boolean}
 * [protocolSettings.messageConnectionSettings.ignoreCertificateNameMismatch]
 * The value indicating whether to ignore mismatch in certificate name.
 * @member {boolean}
 * [protocolSettings.messageConnectionSettings.supportHttpStatusCodeContinue]
 * The value indicating whether to support HTTP status code 'CONTINUE'.
 * @member {boolean}
 * [protocolSettings.messageConnectionSettings.keepHttpConnectionAlive] The
 * value indicating whether to keep the connection alive.
 * @member {boolean}
 * [protocolSettings.messageConnectionSettings.unfoldHttpHeaders] The value
 * indicating whether to unfold the HTTP headers.
 * @member {object} [protocolSettings.acknowledgementConnectionSettings] The
 * acknowledgement connection settings.
 * @member {boolean}
 * [protocolSettings.acknowledgementConnectionSettings.ignoreCertificateNameMismatch]
 * The value indicating whether to ignore mismatch in certificate name.
 * @member {boolean}
 * [protocolSettings.acknowledgementConnectionSettings.supportHttpStatusCodeContinue]
 * The value indicating whether to support HTTP status code 'CONTINUE'.
 * @member {boolean}
 * [protocolSettings.acknowledgementConnectionSettings.keepHttpConnectionAlive]
 * The value indicating whether to keep the connection alive.
 * @member {boolean}
 * [protocolSettings.acknowledgementConnectionSettings.unfoldHttpHeaders] The
 * value indicating whether to unfold the HTTP headers.
 * @member {object} [protocolSettings.mdnSettings] The MDN settings.
 * @member {boolean} [protocolSettings.mdnSettings.needMdn] The value
 * indicating whether to send or request a MDN.
 * @member {boolean} [protocolSettings.mdnSettings.signMdn] The value
 * indicating whether the MDN needs to be signed or not.
 * @member {boolean} [protocolSettings.mdnSettings.sendMdnAsynchronously] The
 * value indicating whether to send the asynchronous MDN.
 * @member {string} [protocolSettings.mdnSettings.receiptDeliveryUrl] The
 * receipt delivery URL.
 * @member {string} [protocolSettings.mdnSettings.dispositionNotificationTo]
 * The disposition notification to header value.
 * @member {boolean} [protocolSettings.mdnSettings.signOutboundMdnIfOptional]
 * The value indicating whether to sign the outbound MDN if optional.
 * @member {string} [protocolSettings.mdnSettings.mdnText] The MDN text.
 * @member {boolean} [protocolSettings.mdnSettings.sendInboundMdnToMessageBox]
 * The value indicating whether to send inbound MDN to message box.
 * @member {string} [protocolSettings.mdnSettings.micHashingAlgorithm] The
 * signing or hashing algorithm. Possible values include: 'NotSpecified',
 * 'None', 'MD5', 'SHA1', 'SHA2256', 'SHA2384', 'SHA2512'
 * @member {object} [protocolSettings.securitySettings] The security settings.
 * @member {boolean}
 * [protocolSettings.securitySettings.overrideGroupSigningCertificate] The
 * value indicating whether to send or request a MDN.
 * @member {string} [protocolSettings.securitySettings.signingCertificateName]
 * The name of the signing certificate.
 * @member {string}
 * [protocolSettings.securitySettings.encryptionCertificateName] The name of
 * the encryption certificate.
 * @member {boolean}
 * [protocolSettings.securitySettings.enableNrrForInboundEncodedMessages] The
 * value indicating whether to enable NRR for inbound encoded messages.
 * @member {boolean}
 * [protocolSettings.securitySettings.enableNrrForInboundDecodedMessages] The
 * value indicating whether to enable NRR for inbound decoded messages.
 * @member {boolean}
 * [protocolSettings.securitySettings.enableNrrForOutboundMdn] The value
 * indicating whether to enable NRR for outbound MDN.
 * @member {boolean}
 * [protocolSettings.securitySettings.enableNrrForOutboundEncodedMessages] The
 * value indicating whether to enable NRR for outbound encoded messages.
 * @member {boolean}
 * [protocolSettings.securitySettings.enableNrrForOutboundDecodedMessages] The
 * value indicating whether to enable NRR for outbound decoded messages.
 * @member {boolean} [protocolSettings.securitySettings.enableNrrForInboundMdn]
 * The value indicating whether to enable NRR for inbound MDN.
 * @member {string} [protocolSettings.securitySettings.sha2AlgorithmFormat] The
 * Sha2 algorithm format. Valid values are Sha2, ShaHashSize,
 * ShaHyphenHashSize, Sha2UnderscoreHashSize.
 * @member {object} [protocolSettings.validationSettings] The validation
 * settings.
 * @member {boolean}
 * [protocolSettings.validationSettings.overrideMessageProperties] The value
 * indicating whether to override incoming message properties with those in
 * agreement.
 * @member {boolean} [protocolSettings.validationSettings.encryptMessage] The
 * value indicating whether the message has to be encrypted.
 * @member {boolean} [protocolSettings.validationSettings.signMessage] The
 * value indicating whether the message has to be signed.
 * @member {boolean} [protocolSettings.validationSettings.compressMessage] The
 * value indicating whether the message has to be compressed.
 * @member {boolean}
 * [protocolSettings.validationSettings.checkDuplicateMessage] The value
 * indicating whether to check for duplicate message.
 * @member {number}
 * [protocolSettings.validationSettings.interchangeDuplicatesValidityDays] The
 * number of days to look back for duplicate interchange.
 * @member {boolean}
 * [protocolSettings.validationSettings.checkCertificateRevocationListOnSend]
 * The value indicating whether to check for certificate revocation list on
 * send.
 * @member {boolean}
 * [protocolSettings.validationSettings.checkCertificateRevocationListOnReceive]
 * The value indicating whether to check for certificate revocation list on
 * receive.
 * @member {string} [protocolSettings.validationSettings.encryptionAlgorithm]
 * The encryption algorithm. Possible values include: 'NotSpecified', 'None',
 * 'DES3', 'RC2', 'AES128', 'AES192', 'AES256'
 * @member {string} [protocolSettings.validationSettings.signingAlgorithm] The
 * signing algorithm. Possible values include: 'NotSpecified', 'Default',
 * 'SHA1', 'SHA2256', 'SHA2384', 'SHA2512'
 * @member {object} [protocolSettings.envelopeSettings] The envelope settings.
 * @member {string} [protocolSettings.envelopeSettings.messageContentType] The
 * message content type.
 * @member {boolean}
 * [protocolSettings.envelopeSettings.transmitFileNameInMimeHeader] The value
 * indicating whether to transmit file name in mime header.
 * @member {string} [protocolSettings.envelopeSettings.fileNameTemplate] The
 * template for file name.
 * @member {boolean}
 * [protocolSettings.envelopeSettings.suspendMessageOnFileNameGenerationError]
 * The value indicating whether to suspend message on file name generation
 * error.
 * @member {boolean} [protocolSettings.envelopeSettings.autogenerateFileName]
 * The value indicating whether to auto generate file name.
 * @member {object} [protocolSettings.errorSettings] The error settings.
 * @member {boolean} [protocolSettings.errorSettings.suspendDuplicateMessage]
 * The value indicating whether to suspend duplicate message.
 * @member {boolean} [protocolSettings.errorSettings.resendIfMdnNotReceived]
 * The value indicating whether to resend message If MDN is not received.
 */
export interface AS2OneWayAgreement {
  senderBusinessIdentity: BusinessIdentity;
  receiverBusinessIdentity: BusinessIdentity;
  protocolSettings: AS2ProtocolSettings;
}

/**
 * @class
 * Initializes a new instance of the AS2AgreementContent class.
 * @constructor
 * The integration account AS2 agreement content.
 *
 * @member {object} receiveAgreement The AS2 one-way receive agreement.
 * @member {object} [receiveAgreement.senderBusinessIdentity] The sender
 * business identity
 * @member {string} [receiveAgreement.senderBusinessIdentity.qualifier] The
 * business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [receiveAgreement.senderBusinessIdentity.value] The user
 * defined business identity value.
 * @member {object} [receiveAgreement.receiverBusinessIdentity] The receiver
 * business identity
 * @member {string} [receiveAgreement.receiverBusinessIdentity.qualifier] The
 * business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [receiveAgreement.receiverBusinessIdentity.value] The user
 * defined business identity value.
 * @member {object} [receiveAgreement.protocolSettings] The AS2 protocol
 * settings.
 * @member {object}
 * [receiveAgreement.protocolSettings.messageConnectionSettings] The message
 * connection settings.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.messageConnectionSettings.ignoreCertificateNameMismatch]
 * The value indicating whether to ignore mismatch in certificate name.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.messageConnectionSettings.supportHttpStatusCodeContinue]
 * The value indicating whether to support HTTP status code 'CONTINUE'.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.messageConnectionSettings.keepHttpConnectionAlive]
 * The value indicating whether to keep the connection alive.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.messageConnectionSettings.unfoldHttpHeaders]
 * The value indicating whether to unfold the HTTP headers.
 * @member {object}
 * [receiveAgreement.protocolSettings.acknowledgementConnectionSettings] The
 * acknowledgement connection settings.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.acknowledgementConnectionSettings.ignoreCertificateNameMismatch]
 * The value indicating whether to ignore mismatch in certificate name.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.acknowledgementConnectionSettings.supportHttpStatusCodeContinue]
 * The value indicating whether to support HTTP status code 'CONTINUE'.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.acknowledgementConnectionSettings.keepHttpConnectionAlive]
 * The value indicating whether to keep the connection alive.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.acknowledgementConnectionSettings.unfoldHttpHeaders]
 * The value indicating whether to unfold the HTTP headers.
 * @member {object} [receiveAgreement.protocolSettings.mdnSettings] The MDN
 * settings.
 * @member {boolean} [receiveAgreement.protocolSettings.mdnSettings.needMdn]
 * The value indicating whether to send or request a MDN.
 * @member {boolean} [receiveAgreement.protocolSettings.mdnSettings.signMdn]
 * The value indicating whether the MDN needs to be signed or not.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.mdnSettings.sendMdnAsynchronously] The
 * value indicating whether to send the asynchronous MDN.
 * @member {string}
 * [receiveAgreement.protocolSettings.mdnSettings.receiptDeliveryUrl] The
 * receipt delivery URL.
 * @member {string}
 * [receiveAgreement.protocolSettings.mdnSettings.dispositionNotificationTo]
 * The disposition notification to header value.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.mdnSettings.signOutboundMdnIfOptional]
 * The value indicating whether to sign the outbound MDN if optional.
 * @member {string} [receiveAgreement.protocolSettings.mdnSettings.mdnText] The
 * MDN text.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.mdnSettings.sendInboundMdnToMessageBox]
 * The value indicating whether to send inbound MDN to message box.
 * @member {string}
 * [receiveAgreement.protocolSettings.mdnSettings.micHashingAlgorithm] The
 * signing or hashing algorithm. Possible values include: 'NotSpecified',
 * 'None', 'MD5', 'SHA1', 'SHA2256', 'SHA2384', 'SHA2512'
 * @member {object} [receiveAgreement.protocolSettings.securitySettings] The
 * security settings.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.securitySettings.overrideGroupSigningCertificate]
 * The value indicating whether to send or request a MDN.
 * @member {string}
 * [receiveAgreement.protocolSettings.securitySettings.signingCertificateName]
 * The name of the signing certificate.
 * @member {string}
 * [receiveAgreement.protocolSettings.securitySettings.encryptionCertificateName]
 * The name of the encryption certificate.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.securitySettings.enableNrrForInboundEncodedMessages]
 * The value indicating whether to enable NRR for inbound encoded messages.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.securitySettings.enableNrrForInboundDecodedMessages]
 * The value indicating whether to enable NRR for inbound decoded messages.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.securitySettings.enableNrrForOutboundMdn]
 * The value indicating whether to enable NRR for outbound MDN.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.securitySettings.enableNrrForOutboundEncodedMessages]
 * The value indicating whether to enable NRR for outbound encoded messages.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.securitySettings.enableNrrForOutboundDecodedMessages]
 * The value indicating whether to enable NRR for outbound decoded messages.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.securitySettings.enableNrrForInboundMdn]
 * The value indicating whether to enable NRR for inbound MDN.
 * @member {string}
 * [receiveAgreement.protocolSettings.securitySettings.sha2AlgorithmFormat] The
 * Sha2 algorithm format. Valid values are Sha2, ShaHashSize,
 * ShaHyphenHashSize, Sha2UnderscoreHashSize.
 * @member {object} [receiveAgreement.protocolSettings.validationSettings] The
 * validation settings.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.validationSettings.overrideMessageProperties]
 * The value indicating whether to override incoming message properties with
 * those in agreement.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.validationSettings.encryptMessage] The
 * value indicating whether the message has to be encrypted.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.validationSettings.signMessage] The value
 * indicating whether the message has to be signed.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.validationSettings.compressMessage] The
 * value indicating whether the message has to be compressed.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.validationSettings.checkDuplicateMessage]
 * The value indicating whether to check for duplicate message.
 * @member {number}
 * [receiveAgreement.protocolSettings.validationSettings.interchangeDuplicatesValidityDays]
 * The number of days to look back for duplicate interchange.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.validationSettings.checkCertificateRevocationListOnSend]
 * The value indicating whether to check for certificate revocation list on
 * send.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.validationSettings.checkCertificateRevocationListOnReceive]
 * The value indicating whether to check for certificate revocation list on
 * receive.
 * @member {string}
 * [receiveAgreement.protocolSettings.validationSettings.encryptionAlgorithm]
 * The encryption algorithm. Possible values include: 'NotSpecified', 'None',
 * 'DES3', 'RC2', 'AES128', 'AES192', 'AES256'
 * @member {string}
 * [receiveAgreement.protocolSettings.validationSettings.signingAlgorithm] The
 * signing algorithm. Possible values include: 'NotSpecified', 'Default',
 * 'SHA1', 'SHA2256', 'SHA2384', 'SHA2512'
 * @member {object} [receiveAgreement.protocolSettings.envelopeSettings] The
 * envelope settings.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.messageContentType] The
 * message content type.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.envelopeSettings.transmitFileNameInMimeHeader]
 * The value indicating whether to transmit file name in mime header.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.fileNameTemplate] The
 * template for file name.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.envelopeSettings.suspendMessageOnFileNameGenerationError]
 * The value indicating whether to suspend message on file name generation
 * error.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.envelopeSettings.autogenerateFileName]
 * The value indicating whether to auto generate file name.
 * @member {object} [receiveAgreement.protocolSettings.errorSettings] The error
 * settings.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.errorSettings.suspendDuplicateMessage]
 * The value indicating whether to suspend duplicate message.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.errorSettings.resendIfMdnNotReceived] The
 * value indicating whether to resend message If MDN is not received.
 * @member {object} sendAgreement The AS2 one-way send agreement.
 * @member {object} [sendAgreement.senderBusinessIdentity] The sender business
 * identity
 * @member {string} [sendAgreement.senderBusinessIdentity.qualifier] The
 * business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [sendAgreement.senderBusinessIdentity.value] The user
 * defined business identity value.
 * @member {object} [sendAgreement.receiverBusinessIdentity] The receiver
 * business identity
 * @member {string} [sendAgreement.receiverBusinessIdentity.qualifier] The
 * business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [sendAgreement.receiverBusinessIdentity.value] The user
 * defined business identity value.
 * @member {object} [sendAgreement.protocolSettings] The AS2 protocol settings.
 * @member {object} [sendAgreement.protocolSettings.messageConnectionSettings]
 * The message connection settings.
 * @member {boolean}
 * [sendAgreement.protocolSettings.messageConnectionSettings.ignoreCertificateNameMismatch]
 * The value indicating whether to ignore mismatch in certificate name.
 * @member {boolean}
 * [sendAgreement.protocolSettings.messageConnectionSettings.supportHttpStatusCodeContinue]
 * The value indicating whether to support HTTP status code 'CONTINUE'.
 * @member {boolean}
 * [sendAgreement.protocolSettings.messageConnectionSettings.keepHttpConnectionAlive]
 * The value indicating whether to keep the connection alive.
 * @member {boolean}
 * [sendAgreement.protocolSettings.messageConnectionSettings.unfoldHttpHeaders]
 * The value indicating whether to unfold the HTTP headers.
 * @member {object}
 * [sendAgreement.protocolSettings.acknowledgementConnectionSettings] The
 * acknowledgement connection settings.
 * @member {boolean}
 * [sendAgreement.protocolSettings.acknowledgementConnectionSettings.ignoreCertificateNameMismatch]
 * The value indicating whether to ignore mismatch in certificate name.
 * @member {boolean}
 * [sendAgreement.protocolSettings.acknowledgementConnectionSettings.supportHttpStatusCodeContinue]
 * The value indicating whether to support HTTP status code 'CONTINUE'.
 * @member {boolean}
 * [sendAgreement.protocolSettings.acknowledgementConnectionSettings.keepHttpConnectionAlive]
 * The value indicating whether to keep the connection alive.
 * @member {boolean}
 * [sendAgreement.protocolSettings.acknowledgementConnectionSettings.unfoldHttpHeaders]
 * The value indicating whether to unfold the HTTP headers.
 * @member {object} [sendAgreement.protocolSettings.mdnSettings] The MDN
 * settings.
 * @member {boolean} [sendAgreement.protocolSettings.mdnSettings.needMdn] The
 * value indicating whether to send or request a MDN.
 * @member {boolean} [sendAgreement.protocolSettings.mdnSettings.signMdn] The
 * value indicating whether the MDN needs to be signed or not.
 * @member {boolean}
 * [sendAgreement.protocolSettings.mdnSettings.sendMdnAsynchronously] The value
 * indicating whether to send the asynchronous MDN.
 * @member {string}
 * [sendAgreement.protocolSettings.mdnSettings.receiptDeliveryUrl] The receipt
 * delivery URL.
 * @member {string}
 * [sendAgreement.protocolSettings.mdnSettings.dispositionNotificationTo] The
 * disposition notification to header value.
 * @member {boolean}
 * [sendAgreement.protocolSettings.mdnSettings.signOutboundMdnIfOptional] The
 * value indicating whether to sign the outbound MDN if optional.
 * @member {string} [sendAgreement.protocolSettings.mdnSettings.mdnText] The
 * MDN text.
 * @member {boolean}
 * [sendAgreement.protocolSettings.mdnSettings.sendInboundMdnToMessageBox] The
 * value indicating whether to send inbound MDN to message box.
 * @member {string}
 * [sendAgreement.protocolSettings.mdnSettings.micHashingAlgorithm] The signing
 * or hashing algorithm. Possible values include: 'NotSpecified', 'None',
 * 'MD5', 'SHA1', 'SHA2256', 'SHA2384', 'SHA2512'
 * @member {object} [sendAgreement.protocolSettings.securitySettings] The
 * security settings.
 * @member {boolean}
 * [sendAgreement.protocolSettings.securitySettings.overrideGroupSigningCertificate]
 * The value indicating whether to send or request a MDN.
 * @member {string}
 * [sendAgreement.protocolSettings.securitySettings.signingCertificateName] The
 * name of the signing certificate.
 * @member {string}
 * [sendAgreement.protocolSettings.securitySettings.encryptionCertificateName]
 * The name of the encryption certificate.
 * @member {boolean}
 * [sendAgreement.protocolSettings.securitySettings.enableNrrForInboundEncodedMessages]
 * The value indicating whether to enable NRR for inbound encoded messages.
 * @member {boolean}
 * [sendAgreement.protocolSettings.securitySettings.enableNrrForInboundDecodedMessages]
 * The value indicating whether to enable NRR for inbound decoded messages.
 * @member {boolean}
 * [sendAgreement.protocolSettings.securitySettings.enableNrrForOutboundMdn]
 * The value indicating whether to enable NRR for outbound MDN.
 * @member {boolean}
 * [sendAgreement.protocolSettings.securitySettings.enableNrrForOutboundEncodedMessages]
 * The value indicating whether to enable NRR for outbound encoded messages.
 * @member {boolean}
 * [sendAgreement.protocolSettings.securitySettings.enableNrrForOutboundDecodedMessages]
 * The value indicating whether to enable NRR for outbound decoded messages.
 * @member {boolean}
 * [sendAgreement.protocolSettings.securitySettings.enableNrrForInboundMdn] The
 * value indicating whether to enable NRR for inbound MDN.
 * @member {string}
 * [sendAgreement.protocolSettings.securitySettings.sha2AlgorithmFormat] The
 * Sha2 algorithm format. Valid values are Sha2, ShaHashSize,
 * ShaHyphenHashSize, Sha2UnderscoreHashSize.
 * @member {object} [sendAgreement.protocolSettings.validationSettings] The
 * validation settings.
 * @member {boolean}
 * [sendAgreement.protocolSettings.validationSettings.overrideMessageProperties]
 * The value indicating whether to override incoming message properties with
 * those in agreement.
 * @member {boolean}
 * [sendAgreement.protocolSettings.validationSettings.encryptMessage] The value
 * indicating whether the message has to be encrypted.
 * @member {boolean}
 * [sendAgreement.protocolSettings.validationSettings.signMessage] The value
 * indicating whether the message has to be signed.
 * @member {boolean}
 * [sendAgreement.protocolSettings.validationSettings.compressMessage] The
 * value indicating whether the message has to be compressed.
 * @member {boolean}
 * [sendAgreement.protocolSettings.validationSettings.checkDuplicateMessage]
 * The value indicating whether to check for duplicate message.
 * @member {number}
 * [sendAgreement.protocolSettings.validationSettings.interchangeDuplicatesValidityDays]
 * The number of days to look back for duplicate interchange.
 * @member {boolean}
 * [sendAgreement.protocolSettings.validationSettings.checkCertificateRevocationListOnSend]
 * The value indicating whether to check for certificate revocation list on
 * send.
 * @member {boolean}
 * [sendAgreement.protocolSettings.validationSettings.checkCertificateRevocationListOnReceive]
 * The value indicating whether to check for certificate revocation list on
 * receive.
 * @member {string}
 * [sendAgreement.protocolSettings.validationSettings.encryptionAlgorithm] The
 * encryption algorithm. Possible values include: 'NotSpecified', 'None',
 * 'DES3', 'RC2', 'AES128', 'AES192', 'AES256'
 * @member {string}
 * [sendAgreement.protocolSettings.validationSettings.signingAlgorithm] The
 * signing algorithm. Possible values include: 'NotSpecified', 'Default',
 * 'SHA1', 'SHA2256', 'SHA2384', 'SHA2512'
 * @member {object} [sendAgreement.protocolSettings.envelopeSettings] The
 * envelope settings.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.messageContentType] The
 * message content type.
 * @member {boolean}
 * [sendAgreement.protocolSettings.envelopeSettings.transmitFileNameInMimeHeader]
 * The value indicating whether to transmit file name in mime header.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.fileNameTemplate] The
 * template for file name.
 * @member {boolean}
 * [sendAgreement.protocolSettings.envelopeSettings.suspendMessageOnFileNameGenerationError]
 * The value indicating whether to suspend message on file name generation
 * error.
 * @member {boolean}
 * [sendAgreement.protocolSettings.envelopeSettings.autogenerateFileName] The
 * value indicating whether to auto generate file name.
 * @member {object} [sendAgreement.protocolSettings.errorSettings] The error
 * settings.
 * @member {boolean}
 * [sendAgreement.protocolSettings.errorSettings.suspendDuplicateMessage] The
 * value indicating whether to suspend duplicate message.
 * @member {boolean}
 * [sendAgreement.protocolSettings.errorSettings.resendIfMdnNotReceived] The
 * value indicating whether to resend message If MDN is not received.
 */
export interface AS2AgreementContent {
  receiveAgreement: AS2OneWayAgreement;
  sendAgreement: AS2OneWayAgreement;
}

/**
 * @class
 * Initializes a new instance of the X12ValidationSettings class.
 * @constructor
 * The X12 agreement validation settings.
 *
 * @member {boolean} validateCharacterSet The value indicating whether to
 * validate character set in the message.
 * @member {boolean} checkDuplicateInterchangeControlNumber The value
 * indicating whether to check for duplicate interchange control number.
 * @member {number} interchangeControlNumberValidityDays The validity period of
 * interchange control number.
 * @member {boolean} checkDuplicateGroupControlNumber The value indicating
 * whether to check for duplicate group control number.
 * @member {boolean} checkDuplicateTransactionSetControlNumber The value
 * indicating whether to check for duplicate transaction set control number.
 * @member {boolean} validateEdiTypes The value indicating whether to Whether
 * to validate EDI types.
 * @member {boolean} validateXsdTypes The value indicating whether to Whether
 * to validate XSD types.
 * @member {boolean} allowLeadingAndTrailingSpacesAndZeroes The value
 * indicating whether to allow leading and trailing spaces and zeroes.
 * @member {boolean} trimLeadingAndTrailingSpacesAndZeroes The value indicating
 * whether to trim leading and trailing spaces and zeroes.
 * @member {string} trailingSeparatorPolicy The trailing separator policy.
 * Possible values include: 'NotSpecified', 'NotAllowed', 'Optional',
 * 'Mandatory'
 */
export interface X12ValidationSettings {
  validateCharacterSet: boolean;
  checkDuplicateInterchangeControlNumber: boolean;
  interchangeControlNumberValidityDays: number;
  checkDuplicateGroupControlNumber: boolean;
  checkDuplicateTransactionSetControlNumber: boolean;
  validateEdiTypes: boolean;
  validateXsdTypes: boolean;
  allowLeadingAndTrailingSpacesAndZeroes: boolean;
  trimLeadingAndTrailingSpacesAndZeroes: boolean;
  trailingSeparatorPolicy: string;
}

/**
 * @class
 * Initializes a new instance of the X12FramingSettings class.
 * @constructor
 * The X12 agreement framing settings.
 *
 * @member {number} dataElementSeparator The data element separator.
 * @member {number} componentSeparator The component separator.
 * @member {boolean} replaceSeparatorsInPayload The value indicating whether to
 * replace separators in payload.
 * @member {number} replaceCharacter The replacement character.
 * @member {number} segmentTerminator The segment terminator.
 * @member {string} characterSet The X12 character set. Possible values
 * include: 'NotSpecified', 'Basic', 'Extended', 'UTF8'
 * @member {string} segmentTerminatorSuffix The segment terminator suffix.
 * Possible values include: 'NotSpecified', 'None', 'CR', 'LF', 'CRLF'
 */
export interface X12FramingSettings {
  dataElementSeparator: number;
  componentSeparator: number;
  replaceSeparatorsInPayload: boolean;
  replaceCharacter: number;
  segmentTerminator: number;
  characterSet: string;
  segmentTerminatorSuffix: string;
}

/**
 * @class
 * Initializes a new instance of the X12EnvelopeSettings class.
 * @constructor
 * The X12 agreement envelope settings.
 *
 * @member {number} controlStandardsId The controls standards id.
 * @member {boolean} useControlStandardsIdAsRepetitionCharacter The value
 * indicating whether to use control standards id as repetition character.
 * @member {string} senderApplicationId The sender application id.
 * @member {string} receiverApplicationId The receiver application id.
 * @member {string} controlVersionNumber The control version number.
 * @member {number} interchangeControlNumberLowerBound The interchange  control
 * number lower bound.
 * @member {number} interchangeControlNumberUpperBound The interchange  control
 * number upper bound.
 * @member {boolean} rolloverInterchangeControlNumber The value indicating
 * whether to rollover interchange control number.
 * @member {boolean} enableDefaultGroupHeaders The value indicating whether to
 * enable default group headers.
 * @member {string} [functionalGroupId] The functional group id.
 * @member {number} groupControlNumberLowerBound The group control number lower
 * bound.
 * @member {number} groupControlNumberUpperBound The group control number upper
 * bound.
 * @member {boolean} rolloverGroupControlNumber The value indicating whether to
 * rollover group control number.
 * @member {string} groupHeaderAgencyCode The group header agency code.
 * @member {string} groupHeaderVersion The group header version.
 * @member {number} transactionSetControlNumberLowerBound The transaction set
 * control number lower bound.
 * @member {number} transactionSetControlNumberUpperBound The transaction set
 * control number upper bound.
 * @member {boolean} rolloverTransactionSetControlNumber The value indicating
 * whether to rollover transaction set control number.
 * @member {string} [transactionSetControlNumberPrefix] The transaction set
 * control number prefix.
 * @member {string} [transactionSetControlNumberSuffix] The transaction set
 * control number suffix.
 * @member {boolean} overwriteExistingTransactionSetControlNumber The value
 * indicating whether to overwrite existing transaction set control number.
 * @member {string} groupHeaderDateFormat The group header date format.
 * Possible values include: 'NotSpecified', 'CCYYMMDD', 'YYMMDD'
 * @member {string} groupHeaderTimeFormat The group header time format.
 * Possible values include: 'NotSpecified', 'HHMM', 'HHMMSS', 'HHMMSSdd',
 * 'HHMMSSd'
 * @member {string} usageIndicator The usage indicator. Possible values
 * include: 'NotSpecified', 'Test', 'Information', 'Production'
 */
export interface X12EnvelopeSettings {
  controlStandardsId: number;
  useControlStandardsIdAsRepetitionCharacter: boolean;
  senderApplicationId: string;
  receiverApplicationId: string;
  controlVersionNumber: string;
  interchangeControlNumberLowerBound: number;
  interchangeControlNumberUpperBound: number;
  rolloverInterchangeControlNumber: boolean;
  enableDefaultGroupHeaders: boolean;
  functionalGroupId?: string;
  groupControlNumberLowerBound: number;
  groupControlNumberUpperBound: number;
  rolloverGroupControlNumber: boolean;
  groupHeaderAgencyCode: string;
  groupHeaderVersion: string;
  transactionSetControlNumberLowerBound: number;
  transactionSetControlNumberUpperBound: number;
  rolloverTransactionSetControlNumber: boolean;
  transactionSetControlNumberPrefix?: string;
  transactionSetControlNumberSuffix?: string;
  overwriteExistingTransactionSetControlNumber: boolean;
  groupHeaderDateFormat: string;
  groupHeaderTimeFormat: string;
  usageIndicator: string;
}

/**
 * @class
 * Initializes a new instance of the X12AcknowledgementSettings class.
 * @constructor
 * The X12 agreement acknowledgement settings.
 *
 * @member {boolean} needTechnicalAcknowledgement The value indicating whether
 * technical acknowledgement is needed.
 * @member {boolean} batchTechnicalAcknowledgements The value indicating
 * whether to batch the technical acknowledgements.
 * @member {boolean} needFunctionalAcknowledgement The value indicating whether
 * functional acknowledgement is needed.
 * @member {string} [functionalAcknowledgementVersion] The functional
 * acknowledgement version.
 * @member {boolean} batchFunctionalAcknowledgements The value indicating
 * whether to batch functional acknowledgements.
 * @member {boolean} needImplementationAcknowledgement The value indicating
 * whether implementation acknowledgement is needed.
 * @member {string} [implementationAcknowledgementVersion] The implementation
 * acknowledgement version.
 * @member {boolean} batchImplementationAcknowledgements The value indicating
 * whether to batch implementation acknowledgements.
 * @member {boolean} needLoopForValidMessages The value indicating whether a
 * loop is needed for valid messages.
 * @member {boolean} sendSynchronousAcknowledgement The value indicating
 * whether to send synchronous acknowledgement.
 * @member {string} [acknowledgementControlNumberPrefix] The acknowledgement
 * control number prefix.
 * @member {string} [acknowledgementControlNumberSuffix] The acknowledgement
 * control number suffix.
 * @member {number} acknowledgementControlNumberLowerBound The acknowledgement
 * control number lower bound.
 * @member {number} acknowledgementControlNumberUpperBound The acknowledgement
 * control number upper bound.
 * @member {boolean} rolloverAcknowledgementControlNumber The value indicating
 * whether to rollover acknowledgement control number.
 */
export interface X12AcknowledgementSettings {
  needTechnicalAcknowledgement: boolean;
  batchTechnicalAcknowledgements: boolean;
  needFunctionalAcknowledgement: boolean;
  functionalAcknowledgementVersion?: string;
  batchFunctionalAcknowledgements: boolean;
  needImplementationAcknowledgement: boolean;
  implementationAcknowledgementVersion?: string;
  batchImplementationAcknowledgements: boolean;
  needLoopForValidMessages: boolean;
  sendSynchronousAcknowledgement: boolean;
  acknowledgementControlNumberPrefix?: string;
  acknowledgementControlNumberSuffix?: string;
  acknowledgementControlNumberLowerBound: number;
  acknowledgementControlNumberUpperBound: number;
  rolloverAcknowledgementControlNumber: boolean;
}

/**
 * @class
 * Initializes a new instance of the X12MessageFilter class.
 * @constructor
 * The X12 message filter for odata query.
 *
 * @member {string} messageFilterType The message filter type. Possible values
 * include: 'NotSpecified', 'Include', 'Exclude'
 */
export interface X12MessageFilter {
  messageFilterType: string;
}

/**
 * @class
 * Initializes a new instance of the X12SecuritySettings class.
 * @constructor
 * The X12 agreement security settings.
 *
 * @member {string} authorizationQualifier The authorization qualifier.
 * @member {string} [authorizationValue] The authorization value.
 * @member {string} securityQualifier The security qualifier.
 * @member {string} [passwordValue] The password value.
 */
export interface X12SecuritySettings {
  authorizationQualifier: string;
  authorizationValue?: string;
  securityQualifier: string;
  passwordValue?: string;
}

/**
 * @class
 * Initializes a new instance of the X12ProcessingSettings class.
 * @constructor
 * The X12 processing settings.
 *
 * @member {boolean} maskSecurityInfo The value indicating whether to mask
 * security information.
 * @member {boolean} convertImpliedDecimal The value indicating whether to
 * convert numerical type to implied decimal.
 * @member {boolean} preserveInterchange The value indicating whether to
 * preserve interchange.
 * @member {boolean} suspendInterchangeOnError The value indicating whether to
 * suspend interchange on error.
 * @member {boolean} createEmptyXmlTagsForTrailingSeparators The value
 * indicating whether to create empty xml tags for trailing separators.
 * @member {boolean} useDotAsDecimalSeparator The value indicating whether to
 * use dot as decimal separator.
 */
export interface X12ProcessingSettings {
  maskSecurityInfo: boolean;
  convertImpliedDecimal: boolean;
  preserveInterchange: boolean;
  suspendInterchangeOnError: boolean;
  createEmptyXmlTagsForTrailingSeparators: boolean;
  useDotAsDecimalSeparator: boolean;
}

/**
 * @class
 * Initializes a new instance of the X12EnvelopeOverride class.
 * @constructor
 * The X12 envelope override settings.
 *
 * @member {string} targetNamespace The target namespace on which this envelope
 * settings has to be applied.
 * @member {string} protocolVersion The protocol version on which this envelope
 * settings has to be applied.
 * @member {string} messageId The message id on which this envelope settings
 * has to be applied.
 * @member {string} responsibleAgencyCode The responsible agency code.
 * @member {string} headerVersion The header version.
 * @member {string} senderApplicationId The sender application id.
 * @member {string} receiverApplicationId The receiver application id.
 * @member {string} [functionalIdentifierCode] The functional identifier code.
 * @member {string} dateFormat The date format. Possible values include:
 * 'NotSpecified', 'CCYYMMDD', 'YYMMDD'
 * @member {string} timeFormat The time format. Possible values include:
 * 'NotSpecified', 'HHMM', 'HHMMSS', 'HHMMSSdd', 'HHMMSSd'
 */
export interface X12EnvelopeOverride {
  targetNamespace: string;
  protocolVersion: string;
  messageId: string;
  responsibleAgencyCode: string;
  headerVersion: string;
  senderApplicationId: string;
  receiverApplicationId: string;
  functionalIdentifierCode?: string;
  dateFormat: string;
  timeFormat: string;
}

/**
 * @class
 * Initializes a new instance of the X12ValidationOverride class.
 * @constructor
 * The X12 validation override settings.
 *
 * @member {string} messageId The message id on which the validation settings
 * has to be applied.
 * @member {boolean} validateEdiTypes The value indicating whether to validate
 * EDI types.
 * @member {boolean} validateXsdTypes The value indicating whether to validate
 * XSD types.
 * @member {boolean} allowLeadingAndTrailingSpacesAndZeroes The value
 * indicating whether to allow leading and trailing spaces and zeroes.
 * @member {boolean} validateCharacterSet The value indicating whether to
 * validate character Set.
 * @member {boolean} trimLeadingAndTrailingSpacesAndZeroes The value indicating
 * whether to trim leading and trailing spaces and zeroes.
 * @member {string} trailingSeparatorPolicy The trailing separator policy.
 * Possible values include: 'NotSpecified', 'NotAllowed', 'Optional',
 * 'Mandatory'
 */
export interface X12ValidationOverride {
  messageId: string;
  validateEdiTypes: boolean;
  validateXsdTypes: boolean;
  allowLeadingAndTrailingSpacesAndZeroes: boolean;
  validateCharacterSet: boolean;
  trimLeadingAndTrailingSpacesAndZeroes: boolean;
  trailingSeparatorPolicy: string;
}

/**
 * @class
 * Initializes a new instance of the X12MessageIdentifier class.
 * @constructor
 * The X12 message identifier.
 *
 * @member {string} messageId The message id.
 */
export interface X12MessageIdentifier {
  messageId: string;
}

/**
 * @class
 * Initializes a new instance of the X12SchemaReference class.
 * @constructor
 * The X12 schema reference.
 *
 * @member {string} messageId The message id.
 * @member {string} [senderApplicationId] The sender application id.
 * @member {string} schemaVersion The schema version.
 * @member {string} schemaName The schema name.
 */
export interface X12SchemaReference {
  messageId: string;
  senderApplicationId?: string;
  schemaVersion: string;
  schemaName: string;
}

/**
 * @class
 * Initializes a new instance of the X12DelimiterOverrides class.
 * @constructor
 * The X12 delimiter override settings.
 *
 * @member {string} [protocolVersion] The protocol version.
 * @member {string} [messageId] The message id.
 * @member {number} dataElementSeparator The data element separator.
 * @member {number} componentSeparator The component separator.
 * @member {number} segmentTerminator The segment terminator.
 * @member {string} segmentTerminatorSuffix The segment terminator suffix.
 * Possible values include: 'NotSpecified', 'None', 'CR', 'LF', 'CRLF'
 * @member {number} replaceCharacter The replacement character.
 * @member {boolean} replaceSeparatorsInPayload The value indicating whether to
 * replace separators in payload.
 * @member {string} [targetNamespace] The target namespace on which this
 * delimiter settings has to be applied.
 */
export interface X12DelimiterOverrides {
  protocolVersion?: string;
  messageId?: string;
  dataElementSeparator: number;
  componentSeparator: number;
  segmentTerminator: number;
  segmentTerminatorSuffix: string;
  replaceCharacter: number;
  replaceSeparatorsInPayload: boolean;
  targetNamespace?: string;
}

/**
 * @class
 * Initializes a new instance of the X12ProtocolSettings class.
 * @constructor
 * The X12 agreement protocol settings.
 *
 * @member {object} validationSettings The X12 validation settings.
 * @member {boolean} [validationSettings.validateCharacterSet] The value
 * indicating whether to validate character set in the message.
 * @member {boolean}
 * [validationSettings.checkDuplicateInterchangeControlNumber] The value
 * indicating whether to check for duplicate interchange control number.
 * @member {number} [validationSettings.interchangeControlNumberValidityDays]
 * The validity period of interchange control number.
 * @member {boolean} [validationSettings.checkDuplicateGroupControlNumber] The
 * value indicating whether to check for duplicate group control number.
 * @member {boolean}
 * [validationSettings.checkDuplicateTransactionSetControlNumber] The value
 * indicating whether to check for duplicate transaction set control number.
 * @member {boolean} [validationSettings.validateEdiTypes] The value indicating
 * whether to Whether to validate EDI types.
 * @member {boolean} [validationSettings.validateXsdTypes] The value indicating
 * whether to Whether to validate XSD types.
 * @member {boolean}
 * [validationSettings.allowLeadingAndTrailingSpacesAndZeroes] The value
 * indicating whether to allow leading and trailing spaces and zeroes.
 * @member {boolean} [validationSettings.trimLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to trim leading and trailing spaces and zeroes.
 * @member {string} [validationSettings.trailingSeparatorPolicy] The trailing
 * separator policy. Possible values include: 'NotSpecified', 'NotAllowed',
 * 'Optional', 'Mandatory'
 * @member {object} framingSettings The X12 framing settings.
 * @member {number} [framingSettings.dataElementSeparator] The data element
 * separator.
 * @member {number} [framingSettings.componentSeparator] The component
 * separator.
 * @member {boolean} [framingSettings.replaceSeparatorsInPayload] The value
 * indicating whether to replace separators in payload.
 * @member {number} [framingSettings.replaceCharacter] The replacement
 * character.
 * @member {number} [framingSettings.segmentTerminator] The segment terminator.
 * @member {string} [framingSettings.characterSet] The X12 character set.
 * Possible values include: 'NotSpecified', 'Basic', 'Extended', 'UTF8'
 * @member {string} [framingSettings.segmentTerminatorSuffix] The segment
 * terminator suffix. Possible values include: 'NotSpecified', 'None', 'CR',
 * 'LF', 'CRLF'
 * @member {object} envelopeSettings The X12 envelope settings.
 * @member {number} [envelopeSettings.controlStandardsId] The controls
 * standards id.
 * @member {boolean}
 * [envelopeSettings.useControlStandardsIdAsRepetitionCharacter] The value
 * indicating whether to use control standards id as repetition character.
 * @member {string} [envelopeSettings.senderApplicationId] The sender
 * application id.
 * @member {string} [envelopeSettings.receiverApplicationId] The receiver
 * application id.
 * @member {string} [envelopeSettings.controlVersionNumber] The control version
 * number.
 * @member {number} [envelopeSettings.interchangeControlNumberLowerBound] The
 * interchange  control number lower bound.
 * @member {number} [envelopeSettings.interchangeControlNumberUpperBound] The
 * interchange  control number upper bound.
 * @member {boolean} [envelopeSettings.rolloverInterchangeControlNumber] The
 * value indicating whether to rollover interchange control number.
 * @member {boolean} [envelopeSettings.enableDefaultGroupHeaders] The value
 * indicating whether to enable default group headers.
 * @member {string} [envelopeSettings.functionalGroupId] The functional group
 * id.
 * @member {number} [envelopeSettings.groupControlNumberLowerBound] The group
 * control number lower bound.
 * @member {number} [envelopeSettings.groupControlNumberUpperBound] The group
 * control number upper bound.
 * @member {boolean} [envelopeSettings.rolloverGroupControlNumber] The value
 * indicating whether to rollover group control number.
 * @member {string} [envelopeSettings.groupHeaderAgencyCode] The group header
 * agency code.
 * @member {string} [envelopeSettings.groupHeaderVersion] The group header
 * version.
 * @member {number} [envelopeSettings.transactionSetControlNumberLowerBound]
 * The transaction set control number lower bound.
 * @member {number} [envelopeSettings.transactionSetControlNumberUpperBound]
 * The transaction set control number upper bound.
 * @member {boolean} [envelopeSettings.rolloverTransactionSetControlNumber] The
 * value indicating whether to rollover transaction set control number.
 * @member {string} [envelopeSettings.transactionSetControlNumberPrefix] The
 * transaction set control number prefix.
 * @member {string} [envelopeSettings.transactionSetControlNumberSuffix] The
 * transaction set control number suffix.
 * @member {boolean}
 * [envelopeSettings.overwriteExistingTransactionSetControlNumber] The value
 * indicating whether to overwrite existing transaction set control number.
 * @member {string} [envelopeSettings.groupHeaderDateFormat] The group header
 * date format. Possible values include: 'NotSpecified', 'CCYYMMDD', 'YYMMDD'
 * @member {string} [envelopeSettings.groupHeaderTimeFormat] The group header
 * time format. Possible values include: 'NotSpecified', 'HHMM', 'HHMMSS',
 * 'HHMMSSdd', 'HHMMSSd'
 * @member {string} [envelopeSettings.usageIndicator] The usage indicator.
 * Possible values include: 'NotSpecified', 'Test', 'Information', 'Production'
 * @member {object} acknowledgementSettings The X12 acknowledgment settings.
 * @member {boolean} [acknowledgementSettings.needTechnicalAcknowledgement] The
 * value indicating whether technical acknowledgement is needed.
 * @member {boolean} [acknowledgementSettings.batchTechnicalAcknowledgements]
 * The value indicating whether to batch the technical acknowledgements.
 * @member {boolean} [acknowledgementSettings.needFunctionalAcknowledgement]
 * The value indicating whether functional acknowledgement is needed.
 * @member {string} [acknowledgementSettings.functionalAcknowledgementVersion]
 * The functional acknowledgement version.
 * @member {boolean} [acknowledgementSettings.batchFunctionalAcknowledgements]
 * The value indicating whether to batch functional acknowledgements.
 * @member {boolean}
 * [acknowledgementSettings.needImplementationAcknowledgement] The value
 * indicating whether implementation acknowledgement is needed.
 * @member {string}
 * [acknowledgementSettings.implementationAcknowledgementVersion] The
 * implementation acknowledgement version.
 * @member {boolean}
 * [acknowledgementSettings.batchImplementationAcknowledgements] The value
 * indicating whether to batch implementation acknowledgements.
 * @member {boolean} [acknowledgementSettings.needLoopForValidMessages] The
 * value indicating whether a loop is needed for valid messages.
 * @member {boolean} [acknowledgementSettings.sendSynchronousAcknowledgement]
 * The value indicating whether to send synchronous acknowledgement.
 * @member {string}
 * [acknowledgementSettings.acknowledgementControlNumberPrefix] The
 * acknowledgement control number prefix.
 * @member {string}
 * [acknowledgementSettings.acknowledgementControlNumberSuffix] The
 * acknowledgement control number suffix.
 * @member {number}
 * [acknowledgementSettings.acknowledgementControlNumberLowerBound] The
 * acknowledgement control number lower bound.
 * @member {number}
 * [acknowledgementSettings.acknowledgementControlNumberUpperBound] The
 * acknowledgement control number upper bound.
 * @member {boolean}
 * [acknowledgementSettings.rolloverAcknowledgementControlNumber] The value
 * indicating whether to rollover acknowledgement control number.
 * @member {object} messageFilter The X12 message filter.
 * @member {string} [messageFilter.messageFilterType] The message filter type.
 * Possible values include: 'NotSpecified', 'Include', 'Exclude'
 * @member {object} securitySettings The X12 security settings.
 * @member {string} [securitySettings.authorizationQualifier] The authorization
 * qualifier.
 * @member {string} [securitySettings.authorizationValue] The authorization
 * value.
 * @member {string} [securitySettings.securityQualifier] The security
 * qualifier.
 * @member {string} [securitySettings.passwordValue] The password value.
 * @member {object} processingSettings The X12 processing settings.
 * @member {boolean} [processingSettings.maskSecurityInfo] The value indicating
 * whether to mask security information.
 * @member {boolean} [processingSettings.convertImpliedDecimal] The value
 * indicating whether to convert numerical type to implied decimal.
 * @member {boolean} [processingSettings.preserveInterchange] The value
 * indicating whether to preserve interchange.
 * @member {boolean} [processingSettings.suspendInterchangeOnError] The value
 * indicating whether to suspend interchange on error.
 * @member {boolean}
 * [processingSettings.createEmptyXmlTagsForTrailingSeparators] The value
 * indicating whether to create empty xml tags for trailing separators.
 * @member {boolean} [processingSettings.useDotAsDecimalSeparator] The value
 * indicating whether to use dot as decimal separator.
 * @member {array} [envelopeOverrides] The X12 envelope override settings.
 * @member {array} [validationOverrides] The X12 validation override settings.
 * @member {array} [messageFilterList] The X12 message filter list.
 * @member {array} schemaReferences The X12 schema references.
 * @member {array} [x12DelimiterOverrides] The X12 delimiter override settings.
 */
export interface X12ProtocolSettings {
  validationSettings: X12ValidationSettings;
  framingSettings: X12FramingSettings;
  envelopeSettings: X12EnvelopeSettings;
  acknowledgementSettings: X12AcknowledgementSettings;
  messageFilter: X12MessageFilter;
  securitySettings: X12SecuritySettings;
  processingSettings: X12ProcessingSettings;
  envelopeOverrides?: X12EnvelopeOverride[];
  validationOverrides?: X12ValidationOverride[];
  messageFilterList?: X12MessageIdentifier[];
  schemaReferences: X12SchemaReference[];
  x12DelimiterOverrides?: X12DelimiterOverrides[];
}

/**
 * @class
 * Initializes a new instance of the X12OneWayAgreement class.
 * @constructor
 * The X12 oneway agreement.
 *
 * @member {object} senderBusinessIdentity The sender business identity
 * @member {string} [senderBusinessIdentity.qualifier] The business identity
 * qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [senderBusinessIdentity.value] The user defined business
 * identity value.
 * @member {object} receiverBusinessIdentity The receiver business identity
 * @member {string} [receiverBusinessIdentity.qualifier] The business identity
 * qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [receiverBusinessIdentity.value] The user defined business
 * identity value.
 * @member {object} protocolSettings The X12 protocol settings.
 * @member {object} [protocolSettings.validationSettings] The X12 validation
 * settings.
 * @member {boolean} [protocolSettings.validationSettings.validateCharacterSet]
 * The value indicating whether to validate character set in the message.
 * @member {boolean}
 * [protocolSettings.validationSettings.checkDuplicateInterchangeControlNumber]
 * The value indicating whether to check for duplicate interchange control
 * number.
 * @member {number}
 * [protocolSettings.validationSettings.interchangeControlNumberValidityDays]
 * The validity period of interchange control number.
 * @member {boolean}
 * [protocolSettings.validationSettings.checkDuplicateGroupControlNumber] The
 * value indicating whether to check for duplicate group control number.
 * @member {boolean}
 * [protocolSettings.validationSettings.checkDuplicateTransactionSetControlNumber]
 * The value indicating whether to check for duplicate transaction set control
 * number.
 * @member {boolean} [protocolSettings.validationSettings.validateEdiTypes] The
 * value indicating whether to Whether to validate EDI types.
 * @member {boolean} [protocolSettings.validationSettings.validateXsdTypes] The
 * value indicating whether to Whether to validate XSD types.
 * @member {boolean}
 * [protocolSettings.validationSettings.allowLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to allow leading and trailing spaces and
 * zeroes.
 * @member {boolean}
 * [protocolSettings.validationSettings.trimLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to trim leading and trailing spaces and zeroes.
 * @member {string}
 * [protocolSettings.validationSettings.trailingSeparatorPolicy] The trailing
 * separator policy. Possible values include: 'NotSpecified', 'NotAllowed',
 * 'Optional', 'Mandatory'
 * @member {object} [protocolSettings.framingSettings] The X12 framing
 * settings.
 * @member {number} [protocolSettings.framingSettings.dataElementSeparator] The
 * data element separator.
 * @member {number} [protocolSettings.framingSettings.componentSeparator] The
 * component separator.
 * @member {boolean}
 * [protocolSettings.framingSettings.replaceSeparatorsInPayload] The value
 * indicating whether to replace separators in payload.
 * @member {number} [protocolSettings.framingSettings.replaceCharacter] The
 * replacement character.
 * @member {number} [protocolSettings.framingSettings.segmentTerminator] The
 * segment terminator.
 * @member {string} [protocolSettings.framingSettings.characterSet] The X12
 * character set. Possible values include: 'NotSpecified', 'Basic', 'Extended',
 * 'UTF8'
 * @member {string} [protocolSettings.framingSettings.segmentTerminatorSuffix]
 * The segment terminator suffix. Possible values include: 'NotSpecified',
 * 'None', 'CR', 'LF', 'CRLF'
 * @member {object} [protocolSettings.envelopeSettings] The X12 envelope
 * settings.
 * @member {number} [protocolSettings.envelopeSettings.controlStandardsId] The
 * controls standards id.
 * @member {boolean}
 * [protocolSettings.envelopeSettings.useControlStandardsIdAsRepetitionCharacter]
 * The value indicating whether to use control standards id as repetition
 * character.
 * @member {string} [protocolSettings.envelopeSettings.senderApplicationId] The
 * sender application id.
 * @member {string} [protocolSettings.envelopeSettings.receiverApplicationId]
 * The receiver application id.
 * @member {string} [protocolSettings.envelopeSettings.controlVersionNumber]
 * The control version number.
 * @member {number}
 * [protocolSettings.envelopeSettings.interchangeControlNumberLowerBound] The
 * interchange  control number lower bound.
 * @member {number}
 * [protocolSettings.envelopeSettings.interchangeControlNumberUpperBound] The
 * interchange  control number upper bound.
 * @member {boolean}
 * [protocolSettings.envelopeSettings.rolloverInterchangeControlNumber] The
 * value indicating whether to rollover interchange control number.
 * @member {boolean}
 * [protocolSettings.envelopeSettings.enableDefaultGroupHeaders] The value
 * indicating whether to enable default group headers.
 * @member {string} [protocolSettings.envelopeSettings.functionalGroupId] The
 * functional group id.
 * @member {number}
 * [protocolSettings.envelopeSettings.groupControlNumberLowerBound] The group
 * control number lower bound.
 * @member {number}
 * [protocolSettings.envelopeSettings.groupControlNumberUpperBound] The group
 * control number upper bound.
 * @member {boolean}
 * [protocolSettings.envelopeSettings.rolloverGroupControlNumber] The value
 * indicating whether to rollover group control number.
 * @member {string} [protocolSettings.envelopeSettings.groupHeaderAgencyCode]
 * The group header agency code.
 * @member {string} [protocolSettings.envelopeSettings.groupHeaderVersion] The
 * group header version.
 * @member {number}
 * [protocolSettings.envelopeSettings.transactionSetControlNumberLowerBound]
 * The transaction set control number lower bound.
 * @member {number}
 * [protocolSettings.envelopeSettings.transactionSetControlNumberUpperBound]
 * The transaction set control number upper bound.
 * @member {boolean}
 * [protocolSettings.envelopeSettings.rolloverTransactionSetControlNumber] The
 * value indicating whether to rollover transaction set control number.
 * @member {string}
 * [protocolSettings.envelopeSettings.transactionSetControlNumberPrefix] The
 * transaction set control number prefix.
 * @member {string}
 * [protocolSettings.envelopeSettings.transactionSetControlNumberSuffix] The
 * transaction set control number suffix.
 * @member {boolean}
 * [protocolSettings.envelopeSettings.overwriteExistingTransactionSetControlNumber]
 * The value indicating whether to overwrite existing transaction set control
 * number.
 * @member {string} [protocolSettings.envelopeSettings.groupHeaderDateFormat]
 * The group header date format. Possible values include: 'NotSpecified',
 * 'CCYYMMDD', 'YYMMDD'
 * @member {string} [protocolSettings.envelopeSettings.groupHeaderTimeFormat]
 * The group header time format. Possible values include: 'NotSpecified',
 * 'HHMM', 'HHMMSS', 'HHMMSSdd', 'HHMMSSd'
 * @member {string} [protocolSettings.envelopeSettings.usageIndicator] The
 * usage indicator. Possible values include: 'NotSpecified', 'Test',
 * 'Information', 'Production'
 * @member {object} [protocolSettings.acknowledgementSettings] The X12
 * acknowledgment settings.
 * @member {boolean}
 * [protocolSettings.acknowledgementSettings.needTechnicalAcknowledgement] The
 * value indicating whether technical acknowledgement is needed.
 * @member {boolean}
 * [protocolSettings.acknowledgementSettings.batchTechnicalAcknowledgements]
 * The value indicating whether to batch the technical acknowledgements.
 * @member {boolean}
 * [protocolSettings.acknowledgementSettings.needFunctionalAcknowledgement] The
 * value indicating whether functional acknowledgement is needed.
 * @member {string}
 * [protocolSettings.acknowledgementSettings.functionalAcknowledgementVersion]
 * The functional acknowledgement version.
 * @member {boolean}
 * [protocolSettings.acknowledgementSettings.batchFunctionalAcknowledgements]
 * The value indicating whether to batch functional acknowledgements.
 * @member {boolean}
 * [protocolSettings.acknowledgementSettings.needImplementationAcknowledgement]
 * The value indicating whether implementation acknowledgement is needed.
 * @member {string}
 * [protocolSettings.acknowledgementSettings.implementationAcknowledgementVersion]
 * The implementation acknowledgement version.
 * @member {boolean}
 * [protocolSettings.acknowledgementSettings.batchImplementationAcknowledgements]
 * The value indicating whether to batch implementation acknowledgements.
 * @member {boolean}
 * [protocolSettings.acknowledgementSettings.needLoopForValidMessages] The
 * value indicating whether a loop is needed for valid messages.
 * @member {boolean}
 * [protocolSettings.acknowledgementSettings.sendSynchronousAcknowledgement]
 * The value indicating whether to send synchronous acknowledgement.
 * @member {string}
 * [protocolSettings.acknowledgementSettings.acknowledgementControlNumberPrefix]
 * The acknowledgement control number prefix.
 * @member {string}
 * [protocolSettings.acknowledgementSettings.acknowledgementControlNumberSuffix]
 * The acknowledgement control number suffix.
 * @member {number}
 * [protocolSettings.acknowledgementSettings.acknowledgementControlNumberLowerBound]
 * The acknowledgement control number lower bound.
 * @member {number}
 * [protocolSettings.acknowledgementSettings.acknowledgementControlNumberUpperBound]
 * The acknowledgement control number upper bound.
 * @member {boolean}
 * [protocolSettings.acknowledgementSettings.rolloverAcknowledgementControlNumber]
 * The value indicating whether to rollover acknowledgement control number.
 * @member {object} [protocolSettings.messageFilter] The X12 message filter.
 * @member {string} [protocolSettings.messageFilter.messageFilterType] The
 * message filter type. Possible values include: 'NotSpecified', 'Include',
 * 'Exclude'
 * @member {object} [protocolSettings.securitySettings] The X12 security
 * settings.
 * @member {string} [protocolSettings.securitySettings.authorizationQualifier]
 * The authorization qualifier.
 * @member {string} [protocolSettings.securitySettings.authorizationValue] The
 * authorization value.
 * @member {string} [protocolSettings.securitySettings.securityQualifier] The
 * security qualifier.
 * @member {string} [protocolSettings.securitySettings.passwordValue] The
 * password value.
 * @member {object} [protocolSettings.processingSettings] The X12 processing
 * settings.
 * @member {boolean} [protocolSettings.processingSettings.maskSecurityInfo] The
 * value indicating whether to mask security information.
 * @member {boolean}
 * [protocolSettings.processingSettings.convertImpliedDecimal] The value
 * indicating whether to convert numerical type to implied decimal.
 * @member {boolean} [protocolSettings.processingSettings.preserveInterchange]
 * The value indicating whether to preserve interchange.
 * @member {boolean}
 * [protocolSettings.processingSettings.suspendInterchangeOnError] The value
 * indicating whether to suspend interchange on error.
 * @member {boolean}
 * [protocolSettings.processingSettings.createEmptyXmlTagsForTrailingSeparators]
 * The value indicating whether to create empty xml tags for trailing
 * separators.
 * @member {boolean}
 * [protocolSettings.processingSettings.useDotAsDecimalSeparator] The value
 * indicating whether to use dot as decimal separator.
 * @member {array} [protocolSettings.envelopeOverrides] The X12 envelope
 * override settings.
 * @member {array} [protocolSettings.validationOverrides] The X12 validation
 * override settings.
 * @member {array} [protocolSettings.messageFilterList] The X12 message filter
 * list.
 * @member {array} [protocolSettings.schemaReferences] The X12 schema
 * references.
 * @member {array} [protocolSettings.x12DelimiterOverrides] The X12 delimiter
 * override settings.
 */
export interface X12OneWayAgreement {
  senderBusinessIdentity: BusinessIdentity;
  receiverBusinessIdentity: BusinessIdentity;
  protocolSettings: X12ProtocolSettings;
}

/**
 * @class
 * Initializes a new instance of the X12AgreementContent class.
 * @constructor
 * The X12 agreement content.
 *
 * @member {object} receiveAgreement The X12 one-way receive agreement.
 * @member {object} [receiveAgreement.senderBusinessIdentity] The sender
 * business identity
 * @member {string} [receiveAgreement.senderBusinessIdentity.qualifier] The
 * business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [receiveAgreement.senderBusinessIdentity.value] The user
 * defined business identity value.
 * @member {object} [receiveAgreement.receiverBusinessIdentity] The receiver
 * business identity
 * @member {string} [receiveAgreement.receiverBusinessIdentity.qualifier] The
 * business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [receiveAgreement.receiverBusinessIdentity.value] The user
 * defined business identity value.
 * @member {object} [receiveAgreement.protocolSettings] The X12 protocol
 * settings.
 * @member {object} [receiveAgreement.protocolSettings.validationSettings] The
 * X12 validation settings.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.validationSettings.validateCharacterSet]
 * The value indicating whether to validate character set in the message.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.validationSettings.checkDuplicateInterchangeControlNumber]
 * The value indicating whether to check for duplicate interchange control
 * number.
 * @member {number}
 * [receiveAgreement.protocolSettings.validationSettings.interchangeControlNumberValidityDays]
 * The validity period of interchange control number.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.validationSettings.checkDuplicateGroupControlNumber]
 * The value indicating whether to check for duplicate group control number.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.validationSettings.checkDuplicateTransactionSetControlNumber]
 * The value indicating whether to check for duplicate transaction set control
 * number.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.validationSettings.validateEdiTypes] The
 * value indicating whether to Whether to validate EDI types.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.validationSettings.validateXsdTypes] The
 * value indicating whether to Whether to validate XSD types.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.validationSettings.allowLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to allow leading and trailing spaces and
 * zeroes.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.validationSettings.trimLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to trim leading and trailing spaces and zeroes.
 * @member {string}
 * [receiveAgreement.protocolSettings.validationSettings.trailingSeparatorPolicy]
 * The trailing separator policy. Possible values include: 'NotSpecified',
 * 'NotAllowed', 'Optional', 'Mandatory'
 * @member {object} [receiveAgreement.protocolSettings.framingSettings] The X12
 * framing settings.
 * @member {number}
 * [receiveAgreement.protocolSettings.framingSettings.dataElementSeparator] The
 * data element separator.
 * @member {number}
 * [receiveAgreement.protocolSettings.framingSettings.componentSeparator] The
 * component separator.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.framingSettings.replaceSeparatorsInPayload]
 * The value indicating whether to replace separators in payload.
 * @member {number}
 * [receiveAgreement.protocolSettings.framingSettings.replaceCharacter] The
 * replacement character.
 * @member {number}
 * [receiveAgreement.protocolSettings.framingSettings.segmentTerminator] The
 * segment terminator.
 * @member {string}
 * [receiveAgreement.protocolSettings.framingSettings.characterSet] The X12
 * character set. Possible values include: 'NotSpecified', 'Basic', 'Extended',
 * 'UTF8'
 * @member {string}
 * [receiveAgreement.protocolSettings.framingSettings.segmentTerminatorSuffix]
 * The segment terminator suffix. Possible values include: 'NotSpecified',
 * 'None', 'CR', 'LF', 'CRLF'
 * @member {object} [receiveAgreement.protocolSettings.envelopeSettings] The
 * X12 envelope settings.
 * @member {number}
 * [receiveAgreement.protocolSettings.envelopeSettings.controlStandardsId] The
 * controls standards id.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.envelopeSettings.useControlStandardsIdAsRepetitionCharacter]
 * The value indicating whether to use control standards id as repetition
 * character.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.senderApplicationId] The
 * sender application id.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.receiverApplicationId]
 * The receiver application id.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.controlVersionNumber]
 * The control version number.
 * @member {number}
 * [receiveAgreement.protocolSettings.envelopeSettings.interchangeControlNumberLowerBound]
 * The interchange  control number lower bound.
 * @member {number}
 * [receiveAgreement.protocolSettings.envelopeSettings.interchangeControlNumberUpperBound]
 * The interchange  control number upper bound.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.envelopeSettings.rolloverInterchangeControlNumber]
 * The value indicating whether to rollover interchange control number.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.envelopeSettings.enableDefaultGroupHeaders]
 * The value indicating whether to enable default group headers.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.functionalGroupId] The
 * functional group id.
 * @member {number}
 * [receiveAgreement.protocolSettings.envelopeSettings.groupControlNumberLowerBound]
 * The group control number lower bound.
 * @member {number}
 * [receiveAgreement.protocolSettings.envelopeSettings.groupControlNumberUpperBound]
 * The group control number upper bound.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.envelopeSettings.rolloverGroupControlNumber]
 * The value indicating whether to rollover group control number.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.groupHeaderAgencyCode]
 * The group header agency code.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.groupHeaderVersion] The
 * group header version.
 * @member {number}
 * [receiveAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberLowerBound]
 * The transaction set control number lower bound.
 * @member {number}
 * [receiveAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberUpperBound]
 * The transaction set control number upper bound.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.envelopeSettings.rolloverTransactionSetControlNumber]
 * The value indicating whether to rollover transaction set control number.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberPrefix]
 * The transaction set control number prefix.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberSuffix]
 * The transaction set control number suffix.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.envelopeSettings.overwriteExistingTransactionSetControlNumber]
 * The value indicating whether to overwrite existing transaction set control
 * number.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.groupHeaderDateFormat]
 * The group header date format. Possible values include: 'NotSpecified',
 * 'CCYYMMDD', 'YYMMDD'
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.groupHeaderTimeFormat]
 * The group header time format. Possible values include: 'NotSpecified',
 * 'HHMM', 'HHMMSS', 'HHMMSSdd', 'HHMMSSd'
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.usageIndicator] The
 * usage indicator. Possible values include: 'NotSpecified', 'Test',
 * 'Information', 'Production'
 * @member {object} [receiveAgreement.protocolSettings.acknowledgementSettings]
 * The X12 acknowledgment settings.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.acknowledgementSettings.needTechnicalAcknowledgement]
 * The value indicating whether technical acknowledgement is needed.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.acknowledgementSettings.batchTechnicalAcknowledgements]
 * The value indicating whether to batch the technical acknowledgements.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.acknowledgementSettings.needFunctionalAcknowledgement]
 * The value indicating whether functional acknowledgement is needed.
 * @member {string}
 * [receiveAgreement.protocolSettings.acknowledgementSettings.functionalAcknowledgementVersion]
 * The functional acknowledgement version.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.acknowledgementSettings.batchFunctionalAcknowledgements]
 * The value indicating whether to batch functional acknowledgements.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.acknowledgementSettings.needImplementationAcknowledgement]
 * The value indicating whether implementation acknowledgement is needed.
 * @member {string}
 * [receiveAgreement.protocolSettings.acknowledgementSettings.implementationAcknowledgementVersion]
 * The implementation acknowledgement version.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.acknowledgementSettings.batchImplementationAcknowledgements]
 * The value indicating whether to batch implementation acknowledgements.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.acknowledgementSettings.needLoopForValidMessages]
 * The value indicating whether a loop is needed for valid messages.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.acknowledgementSettings.sendSynchronousAcknowledgement]
 * The value indicating whether to send synchronous acknowledgement.
 * @member {string}
 * [receiveAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberPrefix]
 * The acknowledgement control number prefix.
 * @member {string}
 * [receiveAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberSuffix]
 * The acknowledgement control number suffix.
 * @member {number}
 * [receiveAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberLowerBound]
 * The acknowledgement control number lower bound.
 * @member {number}
 * [receiveAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberUpperBound]
 * The acknowledgement control number upper bound.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.acknowledgementSettings.rolloverAcknowledgementControlNumber]
 * The value indicating whether to rollover acknowledgement control number.
 * @member {object} [receiveAgreement.protocolSettings.messageFilter] The X12
 * message filter.
 * @member {string}
 * [receiveAgreement.protocolSettings.messageFilter.messageFilterType] The
 * message filter type. Possible values include: 'NotSpecified', 'Include',
 * 'Exclude'
 * @member {object} [receiveAgreement.protocolSettings.securitySettings] The
 * X12 security settings.
 * @member {string}
 * [receiveAgreement.protocolSettings.securitySettings.authorizationQualifier]
 * The authorization qualifier.
 * @member {string}
 * [receiveAgreement.protocolSettings.securitySettings.authorizationValue] The
 * authorization value.
 * @member {string}
 * [receiveAgreement.protocolSettings.securitySettings.securityQualifier] The
 * security qualifier.
 * @member {string}
 * [receiveAgreement.protocolSettings.securitySettings.passwordValue] The
 * password value.
 * @member {object} [receiveAgreement.protocolSettings.processingSettings] The
 * X12 processing settings.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.processingSettings.maskSecurityInfo] The
 * value indicating whether to mask security information.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.processingSettings.convertImpliedDecimal]
 * The value indicating whether to convert numerical type to implied decimal.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.processingSettings.preserveInterchange]
 * The value indicating whether to preserve interchange.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.processingSettings.suspendInterchangeOnError]
 * The value indicating whether to suspend interchange on error.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.processingSettings.createEmptyXmlTagsForTrailingSeparators]
 * The value indicating whether to create empty xml tags for trailing
 * separators.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.processingSettings.useDotAsDecimalSeparator]
 * The value indicating whether to use dot as decimal separator.
 * @member {array} [receiveAgreement.protocolSettings.envelopeOverrides] The
 * X12 envelope override settings.
 * @member {array} [receiveAgreement.protocolSettings.validationOverrides] The
 * X12 validation override settings.
 * @member {array} [receiveAgreement.protocolSettings.messageFilterList] The
 * X12 message filter list.
 * @member {array} [receiveAgreement.protocolSettings.schemaReferences] The X12
 * schema references.
 * @member {array} [receiveAgreement.protocolSettings.x12DelimiterOverrides]
 * The X12 delimiter override settings.
 * @member {object} sendAgreement The X12 one-way send agreement.
 * @member {object} [sendAgreement.senderBusinessIdentity] The sender business
 * identity
 * @member {string} [sendAgreement.senderBusinessIdentity.qualifier] The
 * business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [sendAgreement.senderBusinessIdentity.value] The user
 * defined business identity value.
 * @member {object} [sendAgreement.receiverBusinessIdentity] The receiver
 * business identity
 * @member {string} [sendAgreement.receiverBusinessIdentity.qualifier] The
 * business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [sendAgreement.receiverBusinessIdentity.value] The user
 * defined business identity value.
 * @member {object} [sendAgreement.protocolSettings] The X12 protocol settings.
 * @member {object} [sendAgreement.protocolSettings.validationSettings] The X12
 * validation settings.
 * @member {boolean}
 * [sendAgreement.protocolSettings.validationSettings.validateCharacterSet] The
 * value indicating whether to validate character set in the message.
 * @member {boolean}
 * [sendAgreement.protocolSettings.validationSettings.checkDuplicateInterchangeControlNumber]
 * The value indicating whether to check for duplicate interchange control
 * number.
 * @member {number}
 * [sendAgreement.protocolSettings.validationSettings.interchangeControlNumberValidityDays]
 * The validity period of interchange control number.
 * @member {boolean}
 * [sendAgreement.protocolSettings.validationSettings.checkDuplicateGroupControlNumber]
 * The value indicating whether to check for duplicate group control number.
 * @member {boolean}
 * [sendAgreement.protocolSettings.validationSettings.checkDuplicateTransactionSetControlNumber]
 * The value indicating whether to check for duplicate transaction set control
 * number.
 * @member {boolean}
 * [sendAgreement.protocolSettings.validationSettings.validateEdiTypes] The
 * value indicating whether to Whether to validate EDI types.
 * @member {boolean}
 * [sendAgreement.protocolSettings.validationSettings.validateXsdTypes] The
 * value indicating whether to Whether to validate XSD types.
 * @member {boolean}
 * [sendAgreement.protocolSettings.validationSettings.allowLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to allow leading and trailing spaces and
 * zeroes.
 * @member {boolean}
 * [sendAgreement.protocolSettings.validationSettings.trimLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to trim leading and trailing spaces and zeroes.
 * @member {string}
 * [sendAgreement.protocolSettings.validationSettings.trailingSeparatorPolicy]
 * The trailing separator policy. Possible values include: 'NotSpecified',
 * 'NotAllowed', 'Optional', 'Mandatory'
 * @member {object} [sendAgreement.protocolSettings.framingSettings] The X12
 * framing settings.
 * @member {number}
 * [sendAgreement.protocolSettings.framingSettings.dataElementSeparator] The
 * data element separator.
 * @member {number}
 * [sendAgreement.protocolSettings.framingSettings.componentSeparator] The
 * component separator.
 * @member {boolean}
 * [sendAgreement.protocolSettings.framingSettings.replaceSeparatorsInPayload]
 * The value indicating whether to replace separators in payload.
 * @member {number}
 * [sendAgreement.protocolSettings.framingSettings.replaceCharacter] The
 * replacement character.
 * @member {number}
 * [sendAgreement.protocolSettings.framingSettings.segmentTerminator] The
 * segment terminator.
 * @member {string}
 * [sendAgreement.protocolSettings.framingSettings.characterSet] The X12
 * character set. Possible values include: 'NotSpecified', 'Basic', 'Extended',
 * 'UTF8'
 * @member {string}
 * [sendAgreement.protocolSettings.framingSettings.segmentTerminatorSuffix] The
 * segment terminator suffix. Possible values include: 'NotSpecified', 'None',
 * 'CR', 'LF', 'CRLF'
 * @member {object} [sendAgreement.protocolSettings.envelopeSettings] The X12
 * envelope settings.
 * @member {number}
 * [sendAgreement.protocolSettings.envelopeSettings.controlStandardsId] The
 * controls standards id.
 * @member {boolean}
 * [sendAgreement.protocolSettings.envelopeSettings.useControlStandardsIdAsRepetitionCharacter]
 * The value indicating whether to use control standards id as repetition
 * character.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.senderApplicationId] The
 * sender application id.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.receiverApplicationId] The
 * receiver application id.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.controlVersionNumber] The
 * control version number.
 * @member {number}
 * [sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberLowerBound]
 * The interchange  control number lower bound.
 * @member {number}
 * [sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberUpperBound]
 * The interchange  control number upper bound.
 * @member {boolean}
 * [sendAgreement.protocolSettings.envelopeSettings.rolloverInterchangeControlNumber]
 * The value indicating whether to rollover interchange control number.
 * @member {boolean}
 * [sendAgreement.protocolSettings.envelopeSettings.enableDefaultGroupHeaders]
 * The value indicating whether to enable default group headers.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.functionalGroupId] The
 * functional group id.
 * @member {number}
 * [sendAgreement.protocolSettings.envelopeSettings.groupControlNumberLowerBound]
 * The group control number lower bound.
 * @member {number}
 * [sendAgreement.protocolSettings.envelopeSettings.groupControlNumberUpperBound]
 * The group control number upper bound.
 * @member {boolean}
 * [sendAgreement.protocolSettings.envelopeSettings.rolloverGroupControlNumber]
 * The value indicating whether to rollover group control number.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.groupHeaderAgencyCode] The
 * group header agency code.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.groupHeaderVersion] The
 * group header version.
 * @member {number}
 * [sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberLowerBound]
 * The transaction set control number lower bound.
 * @member {number}
 * [sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberUpperBound]
 * The transaction set control number upper bound.
 * @member {boolean}
 * [sendAgreement.protocolSettings.envelopeSettings.rolloverTransactionSetControlNumber]
 * The value indicating whether to rollover transaction set control number.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberPrefix]
 * The transaction set control number prefix.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberSuffix]
 * The transaction set control number suffix.
 * @member {boolean}
 * [sendAgreement.protocolSettings.envelopeSettings.overwriteExistingTransactionSetControlNumber]
 * The value indicating whether to overwrite existing transaction set control
 * number.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.groupHeaderDateFormat] The
 * group header date format. Possible values include: 'NotSpecified',
 * 'CCYYMMDD', 'YYMMDD'
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.groupHeaderTimeFormat] The
 * group header time format. Possible values include: 'NotSpecified', 'HHMM',
 * 'HHMMSS', 'HHMMSSdd', 'HHMMSSd'
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.usageIndicator] The usage
 * indicator. Possible values include: 'NotSpecified', 'Test', 'Information',
 * 'Production'
 * @member {object} [sendAgreement.protocolSettings.acknowledgementSettings]
 * The X12 acknowledgment settings.
 * @member {boolean}
 * [sendAgreement.protocolSettings.acknowledgementSettings.needTechnicalAcknowledgement]
 * The value indicating whether technical acknowledgement is needed.
 * @member {boolean}
 * [sendAgreement.protocolSettings.acknowledgementSettings.batchTechnicalAcknowledgements]
 * The value indicating whether to batch the technical acknowledgements.
 * @member {boolean}
 * [sendAgreement.protocolSettings.acknowledgementSettings.needFunctionalAcknowledgement]
 * The value indicating whether functional acknowledgement is needed.
 * @member {string}
 * [sendAgreement.protocolSettings.acknowledgementSettings.functionalAcknowledgementVersion]
 * The functional acknowledgement version.
 * @member {boolean}
 * [sendAgreement.protocolSettings.acknowledgementSettings.batchFunctionalAcknowledgements]
 * The value indicating whether to batch functional acknowledgements.
 * @member {boolean}
 * [sendAgreement.protocolSettings.acknowledgementSettings.needImplementationAcknowledgement]
 * The value indicating whether implementation acknowledgement is needed.
 * @member {string}
 * [sendAgreement.protocolSettings.acknowledgementSettings.implementationAcknowledgementVersion]
 * The implementation acknowledgement version.
 * @member {boolean}
 * [sendAgreement.protocolSettings.acknowledgementSettings.batchImplementationAcknowledgements]
 * The value indicating whether to batch implementation acknowledgements.
 * @member {boolean}
 * [sendAgreement.protocolSettings.acknowledgementSettings.needLoopForValidMessages]
 * The value indicating whether a loop is needed for valid messages.
 * @member {boolean}
 * [sendAgreement.protocolSettings.acknowledgementSettings.sendSynchronousAcknowledgement]
 * The value indicating whether to send synchronous acknowledgement.
 * @member {string}
 * [sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberPrefix]
 * The acknowledgement control number prefix.
 * @member {string}
 * [sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberSuffix]
 * The acknowledgement control number suffix.
 * @member {number}
 * [sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberLowerBound]
 * The acknowledgement control number lower bound.
 * @member {number}
 * [sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberUpperBound]
 * The acknowledgement control number upper bound.
 * @member {boolean}
 * [sendAgreement.protocolSettings.acknowledgementSettings.rolloverAcknowledgementControlNumber]
 * The value indicating whether to rollover acknowledgement control number.
 * @member {object} [sendAgreement.protocolSettings.messageFilter] The X12
 * message filter.
 * @member {string}
 * [sendAgreement.protocolSettings.messageFilter.messageFilterType] The message
 * filter type. Possible values include: 'NotSpecified', 'Include', 'Exclude'
 * @member {object} [sendAgreement.protocolSettings.securitySettings] The X12
 * security settings.
 * @member {string}
 * [sendAgreement.protocolSettings.securitySettings.authorizationQualifier] The
 * authorization qualifier.
 * @member {string}
 * [sendAgreement.protocolSettings.securitySettings.authorizationValue] The
 * authorization value.
 * @member {string}
 * [sendAgreement.protocolSettings.securitySettings.securityQualifier] The
 * security qualifier.
 * @member {string}
 * [sendAgreement.protocolSettings.securitySettings.passwordValue] The password
 * value.
 * @member {object} [sendAgreement.protocolSettings.processingSettings] The X12
 * processing settings.
 * @member {boolean}
 * [sendAgreement.protocolSettings.processingSettings.maskSecurityInfo] The
 * value indicating whether to mask security information.
 * @member {boolean}
 * [sendAgreement.protocolSettings.processingSettings.convertImpliedDecimal]
 * The value indicating whether to convert numerical type to implied decimal.
 * @member {boolean}
 * [sendAgreement.protocolSettings.processingSettings.preserveInterchange] The
 * value indicating whether to preserve interchange.
 * @member {boolean}
 * [sendAgreement.protocolSettings.processingSettings.suspendInterchangeOnError]
 * The value indicating whether to suspend interchange on error.
 * @member {boolean}
 * [sendAgreement.protocolSettings.processingSettings.createEmptyXmlTagsForTrailingSeparators]
 * The value indicating whether to create empty xml tags for trailing
 * separators.
 * @member {boolean}
 * [sendAgreement.protocolSettings.processingSettings.useDotAsDecimalSeparator]
 * The value indicating whether to use dot as decimal separator.
 * @member {array} [sendAgreement.protocolSettings.envelopeOverrides] The X12
 * envelope override settings.
 * @member {array} [sendAgreement.protocolSettings.validationOverrides] The X12
 * validation override settings.
 * @member {array} [sendAgreement.protocolSettings.messageFilterList] The X12
 * message filter list.
 * @member {array} [sendAgreement.protocolSettings.schemaReferences] The X12
 * schema references.
 * @member {array} [sendAgreement.protocolSettings.x12DelimiterOverrides] The
 * X12 delimiter override settings.
 */
export interface X12AgreementContent {
  receiveAgreement: X12OneWayAgreement;
  sendAgreement: X12OneWayAgreement;
}

/**
 * @class
 * Initializes a new instance of the EdifactValidationSettings class.
 * @constructor
 * The Edifact agreement validation settings.
 *
 * @member {boolean} validateCharacterSet The value indicating whether to
 * validate character set in the message.
 * @member {boolean} checkDuplicateInterchangeControlNumber The value
 * indicating whether to check for duplicate interchange control number.
 * @member {number} interchangeControlNumberValidityDays The validity period of
 * interchange control number.
 * @member {boolean} checkDuplicateGroupControlNumber The value indicating
 * whether to check for duplicate group control number.
 * @member {boolean} checkDuplicateTransactionSetControlNumber The value
 * indicating whether to check for duplicate transaction set control number.
 * @member {boolean} validateEdiTypes The value indicating whether to Whether
 * to validate EDI types.
 * @member {boolean} validateXsdTypes The value indicating whether to Whether
 * to validate XSD types.
 * @member {boolean} allowLeadingAndTrailingSpacesAndZeroes The value
 * indicating whether to allow leading and trailing spaces and zeroes.
 * @member {boolean} trimLeadingAndTrailingSpacesAndZeroes The value indicating
 * whether to trim leading and trailing spaces and zeroes.
 * @member {string} trailingSeparatorPolicy The trailing separator policy.
 * Possible values include: 'NotSpecified', 'NotAllowed', 'Optional',
 * 'Mandatory'
 */
export interface EdifactValidationSettings {
  validateCharacterSet: boolean;
  checkDuplicateInterchangeControlNumber: boolean;
  interchangeControlNumberValidityDays: number;
  checkDuplicateGroupControlNumber: boolean;
  checkDuplicateTransactionSetControlNumber: boolean;
  validateEdiTypes: boolean;
  validateXsdTypes: boolean;
  allowLeadingAndTrailingSpacesAndZeroes: boolean;
  trimLeadingAndTrailingSpacesAndZeroes: boolean;
  trailingSeparatorPolicy: string;
}

/**
 * @class
 * Initializes a new instance of the EdifactFramingSettings class.
 * @constructor
 * The Edifact agreement framing settings.
 *
 * @member {string} [serviceCodeListDirectoryVersion] The service code list
 * directory version.
 * @member {string} [characterEncoding] The character encoding.
 * @member {number} protocolVersion The protocol version.
 * @member {number} dataElementSeparator The data element separator.
 * @member {number} componentSeparator The component separator.
 * @member {number} segmentTerminator The segment terminator.
 * @member {number} releaseIndicator The release indicator.
 * @member {number} repetitionSeparator The repetition separator.
 * @member {string} characterSet The EDIFACT frame setting characterSet.
 * Possible values include: 'NotSpecified', 'UNOB', 'UNOA', 'UNOC', 'UNOD',
 * 'UNOE', 'UNOF', 'UNOG', 'UNOH', 'UNOI', 'UNOJ', 'UNOK', 'UNOX', 'UNOY',
 * 'KECA'
 * @member {string} decimalPointIndicator The EDIFACT frame setting decimal
 * indicator. Possible values include: 'NotSpecified', 'Comma', 'Decimal'
 * @member {string} segmentTerminatorSuffix The EDIFACT frame setting segment
 * terminator suffix. Possible values include: 'NotSpecified', 'None', 'CR',
 * 'LF', 'CRLF'
 */
export interface EdifactFramingSettings {
  serviceCodeListDirectoryVersion?: string;
  characterEncoding?: string;
  protocolVersion: number;
  dataElementSeparator: number;
  componentSeparator: number;
  segmentTerminator: number;
  releaseIndicator: number;
  repetitionSeparator: number;
  characterSet: string;
  decimalPointIndicator: string;
  segmentTerminatorSuffix: string;
}

/**
 * @class
 * Initializes a new instance of the EdifactEnvelopeSettings class.
 * @constructor
 * The Edifact agreement envelope settings.
 *
 * @member {string} [groupAssociationAssignedCode] The group association
 * assigned code.
 * @member {string} [communicationAgreementId] The communication agreement id.
 * @member {boolean} applyDelimiterStringAdvice The value indicating whether to
 * apply delimiter string advice.
 * @member {boolean} createGroupingSegments The value indicating whether to
 * create grouping segments.
 * @member {boolean} enableDefaultGroupHeaders The value indicating whether to
 * enable default group headers.
 * @member {string} [recipientReferencePasswordValue] The recipient reference
 * password value.
 * @member {string} [recipientReferencePasswordQualifier] The recipient
 * reference password qualifier.
 * @member {string} [applicationReferenceId] The application reference id.
 * @member {string} [processingPriorityCode] The processing priority code.
 * @member {number} interchangeControlNumberLowerBound The interchange control
 * number lower bound.
 * @member {number} interchangeControlNumberUpperBound The interchange control
 * number upper bound.
 * @member {boolean} rolloverInterchangeControlNumber The value indicating
 * whether to rollover interchange control number.
 * @member {string} [interchangeControlNumberPrefix] The interchange control
 * number prefix.
 * @member {string} [interchangeControlNumberSuffix] The interchange control
 * number suffix.
 * @member {string} [senderReverseRoutingAddress] The sender reverse routing
 * address.
 * @member {string} [receiverReverseRoutingAddress] The receiver reverse
 * routing address.
 * @member {string} [functionalGroupId] The functional group id.
 * @member {string} [groupControllingAgencyCode] The group controlling agency
 * code.
 * @member {string} [groupMessageVersion] The group message version.
 * @member {string} [groupMessageRelease] The group message release.
 * @member {number} groupControlNumberLowerBound The group control number lower
 * bound.
 * @member {number} groupControlNumberUpperBound The group control number upper
 * bound.
 * @member {boolean} rolloverGroupControlNumber The value indicating whether to
 * rollover group control number.
 * @member {string} [groupControlNumberPrefix] The group control number prefix.
 * @member {string} [groupControlNumberSuffix] The group control number suffix.
 * @member {string} [groupApplicationReceiverQualifier] The group application
 * receiver qualifier.
 * @member {string} [groupApplicationReceiverId] The group application receiver
 * id.
 * @member {string} [groupApplicationSenderQualifier] The group application
 * sender qualifier.
 * @member {string} [groupApplicationSenderId] The group application sender id.
 * @member {string} [groupApplicationPassword] The group application password.
 * @member {boolean} overwriteExistingTransactionSetControlNumber The value
 * indicating whether to overwrite existing transaction set control number.
 * @member {string} [transactionSetControlNumberPrefix] The transaction set
 * control number prefix.
 * @member {string} [transactionSetControlNumberSuffix] The transaction set
 * control number suffix.
 * @member {number} transactionSetControlNumberLowerBound The transaction set
 * control number lower bound.
 * @member {number} transactionSetControlNumberUpperBound The transaction set
 * control number upper bound.
 * @member {boolean} rolloverTransactionSetControlNumber The value indicating
 * whether to rollover transaction set control number.
 * @member {boolean} isTestInterchange The value indicating whether the message
 * is a test interchange.
 * @member {string} [senderInternalIdentification] The sender internal
 * identification.
 * @member {string} [senderInternalSubIdentification] The sender internal sub
 * identification.
 * @member {string} [receiverInternalIdentification] The receiver internal
 * identification.
 * @member {string} [receiverInternalSubIdentification] The receiver internal
 * sub identification.
 */
export interface EdifactEnvelopeSettings {
  groupAssociationAssignedCode?: string;
  communicationAgreementId?: string;
  applyDelimiterStringAdvice: boolean;
  createGroupingSegments: boolean;
  enableDefaultGroupHeaders: boolean;
  recipientReferencePasswordValue?: string;
  recipientReferencePasswordQualifier?: string;
  applicationReferenceId?: string;
  processingPriorityCode?: string;
  interchangeControlNumberLowerBound: number;
  interchangeControlNumberUpperBound: number;
  rolloverInterchangeControlNumber: boolean;
  interchangeControlNumberPrefix?: string;
  interchangeControlNumberSuffix?: string;
  senderReverseRoutingAddress?: string;
  receiverReverseRoutingAddress?: string;
  functionalGroupId?: string;
  groupControllingAgencyCode?: string;
  groupMessageVersion?: string;
  groupMessageRelease?: string;
  groupControlNumberLowerBound: number;
  groupControlNumberUpperBound: number;
  rolloverGroupControlNumber: boolean;
  groupControlNumberPrefix?: string;
  groupControlNumberSuffix?: string;
  groupApplicationReceiverQualifier?: string;
  groupApplicationReceiverId?: string;
  groupApplicationSenderQualifier?: string;
  groupApplicationSenderId?: string;
  groupApplicationPassword?: string;
  overwriteExistingTransactionSetControlNumber: boolean;
  transactionSetControlNumberPrefix?: string;
  transactionSetControlNumberSuffix?: string;
  transactionSetControlNumberLowerBound: number;
  transactionSetControlNumberUpperBound: number;
  rolloverTransactionSetControlNumber: boolean;
  isTestInterchange: boolean;
  senderInternalIdentification?: string;
  senderInternalSubIdentification?: string;
  receiverInternalIdentification?: string;
  receiverInternalSubIdentification?: string;
}

/**
 * @class
 * Initializes a new instance of the EdifactAcknowledgementSettings class.
 * @constructor
 * The Edifact agreement acknowledgement settings.
 *
 * @member {boolean} needTechnicalAcknowledgement The value indicating whether
 * technical acknowledgement is needed.
 * @member {boolean} batchTechnicalAcknowledgements The value indicating
 * whether to batch the technical acknowledgements.
 * @member {boolean} needFunctionalAcknowledgement The value indicating whether
 * functional acknowledgement is needed.
 * @member {boolean} batchFunctionalAcknowledgements The value indicating
 * whether to batch functional acknowledgements.
 * @member {boolean} needLoopForValidMessages The value indicating whether a
 * loop is needed for valid messages.
 * @member {boolean} sendSynchronousAcknowledgement The value indicating
 * whether to send synchronous acknowledgement.
 * @member {string} [acknowledgementControlNumberPrefix] The acknowledgement
 * control number prefix.
 * @member {string} [acknowledgementControlNumberSuffix] The acknowledgement
 * control number suffix.
 * @member {number} acknowledgementControlNumberLowerBound The acknowledgement
 * control number lower bound.
 * @member {number} acknowledgementControlNumberUpperBound The acknowledgement
 * control number upper bound.
 * @member {boolean} rolloverAcknowledgementControlNumber The value indicating
 * whether to rollover acknowledgement control number.
 */
export interface EdifactAcknowledgementSettings {
  needTechnicalAcknowledgement: boolean;
  batchTechnicalAcknowledgements: boolean;
  needFunctionalAcknowledgement: boolean;
  batchFunctionalAcknowledgements: boolean;
  needLoopForValidMessages: boolean;
  sendSynchronousAcknowledgement: boolean;
  acknowledgementControlNumberPrefix?: string;
  acknowledgementControlNumberSuffix?: string;
  acknowledgementControlNumberLowerBound: number;
  acknowledgementControlNumberUpperBound: number;
  rolloverAcknowledgementControlNumber: boolean;
}

/**
 * @class
 * Initializes a new instance of the EdifactMessageFilter class.
 * @constructor
 * The Edifact message filter for odata query.
 *
 * @member {string} messageFilterType The message filter type. Possible values
 * include: 'NotSpecified', 'Include', 'Exclude'
 */
export interface EdifactMessageFilter {
  messageFilterType: string;
}

/**
 * @class
 * Initializes a new instance of the EdifactProcessingSettings class.
 * @constructor
 * The Edifact agreement protocol settings.
 *
 * @member {boolean} maskSecurityInfo The value indicating whether to mask
 * security information.
 * @member {boolean} preserveInterchange The value indicating whether to
 * preserve interchange.
 * @member {boolean} suspendInterchangeOnError The value indicating whether to
 * suspend interchange on error.
 * @member {boolean} createEmptyXmlTagsForTrailingSeparators The value
 * indicating whether to create empty xml tags for trailing separators.
 * @member {boolean} useDotAsDecimalSeparator The value indicating whether to
 * use dot as decimal separator.
 */
export interface EdifactProcessingSettings {
  maskSecurityInfo: boolean;
  preserveInterchange: boolean;
  suspendInterchangeOnError: boolean;
  createEmptyXmlTagsForTrailingSeparators: boolean;
  useDotAsDecimalSeparator: boolean;
}

/**
 * @class
 * Initializes a new instance of the EdifactEnvelopeOverride class.
 * @constructor
 * The Edifact enevlope override settings.
 *
 * @member {string} [messageId] The message id on which this envelope settings
 * has to be applied.
 * @member {string} [messageVersion] The message version on which this envelope
 * settings has to be applied.
 * @member {string} [messageRelease] The message release version on which this
 * envelope settings has to be applied.
 * @member {string} [messageAssociationAssignedCode] The message association
 * assigned code.
 * @member {string} [targetNamespace] The target namespace on which this
 * envelope settings has to be applied.
 * @member {string} [functionalGroupId] The functional group id.
 * @member {string} [senderApplicationQualifier] The sender application
 * qualifier.
 * @member {string} [senderApplicationId] The sender application id.
 * @member {string} [receiverApplicationQualifier] The receiver application
 * qualifier.
 * @member {string} [receiverApplicationId] The receiver application id.
 * @member {string} [controllingAgencyCode] The controlling agency code.
 * @member {string} [groupHeaderMessageVersion] The group header message
 * version.
 * @member {string} [groupHeaderMessageRelease] The group header message
 * release.
 * @member {string} [associationAssignedCode] The association assigned code.
 * @member {string} [applicationPassword] The application password.
 */
export interface EdifactEnvelopeOverride {
  messageId?: string;
  messageVersion?: string;
  messageRelease?: string;
  messageAssociationAssignedCode?: string;
  targetNamespace?: string;
  functionalGroupId?: string;
  senderApplicationQualifier?: string;
  senderApplicationId?: string;
  receiverApplicationQualifier?: string;
  receiverApplicationId?: string;
  controllingAgencyCode?: string;
  groupHeaderMessageVersion?: string;
  groupHeaderMessageRelease?: string;
  associationAssignedCode?: string;
  applicationPassword?: string;
}

/**
 * @class
 * Initializes a new instance of the EdifactMessageIdentifier class.
 * @constructor
 * The Edifact message identifier.
 *
 * @member {string} messageId The message id on which this envelope settings
 * has to be applied.
 */
export interface EdifactMessageIdentifier {
  messageId: string;
}

/**
 * @class
 * Initializes a new instance of the EdifactSchemaReference class.
 * @constructor
 * The Edifact schema reference.
 *
 * @member {string} messageId The message id.
 * @member {string} messageVersion The message version.
 * @member {string} messageRelease The message release version.
 * @member {string} [senderApplicationId] The sender application id.
 * @member {string} [senderApplicationQualifier] The sender application
 * qualifier.
 * @member {string} [associationAssignedCode] The association assigned code.
 * @member {string} schemaName The schema name.
 */
export interface EdifactSchemaReference {
  messageId: string;
  messageVersion: string;
  messageRelease: string;
  senderApplicationId?: string;
  senderApplicationQualifier?: string;
  associationAssignedCode?: string;
  schemaName: string;
}

/**
 * @class
 * Initializes a new instance of the EdifactValidationOverride class.
 * @constructor
 * The Edifact validation override settings.
 *
 * @member {string} messageId The message id on which the validation settings
 * has to be applied.
 * @member {boolean} enforceCharacterSet The value indicating whether to
 * validate character Set.
 * @member {boolean} validateEdiTypes The value indicating whether to validate
 * EDI types.
 * @member {boolean} validateXsdTypes The value indicating whether to validate
 * XSD types.
 * @member {boolean} allowLeadingAndTrailingSpacesAndZeroes The value
 * indicating whether to allow leading and trailing spaces and zeroes.
 * @member {string} trailingSeparatorPolicy The trailing separator policy.
 * Possible values include: 'NotSpecified', 'NotAllowed', 'Optional',
 * 'Mandatory'
 * @member {boolean} trimLeadingAndTrailingSpacesAndZeroes The value indicating
 * whether to trim leading and trailing spaces and zeroes.
 */
export interface EdifactValidationOverride {
  messageId: string;
  enforceCharacterSet: boolean;
  validateEdiTypes: boolean;
  validateXsdTypes: boolean;
  allowLeadingAndTrailingSpacesAndZeroes: boolean;
  trailingSeparatorPolicy: string;
  trimLeadingAndTrailingSpacesAndZeroes: boolean;
}

/**
 * @class
 * Initializes a new instance of the EdifactDelimiterOverride class.
 * @constructor
 * The Edifact delimiter override settings.
 *
 * @member {string} [messageId] The message id.
 * @member {string} [messageVersion] The message version.
 * @member {string} [messageRelease] The message releaseversion.
 * @member {number} dataElementSeparator The data element separator.
 * @member {number} componentSeparator The component separator.
 * @member {number} segmentTerminator The segment terminator.
 * @member {number} repetitionSeparator The repetition separator.
 * @member {string} segmentTerminatorSuffix The segment terminator suffix.
 * Possible values include: 'NotSpecified', 'None', 'CR', 'LF', 'CRLF'
 * @member {string} decimalPointIndicator The decimal point indicator. Possible
 * values include: 'NotSpecified', 'Comma', 'Decimal'
 * @member {number} releaseIndicator The release indicator.
 * @member {string} [messageAssociationAssignedCode] The message association
 * assigned code.
 * @member {string} [targetNamespace] The target namespace on which this
 * delimiter settings has to be applied.
 */
export interface EdifactDelimiterOverride {
  messageId?: string;
  messageVersion?: string;
  messageRelease?: string;
  dataElementSeparator: number;
  componentSeparator: number;
  segmentTerminator: number;
  repetitionSeparator: number;
  segmentTerminatorSuffix: string;
  decimalPointIndicator: string;
  releaseIndicator: number;
  messageAssociationAssignedCode?: string;
  targetNamespace?: string;
}

/**
 * @class
 * Initializes a new instance of the EdifactProtocolSettings class.
 * @constructor
 * The Edifact agreement protocol settings.
 *
 * @member {object} validationSettings The EDIFACT validation settings.
 * @member {boolean} [validationSettings.validateCharacterSet] The value
 * indicating whether to validate character set in the message.
 * @member {boolean}
 * [validationSettings.checkDuplicateInterchangeControlNumber] The value
 * indicating whether to check for duplicate interchange control number.
 * @member {number} [validationSettings.interchangeControlNumberValidityDays]
 * The validity period of interchange control number.
 * @member {boolean} [validationSettings.checkDuplicateGroupControlNumber] The
 * value indicating whether to check for duplicate group control number.
 * @member {boolean}
 * [validationSettings.checkDuplicateTransactionSetControlNumber] The value
 * indicating whether to check for duplicate transaction set control number.
 * @member {boolean} [validationSettings.validateEdiTypes] The value indicating
 * whether to Whether to validate EDI types.
 * @member {boolean} [validationSettings.validateXsdTypes] The value indicating
 * whether to Whether to validate XSD types.
 * @member {boolean}
 * [validationSettings.allowLeadingAndTrailingSpacesAndZeroes] The value
 * indicating whether to allow leading and trailing spaces and zeroes.
 * @member {boolean} [validationSettings.trimLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to trim leading and trailing spaces and zeroes.
 * @member {string} [validationSettings.trailingSeparatorPolicy] The trailing
 * separator policy. Possible values include: 'NotSpecified', 'NotAllowed',
 * 'Optional', 'Mandatory'
 * @member {object} framingSettings The EDIFACT framing settings.
 * @member {string} [framingSettings.serviceCodeListDirectoryVersion] The
 * service code list directory version.
 * @member {string} [framingSettings.characterEncoding] The character encoding.
 * @member {number} [framingSettings.protocolVersion] The protocol version.
 * @member {number} [framingSettings.dataElementSeparator] The data element
 * separator.
 * @member {number} [framingSettings.componentSeparator] The component
 * separator.
 * @member {number} [framingSettings.segmentTerminator] The segment terminator.
 * @member {number} [framingSettings.releaseIndicator] The release indicator.
 * @member {number} [framingSettings.repetitionSeparator] The repetition
 * separator.
 * @member {string} [framingSettings.characterSet] The EDIFACT frame setting
 * characterSet. Possible values include: 'NotSpecified', 'UNOB', 'UNOA',
 * 'UNOC', 'UNOD', 'UNOE', 'UNOF', 'UNOG', 'UNOH', 'UNOI', 'UNOJ', 'UNOK',
 * 'UNOX', 'UNOY', 'KECA'
 * @member {string} [framingSettings.decimalPointIndicator] The EDIFACT frame
 * setting decimal indicator. Possible values include: 'NotSpecified', 'Comma',
 * 'Decimal'
 * @member {string} [framingSettings.segmentTerminatorSuffix] The EDIFACT frame
 * setting segment terminator suffix. Possible values include: 'NotSpecified',
 * 'None', 'CR', 'LF', 'CRLF'
 * @member {object} envelopeSettings The EDIFACT envelope settings.
 * @member {string} [envelopeSettings.groupAssociationAssignedCode] The group
 * association assigned code.
 * @member {string} [envelopeSettings.communicationAgreementId] The
 * communication agreement id.
 * @member {boolean} [envelopeSettings.applyDelimiterStringAdvice] The value
 * indicating whether to apply delimiter string advice.
 * @member {boolean} [envelopeSettings.createGroupingSegments] The value
 * indicating whether to create grouping segments.
 * @member {boolean} [envelopeSettings.enableDefaultGroupHeaders] The value
 * indicating whether to enable default group headers.
 * @member {string} [envelopeSettings.recipientReferencePasswordValue] The
 * recipient reference password value.
 * @member {string} [envelopeSettings.recipientReferencePasswordQualifier] The
 * recipient reference password qualifier.
 * @member {string} [envelopeSettings.applicationReferenceId] The application
 * reference id.
 * @member {string} [envelopeSettings.processingPriorityCode] The processing
 * priority code.
 * @member {number} [envelopeSettings.interchangeControlNumberLowerBound] The
 * interchange control number lower bound.
 * @member {number} [envelopeSettings.interchangeControlNumberUpperBound] The
 * interchange control number upper bound.
 * @member {boolean} [envelopeSettings.rolloverInterchangeControlNumber] The
 * value indicating whether to rollover interchange control number.
 * @member {string} [envelopeSettings.interchangeControlNumberPrefix] The
 * interchange control number prefix.
 * @member {string} [envelopeSettings.interchangeControlNumberSuffix] The
 * interchange control number suffix.
 * @member {string} [envelopeSettings.senderReverseRoutingAddress] The sender
 * reverse routing address.
 * @member {string} [envelopeSettings.receiverReverseRoutingAddress] The
 * receiver reverse routing address.
 * @member {string} [envelopeSettings.functionalGroupId] The functional group
 * id.
 * @member {string} [envelopeSettings.groupControllingAgencyCode] The group
 * controlling agency code.
 * @member {string} [envelopeSettings.groupMessageVersion] The group message
 * version.
 * @member {string} [envelopeSettings.groupMessageRelease] The group message
 * release.
 * @member {number} [envelopeSettings.groupControlNumberLowerBound] The group
 * control number lower bound.
 * @member {number} [envelopeSettings.groupControlNumberUpperBound] The group
 * control number upper bound.
 * @member {boolean} [envelopeSettings.rolloverGroupControlNumber] The value
 * indicating whether to rollover group control number.
 * @member {string} [envelopeSettings.groupControlNumberPrefix] The group
 * control number prefix.
 * @member {string} [envelopeSettings.groupControlNumberSuffix] The group
 * control number suffix.
 * @member {string} [envelopeSettings.groupApplicationReceiverQualifier] The
 * group application receiver qualifier.
 * @member {string} [envelopeSettings.groupApplicationReceiverId] The group
 * application receiver id.
 * @member {string} [envelopeSettings.groupApplicationSenderQualifier] The
 * group application sender qualifier.
 * @member {string} [envelopeSettings.groupApplicationSenderId] The group
 * application sender id.
 * @member {string} [envelopeSettings.groupApplicationPassword] The group
 * application password.
 * @member {boolean}
 * [envelopeSettings.overwriteExistingTransactionSetControlNumber] The value
 * indicating whether to overwrite existing transaction set control number.
 * @member {string} [envelopeSettings.transactionSetControlNumberPrefix] The
 * transaction set control number prefix.
 * @member {string} [envelopeSettings.transactionSetControlNumberSuffix] The
 * transaction set control number suffix.
 * @member {number} [envelopeSettings.transactionSetControlNumberLowerBound]
 * The transaction set control number lower bound.
 * @member {number} [envelopeSettings.transactionSetControlNumberUpperBound]
 * The transaction set control number upper bound.
 * @member {boolean} [envelopeSettings.rolloverTransactionSetControlNumber] The
 * value indicating whether to rollover transaction set control number.
 * @member {boolean} [envelopeSettings.isTestInterchange] The value indicating
 * whether the message is a test interchange.
 * @member {string} [envelopeSettings.senderInternalIdentification] The sender
 * internal identification.
 * @member {string} [envelopeSettings.senderInternalSubIdentification] The
 * sender internal sub identification.
 * @member {string} [envelopeSettings.receiverInternalIdentification] The
 * receiver internal identification.
 * @member {string} [envelopeSettings.receiverInternalSubIdentification] The
 * receiver internal sub identification.
 * @member {object} acknowledgementSettings The EDIFACT acknowledgement
 * settings.
 * @member {boolean} [acknowledgementSettings.needTechnicalAcknowledgement] The
 * value indicating whether technical acknowledgement is needed.
 * @member {boolean} [acknowledgementSettings.batchTechnicalAcknowledgements]
 * The value indicating whether to batch the technical acknowledgements.
 * @member {boolean} [acknowledgementSettings.needFunctionalAcknowledgement]
 * The value indicating whether functional acknowledgement is needed.
 * @member {boolean} [acknowledgementSettings.batchFunctionalAcknowledgements]
 * The value indicating whether to batch functional acknowledgements.
 * @member {boolean} [acknowledgementSettings.needLoopForValidMessages] The
 * value indicating whether a loop is needed for valid messages.
 * @member {boolean} [acknowledgementSettings.sendSynchronousAcknowledgement]
 * The value indicating whether to send synchronous acknowledgement.
 * @member {string}
 * [acknowledgementSettings.acknowledgementControlNumberPrefix] The
 * acknowledgement control number prefix.
 * @member {string}
 * [acknowledgementSettings.acknowledgementControlNumberSuffix] The
 * acknowledgement control number suffix.
 * @member {number}
 * [acknowledgementSettings.acknowledgementControlNumberLowerBound] The
 * acknowledgement control number lower bound.
 * @member {number}
 * [acknowledgementSettings.acknowledgementControlNumberUpperBound] The
 * acknowledgement control number upper bound.
 * @member {boolean}
 * [acknowledgementSettings.rolloverAcknowledgementControlNumber] The value
 * indicating whether to rollover acknowledgement control number.
 * @member {object} messageFilter The EDIFACT message filter.
 * @member {string} [messageFilter.messageFilterType] The message filter type.
 * Possible values include: 'NotSpecified', 'Include', 'Exclude'
 * @member {object} processingSettings The EDIFACT processing Settings.
 * @member {boolean} [processingSettings.maskSecurityInfo] The value indicating
 * whether to mask security information.
 * @member {boolean} [processingSettings.preserveInterchange] The value
 * indicating whether to preserve interchange.
 * @member {boolean} [processingSettings.suspendInterchangeOnError] The value
 * indicating whether to suspend interchange on error.
 * @member {boolean}
 * [processingSettings.createEmptyXmlTagsForTrailingSeparators] The value
 * indicating whether to create empty xml tags for trailing separators.
 * @member {boolean} [processingSettings.useDotAsDecimalSeparator] The value
 * indicating whether to use dot as decimal separator.
 * @member {array} [envelopeOverrides] The EDIFACT envelope override settings.
 * @member {array} [messageFilterList] The EDIFACT message filter list.
 * @member {array} schemaReferences The EDIFACT schema references.
 * @member {array} [validationOverrides] The EDIFACT validation override
 * settings.
 * @member {array} [edifactDelimiterOverrides] The EDIFACT delimiter override
 * settings.
 */
export interface EdifactProtocolSettings {
  validationSettings: EdifactValidationSettings;
  framingSettings: EdifactFramingSettings;
  envelopeSettings: EdifactEnvelopeSettings;
  acknowledgementSettings: EdifactAcknowledgementSettings;
  messageFilter: EdifactMessageFilter;
  processingSettings: EdifactProcessingSettings;
  envelopeOverrides?: EdifactEnvelopeOverride[];
  messageFilterList?: EdifactMessageIdentifier[];
  schemaReferences: EdifactSchemaReference[];
  validationOverrides?: EdifactValidationOverride[];
  edifactDelimiterOverrides?: EdifactDelimiterOverride[];
}

/**
 * @class
 * Initializes a new instance of the EdifactOneWayAgreement class.
 * @constructor
 * The Edifact one way agreement.
 *
 * @member {object} senderBusinessIdentity The sender business identity
 * @member {string} [senderBusinessIdentity.qualifier] The business identity
 * qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [senderBusinessIdentity.value] The user defined business
 * identity value.
 * @member {object} receiverBusinessIdentity The receiver business identity
 * @member {string} [receiverBusinessIdentity.qualifier] The business identity
 * qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [receiverBusinessIdentity.value] The user defined business
 * identity value.
 * @member {object} protocolSettings The EDIFACT protocol settings.
 * @member {object} [protocolSettings.validationSettings] The EDIFACT
 * validation settings.
 * @member {boolean} [protocolSettings.validationSettings.validateCharacterSet]
 * The value indicating whether to validate character set in the message.
 * @member {boolean}
 * [protocolSettings.validationSettings.checkDuplicateInterchangeControlNumber]
 * The value indicating whether to check for duplicate interchange control
 * number.
 * @member {number}
 * [protocolSettings.validationSettings.interchangeControlNumberValidityDays]
 * The validity period of interchange control number.
 * @member {boolean}
 * [protocolSettings.validationSettings.checkDuplicateGroupControlNumber] The
 * value indicating whether to check for duplicate group control number.
 * @member {boolean}
 * [protocolSettings.validationSettings.checkDuplicateTransactionSetControlNumber]
 * The value indicating whether to check for duplicate transaction set control
 * number.
 * @member {boolean} [protocolSettings.validationSettings.validateEdiTypes] The
 * value indicating whether to Whether to validate EDI types.
 * @member {boolean} [protocolSettings.validationSettings.validateXsdTypes] The
 * value indicating whether to Whether to validate XSD types.
 * @member {boolean}
 * [protocolSettings.validationSettings.allowLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to allow leading and trailing spaces and
 * zeroes.
 * @member {boolean}
 * [protocolSettings.validationSettings.trimLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to trim leading and trailing spaces and zeroes.
 * @member {string}
 * [protocolSettings.validationSettings.trailingSeparatorPolicy] The trailing
 * separator policy. Possible values include: 'NotSpecified', 'NotAllowed',
 * 'Optional', 'Mandatory'
 * @member {object} [protocolSettings.framingSettings] The EDIFACT framing
 * settings.
 * @member {string}
 * [protocolSettings.framingSettings.serviceCodeListDirectoryVersion] The
 * service code list directory version.
 * @member {string} [protocolSettings.framingSettings.characterEncoding] The
 * character encoding.
 * @member {number} [protocolSettings.framingSettings.protocolVersion] The
 * protocol version.
 * @member {number} [protocolSettings.framingSettings.dataElementSeparator] The
 * data element separator.
 * @member {number} [protocolSettings.framingSettings.componentSeparator] The
 * component separator.
 * @member {number} [protocolSettings.framingSettings.segmentTerminator] The
 * segment terminator.
 * @member {number} [protocolSettings.framingSettings.releaseIndicator] The
 * release indicator.
 * @member {number} [protocolSettings.framingSettings.repetitionSeparator] The
 * repetition separator.
 * @member {string} [protocolSettings.framingSettings.characterSet] The EDIFACT
 * frame setting characterSet. Possible values include: 'NotSpecified', 'UNOB',
 * 'UNOA', 'UNOC', 'UNOD', 'UNOE', 'UNOF', 'UNOG', 'UNOH', 'UNOI', 'UNOJ',
 * 'UNOK', 'UNOX', 'UNOY', 'KECA'
 * @member {string} [protocolSettings.framingSettings.decimalPointIndicator]
 * The EDIFACT frame setting decimal indicator. Possible values include:
 * 'NotSpecified', 'Comma', 'Decimal'
 * @member {string} [protocolSettings.framingSettings.segmentTerminatorSuffix]
 * The EDIFACT frame setting segment terminator suffix. Possible values
 * include: 'NotSpecified', 'None', 'CR', 'LF', 'CRLF'
 * @member {object} [protocolSettings.envelopeSettings] The EDIFACT envelope
 * settings.
 * @member {string}
 * [protocolSettings.envelopeSettings.groupAssociationAssignedCode] The group
 * association assigned code.
 * @member {string}
 * [protocolSettings.envelopeSettings.communicationAgreementId] The
 * communication agreement id.
 * @member {boolean}
 * [protocolSettings.envelopeSettings.applyDelimiterStringAdvice] The value
 * indicating whether to apply delimiter string advice.
 * @member {boolean} [protocolSettings.envelopeSettings.createGroupingSegments]
 * The value indicating whether to create grouping segments.
 * @member {boolean}
 * [protocolSettings.envelopeSettings.enableDefaultGroupHeaders] The value
 * indicating whether to enable default group headers.
 * @member {string}
 * [protocolSettings.envelopeSettings.recipientReferencePasswordValue] The
 * recipient reference password value.
 * @member {string}
 * [protocolSettings.envelopeSettings.recipientReferencePasswordQualifier] The
 * recipient reference password qualifier.
 * @member {string} [protocolSettings.envelopeSettings.applicationReferenceId]
 * The application reference id.
 * @member {string} [protocolSettings.envelopeSettings.processingPriorityCode]
 * The processing priority code.
 * @member {number}
 * [protocolSettings.envelopeSettings.interchangeControlNumberLowerBound] The
 * interchange control number lower bound.
 * @member {number}
 * [protocolSettings.envelopeSettings.interchangeControlNumberUpperBound] The
 * interchange control number upper bound.
 * @member {boolean}
 * [protocolSettings.envelopeSettings.rolloverInterchangeControlNumber] The
 * value indicating whether to rollover interchange control number.
 * @member {string}
 * [protocolSettings.envelopeSettings.interchangeControlNumberPrefix] The
 * interchange control number prefix.
 * @member {string}
 * [protocolSettings.envelopeSettings.interchangeControlNumberSuffix] The
 * interchange control number suffix.
 * @member {string}
 * [protocolSettings.envelopeSettings.senderReverseRoutingAddress] The sender
 * reverse routing address.
 * @member {string}
 * [protocolSettings.envelopeSettings.receiverReverseRoutingAddress] The
 * receiver reverse routing address.
 * @member {string} [protocolSettings.envelopeSettings.functionalGroupId] The
 * functional group id.
 * @member {string}
 * [protocolSettings.envelopeSettings.groupControllingAgencyCode] The group
 * controlling agency code.
 * @member {string} [protocolSettings.envelopeSettings.groupMessageVersion] The
 * group message version.
 * @member {string} [protocolSettings.envelopeSettings.groupMessageRelease] The
 * group message release.
 * @member {number}
 * [protocolSettings.envelopeSettings.groupControlNumberLowerBound] The group
 * control number lower bound.
 * @member {number}
 * [protocolSettings.envelopeSettings.groupControlNumberUpperBound] The group
 * control number upper bound.
 * @member {boolean}
 * [protocolSettings.envelopeSettings.rolloverGroupControlNumber] The value
 * indicating whether to rollover group control number.
 * @member {string}
 * [protocolSettings.envelopeSettings.groupControlNumberPrefix] The group
 * control number prefix.
 * @member {string}
 * [protocolSettings.envelopeSettings.groupControlNumberSuffix] The group
 * control number suffix.
 * @member {string}
 * [protocolSettings.envelopeSettings.groupApplicationReceiverQualifier] The
 * group application receiver qualifier.
 * @member {string}
 * [protocolSettings.envelopeSettings.groupApplicationReceiverId] The group
 * application receiver id.
 * @member {string}
 * [protocolSettings.envelopeSettings.groupApplicationSenderQualifier] The
 * group application sender qualifier.
 * @member {string}
 * [protocolSettings.envelopeSettings.groupApplicationSenderId] The group
 * application sender id.
 * @member {string}
 * [protocolSettings.envelopeSettings.groupApplicationPassword] The group
 * application password.
 * @member {boolean}
 * [protocolSettings.envelopeSettings.overwriteExistingTransactionSetControlNumber]
 * The value indicating whether to overwrite existing transaction set control
 * number.
 * @member {string}
 * [protocolSettings.envelopeSettings.transactionSetControlNumberPrefix] The
 * transaction set control number prefix.
 * @member {string}
 * [protocolSettings.envelopeSettings.transactionSetControlNumberSuffix] The
 * transaction set control number suffix.
 * @member {number}
 * [protocolSettings.envelopeSettings.transactionSetControlNumberLowerBound]
 * The transaction set control number lower bound.
 * @member {number}
 * [protocolSettings.envelopeSettings.transactionSetControlNumberUpperBound]
 * The transaction set control number upper bound.
 * @member {boolean}
 * [protocolSettings.envelopeSettings.rolloverTransactionSetControlNumber] The
 * value indicating whether to rollover transaction set control number.
 * @member {boolean} [protocolSettings.envelopeSettings.isTestInterchange] The
 * value indicating whether the message is a test interchange.
 * @member {string}
 * [protocolSettings.envelopeSettings.senderInternalIdentification] The sender
 * internal identification.
 * @member {string}
 * [protocolSettings.envelopeSettings.senderInternalSubIdentification] The
 * sender internal sub identification.
 * @member {string}
 * [protocolSettings.envelopeSettings.receiverInternalIdentification] The
 * receiver internal identification.
 * @member {string}
 * [protocolSettings.envelopeSettings.receiverInternalSubIdentification] The
 * receiver internal sub identification.
 * @member {object} [protocolSettings.acknowledgementSettings] The EDIFACT
 * acknowledgement settings.
 * @member {boolean}
 * [protocolSettings.acknowledgementSettings.needTechnicalAcknowledgement] The
 * value indicating whether technical acknowledgement is needed.
 * @member {boolean}
 * [protocolSettings.acknowledgementSettings.batchTechnicalAcknowledgements]
 * The value indicating whether to batch the technical acknowledgements.
 * @member {boolean}
 * [protocolSettings.acknowledgementSettings.needFunctionalAcknowledgement] The
 * value indicating whether functional acknowledgement is needed.
 * @member {boolean}
 * [protocolSettings.acknowledgementSettings.batchFunctionalAcknowledgements]
 * The value indicating whether to batch functional acknowledgements.
 * @member {boolean}
 * [protocolSettings.acknowledgementSettings.needLoopForValidMessages] The
 * value indicating whether a loop is needed for valid messages.
 * @member {boolean}
 * [protocolSettings.acknowledgementSettings.sendSynchronousAcknowledgement]
 * The value indicating whether to send synchronous acknowledgement.
 * @member {string}
 * [protocolSettings.acknowledgementSettings.acknowledgementControlNumberPrefix]
 * The acknowledgement control number prefix.
 * @member {string}
 * [protocolSettings.acknowledgementSettings.acknowledgementControlNumberSuffix]
 * The acknowledgement control number suffix.
 * @member {number}
 * [protocolSettings.acknowledgementSettings.acknowledgementControlNumberLowerBound]
 * The acknowledgement control number lower bound.
 * @member {number}
 * [protocolSettings.acknowledgementSettings.acknowledgementControlNumberUpperBound]
 * The acknowledgement control number upper bound.
 * @member {boolean}
 * [protocolSettings.acknowledgementSettings.rolloverAcknowledgementControlNumber]
 * The value indicating whether to rollover acknowledgement control number.
 * @member {object} [protocolSettings.messageFilter] The EDIFACT message
 * filter.
 * @member {string} [protocolSettings.messageFilter.messageFilterType] The
 * message filter type. Possible values include: 'NotSpecified', 'Include',
 * 'Exclude'
 * @member {object} [protocolSettings.processingSettings] The EDIFACT
 * processing Settings.
 * @member {boolean} [protocolSettings.processingSettings.maskSecurityInfo] The
 * value indicating whether to mask security information.
 * @member {boolean} [protocolSettings.processingSettings.preserveInterchange]
 * The value indicating whether to preserve interchange.
 * @member {boolean}
 * [protocolSettings.processingSettings.suspendInterchangeOnError] The value
 * indicating whether to suspend interchange on error.
 * @member {boolean}
 * [protocolSettings.processingSettings.createEmptyXmlTagsForTrailingSeparators]
 * The value indicating whether to create empty xml tags for trailing
 * separators.
 * @member {boolean}
 * [protocolSettings.processingSettings.useDotAsDecimalSeparator] The value
 * indicating whether to use dot as decimal separator.
 * @member {array} [protocolSettings.envelopeOverrides] The EDIFACT envelope
 * override settings.
 * @member {array} [protocolSettings.messageFilterList] The EDIFACT message
 * filter list.
 * @member {array} [protocolSettings.schemaReferences] The EDIFACT schema
 * references.
 * @member {array} [protocolSettings.validationOverrides] The EDIFACT
 * validation override settings.
 * @member {array} [protocolSettings.edifactDelimiterOverrides] The EDIFACT
 * delimiter override settings.
 */
export interface EdifactOneWayAgreement {
  senderBusinessIdentity: BusinessIdentity;
  receiverBusinessIdentity: BusinessIdentity;
  protocolSettings: EdifactProtocolSettings;
}

/**
 * @class
 * Initializes a new instance of the EdifactAgreementContent class.
 * @constructor
 * The Edifact agreement content.
 *
 * @member {object} receiveAgreement The EDIFACT one-way receive agreement.
 * @member {object} [receiveAgreement.senderBusinessIdentity] The sender
 * business identity
 * @member {string} [receiveAgreement.senderBusinessIdentity.qualifier] The
 * business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [receiveAgreement.senderBusinessIdentity.value] The user
 * defined business identity value.
 * @member {object} [receiveAgreement.receiverBusinessIdentity] The receiver
 * business identity
 * @member {string} [receiveAgreement.receiverBusinessIdentity.qualifier] The
 * business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [receiveAgreement.receiverBusinessIdentity.value] The user
 * defined business identity value.
 * @member {object} [receiveAgreement.protocolSettings] The EDIFACT protocol
 * settings.
 * @member {object} [receiveAgreement.protocolSettings.validationSettings] The
 * EDIFACT validation settings.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.validationSettings.validateCharacterSet]
 * The value indicating whether to validate character set in the message.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.validationSettings.checkDuplicateInterchangeControlNumber]
 * The value indicating whether to check for duplicate interchange control
 * number.
 * @member {number}
 * [receiveAgreement.protocolSettings.validationSettings.interchangeControlNumberValidityDays]
 * The validity period of interchange control number.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.validationSettings.checkDuplicateGroupControlNumber]
 * The value indicating whether to check for duplicate group control number.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.validationSettings.checkDuplicateTransactionSetControlNumber]
 * The value indicating whether to check for duplicate transaction set control
 * number.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.validationSettings.validateEdiTypes] The
 * value indicating whether to Whether to validate EDI types.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.validationSettings.validateXsdTypes] The
 * value indicating whether to Whether to validate XSD types.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.validationSettings.allowLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to allow leading and trailing spaces and
 * zeroes.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.validationSettings.trimLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to trim leading and trailing spaces and zeroes.
 * @member {string}
 * [receiveAgreement.protocolSettings.validationSettings.trailingSeparatorPolicy]
 * The trailing separator policy. Possible values include: 'NotSpecified',
 * 'NotAllowed', 'Optional', 'Mandatory'
 * @member {object} [receiveAgreement.protocolSettings.framingSettings] The
 * EDIFACT framing settings.
 * @member {string}
 * [receiveAgreement.protocolSettings.framingSettings.serviceCodeListDirectoryVersion]
 * The service code list directory version.
 * @member {string}
 * [receiveAgreement.protocolSettings.framingSettings.characterEncoding] The
 * character encoding.
 * @member {number}
 * [receiveAgreement.protocolSettings.framingSettings.protocolVersion] The
 * protocol version.
 * @member {number}
 * [receiveAgreement.protocolSettings.framingSettings.dataElementSeparator] The
 * data element separator.
 * @member {number}
 * [receiveAgreement.protocolSettings.framingSettings.componentSeparator] The
 * component separator.
 * @member {number}
 * [receiveAgreement.protocolSettings.framingSettings.segmentTerminator] The
 * segment terminator.
 * @member {number}
 * [receiveAgreement.protocolSettings.framingSettings.releaseIndicator] The
 * release indicator.
 * @member {number}
 * [receiveAgreement.protocolSettings.framingSettings.repetitionSeparator] The
 * repetition separator.
 * @member {string}
 * [receiveAgreement.protocolSettings.framingSettings.characterSet] The EDIFACT
 * frame setting characterSet. Possible values include: 'NotSpecified', 'UNOB',
 * 'UNOA', 'UNOC', 'UNOD', 'UNOE', 'UNOF', 'UNOG', 'UNOH', 'UNOI', 'UNOJ',
 * 'UNOK', 'UNOX', 'UNOY', 'KECA'
 * @member {string}
 * [receiveAgreement.protocolSettings.framingSettings.decimalPointIndicator]
 * The EDIFACT frame setting decimal indicator. Possible values include:
 * 'NotSpecified', 'Comma', 'Decimal'
 * @member {string}
 * [receiveAgreement.protocolSettings.framingSettings.segmentTerminatorSuffix]
 * The EDIFACT frame setting segment terminator suffix. Possible values
 * include: 'NotSpecified', 'None', 'CR', 'LF', 'CRLF'
 * @member {object} [receiveAgreement.protocolSettings.envelopeSettings] The
 * EDIFACT envelope settings.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.groupAssociationAssignedCode]
 * The group association assigned code.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.communicationAgreementId]
 * The communication agreement id.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.envelopeSettings.applyDelimiterStringAdvice]
 * The value indicating whether to apply delimiter string advice.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.envelopeSettings.createGroupingSegments]
 * The value indicating whether to create grouping segments.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.envelopeSettings.enableDefaultGroupHeaders]
 * The value indicating whether to enable default group headers.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.recipientReferencePasswordValue]
 * The recipient reference password value.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.recipientReferencePasswordQualifier]
 * The recipient reference password qualifier.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.applicationReferenceId]
 * The application reference id.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.processingPriorityCode]
 * The processing priority code.
 * @member {number}
 * [receiveAgreement.protocolSettings.envelopeSettings.interchangeControlNumberLowerBound]
 * The interchange control number lower bound.
 * @member {number}
 * [receiveAgreement.protocolSettings.envelopeSettings.interchangeControlNumberUpperBound]
 * The interchange control number upper bound.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.envelopeSettings.rolloverInterchangeControlNumber]
 * The value indicating whether to rollover interchange control number.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.interchangeControlNumberPrefix]
 * The interchange control number prefix.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.interchangeControlNumberSuffix]
 * The interchange control number suffix.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.senderReverseRoutingAddress]
 * The sender reverse routing address.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.receiverReverseRoutingAddress]
 * The receiver reverse routing address.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.functionalGroupId] The
 * functional group id.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.groupControllingAgencyCode]
 * The group controlling agency code.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.groupMessageVersion] The
 * group message version.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.groupMessageRelease] The
 * group message release.
 * @member {number}
 * [receiveAgreement.protocolSettings.envelopeSettings.groupControlNumberLowerBound]
 * The group control number lower bound.
 * @member {number}
 * [receiveAgreement.protocolSettings.envelopeSettings.groupControlNumberUpperBound]
 * The group control number upper bound.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.envelopeSettings.rolloverGroupControlNumber]
 * The value indicating whether to rollover group control number.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.groupControlNumberPrefix]
 * The group control number prefix.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.groupControlNumberSuffix]
 * The group control number suffix.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.groupApplicationReceiverQualifier]
 * The group application receiver qualifier.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.groupApplicationReceiverId]
 * The group application receiver id.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.groupApplicationSenderQualifier]
 * The group application sender qualifier.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.groupApplicationSenderId]
 * The group application sender id.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.groupApplicationPassword]
 * The group application password.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.envelopeSettings.overwriteExistingTransactionSetControlNumber]
 * The value indicating whether to overwrite existing transaction set control
 * number.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberPrefix]
 * The transaction set control number prefix.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberSuffix]
 * The transaction set control number suffix.
 * @member {number}
 * [receiveAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberLowerBound]
 * The transaction set control number lower bound.
 * @member {number}
 * [receiveAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberUpperBound]
 * The transaction set control number upper bound.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.envelopeSettings.rolloverTransactionSetControlNumber]
 * The value indicating whether to rollover transaction set control number.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.envelopeSettings.isTestInterchange] The
 * value indicating whether the message is a test interchange.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.senderInternalIdentification]
 * The sender internal identification.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.senderInternalSubIdentification]
 * The sender internal sub identification.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.receiverInternalIdentification]
 * The receiver internal identification.
 * @member {string}
 * [receiveAgreement.protocolSettings.envelopeSettings.receiverInternalSubIdentification]
 * The receiver internal sub identification.
 * @member {object} [receiveAgreement.protocolSettings.acknowledgementSettings]
 * The EDIFACT acknowledgement settings.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.acknowledgementSettings.needTechnicalAcknowledgement]
 * The value indicating whether technical acknowledgement is needed.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.acknowledgementSettings.batchTechnicalAcknowledgements]
 * The value indicating whether to batch the technical acknowledgements.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.acknowledgementSettings.needFunctionalAcknowledgement]
 * The value indicating whether functional acknowledgement is needed.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.acknowledgementSettings.batchFunctionalAcknowledgements]
 * The value indicating whether to batch functional acknowledgements.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.acknowledgementSettings.needLoopForValidMessages]
 * The value indicating whether a loop is needed for valid messages.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.acknowledgementSettings.sendSynchronousAcknowledgement]
 * The value indicating whether to send synchronous acknowledgement.
 * @member {string}
 * [receiveAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberPrefix]
 * The acknowledgement control number prefix.
 * @member {string}
 * [receiveAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberSuffix]
 * The acknowledgement control number suffix.
 * @member {number}
 * [receiveAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberLowerBound]
 * The acknowledgement control number lower bound.
 * @member {number}
 * [receiveAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberUpperBound]
 * The acknowledgement control number upper bound.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.acknowledgementSettings.rolloverAcknowledgementControlNumber]
 * The value indicating whether to rollover acknowledgement control number.
 * @member {object} [receiveAgreement.protocolSettings.messageFilter] The
 * EDIFACT message filter.
 * @member {string}
 * [receiveAgreement.protocolSettings.messageFilter.messageFilterType] The
 * message filter type. Possible values include: 'NotSpecified', 'Include',
 * 'Exclude'
 * @member {object} [receiveAgreement.protocolSettings.processingSettings] The
 * EDIFACT processing Settings.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.processingSettings.maskSecurityInfo] The
 * value indicating whether to mask security information.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.processingSettings.preserveInterchange]
 * The value indicating whether to preserve interchange.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.processingSettings.suspendInterchangeOnError]
 * The value indicating whether to suspend interchange on error.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.processingSettings.createEmptyXmlTagsForTrailingSeparators]
 * The value indicating whether to create empty xml tags for trailing
 * separators.
 * @member {boolean}
 * [receiveAgreement.protocolSettings.processingSettings.useDotAsDecimalSeparator]
 * The value indicating whether to use dot as decimal separator.
 * @member {array} [receiveAgreement.protocolSettings.envelopeOverrides] The
 * EDIFACT envelope override settings.
 * @member {array} [receiveAgreement.protocolSettings.messageFilterList] The
 * EDIFACT message filter list.
 * @member {array} [receiveAgreement.protocolSettings.schemaReferences] The
 * EDIFACT schema references.
 * @member {array} [receiveAgreement.protocolSettings.validationOverrides] The
 * EDIFACT validation override settings.
 * @member {array}
 * [receiveAgreement.protocolSettings.edifactDelimiterOverrides] The EDIFACT
 * delimiter override settings.
 * @member {object} sendAgreement The EDIFACT one-way send agreement.
 * @member {object} [sendAgreement.senderBusinessIdentity] The sender business
 * identity
 * @member {string} [sendAgreement.senderBusinessIdentity.qualifier] The
 * business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [sendAgreement.senderBusinessIdentity.value] The user
 * defined business identity value.
 * @member {object} [sendAgreement.receiverBusinessIdentity] The receiver
 * business identity
 * @member {string} [sendAgreement.receiverBusinessIdentity.qualifier] The
 * business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [sendAgreement.receiverBusinessIdentity.value] The user
 * defined business identity value.
 * @member {object} [sendAgreement.protocolSettings] The EDIFACT protocol
 * settings.
 * @member {object} [sendAgreement.protocolSettings.validationSettings] The
 * EDIFACT validation settings.
 * @member {boolean}
 * [sendAgreement.protocolSettings.validationSettings.validateCharacterSet] The
 * value indicating whether to validate character set in the message.
 * @member {boolean}
 * [sendAgreement.protocolSettings.validationSettings.checkDuplicateInterchangeControlNumber]
 * The value indicating whether to check for duplicate interchange control
 * number.
 * @member {number}
 * [sendAgreement.protocolSettings.validationSettings.interchangeControlNumberValidityDays]
 * The validity period of interchange control number.
 * @member {boolean}
 * [sendAgreement.protocolSettings.validationSettings.checkDuplicateGroupControlNumber]
 * The value indicating whether to check for duplicate group control number.
 * @member {boolean}
 * [sendAgreement.protocolSettings.validationSettings.checkDuplicateTransactionSetControlNumber]
 * The value indicating whether to check for duplicate transaction set control
 * number.
 * @member {boolean}
 * [sendAgreement.protocolSettings.validationSettings.validateEdiTypes] The
 * value indicating whether to Whether to validate EDI types.
 * @member {boolean}
 * [sendAgreement.protocolSettings.validationSettings.validateXsdTypes] The
 * value indicating whether to Whether to validate XSD types.
 * @member {boolean}
 * [sendAgreement.protocolSettings.validationSettings.allowLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to allow leading and trailing spaces and
 * zeroes.
 * @member {boolean}
 * [sendAgreement.protocolSettings.validationSettings.trimLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to trim leading and trailing spaces and zeroes.
 * @member {string}
 * [sendAgreement.protocolSettings.validationSettings.trailingSeparatorPolicy]
 * The trailing separator policy. Possible values include: 'NotSpecified',
 * 'NotAllowed', 'Optional', 'Mandatory'
 * @member {object} [sendAgreement.protocolSettings.framingSettings] The
 * EDIFACT framing settings.
 * @member {string}
 * [sendAgreement.protocolSettings.framingSettings.serviceCodeListDirectoryVersion]
 * The service code list directory version.
 * @member {string}
 * [sendAgreement.protocolSettings.framingSettings.characterEncoding] The
 * character encoding.
 * @member {number}
 * [sendAgreement.protocolSettings.framingSettings.protocolVersion] The
 * protocol version.
 * @member {number}
 * [sendAgreement.protocolSettings.framingSettings.dataElementSeparator] The
 * data element separator.
 * @member {number}
 * [sendAgreement.protocolSettings.framingSettings.componentSeparator] The
 * component separator.
 * @member {number}
 * [sendAgreement.protocolSettings.framingSettings.segmentTerminator] The
 * segment terminator.
 * @member {number}
 * [sendAgreement.protocolSettings.framingSettings.releaseIndicator] The
 * release indicator.
 * @member {number}
 * [sendAgreement.protocolSettings.framingSettings.repetitionSeparator] The
 * repetition separator.
 * @member {string}
 * [sendAgreement.protocolSettings.framingSettings.characterSet] The EDIFACT
 * frame setting characterSet. Possible values include: 'NotSpecified', 'UNOB',
 * 'UNOA', 'UNOC', 'UNOD', 'UNOE', 'UNOF', 'UNOG', 'UNOH', 'UNOI', 'UNOJ',
 * 'UNOK', 'UNOX', 'UNOY', 'KECA'
 * @member {string}
 * [sendAgreement.protocolSettings.framingSettings.decimalPointIndicator] The
 * EDIFACT frame setting decimal indicator. Possible values include:
 * 'NotSpecified', 'Comma', 'Decimal'
 * @member {string}
 * [sendAgreement.protocolSettings.framingSettings.segmentTerminatorSuffix] The
 * EDIFACT frame setting segment terminator suffix. Possible values include:
 * 'NotSpecified', 'None', 'CR', 'LF', 'CRLF'
 * @member {object} [sendAgreement.protocolSettings.envelopeSettings] The
 * EDIFACT envelope settings.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.groupAssociationAssignedCode]
 * The group association assigned code.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.communicationAgreementId]
 * The communication agreement id.
 * @member {boolean}
 * [sendAgreement.protocolSettings.envelopeSettings.applyDelimiterStringAdvice]
 * The value indicating whether to apply delimiter string advice.
 * @member {boolean}
 * [sendAgreement.protocolSettings.envelopeSettings.createGroupingSegments] The
 * value indicating whether to create grouping segments.
 * @member {boolean}
 * [sendAgreement.protocolSettings.envelopeSettings.enableDefaultGroupHeaders]
 * The value indicating whether to enable default group headers.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.recipientReferencePasswordValue]
 * The recipient reference password value.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.recipientReferencePasswordQualifier]
 * The recipient reference password qualifier.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.applicationReferenceId] The
 * application reference id.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.processingPriorityCode] The
 * processing priority code.
 * @member {number}
 * [sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberLowerBound]
 * The interchange control number lower bound.
 * @member {number}
 * [sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberUpperBound]
 * The interchange control number upper bound.
 * @member {boolean}
 * [sendAgreement.protocolSettings.envelopeSettings.rolloverInterchangeControlNumber]
 * The value indicating whether to rollover interchange control number.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberPrefix]
 * The interchange control number prefix.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberSuffix]
 * The interchange control number suffix.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.senderReverseRoutingAddress]
 * The sender reverse routing address.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.receiverReverseRoutingAddress]
 * The receiver reverse routing address.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.functionalGroupId] The
 * functional group id.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.groupControllingAgencyCode]
 * The group controlling agency code.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.groupMessageVersion] The
 * group message version.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.groupMessageRelease] The
 * group message release.
 * @member {number}
 * [sendAgreement.protocolSettings.envelopeSettings.groupControlNumberLowerBound]
 * The group control number lower bound.
 * @member {number}
 * [sendAgreement.protocolSettings.envelopeSettings.groupControlNumberUpperBound]
 * The group control number upper bound.
 * @member {boolean}
 * [sendAgreement.protocolSettings.envelopeSettings.rolloverGroupControlNumber]
 * The value indicating whether to rollover group control number.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.groupControlNumberPrefix]
 * The group control number prefix.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.groupControlNumberSuffix]
 * The group control number suffix.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.groupApplicationReceiverQualifier]
 * The group application receiver qualifier.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.groupApplicationReceiverId]
 * The group application receiver id.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.groupApplicationSenderQualifier]
 * The group application sender qualifier.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.groupApplicationSenderId]
 * The group application sender id.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.groupApplicationPassword]
 * The group application password.
 * @member {boolean}
 * [sendAgreement.protocolSettings.envelopeSettings.overwriteExistingTransactionSetControlNumber]
 * The value indicating whether to overwrite existing transaction set control
 * number.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberPrefix]
 * The transaction set control number prefix.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberSuffix]
 * The transaction set control number suffix.
 * @member {number}
 * [sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberLowerBound]
 * The transaction set control number lower bound.
 * @member {number}
 * [sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberUpperBound]
 * The transaction set control number upper bound.
 * @member {boolean}
 * [sendAgreement.protocolSettings.envelopeSettings.rolloverTransactionSetControlNumber]
 * The value indicating whether to rollover transaction set control number.
 * @member {boolean}
 * [sendAgreement.protocolSettings.envelopeSettings.isTestInterchange] The
 * value indicating whether the message is a test interchange.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.senderInternalIdentification]
 * The sender internal identification.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.senderInternalSubIdentification]
 * The sender internal sub identification.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.receiverInternalIdentification]
 * The receiver internal identification.
 * @member {string}
 * [sendAgreement.protocolSettings.envelopeSettings.receiverInternalSubIdentification]
 * The receiver internal sub identification.
 * @member {object} [sendAgreement.protocolSettings.acknowledgementSettings]
 * The EDIFACT acknowledgement settings.
 * @member {boolean}
 * [sendAgreement.protocolSettings.acknowledgementSettings.needTechnicalAcknowledgement]
 * The value indicating whether technical acknowledgement is needed.
 * @member {boolean}
 * [sendAgreement.protocolSettings.acknowledgementSettings.batchTechnicalAcknowledgements]
 * The value indicating whether to batch the technical acknowledgements.
 * @member {boolean}
 * [sendAgreement.protocolSettings.acknowledgementSettings.needFunctionalAcknowledgement]
 * The value indicating whether functional acknowledgement is needed.
 * @member {boolean}
 * [sendAgreement.protocolSettings.acknowledgementSettings.batchFunctionalAcknowledgements]
 * The value indicating whether to batch functional acknowledgements.
 * @member {boolean}
 * [sendAgreement.protocolSettings.acknowledgementSettings.needLoopForValidMessages]
 * The value indicating whether a loop is needed for valid messages.
 * @member {boolean}
 * [sendAgreement.protocolSettings.acknowledgementSettings.sendSynchronousAcknowledgement]
 * The value indicating whether to send synchronous acknowledgement.
 * @member {string}
 * [sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberPrefix]
 * The acknowledgement control number prefix.
 * @member {string}
 * [sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberSuffix]
 * The acknowledgement control number suffix.
 * @member {number}
 * [sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberLowerBound]
 * The acknowledgement control number lower bound.
 * @member {number}
 * [sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberUpperBound]
 * The acknowledgement control number upper bound.
 * @member {boolean}
 * [sendAgreement.protocolSettings.acknowledgementSettings.rolloverAcknowledgementControlNumber]
 * The value indicating whether to rollover acknowledgement control number.
 * @member {object} [sendAgreement.protocolSettings.messageFilter] The EDIFACT
 * message filter.
 * @member {string}
 * [sendAgreement.protocolSettings.messageFilter.messageFilterType] The message
 * filter type. Possible values include: 'NotSpecified', 'Include', 'Exclude'
 * @member {object} [sendAgreement.protocolSettings.processingSettings] The
 * EDIFACT processing Settings.
 * @member {boolean}
 * [sendAgreement.protocolSettings.processingSettings.maskSecurityInfo] The
 * value indicating whether to mask security information.
 * @member {boolean}
 * [sendAgreement.protocolSettings.processingSettings.preserveInterchange] The
 * value indicating whether to preserve interchange.
 * @member {boolean}
 * [sendAgreement.protocolSettings.processingSettings.suspendInterchangeOnError]
 * The value indicating whether to suspend interchange on error.
 * @member {boolean}
 * [sendAgreement.protocolSettings.processingSettings.createEmptyXmlTagsForTrailingSeparators]
 * The value indicating whether to create empty xml tags for trailing
 * separators.
 * @member {boolean}
 * [sendAgreement.protocolSettings.processingSettings.useDotAsDecimalSeparator]
 * The value indicating whether to use dot as decimal separator.
 * @member {array} [sendAgreement.protocolSettings.envelopeOverrides] The
 * EDIFACT envelope override settings.
 * @member {array} [sendAgreement.protocolSettings.messageFilterList] The
 * EDIFACT message filter list.
 * @member {array} [sendAgreement.protocolSettings.schemaReferences] The
 * EDIFACT schema references.
 * @member {array} [sendAgreement.protocolSettings.validationOverrides] The
 * EDIFACT validation override settings.
 * @member {array} [sendAgreement.protocolSettings.edifactDelimiterOverrides]
 * The EDIFACT delimiter override settings.
 */
export interface EdifactAgreementContent {
  receiveAgreement: EdifactOneWayAgreement;
  sendAgreement: EdifactOneWayAgreement;
}

/**
 * @class
 * Initializes a new instance of the AgreementContent class.
 * @constructor
 * The integration account agreement content.
 *
 * @member {object} [aS2] The AS2 agreement content.
 * @member {object} [aS2.receiveAgreement] The AS2 one-way receive agreement.
 * @member {object} [aS2.receiveAgreement.senderBusinessIdentity] The sender
 * business identity
 * @member {string} [aS2.receiveAgreement.senderBusinessIdentity.qualifier] The
 * business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [aS2.receiveAgreement.senderBusinessIdentity.value] The
 * user defined business identity value.
 * @member {object} [aS2.receiveAgreement.receiverBusinessIdentity] The
 * receiver business identity
 * @member {string} [aS2.receiveAgreement.receiverBusinessIdentity.qualifier]
 * The business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [aS2.receiveAgreement.receiverBusinessIdentity.value] The
 * user defined business identity value.
 * @member {object} [aS2.receiveAgreement.protocolSettings] The AS2 protocol
 * settings.
 * @member {object}
 * [aS2.receiveAgreement.protocolSettings.messageConnectionSettings] The
 * message connection settings.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.messageConnectionSettings.ignoreCertificateNameMismatch]
 * The value indicating whether to ignore mismatch in certificate name.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.messageConnectionSettings.supportHttpStatusCodeContinue]
 * The value indicating whether to support HTTP status code 'CONTINUE'.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.messageConnectionSettings.keepHttpConnectionAlive]
 * The value indicating whether to keep the connection alive.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.messageConnectionSettings.unfoldHttpHeaders]
 * The value indicating whether to unfold the HTTP headers.
 * @member {object}
 * [aS2.receiveAgreement.protocolSettings.acknowledgementConnectionSettings]
 * The acknowledgement connection settings.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.acknowledgementConnectionSettings.ignoreCertificateNameMismatch]
 * The value indicating whether to ignore mismatch in certificate name.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.acknowledgementConnectionSettings.supportHttpStatusCodeContinue]
 * The value indicating whether to support HTTP status code 'CONTINUE'.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.acknowledgementConnectionSettings.keepHttpConnectionAlive]
 * The value indicating whether to keep the connection alive.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.acknowledgementConnectionSettings.unfoldHttpHeaders]
 * The value indicating whether to unfold the HTTP headers.
 * @member {object} [aS2.receiveAgreement.protocolSettings.mdnSettings] The MDN
 * settings.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.mdnSettings.needMdn] The value
 * indicating whether to send or request a MDN.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.mdnSettings.signMdn] The value
 * indicating whether the MDN needs to be signed or not.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.mdnSettings.sendMdnAsynchronously]
 * The value indicating whether to send the asynchronous MDN.
 * @member {string}
 * [aS2.receiveAgreement.protocolSettings.mdnSettings.receiptDeliveryUrl] The
 * receipt delivery URL.
 * @member {string}
 * [aS2.receiveAgreement.protocolSettings.mdnSettings.dispositionNotificationTo]
 * The disposition notification to header value.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.mdnSettings.signOutboundMdnIfOptional]
 * The value indicating whether to sign the outbound MDN if optional.
 * @member {string} [aS2.receiveAgreement.protocolSettings.mdnSettings.mdnText]
 * The MDN text.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.mdnSettings.sendInboundMdnToMessageBox]
 * The value indicating whether to send inbound MDN to message box.
 * @member {string}
 * [aS2.receiveAgreement.protocolSettings.mdnSettings.micHashingAlgorithm] The
 * signing or hashing algorithm. Possible values include: 'NotSpecified',
 * 'None', 'MD5', 'SHA1', 'SHA2256', 'SHA2384', 'SHA2512'
 * @member {object} [aS2.receiveAgreement.protocolSettings.securitySettings]
 * The security settings.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.securitySettings.overrideGroupSigningCertificate]
 * The value indicating whether to send or request a MDN.
 * @member {string}
 * [aS2.receiveAgreement.protocolSettings.securitySettings.signingCertificateName]
 * The name of the signing certificate.
 * @member {string}
 * [aS2.receiveAgreement.protocolSettings.securitySettings.encryptionCertificateName]
 * The name of the encryption certificate.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.securitySettings.enableNrrForInboundEncodedMessages]
 * The value indicating whether to enable NRR for inbound encoded messages.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.securitySettings.enableNrrForInboundDecodedMessages]
 * The value indicating whether to enable NRR for inbound decoded messages.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.securitySettings.enableNrrForOutboundMdn]
 * The value indicating whether to enable NRR for outbound MDN.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.securitySettings.enableNrrForOutboundEncodedMessages]
 * The value indicating whether to enable NRR for outbound encoded messages.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.securitySettings.enableNrrForOutboundDecodedMessages]
 * The value indicating whether to enable NRR for outbound decoded messages.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.securitySettings.enableNrrForInboundMdn]
 * The value indicating whether to enable NRR for inbound MDN.
 * @member {string}
 * [aS2.receiveAgreement.protocolSettings.securitySettings.sha2AlgorithmFormat]
 * The Sha2 algorithm format. Valid values are Sha2, ShaHashSize,
 * ShaHyphenHashSize, Sha2UnderscoreHashSize.
 * @member {object} [aS2.receiveAgreement.protocolSettings.validationSettings]
 * The validation settings.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.validationSettings.overrideMessageProperties]
 * The value indicating whether to override incoming message properties with
 * those in agreement.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.validationSettings.encryptMessage]
 * The value indicating whether the message has to be encrypted.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.validationSettings.signMessage] The
 * value indicating whether the message has to be signed.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.validationSettings.compressMessage]
 * The value indicating whether the message has to be compressed.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.validationSettings.checkDuplicateMessage]
 * The value indicating whether to check for duplicate message.
 * @member {number}
 * [aS2.receiveAgreement.protocolSettings.validationSettings.interchangeDuplicatesValidityDays]
 * The number of days to look back for duplicate interchange.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.validationSettings.checkCertificateRevocationListOnSend]
 * The value indicating whether to check for certificate revocation list on
 * send.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.validationSettings.checkCertificateRevocationListOnReceive]
 * The value indicating whether to check for certificate revocation list on
 * receive.
 * @member {string}
 * [aS2.receiveAgreement.protocolSettings.validationSettings.encryptionAlgorithm]
 * The encryption algorithm. Possible values include: 'NotSpecified', 'None',
 * 'DES3', 'RC2', 'AES128', 'AES192', 'AES256'
 * @member {string}
 * [aS2.receiveAgreement.protocolSettings.validationSettings.signingAlgorithm]
 * The signing algorithm. Possible values include: 'NotSpecified', 'Default',
 * 'SHA1', 'SHA2256', 'SHA2384', 'SHA2512'
 * @member {object} [aS2.receiveAgreement.protocolSettings.envelopeSettings]
 * The envelope settings.
 * @member {string}
 * [aS2.receiveAgreement.protocolSettings.envelopeSettings.messageContentType]
 * The message content type.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.envelopeSettings.transmitFileNameInMimeHeader]
 * The value indicating whether to transmit file name in mime header.
 * @member {string}
 * [aS2.receiveAgreement.protocolSettings.envelopeSettings.fileNameTemplate]
 * The template for file name.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.envelopeSettings.suspendMessageOnFileNameGenerationError]
 * The value indicating whether to suspend message on file name generation
 * error.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.envelopeSettings.autogenerateFileName]
 * The value indicating whether to auto generate file name.
 * @member {object} [aS2.receiveAgreement.protocolSettings.errorSettings] The
 * error settings.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.errorSettings.suspendDuplicateMessage]
 * The value indicating whether to suspend duplicate message.
 * @member {boolean}
 * [aS2.receiveAgreement.protocolSettings.errorSettings.resendIfMdnNotReceived]
 * The value indicating whether to resend message If MDN is not received.
 * @member {object} [aS2.sendAgreement] The AS2 one-way send agreement.
 * @member {object} [aS2.sendAgreement.senderBusinessIdentity] The sender
 * business identity
 * @member {string} [aS2.sendAgreement.senderBusinessIdentity.qualifier] The
 * business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [aS2.sendAgreement.senderBusinessIdentity.value] The user
 * defined business identity value.
 * @member {object} [aS2.sendAgreement.receiverBusinessIdentity] The receiver
 * business identity
 * @member {string} [aS2.sendAgreement.receiverBusinessIdentity.qualifier] The
 * business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [aS2.sendAgreement.receiverBusinessIdentity.value] The user
 * defined business identity value.
 * @member {object} [aS2.sendAgreement.protocolSettings] The AS2 protocol
 * settings.
 * @member {object}
 * [aS2.sendAgreement.protocolSettings.messageConnectionSettings] The message
 * connection settings.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.messageConnectionSettings.ignoreCertificateNameMismatch]
 * The value indicating whether to ignore mismatch in certificate name.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.messageConnectionSettings.supportHttpStatusCodeContinue]
 * The value indicating whether to support HTTP status code 'CONTINUE'.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.messageConnectionSettings.keepHttpConnectionAlive]
 * The value indicating whether to keep the connection alive.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.messageConnectionSettings.unfoldHttpHeaders]
 * The value indicating whether to unfold the HTTP headers.
 * @member {object}
 * [aS2.sendAgreement.protocolSettings.acknowledgementConnectionSettings] The
 * acknowledgement connection settings.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.acknowledgementConnectionSettings.ignoreCertificateNameMismatch]
 * The value indicating whether to ignore mismatch in certificate name.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.acknowledgementConnectionSettings.supportHttpStatusCodeContinue]
 * The value indicating whether to support HTTP status code 'CONTINUE'.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.acknowledgementConnectionSettings.keepHttpConnectionAlive]
 * The value indicating whether to keep the connection alive.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.acknowledgementConnectionSettings.unfoldHttpHeaders]
 * The value indicating whether to unfold the HTTP headers.
 * @member {object} [aS2.sendAgreement.protocolSettings.mdnSettings] The MDN
 * settings.
 * @member {boolean} [aS2.sendAgreement.protocolSettings.mdnSettings.needMdn]
 * The value indicating whether to send or request a MDN.
 * @member {boolean} [aS2.sendAgreement.protocolSettings.mdnSettings.signMdn]
 * The value indicating whether the MDN needs to be signed or not.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.mdnSettings.sendMdnAsynchronously] The
 * value indicating whether to send the asynchronous MDN.
 * @member {string}
 * [aS2.sendAgreement.protocolSettings.mdnSettings.receiptDeliveryUrl] The
 * receipt delivery URL.
 * @member {string}
 * [aS2.sendAgreement.protocolSettings.mdnSettings.dispositionNotificationTo]
 * The disposition notification to header value.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.mdnSettings.signOutboundMdnIfOptional]
 * The value indicating whether to sign the outbound MDN if optional.
 * @member {string} [aS2.sendAgreement.protocolSettings.mdnSettings.mdnText]
 * The MDN text.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.mdnSettings.sendInboundMdnToMessageBox]
 * The value indicating whether to send inbound MDN to message box.
 * @member {string}
 * [aS2.sendAgreement.protocolSettings.mdnSettings.micHashingAlgorithm] The
 * signing or hashing algorithm. Possible values include: 'NotSpecified',
 * 'None', 'MD5', 'SHA1', 'SHA2256', 'SHA2384', 'SHA2512'
 * @member {object} [aS2.sendAgreement.protocolSettings.securitySettings] The
 * security settings.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.securitySettings.overrideGroupSigningCertificate]
 * The value indicating whether to send or request a MDN.
 * @member {string}
 * [aS2.sendAgreement.protocolSettings.securitySettings.signingCertificateName]
 * The name of the signing certificate.
 * @member {string}
 * [aS2.sendAgreement.protocolSettings.securitySettings.encryptionCertificateName]
 * The name of the encryption certificate.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.securitySettings.enableNrrForInboundEncodedMessages]
 * The value indicating whether to enable NRR for inbound encoded messages.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.securitySettings.enableNrrForInboundDecodedMessages]
 * The value indicating whether to enable NRR for inbound decoded messages.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.securitySettings.enableNrrForOutboundMdn]
 * The value indicating whether to enable NRR for outbound MDN.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.securitySettings.enableNrrForOutboundEncodedMessages]
 * The value indicating whether to enable NRR for outbound encoded messages.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.securitySettings.enableNrrForOutboundDecodedMessages]
 * The value indicating whether to enable NRR for outbound decoded messages.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.securitySettings.enableNrrForInboundMdn]
 * The value indicating whether to enable NRR for inbound MDN.
 * @member {string}
 * [aS2.sendAgreement.protocolSettings.securitySettings.sha2AlgorithmFormat]
 * The Sha2 algorithm format. Valid values are Sha2, ShaHashSize,
 * ShaHyphenHashSize, Sha2UnderscoreHashSize.
 * @member {object} [aS2.sendAgreement.protocolSettings.validationSettings] The
 * validation settings.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.validationSettings.overrideMessageProperties]
 * The value indicating whether to override incoming message properties with
 * those in agreement.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.validationSettings.encryptMessage] The
 * value indicating whether the message has to be encrypted.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.validationSettings.signMessage] The
 * value indicating whether the message has to be signed.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.validationSettings.compressMessage] The
 * value indicating whether the message has to be compressed.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.validationSettings.checkDuplicateMessage]
 * The value indicating whether to check for duplicate message.
 * @member {number}
 * [aS2.sendAgreement.protocolSettings.validationSettings.interchangeDuplicatesValidityDays]
 * The number of days to look back for duplicate interchange.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.validationSettings.checkCertificateRevocationListOnSend]
 * The value indicating whether to check for certificate revocation list on
 * send.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.validationSettings.checkCertificateRevocationListOnReceive]
 * The value indicating whether to check for certificate revocation list on
 * receive.
 * @member {string}
 * [aS2.sendAgreement.protocolSettings.validationSettings.encryptionAlgorithm]
 * The encryption algorithm. Possible values include: 'NotSpecified', 'None',
 * 'DES3', 'RC2', 'AES128', 'AES192', 'AES256'
 * @member {string}
 * [aS2.sendAgreement.protocolSettings.validationSettings.signingAlgorithm] The
 * signing algorithm. Possible values include: 'NotSpecified', 'Default',
 * 'SHA1', 'SHA2256', 'SHA2384', 'SHA2512'
 * @member {object} [aS2.sendAgreement.protocolSettings.envelopeSettings] The
 * envelope settings.
 * @member {string}
 * [aS2.sendAgreement.protocolSettings.envelopeSettings.messageContentType] The
 * message content type.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.envelopeSettings.transmitFileNameInMimeHeader]
 * The value indicating whether to transmit file name in mime header.
 * @member {string}
 * [aS2.sendAgreement.protocolSettings.envelopeSettings.fileNameTemplate] The
 * template for file name.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.envelopeSettings.suspendMessageOnFileNameGenerationError]
 * The value indicating whether to suspend message on file name generation
 * error.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.envelopeSettings.autogenerateFileName]
 * The value indicating whether to auto generate file name.
 * @member {object} [aS2.sendAgreement.protocolSettings.errorSettings] The
 * error settings.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.errorSettings.suspendDuplicateMessage]
 * The value indicating whether to suspend duplicate message.
 * @member {boolean}
 * [aS2.sendAgreement.protocolSettings.errorSettings.resendIfMdnNotReceived]
 * The value indicating whether to resend message If MDN is not received.
 * @member {object} [x12] The X12 agreement content.
 * @member {object} [x12.receiveAgreement] The X12 one-way receive agreement.
 * @member {object} [x12.receiveAgreement.senderBusinessIdentity] The sender
 * business identity
 * @member {string} [x12.receiveAgreement.senderBusinessIdentity.qualifier] The
 * business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [x12.receiveAgreement.senderBusinessIdentity.value] The
 * user defined business identity value.
 * @member {object} [x12.receiveAgreement.receiverBusinessIdentity] The
 * receiver business identity
 * @member {string} [x12.receiveAgreement.receiverBusinessIdentity.qualifier]
 * The business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [x12.receiveAgreement.receiverBusinessIdentity.value] The
 * user defined business identity value.
 * @member {object} [x12.receiveAgreement.protocolSettings] The X12 protocol
 * settings.
 * @member {object} [x12.receiveAgreement.protocolSettings.validationSettings]
 * The X12 validation settings.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.validationSettings.validateCharacterSet]
 * The value indicating whether to validate character set in the message.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.validationSettings.checkDuplicateInterchangeControlNumber]
 * The value indicating whether to check for duplicate interchange control
 * number.
 * @member {number}
 * [x12.receiveAgreement.protocolSettings.validationSettings.interchangeControlNumberValidityDays]
 * The validity period of interchange control number.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.validationSettings.checkDuplicateGroupControlNumber]
 * The value indicating whether to check for duplicate group control number.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.validationSettings.checkDuplicateTransactionSetControlNumber]
 * The value indicating whether to check for duplicate transaction set control
 * number.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.validationSettings.validateEdiTypes]
 * The value indicating whether to Whether to validate EDI types.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.validationSettings.validateXsdTypes]
 * The value indicating whether to Whether to validate XSD types.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.validationSettings.allowLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to allow leading and trailing spaces and
 * zeroes.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.validationSettings.trimLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to trim leading and trailing spaces and zeroes.
 * @member {string}
 * [x12.receiveAgreement.protocolSettings.validationSettings.trailingSeparatorPolicy]
 * The trailing separator policy. Possible values include: 'NotSpecified',
 * 'NotAllowed', 'Optional', 'Mandatory'
 * @member {object} [x12.receiveAgreement.protocolSettings.framingSettings] The
 * X12 framing settings.
 * @member {number}
 * [x12.receiveAgreement.protocolSettings.framingSettings.dataElementSeparator]
 * The data element separator.
 * @member {number}
 * [x12.receiveAgreement.protocolSettings.framingSettings.componentSeparator]
 * The component separator.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.framingSettings.replaceSeparatorsInPayload]
 * The value indicating whether to replace separators in payload.
 * @member {number}
 * [x12.receiveAgreement.protocolSettings.framingSettings.replaceCharacter] The
 * replacement character.
 * @member {number}
 * [x12.receiveAgreement.protocolSettings.framingSettings.segmentTerminator]
 * The segment terminator.
 * @member {string}
 * [x12.receiveAgreement.protocolSettings.framingSettings.characterSet] The X12
 * character set. Possible values include: 'NotSpecified', 'Basic', 'Extended',
 * 'UTF8'
 * @member {string}
 * [x12.receiveAgreement.protocolSettings.framingSettings.segmentTerminatorSuffix]
 * The segment terminator suffix. Possible values include: 'NotSpecified',
 * 'None', 'CR', 'LF', 'CRLF'
 * @member {object} [x12.receiveAgreement.protocolSettings.envelopeSettings]
 * The X12 envelope settings.
 * @member {number}
 * [x12.receiveAgreement.protocolSettings.envelopeSettings.controlStandardsId]
 * The controls standards id.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.envelopeSettings.useControlStandardsIdAsRepetitionCharacter]
 * The value indicating whether to use control standards id as repetition
 * character.
 * @member {string}
 * [x12.receiveAgreement.protocolSettings.envelopeSettings.senderApplicationId]
 * The sender application id.
 * @member {string}
 * [x12.receiveAgreement.protocolSettings.envelopeSettings.receiverApplicationId]
 * The receiver application id.
 * @member {string}
 * [x12.receiveAgreement.protocolSettings.envelopeSettings.controlVersionNumber]
 * The control version number.
 * @member {number}
 * [x12.receiveAgreement.protocolSettings.envelopeSettings.interchangeControlNumberLowerBound]
 * The interchange  control number lower bound.
 * @member {number}
 * [x12.receiveAgreement.protocolSettings.envelopeSettings.interchangeControlNumberUpperBound]
 * The interchange  control number upper bound.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.envelopeSettings.rolloverInterchangeControlNumber]
 * The value indicating whether to rollover interchange control number.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.envelopeSettings.enableDefaultGroupHeaders]
 * The value indicating whether to enable default group headers.
 * @member {string}
 * [x12.receiveAgreement.protocolSettings.envelopeSettings.functionalGroupId]
 * The functional group id.
 * @member {number}
 * [x12.receiveAgreement.protocolSettings.envelopeSettings.groupControlNumberLowerBound]
 * The group control number lower bound.
 * @member {number}
 * [x12.receiveAgreement.protocolSettings.envelopeSettings.groupControlNumberUpperBound]
 * The group control number upper bound.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.envelopeSettings.rolloverGroupControlNumber]
 * The value indicating whether to rollover group control number.
 * @member {string}
 * [x12.receiveAgreement.protocolSettings.envelopeSettings.groupHeaderAgencyCode]
 * The group header agency code.
 * @member {string}
 * [x12.receiveAgreement.protocolSettings.envelopeSettings.groupHeaderVersion]
 * The group header version.
 * @member {number}
 * [x12.receiveAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberLowerBound]
 * The transaction set control number lower bound.
 * @member {number}
 * [x12.receiveAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberUpperBound]
 * The transaction set control number upper bound.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.envelopeSettings.rolloverTransactionSetControlNumber]
 * The value indicating whether to rollover transaction set control number.
 * @member {string}
 * [x12.receiveAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberPrefix]
 * The transaction set control number prefix.
 * @member {string}
 * [x12.receiveAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberSuffix]
 * The transaction set control number suffix.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.envelopeSettings.overwriteExistingTransactionSetControlNumber]
 * The value indicating whether to overwrite existing transaction set control
 * number.
 * @member {string}
 * [x12.receiveAgreement.protocolSettings.envelopeSettings.groupHeaderDateFormat]
 * The group header date format. Possible values include: 'NotSpecified',
 * 'CCYYMMDD', 'YYMMDD'
 * @member {string}
 * [x12.receiveAgreement.protocolSettings.envelopeSettings.groupHeaderTimeFormat]
 * The group header time format. Possible values include: 'NotSpecified',
 * 'HHMM', 'HHMMSS', 'HHMMSSdd', 'HHMMSSd'
 * @member {string}
 * [x12.receiveAgreement.protocolSettings.envelopeSettings.usageIndicator] The
 * usage indicator. Possible values include: 'NotSpecified', 'Test',
 * 'Information', 'Production'
 * @member {object}
 * [x12.receiveAgreement.protocolSettings.acknowledgementSettings] The X12
 * acknowledgment settings.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.acknowledgementSettings.needTechnicalAcknowledgement]
 * The value indicating whether technical acknowledgement is needed.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.acknowledgementSettings.batchTechnicalAcknowledgements]
 * The value indicating whether to batch the technical acknowledgements.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.acknowledgementSettings.needFunctionalAcknowledgement]
 * The value indicating whether functional acknowledgement is needed.
 * @member {string}
 * [x12.receiveAgreement.protocolSettings.acknowledgementSettings.functionalAcknowledgementVersion]
 * The functional acknowledgement version.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.acknowledgementSettings.batchFunctionalAcknowledgements]
 * The value indicating whether to batch functional acknowledgements.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.acknowledgementSettings.needImplementationAcknowledgement]
 * The value indicating whether implementation acknowledgement is needed.
 * @member {string}
 * [x12.receiveAgreement.protocolSettings.acknowledgementSettings.implementationAcknowledgementVersion]
 * The implementation acknowledgement version.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.acknowledgementSettings.batchImplementationAcknowledgements]
 * The value indicating whether to batch implementation acknowledgements.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.acknowledgementSettings.needLoopForValidMessages]
 * The value indicating whether a loop is needed for valid messages.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.acknowledgementSettings.sendSynchronousAcknowledgement]
 * The value indicating whether to send synchronous acknowledgement.
 * @member {string}
 * [x12.receiveAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberPrefix]
 * The acknowledgement control number prefix.
 * @member {string}
 * [x12.receiveAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberSuffix]
 * The acknowledgement control number suffix.
 * @member {number}
 * [x12.receiveAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberLowerBound]
 * The acknowledgement control number lower bound.
 * @member {number}
 * [x12.receiveAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberUpperBound]
 * The acknowledgement control number upper bound.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.acknowledgementSettings.rolloverAcknowledgementControlNumber]
 * The value indicating whether to rollover acknowledgement control number.
 * @member {object} [x12.receiveAgreement.protocolSettings.messageFilter] The
 * X12 message filter.
 * @member {string}
 * [x12.receiveAgreement.protocolSettings.messageFilter.messageFilterType] The
 * message filter type. Possible values include: 'NotSpecified', 'Include',
 * 'Exclude'
 * @member {object} [x12.receiveAgreement.protocolSettings.securitySettings]
 * The X12 security settings.
 * @member {string}
 * [x12.receiveAgreement.protocolSettings.securitySettings.authorizationQualifier]
 * The authorization qualifier.
 * @member {string}
 * [x12.receiveAgreement.protocolSettings.securitySettings.authorizationValue]
 * The authorization value.
 * @member {string}
 * [x12.receiveAgreement.protocolSettings.securitySettings.securityQualifier]
 * The security qualifier.
 * @member {string}
 * [x12.receiveAgreement.protocolSettings.securitySettings.passwordValue] The
 * password value.
 * @member {object} [x12.receiveAgreement.protocolSettings.processingSettings]
 * The X12 processing settings.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.processingSettings.maskSecurityInfo]
 * The value indicating whether to mask security information.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.processingSettings.convertImpliedDecimal]
 * The value indicating whether to convert numerical type to implied decimal.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.processingSettings.preserveInterchange]
 * The value indicating whether to preserve interchange.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.processingSettings.suspendInterchangeOnError]
 * The value indicating whether to suspend interchange on error.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.processingSettings.createEmptyXmlTagsForTrailingSeparators]
 * The value indicating whether to create empty xml tags for trailing
 * separators.
 * @member {boolean}
 * [x12.receiveAgreement.protocolSettings.processingSettings.useDotAsDecimalSeparator]
 * The value indicating whether to use dot as decimal separator.
 * @member {array} [x12.receiveAgreement.protocolSettings.envelopeOverrides]
 * The X12 envelope override settings.
 * @member {array} [x12.receiveAgreement.protocolSettings.validationOverrides]
 * The X12 validation override settings.
 * @member {array} [x12.receiveAgreement.protocolSettings.messageFilterList]
 * The X12 message filter list.
 * @member {array} [x12.receiveAgreement.protocolSettings.schemaReferences] The
 * X12 schema references.
 * @member {array}
 * [x12.receiveAgreement.protocolSettings.x12DelimiterOverrides] The X12
 * delimiter override settings.
 * @member {object} [x12.sendAgreement] The X12 one-way send agreement.
 * @member {object} [x12.sendAgreement.senderBusinessIdentity] The sender
 * business identity
 * @member {string} [x12.sendAgreement.senderBusinessIdentity.qualifier] The
 * business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [x12.sendAgreement.senderBusinessIdentity.value] The user
 * defined business identity value.
 * @member {object} [x12.sendAgreement.receiverBusinessIdentity] The receiver
 * business identity
 * @member {string} [x12.sendAgreement.receiverBusinessIdentity.qualifier] The
 * business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [x12.sendAgreement.receiverBusinessIdentity.value] The user
 * defined business identity value.
 * @member {object} [x12.sendAgreement.protocolSettings] The X12 protocol
 * settings.
 * @member {object} [x12.sendAgreement.protocolSettings.validationSettings] The
 * X12 validation settings.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.validationSettings.validateCharacterSet]
 * The value indicating whether to validate character set in the message.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.validationSettings.checkDuplicateInterchangeControlNumber]
 * The value indicating whether to check for duplicate interchange control
 * number.
 * @member {number}
 * [x12.sendAgreement.protocolSettings.validationSettings.interchangeControlNumberValidityDays]
 * The validity period of interchange control number.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.validationSettings.checkDuplicateGroupControlNumber]
 * The value indicating whether to check for duplicate group control number.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.validationSettings.checkDuplicateTransactionSetControlNumber]
 * The value indicating whether to check for duplicate transaction set control
 * number.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.validationSettings.validateEdiTypes] The
 * value indicating whether to Whether to validate EDI types.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.validationSettings.validateXsdTypes] The
 * value indicating whether to Whether to validate XSD types.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.validationSettings.allowLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to allow leading and trailing spaces and
 * zeroes.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.validationSettings.trimLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to trim leading and trailing spaces and zeroes.
 * @member {string}
 * [x12.sendAgreement.protocolSettings.validationSettings.trailingSeparatorPolicy]
 * The trailing separator policy. Possible values include: 'NotSpecified',
 * 'NotAllowed', 'Optional', 'Mandatory'
 * @member {object} [x12.sendAgreement.protocolSettings.framingSettings] The
 * X12 framing settings.
 * @member {number}
 * [x12.sendAgreement.protocolSettings.framingSettings.dataElementSeparator]
 * The data element separator.
 * @member {number}
 * [x12.sendAgreement.protocolSettings.framingSettings.componentSeparator] The
 * component separator.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.framingSettings.replaceSeparatorsInPayload]
 * The value indicating whether to replace separators in payload.
 * @member {number}
 * [x12.sendAgreement.protocolSettings.framingSettings.replaceCharacter] The
 * replacement character.
 * @member {number}
 * [x12.sendAgreement.protocolSettings.framingSettings.segmentTerminator] The
 * segment terminator.
 * @member {string}
 * [x12.sendAgreement.protocolSettings.framingSettings.characterSet] The X12
 * character set. Possible values include: 'NotSpecified', 'Basic', 'Extended',
 * 'UTF8'
 * @member {string}
 * [x12.sendAgreement.protocolSettings.framingSettings.segmentTerminatorSuffix]
 * The segment terminator suffix. Possible values include: 'NotSpecified',
 * 'None', 'CR', 'LF', 'CRLF'
 * @member {object} [x12.sendAgreement.protocolSettings.envelopeSettings] The
 * X12 envelope settings.
 * @member {number}
 * [x12.sendAgreement.protocolSettings.envelopeSettings.controlStandardsId] The
 * controls standards id.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.envelopeSettings.useControlStandardsIdAsRepetitionCharacter]
 * The value indicating whether to use control standards id as repetition
 * character.
 * @member {string}
 * [x12.sendAgreement.protocolSettings.envelopeSettings.senderApplicationId]
 * The sender application id.
 * @member {string}
 * [x12.sendAgreement.protocolSettings.envelopeSettings.receiverApplicationId]
 * The receiver application id.
 * @member {string}
 * [x12.sendAgreement.protocolSettings.envelopeSettings.controlVersionNumber]
 * The control version number.
 * @member {number}
 * [x12.sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberLowerBound]
 * The interchange  control number lower bound.
 * @member {number}
 * [x12.sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberUpperBound]
 * The interchange  control number upper bound.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.envelopeSettings.rolloverInterchangeControlNumber]
 * The value indicating whether to rollover interchange control number.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.envelopeSettings.enableDefaultGroupHeaders]
 * The value indicating whether to enable default group headers.
 * @member {string}
 * [x12.sendAgreement.protocolSettings.envelopeSettings.functionalGroupId] The
 * functional group id.
 * @member {number}
 * [x12.sendAgreement.protocolSettings.envelopeSettings.groupControlNumberLowerBound]
 * The group control number lower bound.
 * @member {number}
 * [x12.sendAgreement.protocolSettings.envelopeSettings.groupControlNumberUpperBound]
 * The group control number upper bound.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.envelopeSettings.rolloverGroupControlNumber]
 * The value indicating whether to rollover group control number.
 * @member {string}
 * [x12.sendAgreement.protocolSettings.envelopeSettings.groupHeaderAgencyCode]
 * The group header agency code.
 * @member {string}
 * [x12.sendAgreement.protocolSettings.envelopeSettings.groupHeaderVersion] The
 * group header version.
 * @member {number}
 * [x12.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberLowerBound]
 * The transaction set control number lower bound.
 * @member {number}
 * [x12.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberUpperBound]
 * The transaction set control number upper bound.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.envelopeSettings.rolloverTransactionSetControlNumber]
 * The value indicating whether to rollover transaction set control number.
 * @member {string}
 * [x12.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberPrefix]
 * The transaction set control number prefix.
 * @member {string}
 * [x12.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberSuffix]
 * The transaction set control number suffix.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.envelopeSettings.overwriteExistingTransactionSetControlNumber]
 * The value indicating whether to overwrite existing transaction set control
 * number.
 * @member {string}
 * [x12.sendAgreement.protocolSettings.envelopeSettings.groupHeaderDateFormat]
 * The group header date format. Possible values include: 'NotSpecified',
 * 'CCYYMMDD', 'YYMMDD'
 * @member {string}
 * [x12.sendAgreement.protocolSettings.envelopeSettings.groupHeaderTimeFormat]
 * The group header time format. Possible values include: 'NotSpecified',
 * 'HHMM', 'HHMMSS', 'HHMMSSdd', 'HHMMSSd'
 * @member {string}
 * [x12.sendAgreement.protocolSettings.envelopeSettings.usageIndicator] The
 * usage indicator. Possible values include: 'NotSpecified', 'Test',
 * 'Information', 'Production'
 * @member {object}
 * [x12.sendAgreement.protocolSettings.acknowledgementSettings] The X12
 * acknowledgment settings.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.acknowledgementSettings.needTechnicalAcknowledgement]
 * The value indicating whether technical acknowledgement is needed.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.acknowledgementSettings.batchTechnicalAcknowledgements]
 * The value indicating whether to batch the technical acknowledgements.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.acknowledgementSettings.needFunctionalAcknowledgement]
 * The value indicating whether functional acknowledgement is needed.
 * @member {string}
 * [x12.sendAgreement.protocolSettings.acknowledgementSettings.functionalAcknowledgementVersion]
 * The functional acknowledgement version.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.acknowledgementSettings.batchFunctionalAcknowledgements]
 * The value indicating whether to batch functional acknowledgements.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.acknowledgementSettings.needImplementationAcknowledgement]
 * The value indicating whether implementation acknowledgement is needed.
 * @member {string}
 * [x12.sendAgreement.protocolSettings.acknowledgementSettings.implementationAcknowledgementVersion]
 * The implementation acknowledgement version.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.acknowledgementSettings.batchImplementationAcknowledgements]
 * The value indicating whether to batch implementation acknowledgements.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.acknowledgementSettings.needLoopForValidMessages]
 * The value indicating whether a loop is needed for valid messages.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.acknowledgementSettings.sendSynchronousAcknowledgement]
 * The value indicating whether to send synchronous acknowledgement.
 * @member {string}
 * [x12.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberPrefix]
 * The acknowledgement control number prefix.
 * @member {string}
 * [x12.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberSuffix]
 * The acknowledgement control number suffix.
 * @member {number}
 * [x12.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberLowerBound]
 * The acknowledgement control number lower bound.
 * @member {number}
 * [x12.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberUpperBound]
 * The acknowledgement control number upper bound.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.acknowledgementSettings.rolloverAcknowledgementControlNumber]
 * The value indicating whether to rollover acknowledgement control number.
 * @member {object} [x12.sendAgreement.protocolSettings.messageFilter] The X12
 * message filter.
 * @member {string}
 * [x12.sendAgreement.protocolSettings.messageFilter.messageFilterType] The
 * message filter type. Possible values include: 'NotSpecified', 'Include',
 * 'Exclude'
 * @member {object} [x12.sendAgreement.protocolSettings.securitySettings] The
 * X12 security settings.
 * @member {string}
 * [x12.sendAgreement.protocolSettings.securitySettings.authorizationQualifier]
 * The authorization qualifier.
 * @member {string}
 * [x12.sendAgreement.protocolSettings.securitySettings.authorizationValue] The
 * authorization value.
 * @member {string}
 * [x12.sendAgreement.protocolSettings.securitySettings.securityQualifier] The
 * security qualifier.
 * @member {string}
 * [x12.sendAgreement.protocolSettings.securitySettings.passwordValue] The
 * password value.
 * @member {object} [x12.sendAgreement.protocolSettings.processingSettings] The
 * X12 processing settings.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.processingSettings.maskSecurityInfo] The
 * value indicating whether to mask security information.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.processingSettings.convertImpliedDecimal]
 * The value indicating whether to convert numerical type to implied decimal.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.processingSettings.preserveInterchange]
 * The value indicating whether to preserve interchange.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.processingSettings.suspendInterchangeOnError]
 * The value indicating whether to suspend interchange on error.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.processingSettings.createEmptyXmlTagsForTrailingSeparators]
 * The value indicating whether to create empty xml tags for trailing
 * separators.
 * @member {boolean}
 * [x12.sendAgreement.protocolSettings.processingSettings.useDotAsDecimalSeparator]
 * The value indicating whether to use dot as decimal separator.
 * @member {array} [x12.sendAgreement.protocolSettings.envelopeOverrides] The
 * X12 envelope override settings.
 * @member {array} [x12.sendAgreement.protocolSettings.validationOverrides] The
 * X12 validation override settings.
 * @member {array} [x12.sendAgreement.protocolSettings.messageFilterList] The
 * X12 message filter list.
 * @member {array} [x12.sendAgreement.protocolSettings.schemaReferences] The
 * X12 schema references.
 * @member {array} [x12.sendAgreement.protocolSettings.x12DelimiterOverrides]
 * The X12 delimiter override settings.
 * @member {object} [edifact] The EDIFACT agreement content.
 * @member {object} [edifact.receiveAgreement] The EDIFACT one-way receive
 * agreement.
 * @member {object} [edifact.receiveAgreement.senderBusinessIdentity] The
 * sender business identity
 * @member {string} [edifact.receiveAgreement.senderBusinessIdentity.qualifier]
 * The business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [edifact.receiveAgreement.senderBusinessIdentity.value] The
 * user defined business identity value.
 * @member {object} [edifact.receiveAgreement.receiverBusinessIdentity] The
 * receiver business identity
 * @member {string}
 * [edifact.receiveAgreement.receiverBusinessIdentity.qualifier] The business
 * identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [edifact.receiveAgreement.receiverBusinessIdentity.value]
 * The user defined business identity value.
 * @member {object} [edifact.receiveAgreement.protocolSettings] The EDIFACT
 * protocol settings.
 * @member {object}
 * [edifact.receiveAgreement.protocolSettings.validationSettings] The EDIFACT
 * validation settings.
 * @member {boolean}
 * [edifact.receiveAgreement.protocolSettings.validationSettings.validateCharacterSet]
 * The value indicating whether to validate character set in the message.
 * @member {boolean}
 * [edifact.receiveAgreement.protocolSettings.validationSettings.checkDuplicateInterchangeControlNumber]
 * The value indicating whether to check for duplicate interchange control
 * number.
 * @member {number}
 * [edifact.receiveAgreement.protocolSettings.validationSettings.interchangeControlNumberValidityDays]
 * The validity period of interchange control number.
 * @member {boolean}
 * [edifact.receiveAgreement.protocolSettings.validationSettings.checkDuplicateGroupControlNumber]
 * The value indicating whether to check for duplicate group control number.
 * @member {boolean}
 * [edifact.receiveAgreement.protocolSettings.validationSettings.checkDuplicateTransactionSetControlNumber]
 * The value indicating whether to check for duplicate transaction set control
 * number.
 * @member {boolean}
 * [edifact.receiveAgreement.protocolSettings.validationSettings.validateEdiTypes]
 * The value indicating whether to Whether to validate EDI types.
 * @member {boolean}
 * [edifact.receiveAgreement.protocolSettings.validationSettings.validateXsdTypes]
 * The value indicating whether to Whether to validate XSD types.
 * @member {boolean}
 * [edifact.receiveAgreement.protocolSettings.validationSettings.allowLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to allow leading and trailing spaces and
 * zeroes.
 * @member {boolean}
 * [edifact.receiveAgreement.protocolSettings.validationSettings.trimLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to trim leading and trailing spaces and zeroes.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.validationSettings.trailingSeparatorPolicy]
 * The trailing separator policy. Possible values include: 'NotSpecified',
 * 'NotAllowed', 'Optional', 'Mandatory'
 * @member {object} [edifact.receiveAgreement.protocolSettings.framingSettings]
 * The EDIFACT framing settings.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.framingSettings.serviceCodeListDirectoryVersion]
 * The service code list directory version.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.framingSettings.characterEncoding]
 * The character encoding.
 * @member {number}
 * [edifact.receiveAgreement.protocolSettings.framingSettings.protocolVersion]
 * The protocol version.
 * @member {number}
 * [edifact.receiveAgreement.protocolSettings.framingSettings.dataElementSeparator]
 * The data element separator.
 * @member {number}
 * [edifact.receiveAgreement.protocolSettings.framingSettings.componentSeparator]
 * The component separator.
 * @member {number}
 * [edifact.receiveAgreement.protocolSettings.framingSettings.segmentTerminator]
 * The segment terminator.
 * @member {number}
 * [edifact.receiveAgreement.protocolSettings.framingSettings.releaseIndicator]
 * The release indicator.
 * @member {number}
 * [edifact.receiveAgreement.protocolSettings.framingSettings.repetitionSeparator]
 * The repetition separator.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.framingSettings.characterSet] The
 * EDIFACT frame setting characterSet. Possible values include: 'NotSpecified',
 * 'UNOB', 'UNOA', 'UNOC', 'UNOD', 'UNOE', 'UNOF', 'UNOG', 'UNOH', 'UNOI',
 * 'UNOJ', 'UNOK', 'UNOX', 'UNOY', 'KECA'
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.framingSettings.decimalPointIndicator]
 * The EDIFACT frame setting decimal indicator. Possible values include:
 * 'NotSpecified', 'Comma', 'Decimal'
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.framingSettings.segmentTerminatorSuffix]
 * The EDIFACT frame setting segment terminator suffix. Possible values
 * include: 'NotSpecified', 'None', 'CR', 'LF', 'CRLF'
 * @member {object}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings] The EDIFACT
 * envelope settings.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.groupAssociationAssignedCode]
 * The group association assigned code.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.communicationAgreementId]
 * The communication agreement id.
 * @member {boolean}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.applyDelimiterStringAdvice]
 * The value indicating whether to apply delimiter string advice.
 * @member {boolean}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.createGroupingSegments]
 * The value indicating whether to create grouping segments.
 * @member {boolean}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.enableDefaultGroupHeaders]
 * The value indicating whether to enable default group headers.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.recipientReferencePasswordValue]
 * The recipient reference password value.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.recipientReferencePasswordQualifier]
 * The recipient reference password qualifier.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.applicationReferenceId]
 * The application reference id.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.processingPriorityCode]
 * The processing priority code.
 * @member {number}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.interchangeControlNumberLowerBound]
 * The interchange control number lower bound.
 * @member {number}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.interchangeControlNumberUpperBound]
 * The interchange control number upper bound.
 * @member {boolean}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.rolloverInterchangeControlNumber]
 * The value indicating whether to rollover interchange control number.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.interchangeControlNumberPrefix]
 * The interchange control number prefix.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.interchangeControlNumberSuffix]
 * The interchange control number suffix.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.senderReverseRoutingAddress]
 * The sender reverse routing address.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.receiverReverseRoutingAddress]
 * The receiver reverse routing address.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.functionalGroupId]
 * The functional group id.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.groupControllingAgencyCode]
 * The group controlling agency code.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.groupMessageVersion]
 * The group message version.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.groupMessageRelease]
 * The group message release.
 * @member {number}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.groupControlNumberLowerBound]
 * The group control number lower bound.
 * @member {number}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.groupControlNumberUpperBound]
 * The group control number upper bound.
 * @member {boolean}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.rolloverGroupControlNumber]
 * The value indicating whether to rollover group control number.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.groupControlNumberPrefix]
 * The group control number prefix.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.groupControlNumberSuffix]
 * The group control number suffix.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.groupApplicationReceiverQualifier]
 * The group application receiver qualifier.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.groupApplicationReceiverId]
 * The group application receiver id.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.groupApplicationSenderQualifier]
 * The group application sender qualifier.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.groupApplicationSenderId]
 * The group application sender id.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.groupApplicationPassword]
 * The group application password.
 * @member {boolean}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.overwriteExistingTransactionSetControlNumber]
 * The value indicating whether to overwrite existing transaction set control
 * number.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberPrefix]
 * The transaction set control number prefix.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberSuffix]
 * The transaction set control number suffix.
 * @member {number}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberLowerBound]
 * The transaction set control number lower bound.
 * @member {number}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberUpperBound]
 * The transaction set control number upper bound.
 * @member {boolean}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.rolloverTransactionSetControlNumber]
 * The value indicating whether to rollover transaction set control number.
 * @member {boolean}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.isTestInterchange]
 * The value indicating whether the message is a test interchange.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.senderInternalIdentification]
 * The sender internal identification.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.senderInternalSubIdentification]
 * The sender internal sub identification.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.receiverInternalIdentification]
 * The receiver internal identification.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.envelopeSettings.receiverInternalSubIdentification]
 * The receiver internal sub identification.
 * @member {object}
 * [edifact.receiveAgreement.protocolSettings.acknowledgementSettings] The
 * EDIFACT acknowledgement settings.
 * @member {boolean}
 * [edifact.receiveAgreement.protocolSettings.acknowledgementSettings.needTechnicalAcknowledgement]
 * The value indicating whether technical acknowledgement is needed.
 * @member {boolean}
 * [edifact.receiveAgreement.protocolSettings.acknowledgementSettings.batchTechnicalAcknowledgements]
 * The value indicating whether to batch the technical acknowledgements.
 * @member {boolean}
 * [edifact.receiveAgreement.protocolSettings.acknowledgementSettings.needFunctionalAcknowledgement]
 * The value indicating whether functional acknowledgement is needed.
 * @member {boolean}
 * [edifact.receiveAgreement.protocolSettings.acknowledgementSettings.batchFunctionalAcknowledgements]
 * The value indicating whether to batch functional acknowledgements.
 * @member {boolean}
 * [edifact.receiveAgreement.protocolSettings.acknowledgementSettings.needLoopForValidMessages]
 * The value indicating whether a loop is needed for valid messages.
 * @member {boolean}
 * [edifact.receiveAgreement.protocolSettings.acknowledgementSettings.sendSynchronousAcknowledgement]
 * The value indicating whether to send synchronous acknowledgement.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberPrefix]
 * The acknowledgement control number prefix.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberSuffix]
 * The acknowledgement control number suffix.
 * @member {number}
 * [edifact.receiveAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberLowerBound]
 * The acknowledgement control number lower bound.
 * @member {number}
 * [edifact.receiveAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberUpperBound]
 * The acknowledgement control number upper bound.
 * @member {boolean}
 * [edifact.receiveAgreement.protocolSettings.acknowledgementSettings.rolloverAcknowledgementControlNumber]
 * The value indicating whether to rollover acknowledgement control number.
 * @member {object} [edifact.receiveAgreement.protocolSettings.messageFilter]
 * The EDIFACT message filter.
 * @member {string}
 * [edifact.receiveAgreement.protocolSettings.messageFilter.messageFilterType]
 * The message filter type. Possible values include: 'NotSpecified', 'Include',
 * 'Exclude'
 * @member {object}
 * [edifact.receiveAgreement.protocolSettings.processingSettings] The EDIFACT
 * processing Settings.
 * @member {boolean}
 * [edifact.receiveAgreement.protocolSettings.processingSettings.maskSecurityInfo]
 * The value indicating whether to mask security information.
 * @member {boolean}
 * [edifact.receiveAgreement.protocolSettings.processingSettings.preserveInterchange]
 * The value indicating whether to preserve interchange.
 * @member {boolean}
 * [edifact.receiveAgreement.protocolSettings.processingSettings.suspendInterchangeOnError]
 * The value indicating whether to suspend interchange on error.
 * @member {boolean}
 * [edifact.receiveAgreement.protocolSettings.processingSettings.createEmptyXmlTagsForTrailingSeparators]
 * The value indicating whether to create empty xml tags for trailing
 * separators.
 * @member {boolean}
 * [edifact.receiveAgreement.protocolSettings.processingSettings.useDotAsDecimalSeparator]
 * The value indicating whether to use dot as decimal separator.
 * @member {array}
 * [edifact.receiveAgreement.protocolSettings.envelopeOverrides] The EDIFACT
 * envelope override settings.
 * @member {array}
 * [edifact.receiveAgreement.protocolSettings.messageFilterList] The EDIFACT
 * message filter list.
 * @member {array} [edifact.receiveAgreement.protocolSettings.schemaReferences]
 * The EDIFACT schema references.
 * @member {array}
 * [edifact.receiveAgreement.protocolSettings.validationOverrides] The EDIFACT
 * validation override settings.
 * @member {array}
 * [edifact.receiveAgreement.protocolSettings.edifactDelimiterOverrides] The
 * EDIFACT delimiter override settings.
 * @member {object} [edifact.sendAgreement] The EDIFACT one-way send agreement.
 * @member {object} [edifact.sendAgreement.senderBusinessIdentity] The sender
 * business identity
 * @member {string} [edifact.sendAgreement.senderBusinessIdentity.qualifier]
 * The business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [edifact.sendAgreement.senderBusinessIdentity.value] The
 * user defined business identity value.
 * @member {object} [edifact.sendAgreement.receiverBusinessIdentity] The
 * receiver business identity
 * @member {string} [edifact.sendAgreement.receiverBusinessIdentity.qualifier]
 * The business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [edifact.sendAgreement.receiverBusinessIdentity.value] The
 * user defined business identity value.
 * @member {object} [edifact.sendAgreement.protocolSettings] The EDIFACT
 * protocol settings.
 * @member {object} [edifact.sendAgreement.protocolSettings.validationSettings]
 * The EDIFACT validation settings.
 * @member {boolean}
 * [edifact.sendAgreement.protocolSettings.validationSettings.validateCharacterSet]
 * The value indicating whether to validate character set in the message.
 * @member {boolean}
 * [edifact.sendAgreement.protocolSettings.validationSettings.checkDuplicateInterchangeControlNumber]
 * The value indicating whether to check for duplicate interchange control
 * number.
 * @member {number}
 * [edifact.sendAgreement.protocolSettings.validationSettings.interchangeControlNumberValidityDays]
 * The validity period of interchange control number.
 * @member {boolean}
 * [edifact.sendAgreement.protocolSettings.validationSettings.checkDuplicateGroupControlNumber]
 * The value indicating whether to check for duplicate group control number.
 * @member {boolean}
 * [edifact.sendAgreement.protocolSettings.validationSettings.checkDuplicateTransactionSetControlNumber]
 * The value indicating whether to check for duplicate transaction set control
 * number.
 * @member {boolean}
 * [edifact.sendAgreement.protocolSettings.validationSettings.validateEdiTypes]
 * The value indicating whether to Whether to validate EDI types.
 * @member {boolean}
 * [edifact.sendAgreement.protocolSettings.validationSettings.validateXsdTypes]
 * The value indicating whether to Whether to validate XSD types.
 * @member {boolean}
 * [edifact.sendAgreement.protocolSettings.validationSettings.allowLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to allow leading and trailing spaces and
 * zeroes.
 * @member {boolean}
 * [edifact.sendAgreement.protocolSettings.validationSettings.trimLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to trim leading and trailing spaces and zeroes.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.validationSettings.trailingSeparatorPolicy]
 * The trailing separator policy. Possible values include: 'NotSpecified',
 * 'NotAllowed', 'Optional', 'Mandatory'
 * @member {object} [edifact.sendAgreement.protocolSettings.framingSettings]
 * The EDIFACT framing settings.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.framingSettings.serviceCodeListDirectoryVersion]
 * The service code list directory version.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.framingSettings.characterEncoding]
 * The character encoding.
 * @member {number}
 * [edifact.sendAgreement.protocolSettings.framingSettings.protocolVersion] The
 * protocol version.
 * @member {number}
 * [edifact.sendAgreement.protocolSettings.framingSettings.dataElementSeparator]
 * The data element separator.
 * @member {number}
 * [edifact.sendAgreement.protocolSettings.framingSettings.componentSeparator]
 * The component separator.
 * @member {number}
 * [edifact.sendAgreement.protocolSettings.framingSettings.segmentTerminator]
 * The segment terminator.
 * @member {number}
 * [edifact.sendAgreement.protocolSettings.framingSettings.releaseIndicator]
 * The release indicator.
 * @member {number}
 * [edifact.sendAgreement.protocolSettings.framingSettings.repetitionSeparator]
 * The repetition separator.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.framingSettings.characterSet] The
 * EDIFACT frame setting characterSet. Possible values include: 'NotSpecified',
 * 'UNOB', 'UNOA', 'UNOC', 'UNOD', 'UNOE', 'UNOF', 'UNOG', 'UNOH', 'UNOI',
 * 'UNOJ', 'UNOK', 'UNOX', 'UNOY', 'KECA'
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.framingSettings.decimalPointIndicator]
 * The EDIFACT frame setting decimal indicator. Possible values include:
 * 'NotSpecified', 'Comma', 'Decimal'
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.framingSettings.segmentTerminatorSuffix]
 * The EDIFACT frame setting segment terminator suffix. Possible values
 * include: 'NotSpecified', 'None', 'CR', 'LF', 'CRLF'
 * @member {object} [edifact.sendAgreement.protocolSettings.envelopeSettings]
 * The EDIFACT envelope settings.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.groupAssociationAssignedCode]
 * The group association assigned code.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.communicationAgreementId]
 * The communication agreement id.
 * @member {boolean}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.applyDelimiterStringAdvice]
 * The value indicating whether to apply delimiter string advice.
 * @member {boolean}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.createGroupingSegments]
 * The value indicating whether to create grouping segments.
 * @member {boolean}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.enableDefaultGroupHeaders]
 * The value indicating whether to enable default group headers.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.recipientReferencePasswordValue]
 * The recipient reference password value.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.recipientReferencePasswordQualifier]
 * The recipient reference password qualifier.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.applicationReferenceId]
 * The application reference id.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.processingPriorityCode]
 * The processing priority code.
 * @member {number}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberLowerBound]
 * The interchange control number lower bound.
 * @member {number}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberUpperBound]
 * The interchange control number upper bound.
 * @member {boolean}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.rolloverInterchangeControlNumber]
 * The value indicating whether to rollover interchange control number.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberPrefix]
 * The interchange control number prefix.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberSuffix]
 * The interchange control number suffix.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.senderReverseRoutingAddress]
 * The sender reverse routing address.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.receiverReverseRoutingAddress]
 * The receiver reverse routing address.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.functionalGroupId]
 * The functional group id.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.groupControllingAgencyCode]
 * The group controlling agency code.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.groupMessageVersion]
 * The group message version.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.groupMessageRelease]
 * The group message release.
 * @member {number}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.groupControlNumberLowerBound]
 * The group control number lower bound.
 * @member {number}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.groupControlNumberUpperBound]
 * The group control number upper bound.
 * @member {boolean}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.rolloverGroupControlNumber]
 * The value indicating whether to rollover group control number.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.groupControlNumberPrefix]
 * The group control number prefix.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.groupControlNumberSuffix]
 * The group control number suffix.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.groupApplicationReceiverQualifier]
 * The group application receiver qualifier.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.groupApplicationReceiverId]
 * The group application receiver id.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.groupApplicationSenderQualifier]
 * The group application sender qualifier.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.groupApplicationSenderId]
 * The group application sender id.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.groupApplicationPassword]
 * The group application password.
 * @member {boolean}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.overwriteExistingTransactionSetControlNumber]
 * The value indicating whether to overwrite existing transaction set control
 * number.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberPrefix]
 * The transaction set control number prefix.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberSuffix]
 * The transaction set control number suffix.
 * @member {number}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberLowerBound]
 * The transaction set control number lower bound.
 * @member {number}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberUpperBound]
 * The transaction set control number upper bound.
 * @member {boolean}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.rolloverTransactionSetControlNumber]
 * The value indicating whether to rollover transaction set control number.
 * @member {boolean}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.isTestInterchange]
 * The value indicating whether the message is a test interchange.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.senderInternalIdentification]
 * The sender internal identification.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.senderInternalSubIdentification]
 * The sender internal sub identification.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.receiverInternalIdentification]
 * The receiver internal identification.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.envelopeSettings.receiverInternalSubIdentification]
 * The receiver internal sub identification.
 * @member {object}
 * [edifact.sendAgreement.protocolSettings.acknowledgementSettings] The EDIFACT
 * acknowledgement settings.
 * @member {boolean}
 * [edifact.sendAgreement.protocolSettings.acknowledgementSettings.needTechnicalAcknowledgement]
 * The value indicating whether technical acknowledgement is needed.
 * @member {boolean}
 * [edifact.sendAgreement.protocolSettings.acknowledgementSettings.batchTechnicalAcknowledgements]
 * The value indicating whether to batch the technical acknowledgements.
 * @member {boolean}
 * [edifact.sendAgreement.protocolSettings.acknowledgementSettings.needFunctionalAcknowledgement]
 * The value indicating whether functional acknowledgement is needed.
 * @member {boolean}
 * [edifact.sendAgreement.protocolSettings.acknowledgementSettings.batchFunctionalAcknowledgements]
 * The value indicating whether to batch functional acknowledgements.
 * @member {boolean}
 * [edifact.sendAgreement.protocolSettings.acknowledgementSettings.needLoopForValidMessages]
 * The value indicating whether a loop is needed for valid messages.
 * @member {boolean}
 * [edifact.sendAgreement.protocolSettings.acknowledgementSettings.sendSynchronousAcknowledgement]
 * The value indicating whether to send synchronous acknowledgement.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberPrefix]
 * The acknowledgement control number prefix.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberSuffix]
 * The acknowledgement control number suffix.
 * @member {number}
 * [edifact.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberLowerBound]
 * The acknowledgement control number lower bound.
 * @member {number}
 * [edifact.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberUpperBound]
 * The acknowledgement control number upper bound.
 * @member {boolean}
 * [edifact.sendAgreement.protocolSettings.acknowledgementSettings.rolloverAcknowledgementControlNumber]
 * The value indicating whether to rollover acknowledgement control number.
 * @member {object} [edifact.sendAgreement.protocolSettings.messageFilter] The
 * EDIFACT message filter.
 * @member {string}
 * [edifact.sendAgreement.protocolSettings.messageFilter.messageFilterType] The
 * message filter type. Possible values include: 'NotSpecified', 'Include',
 * 'Exclude'
 * @member {object} [edifact.sendAgreement.protocolSettings.processingSettings]
 * The EDIFACT processing Settings.
 * @member {boolean}
 * [edifact.sendAgreement.protocolSettings.processingSettings.maskSecurityInfo]
 * The value indicating whether to mask security information.
 * @member {boolean}
 * [edifact.sendAgreement.protocolSettings.processingSettings.preserveInterchange]
 * The value indicating whether to preserve interchange.
 * @member {boolean}
 * [edifact.sendAgreement.protocolSettings.processingSettings.suspendInterchangeOnError]
 * The value indicating whether to suspend interchange on error.
 * @member {boolean}
 * [edifact.sendAgreement.protocolSettings.processingSettings.createEmptyXmlTagsForTrailingSeparators]
 * The value indicating whether to create empty xml tags for trailing
 * separators.
 * @member {boolean}
 * [edifact.sendAgreement.protocolSettings.processingSettings.useDotAsDecimalSeparator]
 * The value indicating whether to use dot as decimal separator.
 * @member {array} [edifact.sendAgreement.protocolSettings.envelopeOverrides]
 * The EDIFACT envelope override settings.
 * @member {array} [edifact.sendAgreement.protocolSettings.messageFilterList]
 * The EDIFACT message filter list.
 * @member {array} [edifact.sendAgreement.protocolSettings.schemaReferences]
 * The EDIFACT schema references.
 * @member {array} [edifact.sendAgreement.protocolSettings.validationOverrides]
 * The EDIFACT validation override settings.
 * @member {array}
 * [edifact.sendAgreement.protocolSettings.edifactDelimiterOverrides] The
 * EDIFACT delimiter override settings.
 */
export interface AgreementContent {
  aS2?: AS2AgreementContent;
  x12?: X12AgreementContent;
  edifact?: EdifactAgreementContent;
}

/**
 * @class
 * Initializes a new instance of the IntegrationAccountAgreement class.
 * @constructor
 * The integration account agreement.
 *
 * @member {date} [createdTime] The created time.
 * @member {date} [changedTime] The changed time.
 * @member {object} [metadata] The metadata.
 * @member {string} agreementType The agreement type. Possible values include:
 * 'NotSpecified', 'AS2', 'X12', 'Edifact'
 * @member {string} hostPartner The integration account partner that is set as
 * host partner for this agreement.
 * @member {string} guestPartner The integration account partner that is set as
 * guest partner for this agreement.
 * @member {object} hostIdentity The business identity of the host partner.
 * @member {string} [hostIdentity.qualifier] The business identity qualifier
 * e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [hostIdentity.value] The user defined business identity
 * value.
 * @member {object} guestIdentity The business identity of the guest partner.
 * @member {string} [guestIdentity.qualifier] The business identity qualifier
 * e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [guestIdentity.value] The user defined business identity
 * value.
 * @member {object} content The agreement content.
 * @member {object} [content.aS2] The AS2 agreement content.
 * @member {object} [content.aS2.receiveAgreement] The AS2 one-way receive
 * agreement.
 * @member {object} [content.aS2.receiveAgreement.senderBusinessIdentity] The
 * sender business identity
 * @member {string}
 * [content.aS2.receiveAgreement.senderBusinessIdentity.qualifier] The business
 * identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [content.aS2.receiveAgreement.senderBusinessIdentity.value]
 * The user defined business identity value.
 * @member {object} [content.aS2.receiveAgreement.receiverBusinessIdentity] The
 * receiver business identity
 * @member {string}
 * [content.aS2.receiveAgreement.receiverBusinessIdentity.qualifier] The
 * business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string}
 * [content.aS2.receiveAgreement.receiverBusinessIdentity.value] The user
 * defined business identity value.
 * @member {object} [content.aS2.receiveAgreement.protocolSettings] The AS2
 * protocol settings.
 * @member {object}
 * [content.aS2.receiveAgreement.protocolSettings.messageConnectionSettings]
 * The message connection settings.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.messageConnectionSettings.ignoreCertificateNameMismatch]
 * The value indicating whether to ignore mismatch in certificate name.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.messageConnectionSettings.supportHttpStatusCodeContinue]
 * The value indicating whether to support HTTP status code 'CONTINUE'.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.messageConnectionSettings.keepHttpConnectionAlive]
 * The value indicating whether to keep the connection alive.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.messageConnectionSettings.unfoldHttpHeaders]
 * The value indicating whether to unfold the HTTP headers.
 * @member {object}
 * [content.aS2.receiveAgreement.protocolSettings.acknowledgementConnectionSettings]
 * The acknowledgement connection settings.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.acknowledgementConnectionSettings.ignoreCertificateNameMismatch]
 * The value indicating whether to ignore mismatch in certificate name.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.acknowledgementConnectionSettings.supportHttpStatusCodeContinue]
 * The value indicating whether to support HTTP status code 'CONTINUE'.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.acknowledgementConnectionSettings.keepHttpConnectionAlive]
 * The value indicating whether to keep the connection alive.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.acknowledgementConnectionSettings.unfoldHttpHeaders]
 * The value indicating whether to unfold the HTTP headers.
 * @member {object} [content.aS2.receiveAgreement.protocolSettings.mdnSettings]
 * The MDN settings.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.mdnSettings.needMdn] The
 * value indicating whether to send or request a MDN.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.mdnSettings.signMdn] The
 * value indicating whether the MDN needs to be signed or not.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.mdnSettings.sendMdnAsynchronously]
 * The value indicating whether to send the asynchronous MDN.
 * @member {string}
 * [content.aS2.receiveAgreement.protocolSettings.mdnSettings.receiptDeliveryUrl]
 * The receipt delivery URL.
 * @member {string}
 * [content.aS2.receiveAgreement.protocolSettings.mdnSettings.dispositionNotificationTo]
 * The disposition notification to header value.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.mdnSettings.signOutboundMdnIfOptional]
 * The value indicating whether to sign the outbound MDN if optional.
 * @member {string}
 * [content.aS2.receiveAgreement.protocolSettings.mdnSettings.mdnText] The MDN
 * text.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.mdnSettings.sendInboundMdnToMessageBox]
 * The value indicating whether to send inbound MDN to message box.
 * @member {string}
 * [content.aS2.receiveAgreement.protocolSettings.mdnSettings.micHashingAlgorithm]
 * The signing or hashing algorithm. Possible values include: 'NotSpecified',
 * 'None', 'MD5', 'SHA1', 'SHA2256', 'SHA2384', 'SHA2512'
 * @member {object}
 * [content.aS2.receiveAgreement.protocolSettings.securitySettings] The
 * security settings.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.securitySettings.overrideGroupSigningCertificate]
 * The value indicating whether to send or request a MDN.
 * @member {string}
 * [content.aS2.receiveAgreement.protocolSettings.securitySettings.signingCertificateName]
 * The name of the signing certificate.
 * @member {string}
 * [content.aS2.receiveAgreement.protocolSettings.securitySettings.encryptionCertificateName]
 * The name of the encryption certificate.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.securitySettings.enableNrrForInboundEncodedMessages]
 * The value indicating whether to enable NRR for inbound encoded messages.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.securitySettings.enableNrrForInboundDecodedMessages]
 * The value indicating whether to enable NRR for inbound decoded messages.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.securitySettings.enableNrrForOutboundMdn]
 * The value indicating whether to enable NRR for outbound MDN.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.securitySettings.enableNrrForOutboundEncodedMessages]
 * The value indicating whether to enable NRR for outbound encoded messages.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.securitySettings.enableNrrForOutboundDecodedMessages]
 * The value indicating whether to enable NRR for outbound decoded messages.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.securitySettings.enableNrrForInboundMdn]
 * The value indicating whether to enable NRR for inbound MDN.
 * @member {string}
 * [content.aS2.receiveAgreement.protocolSettings.securitySettings.sha2AlgorithmFormat]
 * The Sha2 algorithm format. Valid values are Sha2, ShaHashSize,
 * ShaHyphenHashSize, Sha2UnderscoreHashSize.
 * @member {object}
 * [content.aS2.receiveAgreement.protocolSettings.validationSettings] The
 * validation settings.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.validationSettings.overrideMessageProperties]
 * The value indicating whether to override incoming message properties with
 * those in agreement.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.validationSettings.encryptMessage]
 * The value indicating whether the message has to be encrypted.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.validationSettings.signMessage]
 * The value indicating whether the message has to be signed.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.validationSettings.compressMessage]
 * The value indicating whether the message has to be compressed.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.validationSettings.checkDuplicateMessage]
 * The value indicating whether to check for duplicate message.
 * @member {number}
 * [content.aS2.receiveAgreement.protocolSettings.validationSettings.interchangeDuplicatesValidityDays]
 * The number of days to look back for duplicate interchange.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.validationSettings.checkCertificateRevocationListOnSend]
 * The value indicating whether to check for certificate revocation list on
 * send.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.validationSettings.checkCertificateRevocationListOnReceive]
 * The value indicating whether to check for certificate revocation list on
 * receive.
 * @member {string}
 * [content.aS2.receiveAgreement.protocolSettings.validationSettings.encryptionAlgorithm]
 * The encryption algorithm. Possible values include: 'NotSpecified', 'None',
 * 'DES3', 'RC2', 'AES128', 'AES192', 'AES256'
 * @member {string}
 * [content.aS2.receiveAgreement.protocolSettings.validationSettings.signingAlgorithm]
 * The signing algorithm. Possible values include: 'NotSpecified', 'Default',
 * 'SHA1', 'SHA2256', 'SHA2384', 'SHA2512'
 * @member {object}
 * [content.aS2.receiveAgreement.protocolSettings.envelopeSettings] The
 * envelope settings.
 * @member {string}
 * [content.aS2.receiveAgreement.protocolSettings.envelopeSettings.messageContentType]
 * The message content type.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.envelopeSettings.transmitFileNameInMimeHeader]
 * The value indicating whether to transmit file name in mime header.
 * @member {string}
 * [content.aS2.receiveAgreement.protocolSettings.envelopeSettings.fileNameTemplate]
 * The template for file name.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.envelopeSettings.suspendMessageOnFileNameGenerationError]
 * The value indicating whether to suspend message on file name generation
 * error.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.envelopeSettings.autogenerateFileName]
 * The value indicating whether to auto generate file name.
 * @member {object}
 * [content.aS2.receiveAgreement.protocolSettings.errorSettings] The error
 * settings.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.errorSettings.suspendDuplicateMessage]
 * The value indicating whether to suspend duplicate message.
 * @member {boolean}
 * [content.aS2.receiveAgreement.protocolSettings.errorSettings.resendIfMdnNotReceived]
 * The value indicating whether to resend message If MDN is not received.
 * @member {object} [content.aS2.sendAgreement] The AS2 one-way send agreement.
 * @member {object} [content.aS2.sendAgreement.senderBusinessIdentity] The
 * sender business identity
 * @member {string}
 * [content.aS2.sendAgreement.senderBusinessIdentity.qualifier] The business
 * identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [content.aS2.sendAgreement.senderBusinessIdentity.value]
 * The user defined business identity value.
 * @member {object} [content.aS2.sendAgreement.receiverBusinessIdentity] The
 * receiver business identity
 * @member {string}
 * [content.aS2.sendAgreement.receiverBusinessIdentity.qualifier] The business
 * identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [content.aS2.sendAgreement.receiverBusinessIdentity.value]
 * The user defined business identity value.
 * @member {object} [content.aS2.sendAgreement.protocolSettings] The AS2
 * protocol settings.
 * @member {object}
 * [content.aS2.sendAgreement.protocolSettings.messageConnectionSettings] The
 * message connection settings.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.messageConnectionSettings.ignoreCertificateNameMismatch]
 * The value indicating whether to ignore mismatch in certificate name.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.messageConnectionSettings.supportHttpStatusCodeContinue]
 * The value indicating whether to support HTTP status code 'CONTINUE'.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.messageConnectionSettings.keepHttpConnectionAlive]
 * The value indicating whether to keep the connection alive.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.messageConnectionSettings.unfoldHttpHeaders]
 * The value indicating whether to unfold the HTTP headers.
 * @member {object}
 * [content.aS2.sendAgreement.protocolSettings.acknowledgementConnectionSettings]
 * The acknowledgement connection settings.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.acknowledgementConnectionSettings.ignoreCertificateNameMismatch]
 * The value indicating whether to ignore mismatch in certificate name.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.acknowledgementConnectionSettings.supportHttpStatusCodeContinue]
 * The value indicating whether to support HTTP status code 'CONTINUE'.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.acknowledgementConnectionSettings.keepHttpConnectionAlive]
 * The value indicating whether to keep the connection alive.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.acknowledgementConnectionSettings.unfoldHttpHeaders]
 * The value indicating whether to unfold the HTTP headers.
 * @member {object} [content.aS2.sendAgreement.protocolSettings.mdnSettings]
 * The MDN settings.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.mdnSettings.needMdn] The value
 * indicating whether to send or request a MDN.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.mdnSettings.signMdn] The value
 * indicating whether the MDN needs to be signed or not.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.mdnSettings.sendMdnAsynchronously]
 * The value indicating whether to send the asynchronous MDN.
 * @member {string}
 * [content.aS2.sendAgreement.protocolSettings.mdnSettings.receiptDeliveryUrl]
 * The receipt delivery URL.
 * @member {string}
 * [content.aS2.sendAgreement.protocolSettings.mdnSettings.dispositionNotificationTo]
 * The disposition notification to header value.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.mdnSettings.signOutboundMdnIfOptional]
 * The value indicating whether to sign the outbound MDN if optional.
 * @member {string}
 * [content.aS2.sendAgreement.protocolSettings.mdnSettings.mdnText] The MDN
 * text.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.mdnSettings.sendInboundMdnToMessageBox]
 * The value indicating whether to send inbound MDN to message box.
 * @member {string}
 * [content.aS2.sendAgreement.protocolSettings.mdnSettings.micHashingAlgorithm]
 * The signing or hashing algorithm. Possible values include: 'NotSpecified',
 * 'None', 'MD5', 'SHA1', 'SHA2256', 'SHA2384', 'SHA2512'
 * @member {object}
 * [content.aS2.sendAgreement.protocolSettings.securitySettings] The security
 * settings.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.securitySettings.overrideGroupSigningCertificate]
 * The value indicating whether to send or request a MDN.
 * @member {string}
 * [content.aS2.sendAgreement.protocolSettings.securitySettings.signingCertificateName]
 * The name of the signing certificate.
 * @member {string}
 * [content.aS2.sendAgreement.protocolSettings.securitySettings.encryptionCertificateName]
 * The name of the encryption certificate.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.securitySettings.enableNrrForInboundEncodedMessages]
 * The value indicating whether to enable NRR for inbound encoded messages.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.securitySettings.enableNrrForInboundDecodedMessages]
 * The value indicating whether to enable NRR for inbound decoded messages.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.securitySettings.enableNrrForOutboundMdn]
 * The value indicating whether to enable NRR for outbound MDN.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.securitySettings.enableNrrForOutboundEncodedMessages]
 * The value indicating whether to enable NRR for outbound encoded messages.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.securitySettings.enableNrrForOutboundDecodedMessages]
 * The value indicating whether to enable NRR for outbound decoded messages.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.securitySettings.enableNrrForInboundMdn]
 * The value indicating whether to enable NRR for inbound MDN.
 * @member {string}
 * [content.aS2.sendAgreement.protocolSettings.securitySettings.sha2AlgorithmFormat]
 * The Sha2 algorithm format. Valid values are Sha2, ShaHashSize,
 * ShaHyphenHashSize, Sha2UnderscoreHashSize.
 * @member {object}
 * [content.aS2.sendAgreement.protocolSettings.validationSettings] The
 * validation settings.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.validationSettings.overrideMessageProperties]
 * The value indicating whether to override incoming message properties with
 * those in agreement.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.validationSettings.encryptMessage]
 * The value indicating whether the message has to be encrypted.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.validationSettings.signMessage]
 * The value indicating whether the message has to be signed.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.validationSettings.compressMessage]
 * The value indicating whether the message has to be compressed.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.validationSettings.checkDuplicateMessage]
 * The value indicating whether to check for duplicate message.
 * @member {number}
 * [content.aS2.sendAgreement.protocolSettings.validationSettings.interchangeDuplicatesValidityDays]
 * The number of days to look back for duplicate interchange.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.validationSettings.checkCertificateRevocationListOnSend]
 * The value indicating whether to check for certificate revocation list on
 * send.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.validationSettings.checkCertificateRevocationListOnReceive]
 * The value indicating whether to check for certificate revocation list on
 * receive.
 * @member {string}
 * [content.aS2.sendAgreement.protocolSettings.validationSettings.encryptionAlgorithm]
 * The encryption algorithm. Possible values include: 'NotSpecified', 'None',
 * 'DES3', 'RC2', 'AES128', 'AES192', 'AES256'
 * @member {string}
 * [content.aS2.sendAgreement.protocolSettings.validationSettings.signingAlgorithm]
 * The signing algorithm. Possible values include: 'NotSpecified', 'Default',
 * 'SHA1', 'SHA2256', 'SHA2384', 'SHA2512'
 * @member {object}
 * [content.aS2.sendAgreement.protocolSettings.envelopeSettings] The envelope
 * settings.
 * @member {string}
 * [content.aS2.sendAgreement.protocolSettings.envelopeSettings.messageContentType]
 * The message content type.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.envelopeSettings.transmitFileNameInMimeHeader]
 * The value indicating whether to transmit file name in mime header.
 * @member {string}
 * [content.aS2.sendAgreement.protocolSettings.envelopeSettings.fileNameTemplate]
 * The template for file name.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.envelopeSettings.suspendMessageOnFileNameGenerationError]
 * The value indicating whether to suspend message on file name generation
 * error.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.envelopeSettings.autogenerateFileName]
 * The value indicating whether to auto generate file name.
 * @member {object} [content.aS2.sendAgreement.protocolSettings.errorSettings]
 * The error settings.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.errorSettings.suspendDuplicateMessage]
 * The value indicating whether to suspend duplicate message.
 * @member {boolean}
 * [content.aS2.sendAgreement.protocolSettings.errorSettings.resendIfMdnNotReceived]
 * The value indicating whether to resend message If MDN is not received.
 * @member {object} [content.x12] The X12 agreement content.
 * @member {object} [content.x12.receiveAgreement] The X12 one-way receive
 * agreement.
 * @member {object} [content.x12.receiveAgreement.senderBusinessIdentity] The
 * sender business identity
 * @member {string}
 * [content.x12.receiveAgreement.senderBusinessIdentity.qualifier] The business
 * identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [content.x12.receiveAgreement.senderBusinessIdentity.value]
 * The user defined business identity value.
 * @member {object} [content.x12.receiveAgreement.receiverBusinessIdentity] The
 * receiver business identity
 * @member {string}
 * [content.x12.receiveAgreement.receiverBusinessIdentity.qualifier] The
 * business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string}
 * [content.x12.receiveAgreement.receiverBusinessIdentity.value] The user
 * defined business identity value.
 * @member {object} [content.x12.receiveAgreement.protocolSettings] The X12
 * protocol settings.
 * @member {object}
 * [content.x12.receiveAgreement.protocolSettings.validationSettings] The X12
 * validation settings.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.validationSettings.validateCharacterSet]
 * The value indicating whether to validate character set in the message.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.validationSettings.checkDuplicateInterchangeControlNumber]
 * The value indicating whether to check for duplicate interchange control
 * number.
 * @member {number}
 * [content.x12.receiveAgreement.protocolSettings.validationSettings.interchangeControlNumberValidityDays]
 * The validity period of interchange control number.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.validationSettings.checkDuplicateGroupControlNumber]
 * The value indicating whether to check for duplicate group control number.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.validationSettings.checkDuplicateTransactionSetControlNumber]
 * The value indicating whether to check for duplicate transaction set control
 * number.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.validationSettings.validateEdiTypes]
 * The value indicating whether to Whether to validate EDI types.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.validationSettings.validateXsdTypes]
 * The value indicating whether to Whether to validate XSD types.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.validationSettings.allowLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to allow leading and trailing spaces and
 * zeroes.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.validationSettings.trimLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to trim leading and trailing spaces and zeroes.
 * @member {string}
 * [content.x12.receiveAgreement.protocolSettings.validationSettings.trailingSeparatorPolicy]
 * The trailing separator policy. Possible values include: 'NotSpecified',
 * 'NotAllowed', 'Optional', 'Mandatory'
 * @member {object}
 * [content.x12.receiveAgreement.protocolSettings.framingSettings] The X12
 * framing settings.
 * @member {number}
 * [content.x12.receiveAgreement.protocolSettings.framingSettings.dataElementSeparator]
 * The data element separator.
 * @member {number}
 * [content.x12.receiveAgreement.protocolSettings.framingSettings.componentSeparator]
 * The component separator.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.framingSettings.replaceSeparatorsInPayload]
 * The value indicating whether to replace separators in payload.
 * @member {number}
 * [content.x12.receiveAgreement.protocolSettings.framingSettings.replaceCharacter]
 * The replacement character.
 * @member {number}
 * [content.x12.receiveAgreement.protocolSettings.framingSettings.segmentTerminator]
 * The segment terminator.
 * @member {string}
 * [content.x12.receiveAgreement.protocolSettings.framingSettings.characterSet]
 * The X12 character set. Possible values include: 'NotSpecified', 'Basic',
 * 'Extended', 'UTF8'
 * @member {string}
 * [content.x12.receiveAgreement.protocolSettings.framingSettings.segmentTerminatorSuffix]
 * The segment terminator suffix. Possible values include: 'NotSpecified',
 * 'None', 'CR', 'LF', 'CRLF'
 * @member {object}
 * [content.x12.receiveAgreement.protocolSettings.envelopeSettings] The X12
 * envelope settings.
 * @member {number}
 * [content.x12.receiveAgreement.protocolSettings.envelopeSettings.controlStandardsId]
 * The controls standards id.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.envelopeSettings.useControlStandardsIdAsRepetitionCharacter]
 * The value indicating whether to use control standards id as repetition
 * character.
 * @member {string}
 * [content.x12.receiveAgreement.protocolSettings.envelopeSettings.senderApplicationId]
 * The sender application id.
 * @member {string}
 * [content.x12.receiveAgreement.protocolSettings.envelopeSettings.receiverApplicationId]
 * The receiver application id.
 * @member {string}
 * [content.x12.receiveAgreement.protocolSettings.envelopeSettings.controlVersionNumber]
 * The control version number.
 * @member {number}
 * [content.x12.receiveAgreement.protocolSettings.envelopeSettings.interchangeControlNumberLowerBound]
 * The interchange  control number lower bound.
 * @member {number}
 * [content.x12.receiveAgreement.protocolSettings.envelopeSettings.interchangeControlNumberUpperBound]
 * The interchange  control number upper bound.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.envelopeSettings.rolloverInterchangeControlNumber]
 * The value indicating whether to rollover interchange control number.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.envelopeSettings.enableDefaultGroupHeaders]
 * The value indicating whether to enable default group headers.
 * @member {string}
 * [content.x12.receiveAgreement.protocolSettings.envelopeSettings.functionalGroupId]
 * The functional group id.
 * @member {number}
 * [content.x12.receiveAgreement.protocolSettings.envelopeSettings.groupControlNumberLowerBound]
 * The group control number lower bound.
 * @member {number}
 * [content.x12.receiveAgreement.protocolSettings.envelopeSettings.groupControlNumberUpperBound]
 * The group control number upper bound.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.envelopeSettings.rolloverGroupControlNumber]
 * The value indicating whether to rollover group control number.
 * @member {string}
 * [content.x12.receiveAgreement.protocolSettings.envelopeSettings.groupHeaderAgencyCode]
 * The group header agency code.
 * @member {string}
 * [content.x12.receiveAgreement.protocolSettings.envelopeSettings.groupHeaderVersion]
 * The group header version.
 * @member {number}
 * [content.x12.receiveAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberLowerBound]
 * The transaction set control number lower bound.
 * @member {number}
 * [content.x12.receiveAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberUpperBound]
 * The transaction set control number upper bound.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.envelopeSettings.rolloverTransactionSetControlNumber]
 * The value indicating whether to rollover transaction set control number.
 * @member {string}
 * [content.x12.receiveAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberPrefix]
 * The transaction set control number prefix.
 * @member {string}
 * [content.x12.receiveAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberSuffix]
 * The transaction set control number suffix.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.envelopeSettings.overwriteExistingTransactionSetControlNumber]
 * The value indicating whether to overwrite existing transaction set control
 * number.
 * @member {string}
 * [content.x12.receiveAgreement.protocolSettings.envelopeSettings.groupHeaderDateFormat]
 * The group header date format. Possible values include: 'NotSpecified',
 * 'CCYYMMDD', 'YYMMDD'
 * @member {string}
 * [content.x12.receiveAgreement.protocolSettings.envelopeSettings.groupHeaderTimeFormat]
 * The group header time format. Possible values include: 'NotSpecified',
 * 'HHMM', 'HHMMSS', 'HHMMSSdd', 'HHMMSSd'
 * @member {string}
 * [content.x12.receiveAgreement.protocolSettings.envelopeSettings.usageIndicator]
 * The usage indicator. Possible values include: 'NotSpecified', 'Test',
 * 'Information', 'Production'
 * @member {object}
 * [content.x12.receiveAgreement.protocolSettings.acknowledgementSettings] The
 * X12 acknowledgment settings.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.acknowledgementSettings.needTechnicalAcknowledgement]
 * The value indicating whether technical acknowledgement is needed.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.acknowledgementSettings.batchTechnicalAcknowledgements]
 * The value indicating whether to batch the technical acknowledgements.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.acknowledgementSettings.needFunctionalAcknowledgement]
 * The value indicating whether functional acknowledgement is needed.
 * @member {string}
 * [content.x12.receiveAgreement.protocolSettings.acknowledgementSettings.functionalAcknowledgementVersion]
 * The functional acknowledgement version.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.acknowledgementSettings.batchFunctionalAcknowledgements]
 * The value indicating whether to batch functional acknowledgements.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.acknowledgementSettings.needImplementationAcknowledgement]
 * The value indicating whether implementation acknowledgement is needed.
 * @member {string}
 * [content.x12.receiveAgreement.protocolSettings.acknowledgementSettings.implementationAcknowledgementVersion]
 * The implementation acknowledgement version.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.acknowledgementSettings.batchImplementationAcknowledgements]
 * The value indicating whether to batch implementation acknowledgements.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.acknowledgementSettings.needLoopForValidMessages]
 * The value indicating whether a loop is needed for valid messages.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.acknowledgementSettings.sendSynchronousAcknowledgement]
 * The value indicating whether to send synchronous acknowledgement.
 * @member {string}
 * [content.x12.receiveAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberPrefix]
 * The acknowledgement control number prefix.
 * @member {string}
 * [content.x12.receiveAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberSuffix]
 * The acknowledgement control number suffix.
 * @member {number}
 * [content.x12.receiveAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberLowerBound]
 * The acknowledgement control number lower bound.
 * @member {number}
 * [content.x12.receiveAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberUpperBound]
 * The acknowledgement control number upper bound.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.acknowledgementSettings.rolloverAcknowledgementControlNumber]
 * The value indicating whether to rollover acknowledgement control number.
 * @member {object}
 * [content.x12.receiveAgreement.protocolSettings.messageFilter] The X12
 * message filter.
 * @member {string}
 * [content.x12.receiveAgreement.protocolSettings.messageFilter.messageFilterType]
 * The message filter type. Possible values include: 'NotSpecified', 'Include',
 * 'Exclude'
 * @member {object}
 * [content.x12.receiveAgreement.protocolSettings.securitySettings] The X12
 * security settings.
 * @member {string}
 * [content.x12.receiveAgreement.protocolSettings.securitySettings.authorizationQualifier]
 * The authorization qualifier.
 * @member {string}
 * [content.x12.receiveAgreement.protocolSettings.securitySettings.authorizationValue]
 * The authorization value.
 * @member {string}
 * [content.x12.receiveAgreement.protocolSettings.securitySettings.securityQualifier]
 * The security qualifier.
 * @member {string}
 * [content.x12.receiveAgreement.protocolSettings.securitySettings.passwordValue]
 * The password value.
 * @member {object}
 * [content.x12.receiveAgreement.protocolSettings.processingSettings] The X12
 * processing settings.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.processingSettings.maskSecurityInfo]
 * The value indicating whether to mask security information.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.processingSettings.convertImpliedDecimal]
 * The value indicating whether to convert numerical type to implied decimal.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.processingSettings.preserveInterchange]
 * The value indicating whether to preserve interchange.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.processingSettings.suspendInterchangeOnError]
 * The value indicating whether to suspend interchange on error.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.processingSettings.createEmptyXmlTagsForTrailingSeparators]
 * The value indicating whether to create empty xml tags for trailing
 * separators.
 * @member {boolean}
 * [content.x12.receiveAgreement.protocolSettings.processingSettings.useDotAsDecimalSeparator]
 * The value indicating whether to use dot as decimal separator.
 * @member {array}
 * [content.x12.receiveAgreement.protocolSettings.envelopeOverrides] The X12
 * envelope override settings.
 * @member {array}
 * [content.x12.receiveAgreement.protocolSettings.validationOverrides] The X12
 * validation override settings.
 * @member {array}
 * [content.x12.receiveAgreement.protocolSettings.messageFilterList] The X12
 * message filter list.
 * @member {array}
 * [content.x12.receiveAgreement.protocolSettings.schemaReferences] The X12
 * schema references.
 * @member {array}
 * [content.x12.receiveAgreement.protocolSettings.x12DelimiterOverrides] The
 * X12 delimiter override settings.
 * @member {object} [content.x12.sendAgreement] The X12 one-way send agreement.
 * @member {object} [content.x12.sendAgreement.senderBusinessIdentity] The
 * sender business identity
 * @member {string}
 * [content.x12.sendAgreement.senderBusinessIdentity.qualifier] The business
 * identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [content.x12.sendAgreement.senderBusinessIdentity.value]
 * The user defined business identity value.
 * @member {object} [content.x12.sendAgreement.receiverBusinessIdentity] The
 * receiver business identity
 * @member {string}
 * [content.x12.sendAgreement.receiverBusinessIdentity.qualifier] The business
 * identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string} [content.x12.sendAgreement.receiverBusinessIdentity.value]
 * The user defined business identity value.
 * @member {object} [content.x12.sendAgreement.protocolSettings] The X12
 * protocol settings.
 * @member {object}
 * [content.x12.sendAgreement.protocolSettings.validationSettings] The X12
 * validation settings.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.validationSettings.validateCharacterSet]
 * The value indicating whether to validate character set in the message.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.validationSettings.checkDuplicateInterchangeControlNumber]
 * The value indicating whether to check for duplicate interchange control
 * number.
 * @member {number}
 * [content.x12.sendAgreement.protocolSettings.validationSettings.interchangeControlNumberValidityDays]
 * The validity period of interchange control number.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.validationSettings.checkDuplicateGroupControlNumber]
 * The value indicating whether to check for duplicate group control number.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.validationSettings.checkDuplicateTransactionSetControlNumber]
 * The value indicating whether to check for duplicate transaction set control
 * number.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.validationSettings.validateEdiTypes]
 * The value indicating whether to Whether to validate EDI types.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.validationSettings.validateXsdTypes]
 * The value indicating whether to Whether to validate XSD types.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.validationSettings.allowLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to allow leading and trailing spaces and
 * zeroes.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.validationSettings.trimLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to trim leading and trailing spaces and zeroes.
 * @member {string}
 * [content.x12.sendAgreement.protocolSettings.validationSettings.trailingSeparatorPolicy]
 * The trailing separator policy. Possible values include: 'NotSpecified',
 * 'NotAllowed', 'Optional', 'Mandatory'
 * @member {object}
 * [content.x12.sendAgreement.protocolSettings.framingSettings] The X12 framing
 * settings.
 * @member {number}
 * [content.x12.sendAgreement.protocolSettings.framingSettings.dataElementSeparator]
 * The data element separator.
 * @member {number}
 * [content.x12.sendAgreement.protocolSettings.framingSettings.componentSeparator]
 * The component separator.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.framingSettings.replaceSeparatorsInPayload]
 * The value indicating whether to replace separators in payload.
 * @member {number}
 * [content.x12.sendAgreement.protocolSettings.framingSettings.replaceCharacter]
 * The replacement character.
 * @member {number}
 * [content.x12.sendAgreement.protocolSettings.framingSettings.segmentTerminator]
 * The segment terminator.
 * @member {string}
 * [content.x12.sendAgreement.protocolSettings.framingSettings.characterSet]
 * The X12 character set. Possible values include: 'NotSpecified', 'Basic',
 * 'Extended', 'UTF8'
 * @member {string}
 * [content.x12.sendAgreement.protocolSettings.framingSettings.segmentTerminatorSuffix]
 * The segment terminator suffix. Possible values include: 'NotSpecified',
 * 'None', 'CR', 'LF', 'CRLF'
 * @member {object}
 * [content.x12.sendAgreement.protocolSettings.envelopeSettings] The X12
 * envelope settings.
 * @member {number}
 * [content.x12.sendAgreement.protocolSettings.envelopeSettings.controlStandardsId]
 * The controls standards id.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.envelopeSettings.useControlStandardsIdAsRepetitionCharacter]
 * The value indicating whether to use control standards id as repetition
 * character.
 * @member {string}
 * [content.x12.sendAgreement.protocolSettings.envelopeSettings.senderApplicationId]
 * The sender application id.
 * @member {string}
 * [content.x12.sendAgreement.protocolSettings.envelopeSettings.receiverApplicationId]
 * The receiver application id.
 * @member {string}
 * [content.x12.sendAgreement.protocolSettings.envelopeSettings.controlVersionNumber]
 * The control version number.
 * @member {number}
 * [content.x12.sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberLowerBound]
 * The interchange  control number lower bound.
 * @member {number}
 * [content.x12.sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberUpperBound]
 * The interchange  control number upper bound.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.envelopeSettings.rolloverInterchangeControlNumber]
 * The value indicating whether to rollover interchange control number.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.envelopeSettings.enableDefaultGroupHeaders]
 * The value indicating whether to enable default group headers.
 * @member {string}
 * [content.x12.sendAgreement.protocolSettings.envelopeSettings.functionalGroupId]
 * The functional group id.
 * @member {number}
 * [content.x12.sendAgreement.protocolSettings.envelopeSettings.groupControlNumberLowerBound]
 * The group control number lower bound.
 * @member {number}
 * [content.x12.sendAgreement.protocolSettings.envelopeSettings.groupControlNumberUpperBound]
 * The group control number upper bound.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.envelopeSettings.rolloverGroupControlNumber]
 * The value indicating whether to rollover group control number.
 * @member {string}
 * [content.x12.sendAgreement.protocolSettings.envelopeSettings.groupHeaderAgencyCode]
 * The group header agency code.
 * @member {string}
 * [content.x12.sendAgreement.protocolSettings.envelopeSettings.groupHeaderVersion]
 * The group header version.
 * @member {number}
 * [content.x12.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberLowerBound]
 * The transaction set control number lower bound.
 * @member {number}
 * [content.x12.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberUpperBound]
 * The transaction set control number upper bound.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.envelopeSettings.rolloverTransactionSetControlNumber]
 * The value indicating whether to rollover transaction set control number.
 * @member {string}
 * [content.x12.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberPrefix]
 * The transaction set control number prefix.
 * @member {string}
 * [content.x12.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberSuffix]
 * The transaction set control number suffix.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.envelopeSettings.overwriteExistingTransactionSetControlNumber]
 * The value indicating whether to overwrite existing transaction set control
 * number.
 * @member {string}
 * [content.x12.sendAgreement.protocolSettings.envelopeSettings.groupHeaderDateFormat]
 * The group header date format. Possible values include: 'NotSpecified',
 * 'CCYYMMDD', 'YYMMDD'
 * @member {string}
 * [content.x12.sendAgreement.protocolSettings.envelopeSettings.groupHeaderTimeFormat]
 * The group header time format. Possible values include: 'NotSpecified',
 * 'HHMM', 'HHMMSS', 'HHMMSSdd', 'HHMMSSd'
 * @member {string}
 * [content.x12.sendAgreement.protocolSettings.envelopeSettings.usageIndicator]
 * The usage indicator. Possible values include: 'NotSpecified', 'Test',
 * 'Information', 'Production'
 * @member {object}
 * [content.x12.sendAgreement.protocolSettings.acknowledgementSettings] The X12
 * acknowledgment settings.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.acknowledgementSettings.needTechnicalAcknowledgement]
 * The value indicating whether technical acknowledgement is needed.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.acknowledgementSettings.batchTechnicalAcknowledgements]
 * The value indicating whether to batch the technical acknowledgements.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.acknowledgementSettings.needFunctionalAcknowledgement]
 * The value indicating whether functional acknowledgement is needed.
 * @member {string}
 * [content.x12.sendAgreement.protocolSettings.acknowledgementSettings.functionalAcknowledgementVersion]
 * The functional acknowledgement version.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.acknowledgementSettings.batchFunctionalAcknowledgements]
 * The value indicating whether to batch functional acknowledgements.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.acknowledgementSettings.needImplementationAcknowledgement]
 * The value indicating whether implementation acknowledgement is needed.
 * @member {string}
 * [content.x12.sendAgreement.protocolSettings.acknowledgementSettings.implementationAcknowledgementVersion]
 * The implementation acknowledgement version.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.acknowledgementSettings.batchImplementationAcknowledgements]
 * The value indicating whether to batch implementation acknowledgements.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.acknowledgementSettings.needLoopForValidMessages]
 * The value indicating whether a loop is needed for valid messages.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.acknowledgementSettings.sendSynchronousAcknowledgement]
 * The value indicating whether to send synchronous acknowledgement.
 * @member {string}
 * [content.x12.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberPrefix]
 * The acknowledgement control number prefix.
 * @member {string}
 * [content.x12.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberSuffix]
 * The acknowledgement control number suffix.
 * @member {number}
 * [content.x12.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberLowerBound]
 * The acknowledgement control number lower bound.
 * @member {number}
 * [content.x12.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberUpperBound]
 * The acknowledgement control number upper bound.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.acknowledgementSettings.rolloverAcknowledgementControlNumber]
 * The value indicating whether to rollover acknowledgement control number.
 * @member {object} [content.x12.sendAgreement.protocolSettings.messageFilter]
 * The X12 message filter.
 * @member {string}
 * [content.x12.sendAgreement.protocolSettings.messageFilter.messageFilterType]
 * The message filter type. Possible values include: 'NotSpecified', 'Include',
 * 'Exclude'
 * @member {object}
 * [content.x12.sendAgreement.protocolSettings.securitySettings] The X12
 * security settings.
 * @member {string}
 * [content.x12.sendAgreement.protocolSettings.securitySettings.authorizationQualifier]
 * The authorization qualifier.
 * @member {string}
 * [content.x12.sendAgreement.protocolSettings.securitySettings.authorizationValue]
 * The authorization value.
 * @member {string}
 * [content.x12.sendAgreement.protocolSettings.securitySettings.securityQualifier]
 * The security qualifier.
 * @member {string}
 * [content.x12.sendAgreement.protocolSettings.securitySettings.passwordValue]
 * The password value.
 * @member {object}
 * [content.x12.sendAgreement.protocolSettings.processingSettings] The X12
 * processing settings.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.processingSettings.maskSecurityInfo]
 * The value indicating whether to mask security information.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.processingSettings.convertImpliedDecimal]
 * The value indicating whether to convert numerical type to implied decimal.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.processingSettings.preserveInterchange]
 * The value indicating whether to preserve interchange.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.processingSettings.suspendInterchangeOnError]
 * The value indicating whether to suspend interchange on error.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.processingSettings.createEmptyXmlTagsForTrailingSeparators]
 * The value indicating whether to create empty xml tags for trailing
 * separators.
 * @member {boolean}
 * [content.x12.sendAgreement.protocolSettings.processingSettings.useDotAsDecimalSeparator]
 * The value indicating whether to use dot as decimal separator.
 * @member {array}
 * [content.x12.sendAgreement.protocolSettings.envelopeOverrides] The X12
 * envelope override settings.
 * @member {array}
 * [content.x12.sendAgreement.protocolSettings.validationOverrides] The X12
 * validation override settings.
 * @member {array}
 * [content.x12.sendAgreement.protocolSettings.messageFilterList] The X12
 * message filter list.
 * @member {array}
 * [content.x12.sendAgreement.protocolSettings.schemaReferences] The X12 schema
 * references.
 * @member {array}
 * [content.x12.sendAgreement.protocolSettings.x12DelimiterOverrides] The X12
 * delimiter override settings.
 * @member {object} [content.edifact] The EDIFACT agreement content.
 * @member {object} [content.edifact.receiveAgreement] The EDIFACT one-way
 * receive agreement.
 * @member {object} [content.edifact.receiveAgreement.senderBusinessIdentity]
 * The sender business identity
 * @member {string}
 * [content.edifact.receiveAgreement.senderBusinessIdentity.qualifier] The
 * business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string}
 * [content.edifact.receiveAgreement.senderBusinessIdentity.value] The user
 * defined business identity value.
 * @member {object} [content.edifact.receiveAgreement.receiverBusinessIdentity]
 * The receiver business identity
 * @member {string}
 * [content.edifact.receiveAgreement.receiverBusinessIdentity.qualifier] The
 * business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string}
 * [content.edifact.receiveAgreement.receiverBusinessIdentity.value] The user
 * defined business identity value.
 * @member {object} [content.edifact.receiveAgreement.protocolSettings] The
 * EDIFACT protocol settings.
 * @member {object}
 * [content.edifact.receiveAgreement.protocolSettings.validationSettings] The
 * EDIFACT validation settings.
 * @member {boolean}
 * [content.edifact.receiveAgreement.protocolSettings.validationSettings.validateCharacterSet]
 * The value indicating whether to validate character set in the message.
 * @member {boolean}
 * [content.edifact.receiveAgreement.protocolSettings.validationSettings.checkDuplicateInterchangeControlNumber]
 * The value indicating whether to check for duplicate interchange control
 * number.
 * @member {number}
 * [content.edifact.receiveAgreement.protocolSettings.validationSettings.interchangeControlNumberValidityDays]
 * The validity period of interchange control number.
 * @member {boolean}
 * [content.edifact.receiveAgreement.protocolSettings.validationSettings.checkDuplicateGroupControlNumber]
 * The value indicating whether to check for duplicate group control number.
 * @member {boolean}
 * [content.edifact.receiveAgreement.protocolSettings.validationSettings.checkDuplicateTransactionSetControlNumber]
 * The value indicating whether to check for duplicate transaction set control
 * number.
 * @member {boolean}
 * [content.edifact.receiveAgreement.protocolSettings.validationSettings.validateEdiTypes]
 * The value indicating whether to Whether to validate EDI types.
 * @member {boolean}
 * [content.edifact.receiveAgreement.protocolSettings.validationSettings.validateXsdTypes]
 * The value indicating whether to Whether to validate XSD types.
 * @member {boolean}
 * [content.edifact.receiveAgreement.protocolSettings.validationSettings.allowLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to allow leading and trailing spaces and
 * zeroes.
 * @member {boolean}
 * [content.edifact.receiveAgreement.protocolSettings.validationSettings.trimLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to trim leading and trailing spaces and zeroes.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.validationSettings.trailingSeparatorPolicy]
 * The trailing separator policy. Possible values include: 'NotSpecified',
 * 'NotAllowed', 'Optional', 'Mandatory'
 * @member {object}
 * [content.edifact.receiveAgreement.protocolSettings.framingSettings] The
 * EDIFACT framing settings.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.framingSettings.serviceCodeListDirectoryVersion]
 * The service code list directory version.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.framingSettings.characterEncoding]
 * The character encoding.
 * @member {number}
 * [content.edifact.receiveAgreement.protocolSettings.framingSettings.protocolVersion]
 * The protocol version.
 * @member {number}
 * [content.edifact.receiveAgreement.protocolSettings.framingSettings.dataElementSeparator]
 * The data element separator.
 * @member {number}
 * [content.edifact.receiveAgreement.protocolSettings.framingSettings.componentSeparator]
 * The component separator.
 * @member {number}
 * [content.edifact.receiveAgreement.protocolSettings.framingSettings.segmentTerminator]
 * The segment terminator.
 * @member {number}
 * [content.edifact.receiveAgreement.protocolSettings.framingSettings.releaseIndicator]
 * The release indicator.
 * @member {number}
 * [content.edifact.receiveAgreement.protocolSettings.framingSettings.repetitionSeparator]
 * The repetition separator.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.framingSettings.characterSet]
 * The EDIFACT frame setting characterSet. Possible values include:
 * 'NotSpecified', 'UNOB', 'UNOA', 'UNOC', 'UNOD', 'UNOE', 'UNOF', 'UNOG',
 * 'UNOH', 'UNOI', 'UNOJ', 'UNOK', 'UNOX', 'UNOY', 'KECA'
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.framingSettings.decimalPointIndicator]
 * The EDIFACT frame setting decimal indicator. Possible values include:
 * 'NotSpecified', 'Comma', 'Decimal'
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.framingSettings.segmentTerminatorSuffix]
 * The EDIFACT frame setting segment terminator suffix. Possible values
 * include: 'NotSpecified', 'None', 'CR', 'LF', 'CRLF'
 * @member {object}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings] The
 * EDIFACT envelope settings.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.groupAssociationAssignedCode]
 * The group association assigned code.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.communicationAgreementId]
 * The communication agreement id.
 * @member {boolean}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.applyDelimiterStringAdvice]
 * The value indicating whether to apply delimiter string advice.
 * @member {boolean}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.createGroupingSegments]
 * The value indicating whether to create grouping segments.
 * @member {boolean}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.enableDefaultGroupHeaders]
 * The value indicating whether to enable default group headers.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.recipientReferencePasswordValue]
 * The recipient reference password value.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.recipientReferencePasswordQualifier]
 * The recipient reference password qualifier.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.applicationReferenceId]
 * The application reference id.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.processingPriorityCode]
 * The processing priority code.
 * @member {number}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.interchangeControlNumberLowerBound]
 * The interchange control number lower bound.
 * @member {number}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.interchangeControlNumberUpperBound]
 * The interchange control number upper bound.
 * @member {boolean}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.rolloverInterchangeControlNumber]
 * The value indicating whether to rollover interchange control number.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.interchangeControlNumberPrefix]
 * The interchange control number prefix.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.interchangeControlNumberSuffix]
 * The interchange control number suffix.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.senderReverseRoutingAddress]
 * The sender reverse routing address.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.receiverReverseRoutingAddress]
 * The receiver reverse routing address.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.functionalGroupId]
 * The functional group id.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.groupControllingAgencyCode]
 * The group controlling agency code.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.groupMessageVersion]
 * The group message version.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.groupMessageRelease]
 * The group message release.
 * @member {number}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.groupControlNumberLowerBound]
 * The group control number lower bound.
 * @member {number}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.groupControlNumberUpperBound]
 * The group control number upper bound.
 * @member {boolean}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.rolloverGroupControlNumber]
 * The value indicating whether to rollover group control number.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.groupControlNumberPrefix]
 * The group control number prefix.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.groupControlNumberSuffix]
 * The group control number suffix.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.groupApplicationReceiverQualifier]
 * The group application receiver qualifier.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.groupApplicationReceiverId]
 * The group application receiver id.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.groupApplicationSenderQualifier]
 * The group application sender qualifier.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.groupApplicationSenderId]
 * The group application sender id.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.groupApplicationPassword]
 * The group application password.
 * @member {boolean}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.overwriteExistingTransactionSetControlNumber]
 * The value indicating whether to overwrite existing transaction set control
 * number.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberPrefix]
 * The transaction set control number prefix.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberSuffix]
 * The transaction set control number suffix.
 * @member {number}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberLowerBound]
 * The transaction set control number lower bound.
 * @member {number}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberUpperBound]
 * The transaction set control number upper bound.
 * @member {boolean}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.rolloverTransactionSetControlNumber]
 * The value indicating whether to rollover transaction set control number.
 * @member {boolean}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.isTestInterchange]
 * The value indicating whether the message is a test interchange.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.senderInternalIdentification]
 * The sender internal identification.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.senderInternalSubIdentification]
 * The sender internal sub identification.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.receiverInternalIdentification]
 * The receiver internal identification.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeSettings.receiverInternalSubIdentification]
 * The receiver internal sub identification.
 * @member {object}
 * [content.edifact.receiveAgreement.protocolSettings.acknowledgementSettings]
 * The EDIFACT acknowledgement settings.
 * @member {boolean}
 * [content.edifact.receiveAgreement.protocolSettings.acknowledgementSettings.needTechnicalAcknowledgement]
 * The value indicating whether technical acknowledgement is needed.
 * @member {boolean}
 * [content.edifact.receiveAgreement.protocolSettings.acknowledgementSettings.batchTechnicalAcknowledgements]
 * The value indicating whether to batch the technical acknowledgements.
 * @member {boolean}
 * [content.edifact.receiveAgreement.protocolSettings.acknowledgementSettings.needFunctionalAcknowledgement]
 * The value indicating whether functional acknowledgement is needed.
 * @member {boolean}
 * [content.edifact.receiveAgreement.protocolSettings.acknowledgementSettings.batchFunctionalAcknowledgements]
 * The value indicating whether to batch functional acknowledgements.
 * @member {boolean}
 * [content.edifact.receiveAgreement.protocolSettings.acknowledgementSettings.needLoopForValidMessages]
 * The value indicating whether a loop is needed for valid messages.
 * @member {boolean}
 * [content.edifact.receiveAgreement.protocolSettings.acknowledgementSettings.sendSynchronousAcknowledgement]
 * The value indicating whether to send synchronous acknowledgement.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberPrefix]
 * The acknowledgement control number prefix.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberSuffix]
 * The acknowledgement control number suffix.
 * @member {number}
 * [content.edifact.receiveAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberLowerBound]
 * The acknowledgement control number lower bound.
 * @member {number}
 * [content.edifact.receiveAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberUpperBound]
 * The acknowledgement control number upper bound.
 * @member {boolean}
 * [content.edifact.receiveAgreement.protocolSettings.acknowledgementSettings.rolloverAcknowledgementControlNumber]
 * The value indicating whether to rollover acknowledgement control number.
 * @member {object}
 * [content.edifact.receiveAgreement.protocolSettings.messageFilter] The
 * EDIFACT message filter.
 * @member {string}
 * [content.edifact.receiveAgreement.protocolSettings.messageFilter.messageFilterType]
 * The message filter type. Possible values include: 'NotSpecified', 'Include',
 * 'Exclude'
 * @member {object}
 * [content.edifact.receiveAgreement.protocolSettings.processingSettings] The
 * EDIFACT processing Settings.
 * @member {boolean}
 * [content.edifact.receiveAgreement.protocolSettings.processingSettings.maskSecurityInfo]
 * The value indicating whether to mask security information.
 * @member {boolean}
 * [content.edifact.receiveAgreement.protocolSettings.processingSettings.preserveInterchange]
 * The value indicating whether to preserve interchange.
 * @member {boolean}
 * [content.edifact.receiveAgreement.protocolSettings.processingSettings.suspendInterchangeOnError]
 * The value indicating whether to suspend interchange on error.
 * @member {boolean}
 * [content.edifact.receiveAgreement.protocolSettings.processingSettings.createEmptyXmlTagsForTrailingSeparators]
 * The value indicating whether to create empty xml tags for trailing
 * separators.
 * @member {boolean}
 * [content.edifact.receiveAgreement.protocolSettings.processingSettings.useDotAsDecimalSeparator]
 * The value indicating whether to use dot as decimal separator.
 * @member {array}
 * [content.edifact.receiveAgreement.protocolSettings.envelopeOverrides] The
 * EDIFACT envelope override settings.
 * @member {array}
 * [content.edifact.receiveAgreement.protocolSettings.messageFilterList] The
 * EDIFACT message filter list.
 * @member {array}
 * [content.edifact.receiveAgreement.protocolSettings.schemaReferences] The
 * EDIFACT schema references.
 * @member {array}
 * [content.edifact.receiveAgreement.protocolSettings.validationOverrides] The
 * EDIFACT validation override settings.
 * @member {array}
 * [content.edifact.receiveAgreement.protocolSettings.edifactDelimiterOverrides]
 * The EDIFACT delimiter override settings.
 * @member {object} [content.edifact.sendAgreement] The EDIFACT one-way send
 * agreement.
 * @member {object} [content.edifact.sendAgreement.senderBusinessIdentity] The
 * sender business identity
 * @member {string}
 * [content.edifact.sendAgreement.senderBusinessIdentity.qualifier] The
 * business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string}
 * [content.edifact.sendAgreement.senderBusinessIdentity.value] The user
 * defined business identity value.
 * @member {object} [content.edifact.sendAgreement.receiverBusinessIdentity]
 * The receiver business identity
 * @member {string}
 * [content.edifact.sendAgreement.receiverBusinessIdentity.qualifier] The
 * business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
 * @member {string}
 * [content.edifact.sendAgreement.receiverBusinessIdentity.value] The user
 * defined business identity value.
 * @member {object} [content.edifact.sendAgreement.protocolSettings] The
 * EDIFACT protocol settings.
 * @member {object}
 * [content.edifact.sendAgreement.protocolSettings.validationSettings] The
 * EDIFACT validation settings.
 * @member {boolean}
 * [content.edifact.sendAgreement.protocolSettings.validationSettings.validateCharacterSet]
 * The value indicating whether to validate character set in the message.
 * @member {boolean}
 * [content.edifact.sendAgreement.protocolSettings.validationSettings.checkDuplicateInterchangeControlNumber]
 * The value indicating whether to check for duplicate interchange control
 * number.
 * @member {number}
 * [content.edifact.sendAgreement.protocolSettings.validationSettings.interchangeControlNumberValidityDays]
 * The validity period of interchange control number.
 * @member {boolean}
 * [content.edifact.sendAgreement.protocolSettings.validationSettings.checkDuplicateGroupControlNumber]
 * The value indicating whether to check for duplicate group control number.
 * @member {boolean}
 * [content.edifact.sendAgreement.protocolSettings.validationSettings.checkDuplicateTransactionSetControlNumber]
 * The value indicating whether to check for duplicate transaction set control
 * number.
 * @member {boolean}
 * [content.edifact.sendAgreement.protocolSettings.validationSettings.validateEdiTypes]
 * The value indicating whether to Whether to validate EDI types.
 * @member {boolean}
 * [content.edifact.sendAgreement.protocolSettings.validationSettings.validateXsdTypes]
 * The value indicating whether to Whether to validate XSD types.
 * @member {boolean}
 * [content.edifact.sendAgreement.protocolSettings.validationSettings.allowLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to allow leading and trailing spaces and
 * zeroes.
 * @member {boolean}
 * [content.edifact.sendAgreement.protocolSettings.validationSettings.trimLeadingAndTrailingSpacesAndZeroes]
 * The value indicating whether to trim leading and trailing spaces and zeroes.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.validationSettings.trailingSeparatorPolicy]
 * The trailing separator policy. Possible values include: 'NotSpecified',
 * 'NotAllowed', 'Optional', 'Mandatory'
 * @member {object}
 * [content.edifact.sendAgreement.protocolSettings.framingSettings] The EDIFACT
 * framing settings.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.framingSettings.serviceCodeListDirectoryVersion]
 * The service code list directory version.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.framingSettings.characterEncoding]
 * The character encoding.
 * @member {number}
 * [content.edifact.sendAgreement.protocolSettings.framingSettings.protocolVersion]
 * The protocol version.
 * @member {number}
 * [content.edifact.sendAgreement.protocolSettings.framingSettings.dataElementSeparator]
 * The data element separator.
 * @member {number}
 * [content.edifact.sendAgreement.protocolSettings.framingSettings.componentSeparator]
 * The component separator.
 * @member {number}
 * [content.edifact.sendAgreement.protocolSettings.framingSettings.segmentTerminator]
 * The segment terminator.
 * @member {number}
 * [content.edifact.sendAgreement.protocolSettings.framingSettings.releaseIndicator]
 * The release indicator.
 * @member {number}
 * [content.edifact.sendAgreement.protocolSettings.framingSettings.repetitionSeparator]
 * The repetition separator.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.framingSettings.characterSet]
 * The EDIFACT frame setting characterSet. Possible values include:
 * 'NotSpecified', 'UNOB', 'UNOA', 'UNOC', 'UNOD', 'UNOE', 'UNOF', 'UNOG',
 * 'UNOH', 'UNOI', 'UNOJ', 'UNOK', 'UNOX', 'UNOY', 'KECA'
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.framingSettings.decimalPointIndicator]
 * The EDIFACT frame setting decimal indicator. Possible values include:
 * 'NotSpecified', 'Comma', 'Decimal'
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.framingSettings.segmentTerminatorSuffix]
 * The EDIFACT frame setting segment terminator suffix. Possible values
 * include: 'NotSpecified', 'None', 'CR', 'LF', 'CRLF'
 * @member {object}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings] The
 * EDIFACT envelope settings.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupAssociationAssignedCode]
 * The group association assigned code.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.communicationAgreementId]
 * The communication agreement id.
 * @member {boolean}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.applyDelimiterStringAdvice]
 * The value indicating whether to apply delimiter string advice.
 * @member {boolean}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.createGroupingSegments]
 * The value indicating whether to create grouping segments.
 * @member {boolean}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.enableDefaultGroupHeaders]
 * The value indicating whether to enable default group headers.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.recipientReferencePasswordValue]
 * The recipient reference password value.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.recipientReferencePasswordQualifier]
 * The recipient reference password qualifier.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.applicationReferenceId]
 * The application reference id.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.processingPriorityCode]
 * The processing priority code.
 * @member {number}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberLowerBound]
 * The interchange control number lower bound.
 * @member {number}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberUpperBound]
 * The interchange control number upper bound.
 * @member {boolean}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.rolloverInterchangeControlNumber]
 * The value indicating whether to rollover interchange control number.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberPrefix]
 * The interchange control number prefix.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberSuffix]
 * The interchange control number suffix.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.senderReverseRoutingAddress]
 * The sender reverse routing address.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.receiverReverseRoutingAddress]
 * The receiver reverse routing address.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.functionalGroupId]
 * The functional group id.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupControllingAgencyCode]
 * The group controlling agency code.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupMessageVersion]
 * The group message version.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupMessageRelease]
 * The group message release.
 * @member {number}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupControlNumberLowerBound]
 * The group control number lower bound.
 * @member {number}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupControlNumberUpperBound]
 * The group control number upper bound.
 * @member {boolean}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.rolloverGroupControlNumber]
 * The value indicating whether to rollover group control number.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupControlNumberPrefix]
 * The group control number prefix.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupControlNumberSuffix]
 * The group control number suffix.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupApplicationReceiverQualifier]
 * The group application receiver qualifier.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupApplicationReceiverId]
 * The group application receiver id.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupApplicationSenderQualifier]
 * The group application sender qualifier.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupApplicationSenderId]
 * The group application sender id.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupApplicationPassword]
 * The group application password.
 * @member {boolean}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.overwriteExistingTransactionSetControlNumber]
 * The value indicating whether to overwrite existing transaction set control
 * number.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberPrefix]
 * The transaction set control number prefix.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberSuffix]
 * The transaction set control number suffix.
 * @member {number}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberLowerBound]
 * The transaction set control number lower bound.
 * @member {number}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberUpperBound]
 * The transaction set control number upper bound.
 * @member {boolean}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.rolloverTransactionSetControlNumber]
 * The value indicating whether to rollover transaction set control number.
 * @member {boolean}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.isTestInterchange]
 * The value indicating whether the message is a test interchange.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.senderInternalIdentification]
 * The sender internal identification.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.senderInternalSubIdentification]
 * The sender internal sub identification.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.receiverInternalIdentification]
 * The receiver internal identification.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.envelopeSettings.receiverInternalSubIdentification]
 * The receiver internal sub identification.
 * @member {object}
 * [content.edifact.sendAgreement.protocolSettings.acknowledgementSettings] The
 * EDIFACT acknowledgement settings.
 * @member {boolean}
 * [content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.needTechnicalAcknowledgement]
 * The value indicating whether technical acknowledgement is needed.
 * @member {boolean}
 * [content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.batchTechnicalAcknowledgements]
 * The value indicating whether to batch the technical acknowledgements.
 * @member {boolean}
 * [content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.needFunctionalAcknowledgement]
 * The value indicating whether functional acknowledgement is needed.
 * @member {boolean}
 * [content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.batchFunctionalAcknowledgements]
 * The value indicating whether to batch functional acknowledgements.
 * @member {boolean}
 * [content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.needLoopForValidMessages]
 * The value indicating whether a loop is needed for valid messages.
 * @member {boolean}
 * [content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.sendSynchronousAcknowledgement]
 * The value indicating whether to send synchronous acknowledgement.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberPrefix]
 * The acknowledgement control number prefix.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberSuffix]
 * The acknowledgement control number suffix.
 * @member {number}
 * [content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberLowerBound]
 * The acknowledgement control number lower bound.
 * @member {number}
 * [content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberUpperBound]
 * The acknowledgement control number upper bound.
 * @member {boolean}
 * [content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.rolloverAcknowledgementControlNumber]
 * The value indicating whether to rollover acknowledgement control number.
 * @member {object}
 * [content.edifact.sendAgreement.protocolSettings.messageFilter] The EDIFACT
 * message filter.
 * @member {string}
 * [content.edifact.sendAgreement.protocolSettings.messageFilter.messageFilterType]
 * The message filter type. Possible values include: 'NotSpecified', 'Include',
 * 'Exclude'
 * @member {object}
 * [content.edifact.sendAgreement.protocolSettings.processingSettings] The
 * EDIFACT processing Settings.
 * @member {boolean}
 * [content.edifact.sendAgreement.protocolSettings.processingSettings.maskSecurityInfo]
 * The value indicating whether to mask security information.
 * @member {boolean}
 * [content.edifact.sendAgreement.protocolSettings.processingSettings.preserveInterchange]
 * The value indicating whether to preserve interchange.
 * @member {boolean}
 * [content.edifact.sendAgreement.protocolSettings.processingSettings.suspendInterchangeOnError]
 * The value indicating whether to suspend interchange on error.
 * @member {boolean}
 * [content.edifact.sendAgreement.protocolSettings.processingSettings.createEmptyXmlTagsForTrailingSeparators]
 * The value indicating whether to create empty xml tags for trailing
 * separators.
 * @member {boolean}
 * [content.edifact.sendAgreement.protocolSettings.processingSettings.useDotAsDecimalSeparator]
 * The value indicating whether to use dot as decimal separator.
 * @member {array}
 * [content.edifact.sendAgreement.protocolSettings.envelopeOverrides] The
 * EDIFACT envelope override settings.
 * @member {array}
 * [content.edifact.sendAgreement.protocolSettings.messageFilterList] The
 * EDIFACT message filter list.
 * @member {array}
 * [content.edifact.sendAgreement.protocolSettings.schemaReferences] The
 * EDIFACT schema references.
 * @member {array}
 * [content.edifact.sendAgreement.protocolSettings.validationOverrides] The
 * EDIFACT validation override settings.
 * @member {array}
 * [content.edifact.sendAgreement.protocolSettings.edifactDelimiterOverrides]
 * The EDIFACT delimiter override settings.
 */
export interface IntegrationAccountAgreement extends Resource {
  readonly createdTime?: Date;
  readonly changedTime?: Date;
  metadata?: any;
  agreementType: string;
  hostPartner: string;
  guestPartner: string;
  hostIdentity: BusinessIdentity;
  guestIdentity: BusinessIdentity;
  content: AgreementContent;
}

/**
 * @class
 * Initializes a new instance of the IntegrationAccountAgreementFilter class.
 * @constructor
 * The integration account agreement filter for odata query.
 *
 * @member {string} agreementType The agreement type of integration account
 * agreement. Possible values include: 'NotSpecified', 'AS2', 'X12', 'Edifact'
 */
export interface IntegrationAccountAgreementFilter {
  agreementType: string;
}

/**
 * @class
 * Initializes a new instance of the KeyVaultKeyReferenceKeyVault class.
 * @constructor
 * The key vault reference.
 *
 * @member {string} [id] The resource id.
 * @member {string} [name] The resource name.
 * @member {string} [type] The resource type.
 */
export interface KeyVaultKeyReferenceKeyVault {
  id?: string;
  readonly name?: string;
  readonly type?: string;
}

/**
 * @class
 * Initializes a new instance of the KeyVaultKeyReference class.
 * @constructor
 * The reference to the key vault key.
 *
 * @member {object} keyVault The key vault reference.
 * @member {string} [keyVault.id] The resource id.
 * @member {string} [keyVault.name] The resource name.
 * @member {string} [keyVault.type] The resource type.
 * @member {string} keyName The private key name in key vault.
 * @member {string} [keyVersion] The private key version in key vault.
 */
export interface KeyVaultKeyReference {
  keyVault: KeyVaultKeyReferenceKeyVault;
  keyName: string;
  keyVersion?: string;
}

/**
 * @class
 * Initializes a new instance of the IntegrationAccountCertificate class.
 * @constructor
 * The integration account certificate.
 *
 * @member {date} [createdTime] The created time.
 * @member {date} [changedTime] The changed time.
 * @member {object} [metadata] The metadata.
 * @member {object} [key] The key details in the key vault.
 * @member {object} [key.keyVault] The key vault reference.
 * @member {string} [key.keyVault.id] The resource id.
 * @member {string} [key.keyVault.name] The resource name.
 * @member {string} [key.keyVault.type] The resource type.
 * @member {string} [key.keyName] The private key name in key vault.
 * @member {string} [key.keyVersion] The private key version in key vault.
 * @member {string} [publicCertificate] The public certificate.
 */
export interface IntegrationAccountCertificate extends Resource {
  readonly createdTime?: Date;
  readonly changedTime?: Date;
  metadata?: any;
  key?: KeyVaultKeyReference;
  publicCertificate?: string;
}

/**
 * @class
 * Initializes a new instance of the IntegrationAccountSessionFilter class.
 * @constructor
 * The integration account session filter.
 *
 * @member {date} changedTime The changed time of integration account sessions.
 */
export interface IntegrationAccountSessionFilter {
  changedTime: Date;
}

/**
 * @class
 * Initializes a new instance of the IntegrationAccountSession class.
 * @constructor
 * The integration account session.
 *
 * @member {date} [createdTime] The created time.
 * @member {date} [changedTime] The changed time.
 * @member {object} [content] The session content.
 */
export interface IntegrationAccountSession extends Resource {
  readonly createdTime?: Date;
  readonly changedTime?: Date;
  content?: any;
}

/**
 * @class
 * Initializes a new instance of the OperationDisplay class.
 * @constructor
 * The object that represents the operation.
 *
 * @member {string} [provider] Service provider: Microsoft.Logic
 * @member {string} [resource] Resource on which the operation is performed:
 * Profile, endpoint, etc.
 * @member {string} [operation] Operation type: Read, write, delete, etc.
 */
export interface OperationDisplay {
  provider?: string;
  resource?: string;
  operation?: string;
}

/**
 * @class
 * Initializes a new instance of the Operation class.
 * @constructor
 * Logic REST API operation
 *
 * @member {string} [name] Operation name: {provider}/{resource}/{operation}
 * @member {object} [display] The object that represents the operation.
 * @member {string} [display.provider] Service provider: Microsoft.Logic
 * @member {string} [display.resource] Resource on which the operation is
 * performed: Profile, endpoint, etc.
 * @member {string} [display.operation] Operation type: Read, write, delete,
 * etc.
 */
export interface Operation {
  name?: string;
  display?: OperationDisplay;
}


/**
 * @class
 * Initializes a new instance of the WorkflowListResult class.
 * @constructor
 * The list of workflows.
 *
 * @member {string} [nextLink] The URL to get the next set of results.
 */
export interface WorkflowListResult extends Array<Workflow> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the WorkflowVersionListResult class.
 * @constructor
 * The list of workflow versions.
 *
 * @member {string} [nextLink] The URL to get the next set of results.
 */
export interface WorkflowVersionListResult extends Array<WorkflowVersion> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the WorkflowTriggerListResult class.
 * @constructor
 * The list of workflow triggers.
 *
 * @member {string} [nextLink] The URL to get the next set of results.
 */
export interface WorkflowTriggerListResult extends Array<WorkflowTrigger> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the WorkflowTriggerHistoryListResult class.
 * @constructor
 * The list of workflow trigger histories.
 *
 * @member {string} [nextLink] The URL to get the next set of results.
 */
export interface WorkflowTriggerHistoryListResult extends Array<WorkflowTriggerHistory> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the WorkflowRunListResult class.
 * @constructor
 * The list of workflow runs.
 *
 * @member {string} [nextLink] The URL to get the next set of results.
 */
export interface WorkflowRunListResult extends Array<WorkflowRun> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the WorkflowRunActionListResult class.
 * @constructor
 * The list of workflow run actions.
 *
 * @member {string} [nextLink] The URL to get the next set of results.
 */
export interface WorkflowRunActionListResult extends Array<WorkflowRunAction> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the IntegrationAccountListResult class.
 * @constructor
 * The list of integration accounts.
 *
 * @member {string} [nextLink] The URL to get the next set of results.
 */
export interface IntegrationAccountListResult extends Array<IntegrationAccount> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the IntegrationAccountSchemaListResult class.
 * @constructor
 * The list of integration account schemas.
 *
 * @member {string} [nextLink] The URL to get the next set of results.
 */
export interface IntegrationAccountSchemaListResult extends Array<IntegrationAccountSchema> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the IntegrationAccountMapListResult class.
 * @constructor
 * The list of integration account maps.
 *
 * @member {string} [nextLink] The URL to get the next set of results.
 */
export interface IntegrationAccountMapListResult extends Array<IntegrationAccountMap> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the IntegrationAccountPartnerListResult class.
 * @constructor
 * The list of integration account partners.
 *
 * @member {string} [nextLink] The URL to get the next set of results.
 */
export interface IntegrationAccountPartnerListResult extends Array<IntegrationAccountPartner> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the IntegrationAccountAgreementListResult class.
 * @constructor
 * The list of integration account agreements.
 *
 * @member {string} [nextLink] The URL to get the next set of results.
 */
export interface IntegrationAccountAgreementListResult extends Array<IntegrationAccountAgreement> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the IntegrationAccountCertificateListResult class.
 * @constructor
 * The list of integration account certificates.
 *
 * @member {string} [nextLink] The URL to get the next set of results.
 */
export interface IntegrationAccountCertificateListResult extends Array<IntegrationAccountCertificate> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the IntegrationAccountSessionListResult class.
 * @constructor
 * The list of integration account sessions.
 *
 * @member {string} [nextLink] The URL to get the next set of results.
 */
export interface IntegrationAccountSessionListResult extends Array<IntegrationAccountSession> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the OperationListResult class.
 * @constructor
 * Result of the request to list Logic operations. It contains a list of
 * operations and a URL link to get the next set of results.
 *
 * @member {string} [nextLink] URL to get the next set of operation list
 * results if there are any.
 */
export interface OperationListResult extends Array<Operation> {
  nextLink?: string;
}
