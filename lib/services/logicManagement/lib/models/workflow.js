/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The workflow type.
 *
 * @extends models['Resource']
 */
class Workflow extends models['Resource'] {
  /**
   * Create a Workflow.
   * @member {string} [provisioningState] Gets the provisioning state. Possible
   * values include: 'NotSpecified', 'Accepted', 'Running', 'Ready',
   * 'Creating', 'Created', 'Deleting', 'Deleted', 'Canceled', 'Failed',
   * 'Succeeded', 'Moving', 'Updating', 'Registering', 'Registered',
   * 'Unregistering', 'Unregistered', 'Completed'
   * @member {date} [createdTime] Gets the created time.
   * @member {date} [changedTime] Gets the changed time.
   * @member {string} [state] The state. Possible values include:
   * 'NotSpecified', 'Completed', 'Enabled', 'Disabled', 'Deleted', 'Suspended'
   * @member {string} [version] Gets the version.
   * @member {string} [accessEndpoint] Gets the access endpoint.
   * @member {object} [sku] The sku.
   * @member {string} [sku.name] The name. Possible values include:
   * 'NotSpecified', 'Free', 'Shared', 'Basic', 'Standard', 'Premium'
   * @member {object} [sku.plan] The reference to plan.
   * @member {string} [sku.plan.id] The resource id.
   * @member {string} [sku.plan.name] Gets the resource name.
   * @member {string} [sku.plan.type] Gets the resource type.
   * @member {object} [integrationAccount] The integration account.
   * @member {string} [integrationAccount.id] The resource id.
   * @member {string} [integrationAccount.name] Gets the resource name.
   * @member {string} [integrationAccount.type] Gets the resource type.
   * @member {object} [definition] The definition.
   * @member {object} [parameters] The parameters.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Workflow
   *
   * @returns {object} metadata of Workflow
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Workflow',
      type: {
        name: 'Composite',
        className: 'Workflow',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          createdTime: {
            required: false,
            readOnly: true,
            serializedName: 'properties.createdTime',
            type: {
              name: 'DateTime'
            }
          },
          changedTime: {
            required: false,
            readOnly: true,
            serializedName: 'properties.changedTime',
            type: {
              name: 'DateTime'
            }
          },
          state: {
            required: false,
            serializedName: 'properties.state',
            type: {
              name: 'String'
            }
          },
          version: {
            required: false,
            readOnly: true,
            serializedName: 'properties.version',
            type: {
              name: 'String'
            }
          },
          accessEndpoint: {
            required: false,
            readOnly: true,
            serializedName: 'properties.accessEndpoint',
            type: {
              name: 'String'
            }
          },
          sku: {
            required: false,
            serializedName: 'properties.sku',
            type: {
              name: 'Composite',
              className: 'Sku'
            }
          },
          integrationAccount: {
            required: false,
            serializedName: 'properties.integrationAccount',
            type: {
              name: 'Composite',
              className: 'ResourceReference'
            }
          },
          definition: {
            required: false,
            serializedName: 'properties.definition',
            type: {
              name: 'Object'
            }
          },
          parameters: {
            required: false,
            serializedName: 'properties.parameters',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'WorkflowParameterElementType',
                  type: {
                    name: 'Composite',
                    className: 'WorkflowParameter'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = Workflow;
