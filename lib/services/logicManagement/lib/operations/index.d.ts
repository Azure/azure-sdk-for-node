/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Workflows
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the LogicManagementClient.
 */
export interface Workflows {


    /**
     * Gets a list of workflows by subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkflowListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionWithHttpOperationResponse(options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkflowListResult>>;

    /**
     * Gets a list of workflows by subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkflowListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkflowListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkflowListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscription(options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkflowListResult>;
    listBySubscription(callback: ServiceCallback<models.WorkflowListResult>): void;
    listBySubscription(options: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkflowListResult>): void;


    /**
     * Gets a list of workflows by resource group.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkflowListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkflowListResult>>;

    /**
     * Gets a list of workflows by resource group.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkflowListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkflowListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkflowListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkflowListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.WorkflowListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkflowListResult>): void;


    /**
     * Gets a workflow.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Workflow>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, workflowName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Workflow>>;

    /**
     * Gets a workflow.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Workflow} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Workflow} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Workflow} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, workflowName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Workflow>;
    get(resourceGroupName: string, workflowName: string, callback: ServiceCallback<models.Workflow>): void;
    get(resourceGroupName: string, workflowName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Workflow>): void;


    /**
     * Creates or updates a workflow.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {object} workflow The workflow.
     *
     * @param {string} [workflow.state] The state. Possible values include:
     * 'NotSpecified', 'Completed', 'Enabled', 'Disabled', 'Deleted', 'Suspended'
     *
     * @param {object} [workflow.sku] The sku.
     *
     * @param {string} workflow.sku.name The name. Possible values include:
     * 'NotSpecified', 'Free', 'Shared', 'Basic', 'Standard', 'Premium'
     *
     * @param {object} [workflow.sku.plan] The reference to plan.
     *
     * @param {object} [workflow.integrationAccount] The integration account.
     *
     * @param {object} [workflow.definition] The definition.
     *
     * @param {object} [workflow.parameters] The parameters.
     *
     * @param {string} [workflow.location] The resource location.
     *
     * @param {object} [workflow.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Workflow>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, workflowName: string, workflow: models.Workflow, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Workflow>>;

    /**
     * Creates or updates a workflow.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {object} workflow The workflow.
     *
     * @param {string} [workflow.state] The state. Possible values include:
     * 'NotSpecified', 'Completed', 'Enabled', 'Disabled', 'Deleted', 'Suspended'
     *
     * @param {object} [workflow.sku] The sku.
     *
     * @param {string} workflow.sku.name The name. Possible values include:
     * 'NotSpecified', 'Free', 'Shared', 'Basic', 'Standard', 'Premium'
     *
     * @param {object} [workflow.sku.plan] The reference to plan.
     *
     * @param {object} [workflow.integrationAccount] The integration account.
     *
     * @param {object} [workflow.definition] The definition.
     *
     * @param {object} [workflow.parameters] The parameters.
     *
     * @param {string} [workflow.location] The resource location.
     *
     * @param {object} [workflow.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Workflow} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Workflow} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Workflow} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, workflowName: string, workflow: models.Workflow, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Workflow>;
    createOrUpdate(resourceGroupName: string, workflowName: string, workflow: models.Workflow, callback: ServiceCallback<models.Workflow>): void;
    createOrUpdate(resourceGroupName: string, workflowName: string, workflow: models.Workflow, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Workflow>): void;


    /**
     * Updates a workflow.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {object} workflow The workflow.
     *
     * @param {string} [workflow.state] The state. Possible values include:
     * 'NotSpecified', 'Completed', 'Enabled', 'Disabled', 'Deleted', 'Suspended'
     *
     * @param {object} [workflow.sku] The sku.
     *
     * @param {string} workflow.sku.name The name. Possible values include:
     * 'NotSpecified', 'Free', 'Shared', 'Basic', 'Standard', 'Premium'
     *
     * @param {object} [workflow.sku.plan] The reference to plan.
     *
     * @param {object} [workflow.integrationAccount] The integration account.
     *
     * @param {object} [workflow.definition] The definition.
     *
     * @param {object} [workflow.parameters] The parameters.
     *
     * @param {string} [workflow.location] The resource location.
     *
     * @param {object} [workflow.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Workflow>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, workflowName: string, workflow: models.Workflow, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Workflow>>;

    /**
     * Updates a workflow.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {object} workflow The workflow.
     *
     * @param {string} [workflow.state] The state. Possible values include:
     * 'NotSpecified', 'Completed', 'Enabled', 'Disabled', 'Deleted', 'Suspended'
     *
     * @param {object} [workflow.sku] The sku.
     *
     * @param {string} workflow.sku.name The name. Possible values include:
     * 'NotSpecified', 'Free', 'Shared', 'Basic', 'Standard', 'Premium'
     *
     * @param {object} [workflow.sku.plan] The reference to plan.
     *
     * @param {object} [workflow.integrationAccount] The integration account.
     *
     * @param {object} [workflow.definition] The definition.
     *
     * @param {object} [workflow.parameters] The parameters.
     *
     * @param {string} [workflow.location] The resource location.
     *
     * @param {object} [workflow.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Workflow} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Workflow} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Workflow} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, workflowName: string, workflow: models.Workflow, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Workflow>;
    update(resourceGroupName: string, workflowName: string, workflow: models.Workflow, callback: ServiceCallback<models.Workflow>): void;
    update(resourceGroupName: string, workflowName: string, workflow: models.Workflow, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Workflow>): void;


    /**
     * Deletes a workflow.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, workflowName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a workflow.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, workflowName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, workflowName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, workflowName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Disables a workflow.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    disableWithHttpOperationResponse(resourceGroupName: string, workflowName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Disables a workflow.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    disable(resourceGroupName: string, workflowName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    disable(resourceGroupName: string, workflowName: string, callback: ServiceCallback<void>): void;
    disable(resourceGroupName: string, workflowName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Enables a workflow.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    enableWithHttpOperationResponse(resourceGroupName: string, workflowName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Enables a workflow.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    enable(resourceGroupName: string, workflowName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    enable(resourceGroupName: string, workflowName: string, callback: ServiceCallback<void>): void;
    enable(resourceGroupName: string, workflowName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Generates the upgraded definition for a workflow.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {object} parameters Parameters for generating an upgraded definition.
     *
     * @param {string} [parameters.targetSchemaVersion] The target schema version.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    generateUpgradedDefinitionWithHttpOperationResponse(resourceGroupName: string, workflowName: string, parameters: models.GenerateUpgradedDefinitionParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Generates the upgraded definition for a workflow.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {object} parameters Parameters for generating an upgraded definition.
     *
     * @param {string} [parameters.targetSchemaVersion] The target schema version.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    generateUpgradedDefinition(resourceGroupName: string, workflowName: string, parameters: models.GenerateUpgradedDefinitionParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    generateUpgradedDefinition(resourceGroupName: string, workflowName: string, parameters: models.GenerateUpgradedDefinitionParameters, callback: ServiceCallback<any>): void;
    generateUpgradedDefinition(resourceGroupName: string, workflowName: string, parameters: models.GenerateUpgradedDefinitionParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets an OpenAPI definition for the workflow.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSwaggerWithHttpOperationResponse(resourceGroupName: string, workflowName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Gets an OpenAPI definition for the workflow.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSwagger(resourceGroupName: string, workflowName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    listSwagger(resourceGroupName: string, workflowName: string, callback: ServiceCallback<any>): void;
    listSwagger(resourceGroupName: string, workflowName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Regenerates the callback URL access key for request triggers.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {object} keyType The access key type.
     *
     * @param {string} [keyType.keyType] The key type. Possible values include:
     * 'NotSpecified', 'Primary', 'Secondary'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regenerateAccessKeyWithHttpOperationResponse(resourceGroupName: string, workflowName: string, keyType: models.RegenerateActionParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Regenerates the callback URL access key for request triggers.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {object} keyType The access key type.
     *
     * @param {string} [keyType.keyType] The key type. Possible values include:
     * 'NotSpecified', 'Primary', 'Secondary'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regenerateAccessKey(resourceGroupName: string, workflowName: string, keyType: models.RegenerateActionParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    regenerateAccessKey(resourceGroupName: string, workflowName: string, keyType: models.RegenerateActionParameter, callback: ServiceCallback<void>): void;
    regenerateAccessKey(resourceGroupName: string, workflowName: string, keyType: models.RegenerateActionParameter, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Validates the workflow definition.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} location The workflow location.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {object} workflow The workflow definition.
     *
     * @param {string} [workflow.state] The state. Possible values include:
     * 'NotSpecified', 'Completed', 'Enabled', 'Disabled', 'Deleted', 'Suspended'
     *
     * @param {object} [workflow.sku] The sku.
     *
     * @param {string} workflow.sku.name The name. Possible values include:
     * 'NotSpecified', 'Free', 'Shared', 'Basic', 'Standard', 'Premium'
     *
     * @param {object} [workflow.sku.plan] The reference to plan.
     *
     * @param {object} [workflow.integrationAccount] The integration account.
     *
     * @param {object} [workflow.definition] The definition.
     *
     * @param {object} [workflow.parameters] The parameters.
     *
     * @param {string} [workflow.location] The resource location.
     *
     * @param {object} [workflow.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    validateWithHttpOperationResponse(resourceGroupName: string, location: string, workflowName: string, workflow: models.Workflow, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Validates the workflow definition.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} location The workflow location.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {object} workflow The workflow definition.
     *
     * @param {string} [workflow.state] The state. Possible values include:
     * 'NotSpecified', 'Completed', 'Enabled', 'Disabled', 'Deleted', 'Suspended'
     *
     * @param {object} [workflow.sku] The sku.
     *
     * @param {string} workflow.sku.name The name. Possible values include:
     * 'NotSpecified', 'Free', 'Shared', 'Basic', 'Standard', 'Premium'
     *
     * @param {object} [workflow.sku.plan] The reference to plan.
     *
     * @param {object} [workflow.integrationAccount] The integration account.
     *
     * @param {object} [workflow.definition] The definition.
     *
     * @param {object} [workflow.parameters] The parameters.
     *
     * @param {string} [workflow.location] The resource location.
     *
     * @param {object} [workflow.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    validate(resourceGroupName: string, location: string, workflowName: string, workflow: models.Workflow, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    validate(resourceGroupName: string, location: string, workflowName: string, workflow: models.Workflow, callback: ServiceCallback<void>): void;
    validate(resourceGroupName: string, location: string, workflowName: string, workflow: models.Workflow, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a list of workflows by subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkflowListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkflowListResult>>;

    /**
     * Gets a list of workflows by subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkflowListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkflowListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkflowListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscriptionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkflowListResult>;
    listBySubscriptionNext(nextPageLink: string, callback: ServiceCallback<models.WorkflowListResult>): void;
    listBySubscriptionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkflowListResult>): void;


    /**
     * Gets a list of workflows by resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkflowListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkflowListResult>>;

    /**
     * Gets a list of workflows by resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkflowListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkflowListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkflowListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkflowListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.WorkflowListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkflowListResult>): void;
}

/**
 * @class
 * WorkflowVersions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the LogicManagementClient.
 */
export interface WorkflowVersions {


    /**
     * Gets a list of workflow versions.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkflowVersionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, workflowName: string, options?: { top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkflowVersionListResult>>;

    /**
     * Gets a list of workflow versions.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkflowVersionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkflowVersionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkflowVersionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, workflowName: string, options?: { top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkflowVersionListResult>;
    list(resourceGroupName: string, workflowName: string, callback: ServiceCallback<models.WorkflowVersionListResult>): void;
    list(resourceGroupName: string, workflowName: string, options: { top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkflowVersionListResult>): void;


    /**
     * Gets a workflow version.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {string} versionId The workflow versionId.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkflowVersion>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, workflowName: string, versionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkflowVersion>>;

    /**
     * Gets a workflow version.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {string} versionId The workflow versionId.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkflowVersion} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkflowVersion} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkflowVersion} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, workflowName: string, versionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkflowVersion>;
    get(resourceGroupName: string, workflowName: string, versionId: string, callback: ServiceCallback<models.WorkflowVersion>): void;
    get(resourceGroupName: string, workflowName: string, versionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkflowVersion>): void;


    /**
     * Lists the callback URL for a trigger of a workflow version.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {string} versionId The workflow versionId.
     *
     * @param {string} triggerName The workflow trigger name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.parameters] The callback URL parameters.
     *
     * @param {date} [options.parameters.notAfter] The expiry time.
     *
     * @param {string} [options.parameters.keyType] The key type. Possible values
     * include: 'NotSpecified', 'Primary', 'Secondary'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkflowTriggerCallbackUrl>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listCallbackUrlWithHttpOperationResponse(resourceGroupName: string, workflowName: string, versionId: string, triggerName: string, options?: { parameters? : models.GetCallbackUrlParameters, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkflowTriggerCallbackUrl>>;

    /**
     * Lists the callback URL for a trigger of a workflow version.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {string} versionId The workflow versionId.
     *
     * @param {string} triggerName The workflow trigger name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.parameters] The callback URL parameters.
     *
     * @param {date} [options.parameters.notAfter] The expiry time.
     *
     * @param {string} [options.parameters.keyType] The key type. Possible values
     * include: 'NotSpecified', 'Primary', 'Secondary'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkflowTriggerCallbackUrl} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkflowTriggerCallbackUrl} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkflowTriggerCallbackUrl} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listCallbackUrl(resourceGroupName: string, workflowName: string, versionId: string, triggerName: string, options?: { parameters? : models.GetCallbackUrlParameters, customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkflowTriggerCallbackUrl>;
    listCallbackUrl(resourceGroupName: string, workflowName: string, versionId: string, triggerName: string, callback: ServiceCallback<models.WorkflowTriggerCallbackUrl>): void;
    listCallbackUrl(resourceGroupName: string, workflowName: string, versionId: string, triggerName: string, options: { parameters? : models.GetCallbackUrlParameters, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkflowTriggerCallbackUrl>): void;


    /**
     * Gets a list of workflow versions.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkflowVersionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkflowVersionListResult>>;

    /**
     * Gets a list of workflow versions.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkflowVersionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkflowVersionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkflowVersionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkflowVersionListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.WorkflowVersionListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkflowVersionListResult>): void;
}

/**
 * @class
 * WorkflowTriggers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the LogicManagementClient.
 */
export interface WorkflowTriggers {


    /**
     * Gets a list of workflow triggers.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkflowTriggerListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, workflowName: string, options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkflowTriggerListResult>>;

    /**
     * Gets a list of workflow triggers.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkflowTriggerListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkflowTriggerListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkflowTriggerListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, workflowName: string, options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkflowTriggerListResult>;
    list(resourceGroupName: string, workflowName: string, callback: ServiceCallback<models.WorkflowTriggerListResult>): void;
    list(resourceGroupName: string, workflowName: string, options: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkflowTriggerListResult>): void;


    /**
     * Gets a workflow trigger.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {string} triggerName The workflow trigger name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkflowTrigger>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, workflowName: string, triggerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkflowTrigger>>;

    /**
     * Gets a workflow trigger.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {string} triggerName The workflow trigger name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkflowTrigger} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkflowTrigger} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkflowTrigger} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, workflowName: string, triggerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkflowTrigger>;
    get(resourceGroupName: string, workflowName: string, triggerName: string, callback: ServiceCallback<models.WorkflowTrigger>): void;
    get(resourceGroupName: string, workflowName: string, triggerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkflowTrigger>): void;


    /**
     * Runs a workflow trigger.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {string} triggerName The workflow trigger name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    runWithHttpOperationResponse(resourceGroupName: string, workflowName: string, triggerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Runs a workflow trigger.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {string} triggerName The workflow trigger name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    run(resourceGroupName: string, workflowName: string, triggerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    run(resourceGroupName: string, workflowName: string, triggerName: string, callback: ServiceCallback<any>): void;
    run(resourceGroupName: string, workflowName: string, triggerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Gets the callback URL for a workflow trigger.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {string} triggerName The workflow trigger name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkflowTriggerCallbackUrl>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listCallbackUrlWithHttpOperationResponse(resourceGroupName: string, workflowName: string, triggerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkflowTriggerCallbackUrl>>;

    /**
     * Gets the callback URL for a workflow trigger.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {string} triggerName The workflow trigger name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkflowTriggerCallbackUrl} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkflowTriggerCallbackUrl} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkflowTriggerCallbackUrl} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listCallbackUrl(resourceGroupName: string, workflowName: string, triggerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkflowTriggerCallbackUrl>;
    listCallbackUrl(resourceGroupName: string, workflowName: string, triggerName: string, callback: ServiceCallback<models.WorkflowTriggerCallbackUrl>): void;
    listCallbackUrl(resourceGroupName: string, workflowName: string, triggerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkflowTriggerCallbackUrl>): void;


    /**
     * Gets a list of workflow triggers.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkflowTriggerListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkflowTriggerListResult>>;

    /**
     * Gets a list of workflow triggers.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkflowTriggerListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkflowTriggerListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkflowTriggerListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkflowTriggerListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.WorkflowTriggerListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkflowTriggerListResult>): void;
}

/**
 * @class
 * WorkflowTriggerHistories
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the LogicManagementClient.
 */
export interface WorkflowTriggerHistories {


    /**
     * Gets a list of workflow trigger histories.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {string} triggerName The workflow trigger name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkflowTriggerHistoryListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, workflowName: string, triggerName: string, options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkflowTriggerHistoryListResult>>;

    /**
     * Gets a list of workflow trigger histories.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {string} triggerName The workflow trigger name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkflowTriggerHistoryListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkflowTriggerHistoryListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkflowTriggerHistoryListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, workflowName: string, triggerName: string, options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkflowTriggerHistoryListResult>;
    list(resourceGroupName: string, workflowName: string, triggerName: string, callback: ServiceCallback<models.WorkflowTriggerHistoryListResult>): void;
    list(resourceGroupName: string, workflowName: string, triggerName: string, options: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkflowTriggerHistoryListResult>): void;


    /**
     * Gets a workflow trigger history.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {string} triggerName The workflow trigger name.
     *
     * @param {string} historyName The workflow trigger history name. Corresponds
     * to the run name for triggers that resulted in a run.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkflowTriggerHistory>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, workflowName: string, triggerName: string, historyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkflowTriggerHistory>>;

    /**
     * Gets a workflow trigger history.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {string} triggerName The workflow trigger name.
     *
     * @param {string} historyName The workflow trigger history name. Corresponds
     * to the run name for triggers that resulted in a run.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkflowTriggerHistory} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkflowTriggerHistory} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkflowTriggerHistory} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, workflowName: string, triggerName: string, historyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkflowTriggerHistory>;
    get(resourceGroupName: string, workflowName: string, triggerName: string, historyName: string, callback: ServiceCallback<models.WorkflowTriggerHistory>): void;
    get(resourceGroupName: string, workflowName: string, triggerName: string, historyName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkflowTriggerHistory>): void;


    /**
     * Resubmits a workflow run based on the trigger history.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {string} triggerName The workflow trigger name.
     *
     * @param {string} historyName The workflow trigger history name. Corresponds
     * to the run name for triggers that resulted in a run.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    resubmitWithHttpOperationResponse(resourceGroupName: string, workflowName: string, triggerName: string, historyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Resubmits a workflow run based on the trigger history.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {string} triggerName The workflow trigger name.
     *
     * @param {string} historyName The workflow trigger history name. Corresponds
     * to the run name for triggers that resulted in a run.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    resubmit(resourceGroupName: string, workflowName: string, triggerName: string, historyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    resubmit(resourceGroupName: string, workflowName: string, triggerName: string, historyName: string, callback: ServiceCallback<void>): void;
    resubmit(resourceGroupName: string, workflowName: string, triggerName: string, historyName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a list of workflow trigger histories.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkflowTriggerHistoryListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkflowTriggerHistoryListResult>>;

    /**
     * Gets a list of workflow trigger histories.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkflowTriggerHistoryListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkflowTriggerHistoryListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkflowTriggerHistoryListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkflowTriggerHistoryListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.WorkflowTriggerHistoryListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkflowTriggerHistoryListResult>): void;
}

/**
 * @class
 * WorkflowRuns
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the LogicManagementClient.
 */
export interface WorkflowRuns {


    /**
     * Gets a list of workflow runs.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkflowRunListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, workflowName: string, options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkflowRunListResult>>;

    /**
     * Gets a list of workflow runs.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkflowRunListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkflowRunListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkflowRunListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, workflowName: string, options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkflowRunListResult>;
    list(resourceGroupName: string, workflowName: string, callback: ServiceCallback<models.WorkflowRunListResult>): void;
    list(resourceGroupName: string, workflowName: string, options: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkflowRunListResult>): void;


    /**
     * Gets a workflow run.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {string} runName The workflow run name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkflowRun>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, workflowName: string, runName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkflowRun>>;

    /**
     * Gets a workflow run.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {string} runName The workflow run name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkflowRun} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkflowRun} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkflowRun} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, workflowName: string, runName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkflowRun>;
    get(resourceGroupName: string, workflowName: string, runName: string, callback: ServiceCallback<models.WorkflowRun>): void;
    get(resourceGroupName: string, workflowName: string, runName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkflowRun>): void;


    /**
     * Cancels a workflow run.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {string} runName The workflow run name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    cancelWithHttpOperationResponse(resourceGroupName: string, workflowName: string, runName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Cancels a workflow run.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {string} runName The workflow run name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    cancel(resourceGroupName: string, workflowName: string, runName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    cancel(resourceGroupName: string, workflowName: string, runName: string, callback: ServiceCallback<void>): void;
    cancel(resourceGroupName: string, workflowName: string, runName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a list of workflow runs.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkflowRunListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkflowRunListResult>>;

    /**
     * Gets a list of workflow runs.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkflowRunListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkflowRunListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkflowRunListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkflowRunListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.WorkflowRunListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkflowRunListResult>): void;
}

/**
 * @class
 * WorkflowRunActions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the LogicManagementClient.
 */
export interface WorkflowRunActions {


    /**
     * Gets a list of workflow run actions.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {string} runName The workflow run name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkflowRunActionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, workflowName: string, runName: string, options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkflowRunActionListResult>>;

    /**
     * Gets a list of workflow run actions.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {string} runName The workflow run name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkflowRunActionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkflowRunActionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkflowRunActionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, workflowName: string, runName: string, options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkflowRunActionListResult>;
    list(resourceGroupName: string, workflowName: string, runName: string, callback: ServiceCallback<models.WorkflowRunActionListResult>): void;
    list(resourceGroupName: string, workflowName: string, runName: string, options: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkflowRunActionListResult>): void;


    /**
     * Gets a workflow run action.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {string} runName The workflow run name.
     *
     * @param {string} actionName The workflow action name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkflowRunAction>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, workflowName: string, runName: string, actionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkflowRunAction>>;

    /**
     * Gets a workflow run action.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} workflowName The workflow name.
     *
     * @param {string} runName The workflow run name.
     *
     * @param {string} actionName The workflow action name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkflowRunAction} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkflowRunAction} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkflowRunAction} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, workflowName: string, runName: string, actionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkflowRunAction>;
    get(resourceGroupName: string, workflowName: string, runName: string, actionName: string, callback: ServiceCallback<models.WorkflowRunAction>): void;
    get(resourceGroupName: string, workflowName: string, runName: string, actionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkflowRunAction>): void;


    /**
     * Gets a list of workflow run actions.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkflowRunActionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkflowRunActionListResult>>;

    /**
     * Gets a list of workflow run actions.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkflowRunActionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkflowRunActionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkflowRunActionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkflowRunActionListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.WorkflowRunActionListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkflowRunActionListResult>): void;
}

/**
 * @class
 * IntegrationAccounts
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the LogicManagementClient.
 */
export interface IntegrationAccounts {


    /**
     * Gets a list of integration accounts by subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccountListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionWithHttpOperationResponse(options?: { top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccountListResult>>;

    /**
     * Gets a list of integration accounts by subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccountListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccountListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccountListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscription(options?: { top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccountListResult>;
    listBySubscription(callback: ServiceCallback<models.IntegrationAccountListResult>): void;
    listBySubscription(options: { top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccountListResult>): void;


    /**
     * Gets a list of integration accounts by resource group.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccountListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccountListResult>>;

    /**
     * Gets a list of integration accounts by resource group.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccountListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccountListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccountListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccountListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.IntegrationAccountListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccountListResult>): void;


    /**
     * Gets an integration account.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccount>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccount>>;

    /**
     * Gets an integration account.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccount} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccount} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccount} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, integrationAccountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccount>;
    get(resourceGroupName: string, integrationAccountName: string, callback: ServiceCallback<models.IntegrationAccount>): void;
    get(resourceGroupName: string, integrationAccountName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccount>): void;


    /**
     * Creates or updates an integration account.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {object} integrationAccount The integration account.
     *
     * @param {object} [integrationAccount.properties] The integration account
     * properties.
     *
     * @param {object} [integrationAccount.sku] The sku.
     *
     * @param {string} integrationAccount.sku.name The sku name. Possible values
     * include: 'NotSpecified', 'Free', 'Standard'
     *
     * @param {string} [integrationAccount.location] The resource location.
     *
     * @param {object} [integrationAccount.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccount>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, integrationAccount: models.IntegrationAccount, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccount>>;

    /**
     * Creates or updates an integration account.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {object} integrationAccount The integration account.
     *
     * @param {object} [integrationAccount.properties] The integration account
     * properties.
     *
     * @param {object} [integrationAccount.sku] The sku.
     *
     * @param {string} integrationAccount.sku.name The sku name. Possible values
     * include: 'NotSpecified', 'Free', 'Standard'
     *
     * @param {string} [integrationAccount.location] The resource location.
     *
     * @param {object} [integrationAccount.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccount} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccount} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccount} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, integrationAccount: models.IntegrationAccount, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccount>;
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, integrationAccount: models.IntegrationAccount, callback: ServiceCallback<models.IntegrationAccount>): void;
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, integrationAccount: models.IntegrationAccount, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccount>): void;


    /**
     * Updates an integration account.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {object} integrationAccount The integration account.
     *
     * @param {object} [integrationAccount.properties] The integration account
     * properties.
     *
     * @param {object} [integrationAccount.sku] The sku.
     *
     * @param {string} integrationAccount.sku.name The sku name. Possible values
     * include: 'NotSpecified', 'Free', 'Standard'
     *
     * @param {string} [integrationAccount.location] The resource location.
     *
     * @param {object} [integrationAccount.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccount>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, integrationAccount: models.IntegrationAccount, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccount>>;

    /**
     * Updates an integration account.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {object} integrationAccount The integration account.
     *
     * @param {object} [integrationAccount.properties] The integration account
     * properties.
     *
     * @param {object} [integrationAccount.sku] The sku.
     *
     * @param {string} integrationAccount.sku.name The sku name. Possible values
     * include: 'NotSpecified', 'Free', 'Standard'
     *
     * @param {string} [integrationAccount.location] The resource location.
     *
     * @param {object} [integrationAccount.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccount} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccount} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccount} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, integrationAccountName: string, integrationAccount: models.IntegrationAccount, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccount>;
    update(resourceGroupName: string, integrationAccountName: string, integrationAccount: models.IntegrationAccount, callback: ServiceCallback<models.IntegrationAccount>): void;
    update(resourceGroupName: string, integrationAccountName: string, integrationAccount: models.IntegrationAccount, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccount>): void;


    /**
     * Deletes an integration account.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an integration account.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, integrationAccountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, integrationAccountName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, integrationAccountName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the integration account callback URL.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {object} parameters The callback URL parameters.
     *
     * @param {date} [parameters.notAfter] The expiry time.
     *
     * @param {string} [parameters.keyType] The key type. Possible values include:
     * 'NotSpecified', 'Primary', 'Secondary'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CallbackUrl>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getCallbackUrlWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, parameters: models.GetCallbackUrlParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CallbackUrl>>;

    /**
     * Gets the integration account callback URL.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {object} parameters The callback URL parameters.
     *
     * @param {date} [parameters.notAfter] The expiry time.
     *
     * @param {string} [parameters.keyType] The key type. Possible values include:
     * 'NotSpecified', 'Primary', 'Secondary'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CallbackUrl} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CallbackUrl} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CallbackUrl} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getCallbackUrl(resourceGroupName: string, integrationAccountName: string, parameters: models.GetCallbackUrlParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CallbackUrl>;
    getCallbackUrl(resourceGroupName: string, integrationAccountName: string, parameters: models.GetCallbackUrlParameters, callback: ServiceCallback<models.CallbackUrl>): void;
    getCallbackUrl(resourceGroupName: string, integrationAccountName: string, parameters: models.GetCallbackUrlParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CallbackUrl>): void;


    /**
     * Gets a list of integration accounts by subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccountListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccountListResult>>;

    /**
     * Gets a list of integration accounts by subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccountListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccountListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccountListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscriptionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccountListResult>;
    listBySubscriptionNext(nextPageLink: string, callback: ServiceCallback<models.IntegrationAccountListResult>): void;
    listBySubscriptionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccountListResult>): void;


    /**
     * Gets a list of integration accounts by resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccountListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccountListResult>>;

    /**
     * Gets a list of integration accounts by resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccountListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccountListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccountListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccountListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.IntegrationAccountListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccountListResult>): void;
}

/**
 * @class
 * Schemas
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the LogicManagementClient.
 */
export interface Schemas {


    /**
     * Gets a list of integration account schemas.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccountSchemaListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByIntegrationAccountsWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccountSchemaListResult>>;

    /**
     * Gets a list of integration account schemas.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccountSchemaListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccountSchemaListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccountSchemaListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByIntegrationAccounts(resourceGroupName: string, integrationAccountName: string, options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccountSchemaListResult>;
    listByIntegrationAccounts(resourceGroupName: string, integrationAccountName: string, callback: ServiceCallback<models.IntegrationAccountSchemaListResult>): void;
    listByIntegrationAccounts(resourceGroupName: string, integrationAccountName: string, options: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccountSchemaListResult>): void;


    /**
     * Gets an integration account schema.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} schemaName The integration account schema name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccountSchema>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, schemaName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccountSchema>>;

    /**
     * Gets an integration account schema.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} schemaName The integration account schema name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccountSchema} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccountSchema} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccountSchema} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, integrationAccountName: string, schemaName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccountSchema>;
    get(resourceGroupName: string, integrationAccountName: string, schemaName: string, callback: ServiceCallback<models.IntegrationAccountSchema>): void;
    get(resourceGroupName: string, integrationAccountName: string, schemaName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccountSchema>): void;


    /**
     * Creates or updates an integration account schema.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} schemaName The integration account schema name.
     *
     * @param {object} schema The integration account schema.
     *
     * @param {string} schema.schemaType The schema type. Possible values include:
     * 'NotSpecified', 'Xml'
     *
     * @param {string} [schema.targetNamespace] The target namespace of the schema.
     *
     * @param {string} [schema.documentName] The document name.
     *
     * @param {string} [schema.fileName] The file name.
     *
     * @param {object} [schema.metadata] The metadata.
     *
     * @param {string} [schema.content] The content.
     *
     * @param {string} [schema.contentType] The content type.
     *
     * @param {string} [schema.location] The resource location.
     *
     * @param {object} [schema.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccountSchema>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, schemaName: string, schema: models.IntegrationAccountSchema, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccountSchema>>;

    /**
     * Creates or updates an integration account schema.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} schemaName The integration account schema name.
     *
     * @param {object} schema The integration account schema.
     *
     * @param {string} schema.schemaType The schema type. Possible values include:
     * 'NotSpecified', 'Xml'
     *
     * @param {string} [schema.targetNamespace] The target namespace of the schema.
     *
     * @param {string} [schema.documentName] The document name.
     *
     * @param {string} [schema.fileName] The file name.
     *
     * @param {object} [schema.metadata] The metadata.
     *
     * @param {string} [schema.content] The content.
     *
     * @param {string} [schema.contentType] The content type.
     *
     * @param {string} [schema.location] The resource location.
     *
     * @param {object} [schema.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccountSchema} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccountSchema} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccountSchema} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, schemaName: string, schema: models.IntegrationAccountSchema, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccountSchema>;
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, schemaName: string, schema: models.IntegrationAccountSchema, callback: ServiceCallback<models.IntegrationAccountSchema>): void;
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, schemaName: string, schema: models.IntegrationAccountSchema, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccountSchema>): void;


    /**
     * Deletes an integration account schema.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} schemaName The integration account schema name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, schemaName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an integration account schema.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} schemaName The integration account schema name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, integrationAccountName: string, schemaName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, integrationAccountName: string, schemaName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, integrationAccountName: string, schemaName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a list of integration account schemas.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccountSchemaListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByIntegrationAccountsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccountSchemaListResult>>;

    /**
     * Gets a list of integration account schemas.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccountSchemaListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccountSchemaListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccountSchemaListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByIntegrationAccountsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccountSchemaListResult>;
    listByIntegrationAccountsNext(nextPageLink: string, callback: ServiceCallback<models.IntegrationAccountSchemaListResult>): void;
    listByIntegrationAccountsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccountSchemaListResult>): void;
}

/**
 * @class
 * Maps
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the LogicManagementClient.
 */
export interface Maps {


    /**
     * Gets a list of integration account maps.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccountMapListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByIntegrationAccountsWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccountMapListResult>>;

    /**
     * Gets a list of integration account maps.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccountMapListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccountMapListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccountMapListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByIntegrationAccounts(resourceGroupName: string, integrationAccountName: string, options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccountMapListResult>;
    listByIntegrationAccounts(resourceGroupName: string, integrationAccountName: string, callback: ServiceCallback<models.IntegrationAccountMapListResult>): void;
    listByIntegrationAccounts(resourceGroupName: string, integrationAccountName: string, options: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccountMapListResult>): void;


    /**
     * Gets an integration account map.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} mapName The integration account map name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccountMap>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, mapName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccountMap>>;

    /**
     * Gets an integration account map.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} mapName The integration account map name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccountMap} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccountMap} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccountMap} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, integrationAccountName: string, mapName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccountMap>;
    get(resourceGroupName: string, integrationAccountName: string, mapName: string, callback: ServiceCallback<models.IntegrationAccountMap>): void;
    get(resourceGroupName: string, integrationAccountName: string, mapName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccountMap>): void;


    /**
     * Creates or updates an integration account map.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} mapName The integration account map name.
     *
     * @param {object} map The integration account map.
     *
     * @param {string} map.mapType The map type. Possible values include:
     * 'NotSpecified', 'Xslt'
     *
     * @param {object} [map.parametersSchema] The parameters schema of integration
     * account map.
     *
     * @param {string} [map.parametersSchema.ref] The reference name.
     *
     * @param {string} [map.content] The content.
     *
     * @param {string} [map.contentType] The content type.
     *
     * @param {object} [map.metadata] The metadata.
     *
     * @param {string} [map.location] The resource location.
     *
     * @param {object} [map.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccountMap>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, mapName: string, map: models.IntegrationAccountMap, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccountMap>>;

    /**
     * Creates or updates an integration account map.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} mapName The integration account map name.
     *
     * @param {object} map The integration account map.
     *
     * @param {string} map.mapType The map type. Possible values include:
     * 'NotSpecified', 'Xslt'
     *
     * @param {object} [map.parametersSchema] The parameters schema of integration
     * account map.
     *
     * @param {string} [map.parametersSchema.ref] The reference name.
     *
     * @param {string} [map.content] The content.
     *
     * @param {string} [map.contentType] The content type.
     *
     * @param {object} [map.metadata] The metadata.
     *
     * @param {string} [map.location] The resource location.
     *
     * @param {object} [map.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccountMap} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccountMap} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccountMap} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, mapName: string, map: models.IntegrationAccountMap, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccountMap>;
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, mapName: string, map: models.IntegrationAccountMap, callback: ServiceCallback<models.IntegrationAccountMap>): void;
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, mapName: string, map: models.IntegrationAccountMap, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccountMap>): void;


    /**
     * Deletes an integration account map.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} mapName The integration account map name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, mapName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an integration account map.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} mapName The integration account map name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, integrationAccountName: string, mapName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, integrationAccountName: string, mapName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, integrationAccountName: string, mapName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a list of integration account maps.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccountMapListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByIntegrationAccountsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccountMapListResult>>;

    /**
     * Gets a list of integration account maps.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccountMapListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccountMapListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccountMapListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByIntegrationAccountsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccountMapListResult>;
    listByIntegrationAccountsNext(nextPageLink: string, callback: ServiceCallback<models.IntegrationAccountMapListResult>): void;
    listByIntegrationAccountsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccountMapListResult>): void;
}

/**
 * @class
 * Partners
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the LogicManagementClient.
 */
export interface Partners {


    /**
     * Gets a list of integration account partners.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccountPartnerListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByIntegrationAccountsWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccountPartnerListResult>>;

    /**
     * Gets a list of integration account partners.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccountPartnerListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccountPartnerListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccountPartnerListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByIntegrationAccounts(resourceGroupName: string, integrationAccountName: string, options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccountPartnerListResult>;
    listByIntegrationAccounts(resourceGroupName: string, integrationAccountName: string, callback: ServiceCallback<models.IntegrationAccountPartnerListResult>): void;
    listByIntegrationAccounts(resourceGroupName: string, integrationAccountName: string, options: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccountPartnerListResult>): void;


    /**
     * Gets an integration account partner.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} partnerName The integration account partner name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccountPartner>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, partnerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccountPartner>>;

    /**
     * Gets an integration account partner.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} partnerName The integration account partner name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccountPartner} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccountPartner} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccountPartner} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, integrationAccountName: string, partnerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccountPartner>;
    get(resourceGroupName: string, integrationAccountName: string, partnerName: string, callback: ServiceCallback<models.IntegrationAccountPartner>): void;
    get(resourceGroupName: string, integrationAccountName: string, partnerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccountPartner>): void;


    /**
     * Creates or updates an integration account partner.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} partnerName The integration account partner name.
     *
     * @param {object} partner The integration account partner.
     *
     * @param {string} partner.partnerType The partner type. Possible values
     * include: 'NotSpecified', 'B2B'
     *
     * @param {object} [partner.metadata] The metadata.
     *
     * @param {object} partner.content The partner content.
     *
     * @param {object} [partner.content.b2b] The B2B partner content.
     *
     * @param {array} [partner.content.b2b.businessIdentities] The list of partner
     * business identities.
     *
     * @param {string} [partner.location] The resource location.
     *
     * @param {object} [partner.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccountPartner>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, partnerName: string, partner: models.IntegrationAccountPartner, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccountPartner>>;

    /**
     * Creates or updates an integration account partner.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} partnerName The integration account partner name.
     *
     * @param {object} partner The integration account partner.
     *
     * @param {string} partner.partnerType The partner type. Possible values
     * include: 'NotSpecified', 'B2B'
     *
     * @param {object} [partner.metadata] The metadata.
     *
     * @param {object} partner.content The partner content.
     *
     * @param {object} [partner.content.b2b] The B2B partner content.
     *
     * @param {array} [partner.content.b2b.businessIdentities] The list of partner
     * business identities.
     *
     * @param {string} [partner.location] The resource location.
     *
     * @param {object} [partner.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccountPartner} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccountPartner} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccountPartner} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, partnerName: string, partner: models.IntegrationAccountPartner, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccountPartner>;
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, partnerName: string, partner: models.IntegrationAccountPartner, callback: ServiceCallback<models.IntegrationAccountPartner>): void;
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, partnerName: string, partner: models.IntegrationAccountPartner, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccountPartner>): void;


    /**
     * Deletes an integration account partner.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} partnerName The integration account partner name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, partnerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an integration account partner.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} partnerName The integration account partner name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, integrationAccountName: string, partnerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, integrationAccountName: string, partnerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, integrationAccountName: string, partnerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a list of integration account partners.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccountPartnerListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByIntegrationAccountsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccountPartnerListResult>>;

    /**
     * Gets a list of integration account partners.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccountPartnerListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccountPartnerListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccountPartnerListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByIntegrationAccountsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccountPartnerListResult>;
    listByIntegrationAccountsNext(nextPageLink: string, callback: ServiceCallback<models.IntegrationAccountPartnerListResult>): void;
    listByIntegrationAccountsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccountPartnerListResult>): void;
}

/**
 * @class
 * Agreements
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the LogicManagementClient.
 */
export interface Agreements {


    /**
     * Gets a list of integration account agreements.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccountAgreementListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByIntegrationAccountsWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccountAgreementListResult>>;

    /**
     * Gets a list of integration account agreements.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccountAgreementListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccountAgreementListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccountAgreementListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByIntegrationAccounts(resourceGroupName: string, integrationAccountName: string, options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccountAgreementListResult>;
    listByIntegrationAccounts(resourceGroupName: string, integrationAccountName: string, callback: ServiceCallback<models.IntegrationAccountAgreementListResult>): void;
    listByIntegrationAccounts(resourceGroupName: string, integrationAccountName: string, options: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccountAgreementListResult>): void;


    /**
     * Gets an integration account agreement.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} agreementName The integration account agreement name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccountAgreement>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, agreementName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccountAgreement>>;

    /**
     * Gets an integration account agreement.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} agreementName The integration account agreement name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccountAgreement} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccountAgreement} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccountAgreement} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, integrationAccountName: string, agreementName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccountAgreement>;
    get(resourceGroupName: string, integrationAccountName: string, agreementName: string, callback: ServiceCallback<models.IntegrationAccountAgreement>): void;
    get(resourceGroupName: string, integrationAccountName: string, agreementName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccountAgreement>): void;


    /**
     * Creates or updates an integration account agreement.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} agreementName The integration account agreement name.
     *
     * @param {object} agreement The integration account agreement.
     *
     * @param {object} [agreement.metadata] The metadata.
     *
     * @param {string} agreement.agreementType The agreement type. Possible values
     * include: 'NotSpecified', 'AS2', 'X12', 'Edifact'
     *
     * @param {string} agreement.hostPartner The integration account partner that
     * is set as host partner for this agreement.
     *
     * @param {string} agreement.guestPartner The integration account partner that
     * is set as guest partner for this agreement.
     *
     * @param {object} agreement.hostIdentity The business identity of the host
     * partner.
     *
     * @param {object} agreement.guestIdentity The business identity of the guest
     * partner.
     *
     * @param {object} agreement.content The agreement content.
     *
     * @param {object} [agreement.content.aS2] The AS2 agreement content.
     *
     * @param {object} agreement.content.aS2.receiveAgreement The AS2 one-way
     * receive agreement.
     *
     * @param {object} agreement.content.aS2.sendAgreement The AS2 one-way send
     * agreement.
     *
     * @param {object} agreement.content.aS2.sendAgreement.senderBusinessIdentity
     * The sender business identity
     *
     * @param {object} agreement.content.aS2.sendAgreement.receiverBusinessIdentity
     * The receiver business identity
     *
     * @param {object} agreement.content.aS2.sendAgreement.protocolSettings The AS2
     * protocol settings.
     *
     * @param {object}
     * agreement.content.aS2.sendAgreement.protocolSettings.messageConnectionSettings
     * The message connection settings.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.messageConnectionSettings.ignoreCertificateNameMismatch
     * The value indicating whether to ignore mismatch in certificate name.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.messageConnectionSettings.supportHttpStatusCodeContinue
     * The value indicating whether to support HTTP status code 'CONTINUE'.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.messageConnectionSettings.keepHttpConnectionAlive
     * The value indicating whether to keep the connection alive.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.messageConnectionSettings.unfoldHttpHeaders
     * The value indicating whether to unfold the HTTP headers.
     *
     * @param {object}
     * agreement.content.aS2.sendAgreement.protocolSettings.acknowledgementConnectionSettings
     * The acknowledgement connection settings.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.acknowledgementConnectionSettings.ignoreCertificateNameMismatch
     * The value indicating whether to ignore mismatch in certificate name.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.acknowledgementConnectionSettings.supportHttpStatusCodeContinue
     * The value indicating whether to support HTTP status code 'CONTINUE'.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.acknowledgementConnectionSettings.keepHttpConnectionAlive
     * The value indicating whether to keep the connection alive.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.acknowledgementConnectionSettings.unfoldHttpHeaders
     * The value indicating whether to unfold the HTTP headers.
     *
     * @param {object}
     * agreement.content.aS2.sendAgreement.protocolSettings.mdnSettings The MDN
     * settings.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.mdnSettings.needMdn The
     * value indicating whether to send or request a MDN.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.mdnSettings.signMdn The
     * value indicating whether the MDN needs to be signed or not.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.mdnSettings.sendMdnAsynchronously
     * The value indicating whether to send the asynchronous MDN.
     *
     * @param {string}
     * [agreement.content.aS2.sendAgreement.protocolSettings.mdnSettings.receiptDeliveryUrl]
     * The receipt delivery URL.
     *
     * @param {string}
     * [agreement.content.aS2.sendAgreement.protocolSettings.mdnSettings.dispositionNotificationTo]
     * The disposition notification to header value.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.mdnSettings.signOutboundMdnIfOptional
     * The value indicating whether to sign the outbound MDN if optional.
     *
     * @param {string}
     * [agreement.content.aS2.sendAgreement.protocolSettings.mdnSettings.mdnText]
     * The MDN text.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.mdnSettings.sendInboundMdnToMessageBox
     * The value indicating whether to send inbound MDN to message box.
     *
     * @param {string}
     * agreement.content.aS2.sendAgreement.protocolSettings.mdnSettings.micHashingAlgorithm
     * The signing or hashing algorithm. Possible values include: 'NotSpecified',
     * 'None', 'MD5', 'SHA1', 'SHA2256', 'SHA2384', 'SHA2512'
     *
     * @param {object}
     * agreement.content.aS2.sendAgreement.protocolSettings.securitySettings The
     * security settings.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.securitySettings.overrideGroupSigningCertificate
     * The value indicating whether to send or request a MDN.
     *
     * @param {string}
     * [agreement.content.aS2.sendAgreement.protocolSettings.securitySettings.signingCertificateName]
     * The name of the signing certificate.
     *
     * @param {string}
     * [agreement.content.aS2.sendAgreement.protocolSettings.securitySettings.encryptionCertificateName]
     * The name of the encryption certificate.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.securitySettings.enableNrrForInboundEncodedMessages
     * The value indicating whether to enable NRR for inbound encoded messages.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.securitySettings.enableNrrForInboundDecodedMessages
     * The value indicating whether to enable NRR for inbound decoded messages.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.securitySettings.enableNrrForOutboundMdn
     * The value indicating whether to enable NRR for outbound MDN.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.securitySettings.enableNrrForOutboundEncodedMessages
     * The value indicating whether to enable NRR for outbound encoded messages.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.securitySettings.enableNrrForOutboundDecodedMessages
     * The value indicating whether to enable NRR for outbound decoded messages.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.securitySettings.enableNrrForInboundMdn
     * The value indicating whether to enable NRR for inbound MDN.
     *
     * @param {string}
     * [agreement.content.aS2.sendAgreement.protocolSettings.securitySettings.sha2AlgorithmFormat]
     * The Sha2 algorithm format. Valid values are Sha2, ShaHashSize,
     * ShaHyphenHashSize, Sha2UnderscoreHashSize.
     *
     * @param {object}
     * agreement.content.aS2.sendAgreement.protocolSettings.validationSettings The
     * validation settings.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.validationSettings.overrideMessageProperties
     * The value indicating whether to override incoming message properties with
     * those in agreement.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.validationSettings.encryptMessage
     * The value indicating whether the message has to be encrypted.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.validationSettings.signMessage
     * The value indicating whether the message has to be signed.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.validationSettings.compressMessage
     * The value indicating whether the message has to be compressed.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.validationSettings.checkDuplicateMessage
     * The value indicating whether to check for duplicate message.
     *
     * @param {number}
     * agreement.content.aS2.sendAgreement.protocolSettings.validationSettings.interchangeDuplicatesValidityDays
     * The number of days to look back for duplicate interchange.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.validationSettings.checkCertificateRevocationListOnSend
     * The value indicating whether to check for certificate revocation list on
     * send.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.validationSettings.checkCertificateRevocationListOnReceive
     * The value indicating whether to check for certificate revocation list on
     * receive.
     *
     * @param {string}
     * agreement.content.aS2.sendAgreement.protocolSettings.validationSettings.encryptionAlgorithm
     * The encryption algorithm. Possible values include: 'NotSpecified', 'None',
     * 'DES3', 'RC2', 'AES128', 'AES192', 'AES256'
     *
     * @param {string}
     * [agreement.content.aS2.sendAgreement.protocolSettings.validationSettings.signingAlgorithm]
     * The signing algorithm. Possible values include: 'NotSpecified', 'Default',
     * 'SHA1', 'SHA2256', 'SHA2384', 'SHA2512'
     *
     * @param {object}
     * agreement.content.aS2.sendAgreement.protocolSettings.envelopeSettings The
     * envelope settings.
     *
     * @param {string}
     * agreement.content.aS2.sendAgreement.protocolSettings.envelopeSettings.messageContentType
     * The message content type.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.envelopeSettings.transmitFileNameInMimeHeader
     * The value indicating whether to transmit file name in mime header.
     *
     * @param {string}
     * agreement.content.aS2.sendAgreement.protocolSettings.envelopeSettings.fileNameTemplate
     * The template for file name.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.envelopeSettings.suspendMessageOnFileNameGenerationError
     * The value indicating whether to suspend message on file name generation
     * error.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.envelopeSettings.autogenerateFileName
     * The value indicating whether to auto generate file name.
     *
     * @param {object}
     * agreement.content.aS2.sendAgreement.protocolSettings.errorSettings The error
     * settings.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.errorSettings.suspendDuplicateMessage
     * The value indicating whether to suspend duplicate message.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.errorSettings.resendIfMdnNotReceived
     * The value indicating whether to resend message If MDN is not received.
     *
     * @param {object} [agreement.content.x12] The X12 agreement content.
     *
     * @param {object} agreement.content.x12.receiveAgreement The X12 one-way
     * receive agreement.
     *
     * @param {object} agreement.content.x12.sendAgreement The X12 one-way send
     * agreement.
     *
     * @param {object} agreement.content.x12.sendAgreement.senderBusinessIdentity
     * The sender business identity
     *
     * @param {object} agreement.content.x12.sendAgreement.receiverBusinessIdentity
     * The receiver business identity
     *
     * @param {object} agreement.content.x12.sendAgreement.protocolSettings The X12
     * protocol settings.
     *
     * @param {object}
     * agreement.content.x12.sendAgreement.protocolSettings.validationSettings The
     * X12 validation settings.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.validationSettings.validateCharacterSet
     * The value indicating whether to validate character set in the message.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.validationSettings.checkDuplicateInterchangeControlNumber
     * The value indicating whether to check for duplicate interchange control
     * number.
     *
     * @param {number}
     * agreement.content.x12.sendAgreement.protocolSettings.validationSettings.interchangeControlNumberValidityDays
     * The validity period of interchange control number.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.validationSettings.checkDuplicateGroupControlNumber
     * The value indicating whether to check for duplicate group control number.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.validationSettings.checkDuplicateTransactionSetControlNumber
     * The value indicating whether to check for duplicate transaction set control
     * number.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.validationSettings.validateEdiTypes
     * The value indicating whether to Whether to validate EDI types.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.validationSettings.validateXsdTypes
     * The value indicating whether to Whether to validate XSD types.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.validationSettings.allowLeadingAndTrailingSpacesAndZeroes
     * The value indicating whether to allow leading and trailing spaces and
     * zeroes.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.validationSettings.trimLeadingAndTrailingSpacesAndZeroes
     * The value indicating whether to trim leading and trailing spaces and zeroes.
     *
     * @param {string}
     * agreement.content.x12.sendAgreement.protocolSettings.validationSettings.trailingSeparatorPolicy
     * The trailing separator policy. Possible values include: 'NotSpecified',
     * 'NotAllowed', 'Optional', 'Mandatory'
     *
     * @param {object}
     * agreement.content.x12.sendAgreement.protocolSettings.framingSettings The X12
     * framing settings.
     *
     * @param {number}
     * agreement.content.x12.sendAgreement.protocolSettings.framingSettings.dataElementSeparator
     * The data element separator.
     *
     * @param {number}
     * agreement.content.x12.sendAgreement.protocolSettings.framingSettings.componentSeparator
     * The component separator.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.framingSettings.replaceSeparatorsInPayload
     * The value indicating whether to replace separators in payload.
     *
     * @param {number}
     * agreement.content.x12.sendAgreement.protocolSettings.framingSettings.replaceCharacter
     * The replacement character.
     *
     * @param {number}
     * agreement.content.x12.sendAgreement.protocolSettings.framingSettings.segmentTerminator
     * The segment terminator.
     *
     * @param {string}
     * agreement.content.x12.sendAgreement.protocolSettings.framingSettings.characterSet
     * The X12 character set. Possible values include: 'NotSpecified', 'Basic',
     * 'Extended', 'UTF8'
     *
     * @param {string}
     * agreement.content.x12.sendAgreement.protocolSettings.framingSettings.segmentTerminatorSuffix
     * The segment terminator suffix. Possible values include: 'NotSpecified',
     * 'None', 'CR', 'LF', 'CRLF'
     *
     * @param {object}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings The
     * X12 envelope settings.
     *
     * @param {number}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.controlStandardsId
     * The controls standards id.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.useControlStandardsIdAsRepetitionCharacter
     * The value indicating whether to use control standards id as repetition
     * character.
     *
     * @param {string}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.senderApplicationId
     * The sender application id.
     *
     * @param {string}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.receiverApplicationId
     * The receiver application id.
     *
     * @param {string}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.controlVersionNumber
     * The control version number.
     *
     * @param {number}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberLowerBound
     * The interchange  control number lower bound.
     *
     * @param {number}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberUpperBound
     * The interchange  control number upper bound.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.rolloverInterchangeControlNumber
     * The value indicating whether to rollover interchange control number.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.enableDefaultGroupHeaders
     * The value indicating whether to enable default group headers.
     *
     * @param {string}
     * [agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.functionalGroupId]
     * The functional group id.
     *
     * @param {number}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.groupControlNumberLowerBound
     * The group control number lower bound.
     *
     * @param {number}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.groupControlNumberUpperBound
     * The group control number upper bound.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.rolloverGroupControlNumber
     * The value indicating whether to rollover group control number.
     *
     * @param {string}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.groupHeaderAgencyCode
     * The group header agency code.
     *
     * @param {string}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.groupHeaderVersion
     * The group header version.
     *
     * @param {number}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberLowerBound
     * The transaction set control number lower bound.
     *
     * @param {number}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberUpperBound
     * The transaction set control number upper bound.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.rolloverTransactionSetControlNumber
     * The value indicating whether to rollover transaction set control number.
     *
     * @param {string}
     * [agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberPrefix]
     * The transaction set control number prefix.
     *
     * @param {string}
     * [agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberSuffix]
     * The transaction set control number suffix.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.overwriteExistingTransactionSetControlNumber
     * The value indicating whether to overwrite existing transaction set control
     * number.
     *
     * @param {string}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.groupHeaderDateFormat
     * The group header date format. Possible values include: 'NotSpecified',
     * 'CCYYMMDD', 'YYMMDD'
     *
     * @param {string}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.groupHeaderTimeFormat
     * The group header time format. Possible values include: 'NotSpecified',
     * 'HHMM', 'HHMMSS', 'HHMMSSdd', 'HHMMSSd'
     *
     * @param {string}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.usageIndicator
     * The usage indicator. Possible values include: 'NotSpecified', 'Test',
     * 'Information', 'Production'
     *
     * @param {object}
     * agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings
     * The X12 acknowledgment settings.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.needTechnicalAcknowledgement
     * The value indicating whether technical acknowledgement is needed.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.batchTechnicalAcknowledgements
     * The value indicating whether to batch the technical acknowledgements.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.needFunctionalAcknowledgement
     * The value indicating whether functional acknowledgement is needed.
     *
     * @param {string}
     * [agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.functionalAcknowledgementVersion]
     * The functional acknowledgement version.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.batchFunctionalAcknowledgements
     * The value indicating whether to batch functional acknowledgements.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.needImplementationAcknowledgement
     * The value indicating whether implementation acknowledgement is needed.
     *
     * @param {string}
     * [agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.implementationAcknowledgementVersion]
     * The implementation acknowledgement version.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.batchImplementationAcknowledgements
     * The value indicating whether to batch implementation acknowledgements.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.needLoopForValidMessages
     * The value indicating whether a loop is needed for valid messages.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.sendSynchronousAcknowledgement
     * The value indicating whether to send synchronous acknowledgement.
     *
     * @param {string}
     * [agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberPrefix]
     * The acknowledgement control number prefix.
     *
     * @param {string}
     * [agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberSuffix]
     * The acknowledgement control number suffix.
     *
     * @param {number}
     * agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberLowerBound
     * The acknowledgement control number lower bound.
     *
     * @param {number}
     * agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberUpperBound
     * The acknowledgement control number upper bound.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.rolloverAcknowledgementControlNumber
     * The value indicating whether to rollover acknowledgement control number.
     *
     * @param {object}
     * agreement.content.x12.sendAgreement.protocolSettings.messageFilter The X12
     * message filter.
     *
     * @param {string}
     * agreement.content.x12.sendAgreement.protocolSettings.messageFilter.messageFilterType
     * The message filter type. Possible values include: 'NotSpecified', 'Include',
     * 'Exclude'
     *
     * @param {object}
     * agreement.content.x12.sendAgreement.protocolSettings.securitySettings The
     * X12 security settings.
     *
     * @param {string}
     * agreement.content.x12.sendAgreement.protocolSettings.securitySettings.authorizationQualifier
     * The authorization qualifier.
     *
     * @param {string}
     * [agreement.content.x12.sendAgreement.protocolSettings.securitySettings.authorizationValue]
     * The authorization value.
     *
     * @param {string}
     * agreement.content.x12.sendAgreement.protocolSettings.securitySettings.securityQualifier
     * The security qualifier.
     *
     * @param {string}
     * [agreement.content.x12.sendAgreement.protocolSettings.securitySettings.passwordValue]
     * The password value.
     *
     * @param {object}
     * agreement.content.x12.sendAgreement.protocolSettings.processingSettings The
     * X12 processing settings.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.processingSettings.maskSecurityInfo
     * The value indicating whether to mask security information.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.processingSettings.convertImpliedDecimal
     * The value indicating whether to convert numerical type to implied decimal.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.processingSettings.preserveInterchange
     * The value indicating whether to preserve interchange.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.processingSettings.suspendInterchangeOnError
     * The value indicating whether to suspend interchange on error.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.processingSettings.createEmptyXmlTagsForTrailingSeparators
     * The value indicating whether to create empty xml tags for trailing
     * separators.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.processingSettings.useDotAsDecimalSeparator
     * The value indicating whether to use dot as decimal separator.
     *
     * @param {array}
     * [agreement.content.x12.sendAgreement.protocolSettings.envelopeOverrides] The
     * X12 envelope override settings.
     *
     * @param {array}
     * [agreement.content.x12.sendAgreement.protocolSettings.validationOverrides]
     * The X12 validation override settings.
     *
     * @param {array}
     * [agreement.content.x12.sendAgreement.protocolSettings.messageFilterList] The
     * X12 message filter list.
     *
     * @param {array}
     * agreement.content.x12.sendAgreement.protocolSettings.schemaReferences The
     * X12 schema references.
     *
     * @param {array}
     * [agreement.content.x12.sendAgreement.protocolSettings.x12DelimiterOverrides]
     * The X12 delimiter override settings.
     *
     * @param {object} [agreement.content.edifact] The EDIFACT agreement content.
     *
     * @param {object} agreement.content.edifact.receiveAgreement The EDIFACT
     * one-way receive agreement.
     *
     * @param {object} agreement.content.edifact.sendAgreement The EDIFACT one-way
     * send agreement.
     *
     * @param {object}
     * agreement.content.edifact.sendAgreement.senderBusinessIdentity The sender
     * business identity
     *
     * @param {object}
     * agreement.content.edifact.sendAgreement.receiverBusinessIdentity The
     * receiver business identity
     *
     * @param {string}
     * agreement.content.edifact.sendAgreement.receiverBusinessIdentity.qualifier
     * The business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
     *
     * @param {string}
     * agreement.content.edifact.sendAgreement.receiverBusinessIdentity.value The
     * user defined business identity value.
     *
     * @param {object} agreement.content.edifact.sendAgreement.protocolSettings The
     * EDIFACT protocol settings.
     *
     * @param {object}
     * agreement.content.edifact.sendAgreement.protocolSettings.validationSettings
     * The EDIFACT validation settings.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.validationSettings.validateCharacterSet
     * The value indicating whether to validate character set in the message.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.validationSettings.checkDuplicateInterchangeControlNumber
     * The value indicating whether to check for duplicate interchange control
     * number.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.validationSettings.interchangeControlNumberValidityDays
     * The validity period of interchange control number.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.validationSettings.checkDuplicateGroupControlNumber
     * The value indicating whether to check for duplicate group control number.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.validationSettings.checkDuplicateTransactionSetControlNumber
     * The value indicating whether to check for duplicate transaction set control
     * number.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.validationSettings.validateEdiTypes
     * The value indicating whether to Whether to validate EDI types.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.validationSettings.validateXsdTypes
     * The value indicating whether to Whether to validate XSD types.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.validationSettings.allowLeadingAndTrailingSpacesAndZeroes
     * The value indicating whether to allow leading and trailing spaces and
     * zeroes.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.validationSettings.trimLeadingAndTrailingSpacesAndZeroes
     * The value indicating whether to trim leading and trailing spaces and zeroes.
     *
     * @param {string}
     * agreement.content.edifact.sendAgreement.protocolSettings.validationSettings.trailingSeparatorPolicy
     * The trailing separator policy. Possible values include: 'NotSpecified',
     * 'NotAllowed', 'Optional', 'Mandatory'
     *
     * @param {object}
     * agreement.content.edifact.sendAgreement.protocolSettings.framingSettings The
     * EDIFACT framing settings.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.framingSettings.serviceCodeListDirectoryVersion]
     * The service code list directory version.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.framingSettings.characterEncoding]
     * The character encoding.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.framingSettings.protocolVersion
     * The protocol version.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.framingSettings.dataElementSeparator
     * The data element separator.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.framingSettings.componentSeparator
     * The component separator.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.framingSettings.segmentTerminator
     * The segment terminator.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.framingSettings.releaseIndicator
     * The release indicator.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.framingSettings.repetitionSeparator
     * The repetition separator.
     *
     * @param {string}
     * agreement.content.edifact.sendAgreement.protocolSettings.framingSettings.characterSet
     * The EDIFACT frame setting characterSet. Possible values include:
     * 'NotSpecified', 'UNOB', 'UNOA', 'UNOC', 'UNOD', 'UNOE', 'UNOF', 'UNOG',
     * 'UNOH', 'UNOI', 'UNOJ', 'UNOK', 'UNOX', 'UNOY', 'KECA'
     *
     * @param {string}
     * agreement.content.edifact.sendAgreement.protocolSettings.framingSettings.decimalPointIndicator
     * The EDIFACT frame setting decimal indicator. Possible values include:
     * 'NotSpecified', 'Comma', 'Decimal'
     *
     * @param {string}
     * agreement.content.edifact.sendAgreement.protocolSettings.framingSettings.segmentTerminatorSuffix
     * The EDIFACT frame setting segment terminator suffix. Possible values
     * include: 'NotSpecified', 'None', 'CR', 'LF', 'CRLF'
     *
     * @param {object}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings
     * The EDIFACT envelope settings.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupAssociationAssignedCode]
     * The group association assigned code.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.communicationAgreementId]
     * The communication agreement id.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.applyDelimiterStringAdvice
     * The value indicating whether to apply delimiter string advice.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.createGroupingSegments
     * The value indicating whether to create grouping segments.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.enableDefaultGroupHeaders
     * The value indicating whether to enable default group headers.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.recipientReferencePasswordValue]
     * The recipient reference password value.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.recipientReferencePasswordQualifier]
     * The recipient reference password qualifier.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.applicationReferenceId]
     * The application reference id.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.processingPriorityCode]
     * The processing priority code.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberLowerBound
     * The interchange control number lower bound.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberUpperBound
     * The interchange control number upper bound.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.rolloverInterchangeControlNumber
     * The value indicating whether to rollover interchange control number.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberPrefix]
     * The interchange control number prefix.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberSuffix]
     * The interchange control number suffix.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.senderReverseRoutingAddress]
     * The sender reverse routing address.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.receiverReverseRoutingAddress]
     * The receiver reverse routing address.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.functionalGroupId]
     * The functional group id.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupControllingAgencyCode]
     * The group controlling agency code.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupMessageVersion]
     * The group message version.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupMessageRelease]
     * The group message release.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupControlNumberLowerBound
     * The group control number lower bound.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupControlNumberUpperBound
     * The group control number upper bound.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.rolloverGroupControlNumber
     * The value indicating whether to rollover group control number.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupControlNumberPrefix]
     * The group control number prefix.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupControlNumberSuffix]
     * The group control number suffix.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupApplicationReceiverQualifier]
     * The group application receiver qualifier.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupApplicationReceiverId]
     * The group application receiver id.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupApplicationSenderQualifier]
     * The group application sender qualifier.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupApplicationSenderId]
     * The group application sender id.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupApplicationPassword]
     * The group application password.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.overwriteExistingTransactionSetControlNumber
     * The value indicating whether to overwrite existing transaction set control
     * number.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberPrefix]
     * The transaction set control number prefix.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberSuffix]
     * The transaction set control number suffix.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberLowerBound
     * The transaction set control number lower bound.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberUpperBound
     * The transaction set control number upper bound.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.rolloverTransactionSetControlNumber
     * The value indicating whether to rollover transaction set control number.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.isTestInterchange
     * The value indicating whether the message is a test interchange.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.senderInternalIdentification]
     * The sender internal identification.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.senderInternalSubIdentification]
     * The sender internal sub identification.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.receiverInternalIdentification]
     * The receiver internal identification.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.receiverInternalSubIdentification]
     * The receiver internal sub identification.
     *
     * @param {object}
     * agreement.content.edifact.sendAgreement.protocolSettings.acknowledgementSettings
     * The EDIFACT acknowledgement settings.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.needTechnicalAcknowledgement
     * The value indicating whether technical acknowledgement is needed.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.batchTechnicalAcknowledgements
     * The value indicating whether to batch the technical acknowledgements.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.needFunctionalAcknowledgement
     * The value indicating whether functional acknowledgement is needed.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.batchFunctionalAcknowledgements
     * The value indicating whether to batch functional acknowledgements.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.needLoopForValidMessages
     * The value indicating whether a loop is needed for valid messages.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.sendSynchronousAcknowledgement
     * The value indicating whether to send synchronous acknowledgement.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberPrefix]
     * The acknowledgement control number prefix.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberSuffix]
     * The acknowledgement control number suffix.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberLowerBound
     * The acknowledgement control number lower bound.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberUpperBound
     * The acknowledgement control number upper bound.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.rolloverAcknowledgementControlNumber
     * The value indicating whether to rollover acknowledgement control number.
     *
     * @param {object}
     * agreement.content.edifact.sendAgreement.protocolSettings.messageFilter The
     * EDIFACT message filter.
     *
     * @param {string}
     * agreement.content.edifact.sendAgreement.protocolSettings.messageFilter.messageFilterType
     * The message filter type. Possible values include: 'NotSpecified', 'Include',
     * 'Exclude'
     *
     * @param {object}
     * agreement.content.edifact.sendAgreement.protocolSettings.processingSettings
     * The EDIFACT processing Settings.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.processingSettings.maskSecurityInfo
     * The value indicating whether to mask security information.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.processingSettings.preserveInterchange
     * The value indicating whether to preserve interchange.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.processingSettings.suspendInterchangeOnError
     * The value indicating whether to suspend interchange on error.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.processingSettings.createEmptyXmlTagsForTrailingSeparators
     * The value indicating whether to create empty xml tags for trailing
     * separators.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.processingSettings.useDotAsDecimalSeparator
     * The value indicating whether to use dot as decimal separator.
     *
     * @param {array}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeOverrides]
     * The EDIFACT envelope override settings.
     *
     * @param {array}
     * [agreement.content.edifact.sendAgreement.protocolSettings.messageFilterList]
     * The EDIFACT message filter list.
     *
     * @param {array}
     * agreement.content.edifact.sendAgreement.protocolSettings.schemaReferences
     * The EDIFACT schema references.
     *
     * @param {array}
     * [agreement.content.edifact.sendAgreement.protocolSettings.validationOverrides]
     * The EDIFACT validation override settings.
     *
     * @param {array}
     * [agreement.content.edifact.sendAgreement.protocolSettings.edifactDelimiterOverrides]
     * The EDIFACT delimiter override settings.
     *
     * @param {string} [agreement.location] The resource location.
     *
     * @param {object} [agreement.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccountAgreement>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, agreementName: string, agreement: models.IntegrationAccountAgreement, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccountAgreement>>;

    /**
     * Creates or updates an integration account agreement.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} agreementName The integration account agreement name.
     *
     * @param {object} agreement The integration account agreement.
     *
     * @param {object} [agreement.metadata] The metadata.
     *
     * @param {string} agreement.agreementType The agreement type. Possible values
     * include: 'NotSpecified', 'AS2', 'X12', 'Edifact'
     *
     * @param {string} agreement.hostPartner The integration account partner that
     * is set as host partner for this agreement.
     *
     * @param {string} agreement.guestPartner The integration account partner that
     * is set as guest partner for this agreement.
     *
     * @param {object} agreement.hostIdentity The business identity of the host
     * partner.
     *
     * @param {object} agreement.guestIdentity The business identity of the guest
     * partner.
     *
     * @param {object} agreement.content The agreement content.
     *
     * @param {object} [agreement.content.aS2] The AS2 agreement content.
     *
     * @param {object} agreement.content.aS2.receiveAgreement The AS2 one-way
     * receive agreement.
     *
     * @param {object} agreement.content.aS2.sendAgreement The AS2 one-way send
     * agreement.
     *
     * @param {object} agreement.content.aS2.sendAgreement.senderBusinessIdentity
     * The sender business identity
     *
     * @param {object} agreement.content.aS2.sendAgreement.receiverBusinessIdentity
     * The receiver business identity
     *
     * @param {object} agreement.content.aS2.sendAgreement.protocolSettings The AS2
     * protocol settings.
     *
     * @param {object}
     * agreement.content.aS2.sendAgreement.protocolSettings.messageConnectionSettings
     * The message connection settings.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.messageConnectionSettings.ignoreCertificateNameMismatch
     * The value indicating whether to ignore mismatch in certificate name.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.messageConnectionSettings.supportHttpStatusCodeContinue
     * The value indicating whether to support HTTP status code 'CONTINUE'.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.messageConnectionSettings.keepHttpConnectionAlive
     * The value indicating whether to keep the connection alive.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.messageConnectionSettings.unfoldHttpHeaders
     * The value indicating whether to unfold the HTTP headers.
     *
     * @param {object}
     * agreement.content.aS2.sendAgreement.protocolSettings.acknowledgementConnectionSettings
     * The acknowledgement connection settings.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.acknowledgementConnectionSettings.ignoreCertificateNameMismatch
     * The value indicating whether to ignore mismatch in certificate name.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.acknowledgementConnectionSettings.supportHttpStatusCodeContinue
     * The value indicating whether to support HTTP status code 'CONTINUE'.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.acknowledgementConnectionSettings.keepHttpConnectionAlive
     * The value indicating whether to keep the connection alive.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.acknowledgementConnectionSettings.unfoldHttpHeaders
     * The value indicating whether to unfold the HTTP headers.
     *
     * @param {object}
     * agreement.content.aS2.sendAgreement.protocolSettings.mdnSettings The MDN
     * settings.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.mdnSettings.needMdn The
     * value indicating whether to send or request a MDN.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.mdnSettings.signMdn The
     * value indicating whether the MDN needs to be signed or not.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.mdnSettings.sendMdnAsynchronously
     * The value indicating whether to send the asynchronous MDN.
     *
     * @param {string}
     * [agreement.content.aS2.sendAgreement.protocolSettings.mdnSettings.receiptDeliveryUrl]
     * The receipt delivery URL.
     *
     * @param {string}
     * [agreement.content.aS2.sendAgreement.protocolSettings.mdnSettings.dispositionNotificationTo]
     * The disposition notification to header value.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.mdnSettings.signOutboundMdnIfOptional
     * The value indicating whether to sign the outbound MDN if optional.
     *
     * @param {string}
     * [agreement.content.aS2.sendAgreement.protocolSettings.mdnSettings.mdnText]
     * The MDN text.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.mdnSettings.sendInboundMdnToMessageBox
     * The value indicating whether to send inbound MDN to message box.
     *
     * @param {string}
     * agreement.content.aS2.sendAgreement.protocolSettings.mdnSettings.micHashingAlgorithm
     * The signing or hashing algorithm. Possible values include: 'NotSpecified',
     * 'None', 'MD5', 'SHA1', 'SHA2256', 'SHA2384', 'SHA2512'
     *
     * @param {object}
     * agreement.content.aS2.sendAgreement.protocolSettings.securitySettings The
     * security settings.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.securitySettings.overrideGroupSigningCertificate
     * The value indicating whether to send or request a MDN.
     *
     * @param {string}
     * [agreement.content.aS2.sendAgreement.protocolSettings.securitySettings.signingCertificateName]
     * The name of the signing certificate.
     *
     * @param {string}
     * [agreement.content.aS2.sendAgreement.protocolSettings.securitySettings.encryptionCertificateName]
     * The name of the encryption certificate.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.securitySettings.enableNrrForInboundEncodedMessages
     * The value indicating whether to enable NRR for inbound encoded messages.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.securitySettings.enableNrrForInboundDecodedMessages
     * The value indicating whether to enable NRR for inbound decoded messages.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.securitySettings.enableNrrForOutboundMdn
     * The value indicating whether to enable NRR for outbound MDN.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.securitySettings.enableNrrForOutboundEncodedMessages
     * The value indicating whether to enable NRR for outbound encoded messages.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.securitySettings.enableNrrForOutboundDecodedMessages
     * The value indicating whether to enable NRR for outbound decoded messages.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.securitySettings.enableNrrForInboundMdn
     * The value indicating whether to enable NRR for inbound MDN.
     *
     * @param {string}
     * [agreement.content.aS2.sendAgreement.protocolSettings.securitySettings.sha2AlgorithmFormat]
     * The Sha2 algorithm format. Valid values are Sha2, ShaHashSize,
     * ShaHyphenHashSize, Sha2UnderscoreHashSize.
     *
     * @param {object}
     * agreement.content.aS2.sendAgreement.protocolSettings.validationSettings The
     * validation settings.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.validationSettings.overrideMessageProperties
     * The value indicating whether to override incoming message properties with
     * those in agreement.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.validationSettings.encryptMessage
     * The value indicating whether the message has to be encrypted.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.validationSettings.signMessage
     * The value indicating whether the message has to be signed.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.validationSettings.compressMessage
     * The value indicating whether the message has to be compressed.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.validationSettings.checkDuplicateMessage
     * The value indicating whether to check for duplicate message.
     *
     * @param {number}
     * agreement.content.aS2.sendAgreement.protocolSettings.validationSettings.interchangeDuplicatesValidityDays
     * The number of days to look back for duplicate interchange.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.validationSettings.checkCertificateRevocationListOnSend
     * The value indicating whether to check for certificate revocation list on
     * send.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.validationSettings.checkCertificateRevocationListOnReceive
     * The value indicating whether to check for certificate revocation list on
     * receive.
     *
     * @param {string}
     * agreement.content.aS2.sendAgreement.protocolSettings.validationSettings.encryptionAlgorithm
     * The encryption algorithm. Possible values include: 'NotSpecified', 'None',
     * 'DES3', 'RC2', 'AES128', 'AES192', 'AES256'
     *
     * @param {string}
     * [agreement.content.aS2.sendAgreement.protocolSettings.validationSettings.signingAlgorithm]
     * The signing algorithm. Possible values include: 'NotSpecified', 'Default',
     * 'SHA1', 'SHA2256', 'SHA2384', 'SHA2512'
     *
     * @param {object}
     * agreement.content.aS2.sendAgreement.protocolSettings.envelopeSettings The
     * envelope settings.
     *
     * @param {string}
     * agreement.content.aS2.sendAgreement.protocolSettings.envelopeSettings.messageContentType
     * The message content type.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.envelopeSettings.transmitFileNameInMimeHeader
     * The value indicating whether to transmit file name in mime header.
     *
     * @param {string}
     * agreement.content.aS2.sendAgreement.protocolSettings.envelopeSettings.fileNameTemplate
     * The template for file name.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.envelopeSettings.suspendMessageOnFileNameGenerationError
     * The value indicating whether to suspend message on file name generation
     * error.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.envelopeSettings.autogenerateFileName
     * The value indicating whether to auto generate file name.
     *
     * @param {object}
     * agreement.content.aS2.sendAgreement.protocolSettings.errorSettings The error
     * settings.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.errorSettings.suspendDuplicateMessage
     * The value indicating whether to suspend duplicate message.
     *
     * @param {boolean}
     * agreement.content.aS2.sendAgreement.protocolSettings.errorSettings.resendIfMdnNotReceived
     * The value indicating whether to resend message If MDN is not received.
     *
     * @param {object} [agreement.content.x12] The X12 agreement content.
     *
     * @param {object} agreement.content.x12.receiveAgreement The X12 one-way
     * receive agreement.
     *
     * @param {object} agreement.content.x12.sendAgreement The X12 one-way send
     * agreement.
     *
     * @param {object} agreement.content.x12.sendAgreement.senderBusinessIdentity
     * The sender business identity
     *
     * @param {object} agreement.content.x12.sendAgreement.receiverBusinessIdentity
     * The receiver business identity
     *
     * @param {object} agreement.content.x12.sendAgreement.protocolSettings The X12
     * protocol settings.
     *
     * @param {object}
     * agreement.content.x12.sendAgreement.protocolSettings.validationSettings The
     * X12 validation settings.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.validationSettings.validateCharacterSet
     * The value indicating whether to validate character set in the message.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.validationSettings.checkDuplicateInterchangeControlNumber
     * The value indicating whether to check for duplicate interchange control
     * number.
     *
     * @param {number}
     * agreement.content.x12.sendAgreement.protocolSettings.validationSettings.interchangeControlNumberValidityDays
     * The validity period of interchange control number.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.validationSettings.checkDuplicateGroupControlNumber
     * The value indicating whether to check for duplicate group control number.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.validationSettings.checkDuplicateTransactionSetControlNumber
     * The value indicating whether to check for duplicate transaction set control
     * number.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.validationSettings.validateEdiTypes
     * The value indicating whether to Whether to validate EDI types.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.validationSettings.validateXsdTypes
     * The value indicating whether to Whether to validate XSD types.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.validationSettings.allowLeadingAndTrailingSpacesAndZeroes
     * The value indicating whether to allow leading and trailing spaces and
     * zeroes.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.validationSettings.trimLeadingAndTrailingSpacesAndZeroes
     * The value indicating whether to trim leading and trailing spaces and zeroes.
     *
     * @param {string}
     * agreement.content.x12.sendAgreement.protocolSettings.validationSettings.trailingSeparatorPolicy
     * The trailing separator policy. Possible values include: 'NotSpecified',
     * 'NotAllowed', 'Optional', 'Mandatory'
     *
     * @param {object}
     * agreement.content.x12.sendAgreement.protocolSettings.framingSettings The X12
     * framing settings.
     *
     * @param {number}
     * agreement.content.x12.sendAgreement.protocolSettings.framingSettings.dataElementSeparator
     * The data element separator.
     *
     * @param {number}
     * agreement.content.x12.sendAgreement.protocolSettings.framingSettings.componentSeparator
     * The component separator.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.framingSettings.replaceSeparatorsInPayload
     * The value indicating whether to replace separators in payload.
     *
     * @param {number}
     * agreement.content.x12.sendAgreement.protocolSettings.framingSettings.replaceCharacter
     * The replacement character.
     *
     * @param {number}
     * agreement.content.x12.sendAgreement.protocolSettings.framingSettings.segmentTerminator
     * The segment terminator.
     *
     * @param {string}
     * agreement.content.x12.sendAgreement.protocolSettings.framingSettings.characterSet
     * The X12 character set. Possible values include: 'NotSpecified', 'Basic',
     * 'Extended', 'UTF8'
     *
     * @param {string}
     * agreement.content.x12.sendAgreement.protocolSettings.framingSettings.segmentTerminatorSuffix
     * The segment terminator suffix. Possible values include: 'NotSpecified',
     * 'None', 'CR', 'LF', 'CRLF'
     *
     * @param {object}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings The
     * X12 envelope settings.
     *
     * @param {number}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.controlStandardsId
     * The controls standards id.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.useControlStandardsIdAsRepetitionCharacter
     * The value indicating whether to use control standards id as repetition
     * character.
     *
     * @param {string}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.senderApplicationId
     * The sender application id.
     *
     * @param {string}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.receiverApplicationId
     * The receiver application id.
     *
     * @param {string}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.controlVersionNumber
     * The control version number.
     *
     * @param {number}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberLowerBound
     * The interchange  control number lower bound.
     *
     * @param {number}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberUpperBound
     * The interchange  control number upper bound.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.rolloverInterchangeControlNumber
     * The value indicating whether to rollover interchange control number.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.enableDefaultGroupHeaders
     * The value indicating whether to enable default group headers.
     *
     * @param {string}
     * [agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.functionalGroupId]
     * The functional group id.
     *
     * @param {number}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.groupControlNumberLowerBound
     * The group control number lower bound.
     *
     * @param {number}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.groupControlNumberUpperBound
     * The group control number upper bound.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.rolloverGroupControlNumber
     * The value indicating whether to rollover group control number.
     *
     * @param {string}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.groupHeaderAgencyCode
     * The group header agency code.
     *
     * @param {string}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.groupHeaderVersion
     * The group header version.
     *
     * @param {number}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberLowerBound
     * The transaction set control number lower bound.
     *
     * @param {number}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberUpperBound
     * The transaction set control number upper bound.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.rolloverTransactionSetControlNumber
     * The value indicating whether to rollover transaction set control number.
     *
     * @param {string}
     * [agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberPrefix]
     * The transaction set control number prefix.
     *
     * @param {string}
     * [agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberSuffix]
     * The transaction set control number suffix.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.overwriteExistingTransactionSetControlNumber
     * The value indicating whether to overwrite existing transaction set control
     * number.
     *
     * @param {string}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.groupHeaderDateFormat
     * The group header date format. Possible values include: 'NotSpecified',
     * 'CCYYMMDD', 'YYMMDD'
     *
     * @param {string}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.groupHeaderTimeFormat
     * The group header time format. Possible values include: 'NotSpecified',
     * 'HHMM', 'HHMMSS', 'HHMMSSdd', 'HHMMSSd'
     *
     * @param {string}
     * agreement.content.x12.sendAgreement.protocolSettings.envelopeSettings.usageIndicator
     * The usage indicator. Possible values include: 'NotSpecified', 'Test',
     * 'Information', 'Production'
     *
     * @param {object}
     * agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings
     * The X12 acknowledgment settings.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.needTechnicalAcknowledgement
     * The value indicating whether technical acknowledgement is needed.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.batchTechnicalAcknowledgements
     * The value indicating whether to batch the technical acknowledgements.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.needFunctionalAcknowledgement
     * The value indicating whether functional acknowledgement is needed.
     *
     * @param {string}
     * [agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.functionalAcknowledgementVersion]
     * The functional acknowledgement version.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.batchFunctionalAcknowledgements
     * The value indicating whether to batch functional acknowledgements.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.needImplementationAcknowledgement
     * The value indicating whether implementation acknowledgement is needed.
     *
     * @param {string}
     * [agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.implementationAcknowledgementVersion]
     * The implementation acknowledgement version.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.batchImplementationAcknowledgements
     * The value indicating whether to batch implementation acknowledgements.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.needLoopForValidMessages
     * The value indicating whether a loop is needed for valid messages.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.sendSynchronousAcknowledgement
     * The value indicating whether to send synchronous acknowledgement.
     *
     * @param {string}
     * [agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberPrefix]
     * The acknowledgement control number prefix.
     *
     * @param {string}
     * [agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberSuffix]
     * The acknowledgement control number suffix.
     *
     * @param {number}
     * agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberLowerBound
     * The acknowledgement control number lower bound.
     *
     * @param {number}
     * agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberUpperBound
     * The acknowledgement control number upper bound.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.acknowledgementSettings.rolloverAcknowledgementControlNumber
     * The value indicating whether to rollover acknowledgement control number.
     *
     * @param {object}
     * agreement.content.x12.sendAgreement.protocolSettings.messageFilter The X12
     * message filter.
     *
     * @param {string}
     * agreement.content.x12.sendAgreement.protocolSettings.messageFilter.messageFilterType
     * The message filter type. Possible values include: 'NotSpecified', 'Include',
     * 'Exclude'
     *
     * @param {object}
     * agreement.content.x12.sendAgreement.protocolSettings.securitySettings The
     * X12 security settings.
     *
     * @param {string}
     * agreement.content.x12.sendAgreement.protocolSettings.securitySettings.authorizationQualifier
     * The authorization qualifier.
     *
     * @param {string}
     * [agreement.content.x12.sendAgreement.protocolSettings.securitySettings.authorizationValue]
     * The authorization value.
     *
     * @param {string}
     * agreement.content.x12.sendAgreement.protocolSettings.securitySettings.securityQualifier
     * The security qualifier.
     *
     * @param {string}
     * [agreement.content.x12.sendAgreement.protocolSettings.securitySettings.passwordValue]
     * The password value.
     *
     * @param {object}
     * agreement.content.x12.sendAgreement.protocolSettings.processingSettings The
     * X12 processing settings.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.processingSettings.maskSecurityInfo
     * The value indicating whether to mask security information.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.processingSettings.convertImpliedDecimal
     * The value indicating whether to convert numerical type to implied decimal.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.processingSettings.preserveInterchange
     * The value indicating whether to preserve interchange.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.processingSettings.suspendInterchangeOnError
     * The value indicating whether to suspend interchange on error.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.processingSettings.createEmptyXmlTagsForTrailingSeparators
     * The value indicating whether to create empty xml tags for trailing
     * separators.
     *
     * @param {boolean}
     * agreement.content.x12.sendAgreement.protocolSettings.processingSettings.useDotAsDecimalSeparator
     * The value indicating whether to use dot as decimal separator.
     *
     * @param {array}
     * [agreement.content.x12.sendAgreement.protocolSettings.envelopeOverrides] The
     * X12 envelope override settings.
     *
     * @param {array}
     * [agreement.content.x12.sendAgreement.protocolSettings.validationOverrides]
     * The X12 validation override settings.
     *
     * @param {array}
     * [agreement.content.x12.sendAgreement.protocolSettings.messageFilterList] The
     * X12 message filter list.
     *
     * @param {array}
     * agreement.content.x12.sendAgreement.protocolSettings.schemaReferences The
     * X12 schema references.
     *
     * @param {array}
     * [agreement.content.x12.sendAgreement.protocolSettings.x12DelimiterOverrides]
     * The X12 delimiter override settings.
     *
     * @param {object} [agreement.content.edifact] The EDIFACT agreement content.
     *
     * @param {object} agreement.content.edifact.receiveAgreement The EDIFACT
     * one-way receive agreement.
     *
     * @param {object} agreement.content.edifact.sendAgreement The EDIFACT one-way
     * send agreement.
     *
     * @param {object}
     * agreement.content.edifact.sendAgreement.senderBusinessIdentity The sender
     * business identity
     *
     * @param {object}
     * agreement.content.edifact.sendAgreement.receiverBusinessIdentity The
     * receiver business identity
     *
     * @param {string}
     * agreement.content.edifact.sendAgreement.receiverBusinessIdentity.qualifier
     * The business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
     *
     * @param {string}
     * agreement.content.edifact.sendAgreement.receiverBusinessIdentity.value The
     * user defined business identity value.
     *
     * @param {object} agreement.content.edifact.sendAgreement.protocolSettings The
     * EDIFACT protocol settings.
     *
     * @param {object}
     * agreement.content.edifact.sendAgreement.protocolSettings.validationSettings
     * The EDIFACT validation settings.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.validationSettings.validateCharacterSet
     * The value indicating whether to validate character set in the message.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.validationSettings.checkDuplicateInterchangeControlNumber
     * The value indicating whether to check for duplicate interchange control
     * number.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.validationSettings.interchangeControlNumberValidityDays
     * The validity period of interchange control number.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.validationSettings.checkDuplicateGroupControlNumber
     * The value indicating whether to check for duplicate group control number.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.validationSettings.checkDuplicateTransactionSetControlNumber
     * The value indicating whether to check for duplicate transaction set control
     * number.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.validationSettings.validateEdiTypes
     * The value indicating whether to Whether to validate EDI types.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.validationSettings.validateXsdTypes
     * The value indicating whether to Whether to validate XSD types.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.validationSettings.allowLeadingAndTrailingSpacesAndZeroes
     * The value indicating whether to allow leading and trailing spaces and
     * zeroes.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.validationSettings.trimLeadingAndTrailingSpacesAndZeroes
     * The value indicating whether to trim leading and trailing spaces and zeroes.
     *
     * @param {string}
     * agreement.content.edifact.sendAgreement.protocolSettings.validationSettings.trailingSeparatorPolicy
     * The trailing separator policy. Possible values include: 'NotSpecified',
     * 'NotAllowed', 'Optional', 'Mandatory'
     *
     * @param {object}
     * agreement.content.edifact.sendAgreement.protocolSettings.framingSettings The
     * EDIFACT framing settings.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.framingSettings.serviceCodeListDirectoryVersion]
     * The service code list directory version.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.framingSettings.characterEncoding]
     * The character encoding.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.framingSettings.protocolVersion
     * The protocol version.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.framingSettings.dataElementSeparator
     * The data element separator.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.framingSettings.componentSeparator
     * The component separator.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.framingSettings.segmentTerminator
     * The segment terminator.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.framingSettings.releaseIndicator
     * The release indicator.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.framingSettings.repetitionSeparator
     * The repetition separator.
     *
     * @param {string}
     * agreement.content.edifact.sendAgreement.protocolSettings.framingSettings.characterSet
     * The EDIFACT frame setting characterSet. Possible values include:
     * 'NotSpecified', 'UNOB', 'UNOA', 'UNOC', 'UNOD', 'UNOE', 'UNOF', 'UNOG',
     * 'UNOH', 'UNOI', 'UNOJ', 'UNOK', 'UNOX', 'UNOY', 'KECA'
     *
     * @param {string}
     * agreement.content.edifact.sendAgreement.protocolSettings.framingSettings.decimalPointIndicator
     * The EDIFACT frame setting decimal indicator. Possible values include:
     * 'NotSpecified', 'Comma', 'Decimal'
     *
     * @param {string}
     * agreement.content.edifact.sendAgreement.protocolSettings.framingSettings.segmentTerminatorSuffix
     * The EDIFACT frame setting segment terminator suffix. Possible values
     * include: 'NotSpecified', 'None', 'CR', 'LF', 'CRLF'
     *
     * @param {object}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings
     * The EDIFACT envelope settings.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupAssociationAssignedCode]
     * The group association assigned code.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.communicationAgreementId]
     * The communication agreement id.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.applyDelimiterStringAdvice
     * The value indicating whether to apply delimiter string advice.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.createGroupingSegments
     * The value indicating whether to create grouping segments.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.enableDefaultGroupHeaders
     * The value indicating whether to enable default group headers.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.recipientReferencePasswordValue]
     * The recipient reference password value.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.recipientReferencePasswordQualifier]
     * The recipient reference password qualifier.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.applicationReferenceId]
     * The application reference id.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.processingPriorityCode]
     * The processing priority code.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberLowerBound
     * The interchange control number lower bound.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberUpperBound
     * The interchange control number upper bound.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.rolloverInterchangeControlNumber
     * The value indicating whether to rollover interchange control number.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberPrefix]
     * The interchange control number prefix.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.interchangeControlNumberSuffix]
     * The interchange control number suffix.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.senderReverseRoutingAddress]
     * The sender reverse routing address.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.receiverReverseRoutingAddress]
     * The receiver reverse routing address.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.functionalGroupId]
     * The functional group id.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupControllingAgencyCode]
     * The group controlling agency code.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupMessageVersion]
     * The group message version.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupMessageRelease]
     * The group message release.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupControlNumberLowerBound
     * The group control number lower bound.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupControlNumberUpperBound
     * The group control number upper bound.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.rolloverGroupControlNumber
     * The value indicating whether to rollover group control number.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupControlNumberPrefix]
     * The group control number prefix.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupControlNumberSuffix]
     * The group control number suffix.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupApplicationReceiverQualifier]
     * The group application receiver qualifier.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupApplicationReceiverId]
     * The group application receiver id.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupApplicationSenderQualifier]
     * The group application sender qualifier.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupApplicationSenderId]
     * The group application sender id.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.groupApplicationPassword]
     * The group application password.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.overwriteExistingTransactionSetControlNumber
     * The value indicating whether to overwrite existing transaction set control
     * number.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberPrefix]
     * The transaction set control number prefix.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberSuffix]
     * The transaction set control number suffix.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberLowerBound
     * The transaction set control number lower bound.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.transactionSetControlNumberUpperBound
     * The transaction set control number upper bound.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.rolloverTransactionSetControlNumber
     * The value indicating whether to rollover transaction set control number.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.isTestInterchange
     * The value indicating whether the message is a test interchange.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.senderInternalIdentification]
     * The sender internal identification.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.senderInternalSubIdentification]
     * The sender internal sub identification.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.receiverInternalIdentification]
     * The receiver internal identification.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeSettings.receiverInternalSubIdentification]
     * The receiver internal sub identification.
     *
     * @param {object}
     * agreement.content.edifact.sendAgreement.protocolSettings.acknowledgementSettings
     * The EDIFACT acknowledgement settings.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.needTechnicalAcknowledgement
     * The value indicating whether technical acknowledgement is needed.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.batchTechnicalAcknowledgements
     * The value indicating whether to batch the technical acknowledgements.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.needFunctionalAcknowledgement
     * The value indicating whether functional acknowledgement is needed.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.batchFunctionalAcknowledgements
     * The value indicating whether to batch functional acknowledgements.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.needLoopForValidMessages
     * The value indicating whether a loop is needed for valid messages.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.sendSynchronousAcknowledgement
     * The value indicating whether to send synchronous acknowledgement.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberPrefix]
     * The acknowledgement control number prefix.
     *
     * @param {string}
     * [agreement.content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberSuffix]
     * The acknowledgement control number suffix.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberLowerBound
     * The acknowledgement control number lower bound.
     *
     * @param {number}
     * agreement.content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.acknowledgementControlNumberUpperBound
     * The acknowledgement control number upper bound.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.acknowledgementSettings.rolloverAcknowledgementControlNumber
     * The value indicating whether to rollover acknowledgement control number.
     *
     * @param {object}
     * agreement.content.edifact.sendAgreement.protocolSettings.messageFilter The
     * EDIFACT message filter.
     *
     * @param {string}
     * agreement.content.edifact.sendAgreement.protocolSettings.messageFilter.messageFilterType
     * The message filter type. Possible values include: 'NotSpecified', 'Include',
     * 'Exclude'
     *
     * @param {object}
     * agreement.content.edifact.sendAgreement.protocolSettings.processingSettings
     * The EDIFACT processing Settings.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.processingSettings.maskSecurityInfo
     * The value indicating whether to mask security information.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.processingSettings.preserveInterchange
     * The value indicating whether to preserve interchange.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.processingSettings.suspendInterchangeOnError
     * The value indicating whether to suspend interchange on error.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.processingSettings.createEmptyXmlTagsForTrailingSeparators
     * The value indicating whether to create empty xml tags for trailing
     * separators.
     *
     * @param {boolean}
     * agreement.content.edifact.sendAgreement.protocolSettings.processingSettings.useDotAsDecimalSeparator
     * The value indicating whether to use dot as decimal separator.
     *
     * @param {array}
     * [agreement.content.edifact.sendAgreement.protocolSettings.envelopeOverrides]
     * The EDIFACT envelope override settings.
     *
     * @param {array}
     * [agreement.content.edifact.sendAgreement.protocolSettings.messageFilterList]
     * The EDIFACT message filter list.
     *
     * @param {array}
     * agreement.content.edifact.sendAgreement.protocolSettings.schemaReferences
     * The EDIFACT schema references.
     *
     * @param {array}
     * [agreement.content.edifact.sendAgreement.protocolSettings.validationOverrides]
     * The EDIFACT validation override settings.
     *
     * @param {array}
     * [agreement.content.edifact.sendAgreement.protocolSettings.edifactDelimiterOverrides]
     * The EDIFACT delimiter override settings.
     *
     * @param {string} [agreement.location] The resource location.
     *
     * @param {object} [agreement.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccountAgreement} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccountAgreement} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccountAgreement} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, agreementName: string, agreement: models.IntegrationAccountAgreement, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccountAgreement>;
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, agreementName: string, agreement: models.IntegrationAccountAgreement, callback: ServiceCallback<models.IntegrationAccountAgreement>): void;
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, agreementName: string, agreement: models.IntegrationAccountAgreement, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccountAgreement>): void;


    /**
     * Deletes an integration account agreement.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} agreementName The integration account agreement name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, agreementName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an integration account agreement.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} agreementName The integration account agreement name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, integrationAccountName: string, agreementName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, integrationAccountName: string, agreementName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, integrationAccountName: string, agreementName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a list of integration account agreements.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccountAgreementListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByIntegrationAccountsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccountAgreementListResult>>;

    /**
     * Gets a list of integration account agreements.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccountAgreementListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccountAgreementListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccountAgreementListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByIntegrationAccountsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccountAgreementListResult>;
    listByIntegrationAccountsNext(nextPageLink: string, callback: ServiceCallback<models.IntegrationAccountAgreementListResult>): void;
    listByIntegrationAccountsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccountAgreementListResult>): void;
}

/**
 * @class
 * Certificates
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the LogicManagementClient.
 */
export interface Certificates {


    /**
     * Gets a list of integration account certificates.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccountCertificateListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByIntegrationAccountsWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, options?: { top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccountCertificateListResult>>;

    /**
     * Gets a list of integration account certificates.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccountCertificateListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccountCertificateListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccountCertificateListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByIntegrationAccounts(resourceGroupName: string, integrationAccountName: string, options?: { top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccountCertificateListResult>;
    listByIntegrationAccounts(resourceGroupName: string, integrationAccountName: string, callback: ServiceCallback<models.IntegrationAccountCertificateListResult>): void;
    listByIntegrationAccounts(resourceGroupName: string, integrationAccountName: string, options: { top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccountCertificateListResult>): void;


    /**
     * Gets an integration account certificate.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} certificateName The integration account certificate name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccountCertificate>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, certificateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccountCertificate>>;

    /**
     * Gets an integration account certificate.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} certificateName The integration account certificate name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccountCertificate} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccountCertificate} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccountCertificate} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, integrationAccountName: string, certificateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccountCertificate>;
    get(resourceGroupName: string, integrationAccountName: string, certificateName: string, callback: ServiceCallback<models.IntegrationAccountCertificate>): void;
    get(resourceGroupName: string, integrationAccountName: string, certificateName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccountCertificate>): void;


    /**
     * Creates or updates an integration account certificate.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} certificateName The integration account certificate name.
     *
     * @param {object} certificate The integration account certificate.
     *
     * @param {object} [certificate.metadata] The metadata.
     *
     * @param {object} [certificate.key] The key details in the key vault.
     *
     * @param {object} certificate.key.keyVault The key vault reference.
     *
     * @param {string} [certificate.key.keyVault.id] The resource id.
     *
     * @param {string} certificate.key.keyName The private key name in key vault.
     *
     * @param {string} [certificate.key.keyVersion] The private key version in key
     * vault.
     *
     * @param {string} [certificate.publicCertificate] The public certificate.
     *
     * @param {string} [certificate.location] The resource location.
     *
     * @param {object} [certificate.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccountCertificate>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, certificateName: string, certificate: models.IntegrationAccountCertificate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccountCertificate>>;

    /**
     * Creates or updates an integration account certificate.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} certificateName The integration account certificate name.
     *
     * @param {object} certificate The integration account certificate.
     *
     * @param {object} [certificate.metadata] The metadata.
     *
     * @param {object} [certificate.key] The key details in the key vault.
     *
     * @param {object} certificate.key.keyVault The key vault reference.
     *
     * @param {string} [certificate.key.keyVault.id] The resource id.
     *
     * @param {string} certificate.key.keyName The private key name in key vault.
     *
     * @param {string} [certificate.key.keyVersion] The private key version in key
     * vault.
     *
     * @param {string} [certificate.publicCertificate] The public certificate.
     *
     * @param {string} [certificate.location] The resource location.
     *
     * @param {object} [certificate.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccountCertificate} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccountCertificate} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccountCertificate} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, certificateName: string, certificate: models.IntegrationAccountCertificate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccountCertificate>;
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, certificateName: string, certificate: models.IntegrationAccountCertificate, callback: ServiceCallback<models.IntegrationAccountCertificate>): void;
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, certificateName: string, certificate: models.IntegrationAccountCertificate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccountCertificate>): void;


    /**
     * Deletes an integration account certificate.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} certificateName The integration account certificate name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, certificateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an integration account certificate.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} certificateName The integration account certificate name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, integrationAccountName: string, certificateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, integrationAccountName: string, certificateName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, integrationAccountName: string, certificateName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a list of integration account certificates.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccountCertificateListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByIntegrationAccountsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccountCertificateListResult>>;

    /**
     * Gets a list of integration account certificates.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccountCertificateListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccountCertificateListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccountCertificateListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByIntegrationAccountsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccountCertificateListResult>;
    listByIntegrationAccountsNext(nextPageLink: string, callback: ServiceCallback<models.IntegrationAccountCertificateListResult>): void;
    listByIntegrationAccountsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccountCertificateListResult>): void;
}

/**
 * @class
 * Sessions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the LogicManagementClient.
 */
export interface Sessions {


    /**
     * Gets a list of integration account sessions.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccountSessionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByIntegrationAccountsWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccountSessionListResult>>;

    /**
     * Gets a list of integration account sessions.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.top] The number of items to be included in the
     * result.
     *
     * @param {string} [options.filter] The filter to apply on the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccountSessionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccountSessionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccountSessionListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByIntegrationAccounts(resourceGroupName: string, integrationAccountName: string, options?: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccountSessionListResult>;
    listByIntegrationAccounts(resourceGroupName: string, integrationAccountName: string, callback: ServiceCallback<models.IntegrationAccountSessionListResult>): void;
    listByIntegrationAccounts(resourceGroupName: string, integrationAccountName: string, options: { top? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccountSessionListResult>): void;


    /**
     * Gets an integration account session.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} sessionName The integration account session name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccountSession>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, sessionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccountSession>>;

    /**
     * Gets an integration account session.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} sessionName The integration account session name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccountSession} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccountSession} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccountSession} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, integrationAccountName: string, sessionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccountSession>;
    get(resourceGroupName: string, integrationAccountName: string, sessionName: string, callback: ServiceCallback<models.IntegrationAccountSession>): void;
    get(resourceGroupName: string, integrationAccountName: string, sessionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccountSession>): void;


    /**
     * Creates or updates an integration account session.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} sessionName The integration account session name.
     *
     * @param {object} session The integration account session.
     *
     * @param {object} [session.content] The session content.
     *
     * @param {string} [session.location] The resource location.
     *
     * @param {object} [session.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccountSession>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, sessionName: string, session: models.IntegrationAccountSession, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccountSession>>;

    /**
     * Creates or updates an integration account session.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} sessionName The integration account session name.
     *
     * @param {object} session The integration account session.
     *
     * @param {object} [session.content] The session content.
     *
     * @param {string} [session.location] The resource location.
     *
     * @param {object} [session.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccountSession} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccountSession} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccountSession} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, sessionName: string, session: models.IntegrationAccountSession, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccountSession>;
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, sessionName: string, session: models.IntegrationAccountSession, callback: ServiceCallback<models.IntegrationAccountSession>): void;
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, sessionName: string, session: models.IntegrationAccountSession, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccountSession>): void;


    /**
     * Deletes an integration account session.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} sessionName The integration account session name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, integrationAccountName: string, sessionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an integration account session.
     *
     * @param {string} resourceGroupName The resource group name.
     *
     * @param {string} integrationAccountName The integration account name.
     *
     * @param {string} sessionName The integration account session name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, integrationAccountName: string, sessionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, integrationAccountName: string, sessionName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, integrationAccountName: string, sessionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a list of integration account sessions.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IntegrationAccountSessionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByIntegrationAccountsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IntegrationAccountSessionListResult>>;

    /**
     * Gets a list of integration account sessions.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IntegrationAccountSessionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IntegrationAccountSessionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IntegrationAccountSessionListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByIntegrationAccountsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IntegrationAccountSessionListResult>;
    listByIntegrationAccountsNext(nextPageLink: string, callback: ServiceCallback<models.IntegrationAccountSessionListResult>): void;
    listByIntegrationAccountsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IntegrationAccountSessionListResult>): void;
}
