/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Managers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimpleManagementClient.
 */
export interface Managers {


    /**
     * Retrieves all the managers in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagerList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagerList>>;

    /**
     * Retrieves all the managers in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagerList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagerList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagerList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagerList>;
    list(callback: ServiceCallback<models.ManagerList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagerList>): void;


    /**
     * Retrieves all the managers in a resource group.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagerList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagerList>>;

    /**
     * Retrieves all the managers in a resource group.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagerList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagerList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagerList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagerList>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ManagerList>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagerList>): void;


    /**
     * Returns the properties of the specified manager name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Manager>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Manager>>;

    /**
     * Returns the properties of the specified manager name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Manager} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Manager} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Manager} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Manager>;
    get(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.Manager>): void;
    get(resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Manager>): void;


    /**
     * Creates or updates the manager.
     *
     * @param {object} manager The manager.
     *
     * @param {object} [manager.cisIntrinsicSettings] Specifies if the Manager is
     * Garda or Helsinki
     *
     * @param {string} manager.cisIntrinsicSettings.type Refers to the type of the
     * StorSimple Manager. Possible values include: 'GardaV1', 'HelsinkiV1'
     *
     * @param {string} [manager.etag] ETag of the Manager
     *
     * @param {string} manager.location The Geo location of the Manager
     *
     * @param {object} [manager.tags] Tags attached to the Manager
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Manager>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(manager: models.Manager, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Manager>>;

    /**
     * Creates or updates the manager.
     *
     * @param {object} manager The manager.
     *
     * @param {object} [manager.cisIntrinsicSettings] Specifies if the Manager is
     * Garda or Helsinki
     *
     * @param {string} manager.cisIntrinsicSettings.type Refers to the type of the
     * StorSimple Manager. Possible values include: 'GardaV1', 'HelsinkiV1'
     *
     * @param {string} [manager.etag] ETag of the Manager
     *
     * @param {string} manager.location The Geo location of the Manager
     *
     * @param {object} [manager.tags] Tags attached to the Manager
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Manager} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Manager} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Manager} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(manager: models.Manager, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Manager>;
    createOrUpdate(manager: models.Manager, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.Manager>): void;
    createOrUpdate(manager: models.Manager, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Manager>): void;


    /**
     * Deletes the manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates the StorSimple Manager.
     *
     * @param {object} parameters The manager update parameters.
     *
     * @param {object} [parameters.tags] The tags attached to the StorSimple
     * Manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Manager>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(parameters: models.ManagerPatch, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Manager>>;

    /**
     * Updates the StorSimple Manager.
     *
     * @param {object} parameters The manager update parameters.
     *
     * @param {object} [parameters.tags] The tags attached to the StorSimple
     * Manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Manager} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Manager} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Manager} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(parameters: models.ManagerPatch, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Manager>;
    update(parameters: models.ManagerPatch, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.Manager>): void;
    update(parameters: models.ManagerPatch, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Manager>): void;


    /**
     * Upload Vault Cred Certificate.
     * Returns UploadCertificateResponse
     *
     * @param {string} certificateName Certificate Name
     *
     * @param {object} uploadCertificateRequestrequest UploadCertificateRequest
     * Request
     *
     * @param {string} [uploadCertificateRequestrequest.authType] Specify the
     * Authentication type. Possible values include: 'Invalid',
     * 'AccessControlService', 'AzureActiveDirectory'
     *
     * @param {string} uploadCertificateRequestrequest.certificate Gets or sets the
     * base64 encoded certificate raw data string
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UploadCertificateResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    uploadRegistrationCertificateWithHttpOperationResponse(certificateName: string, uploadCertificateRequestrequest: models.UploadCertificateRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UploadCertificateResponse>>;

    /**
     * Upload Vault Cred Certificate.
     * Returns UploadCertificateResponse
     *
     * @param {string} certificateName Certificate Name
     *
     * @param {object} uploadCertificateRequestrequest UploadCertificateRequest
     * Request
     *
     * @param {string} [uploadCertificateRequestrequest.authType] Specify the
     * Authentication type. Possible values include: 'Invalid',
     * 'AccessControlService', 'AzureActiveDirectory'
     *
     * @param {string} uploadCertificateRequestrequest.certificate Gets or sets the
     * base64 encoded certificate raw data string
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UploadCertificateResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UploadCertificateResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UploadCertificateResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    uploadRegistrationCertificate(certificateName: string, uploadCertificateRequestrequest: models.UploadCertificateRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UploadCertificateResponse>;
    uploadRegistrationCertificate(certificateName: string, uploadCertificateRequestrequest: models.UploadCertificateRequest, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.UploadCertificateResponse>): void;
    uploadRegistrationCertificate(certificateName: string, uploadCertificateRequestrequest: models.UploadCertificateRequest, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UploadCertificateResponse>): void;


    /**
     * Returns the encryption settings of the manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EncryptionSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEncryptionSettingsWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EncryptionSettings>>;

    /**
     * Returns the encryption settings of the manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EncryptionSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EncryptionSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EncryptionSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEncryptionSettings(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EncryptionSettings>;
    getEncryptionSettings(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.EncryptionSettings>): void;
    getEncryptionSettings(resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EncryptionSettings>): void;


    /**
     * Returns the extended information of the specified manager name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagerExtendedInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getExtendedInfoWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagerExtendedInfo>>;

    /**
     * Returns the extended information of the specified manager name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagerExtendedInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagerExtendedInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagerExtendedInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getExtendedInfo(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagerExtendedInfo>;
    getExtendedInfo(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.ManagerExtendedInfo>): void;
    getExtendedInfo(resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagerExtendedInfo>): void;


    /**
     * Creates the extended info of the manager.
     *
     * @param {object} managerExtendedInfo The manager extended information.
     *
     * @param {string} [managerExtendedInfo.version] Represents the version of the
     * ExtendedInfo object being persisted
     *
     * @param {string} managerExtendedInfo.integrityKey Represents the CIK of the
     * resource
     *
     * @param {string} [managerExtendedInfo.encryptionKey] Represents the CEK of
     * the resource
     *
     * @param {string} [managerExtendedInfo.encryptionKeyThumbprint] Represents the
     * Cert thumbprint that was used to encrypt the CEK
     *
     * @param {string} [managerExtendedInfo.portalCertificateThumbprint] Represents
     * the portal thumbprint which can be used optionally to encrypt the entire
     * data before storing it.
     *
     * @param {string} managerExtendedInfo.algorithm Represents the encryption
     * algorithm used to encrypt the other keys. None - if EncryptionKey is saved
     * in plain text format. AlgorithmName - if encryption is used
     *
     * @param {string} [managerExtendedInfo.etag] ETag of the Resource
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagerExtendedInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createExtendedInfoWithHttpOperationResponse(managerExtendedInfo: models.ManagerExtendedInfo, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagerExtendedInfo>>;

    /**
     * Creates the extended info of the manager.
     *
     * @param {object} managerExtendedInfo The manager extended information.
     *
     * @param {string} [managerExtendedInfo.version] Represents the version of the
     * ExtendedInfo object being persisted
     *
     * @param {string} managerExtendedInfo.integrityKey Represents the CIK of the
     * resource
     *
     * @param {string} [managerExtendedInfo.encryptionKey] Represents the CEK of
     * the resource
     *
     * @param {string} [managerExtendedInfo.encryptionKeyThumbprint] Represents the
     * Cert thumbprint that was used to encrypt the CEK
     *
     * @param {string} [managerExtendedInfo.portalCertificateThumbprint] Represents
     * the portal thumbprint which can be used optionally to encrypt the entire
     * data before storing it.
     *
     * @param {string} managerExtendedInfo.algorithm Represents the encryption
     * algorithm used to encrypt the other keys. None - if EncryptionKey is saved
     * in plain text format. AlgorithmName - if encryption is used
     *
     * @param {string} [managerExtendedInfo.etag] ETag of the Resource
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagerExtendedInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagerExtendedInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagerExtendedInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createExtendedInfo(managerExtendedInfo: models.ManagerExtendedInfo, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagerExtendedInfo>;
    createExtendedInfo(managerExtendedInfo: models.ManagerExtendedInfo, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.ManagerExtendedInfo>): void;
    createExtendedInfo(managerExtendedInfo: models.ManagerExtendedInfo, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagerExtendedInfo>): void;


    /**
     * Deletes the extended info of the manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteExtendedInfoWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the extended info of the manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteExtendedInfo(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteExtendedInfo(resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    deleteExtendedInfo(resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates the extended info of the manager.
     *
     * @param {object} managerExtendedInfo The manager extended information.
     *
     * @param {string} [managerExtendedInfo.version] Represents the version of the
     * ExtendedInfo object being persisted
     *
     * @param {string} managerExtendedInfo.integrityKey Represents the CIK of the
     * resource
     *
     * @param {string} [managerExtendedInfo.encryptionKey] Represents the CEK of
     * the resource
     *
     * @param {string} [managerExtendedInfo.encryptionKeyThumbprint] Represents the
     * Cert thumbprint that was used to encrypt the CEK
     *
     * @param {string} [managerExtendedInfo.portalCertificateThumbprint] Represents
     * the portal thumbprint which can be used optionally to encrypt the entire
     * data before storing it.
     *
     * @param {string} managerExtendedInfo.algorithm Represents the encryption
     * algorithm used to encrypt the other keys. None - if EncryptionKey is saved
     * in plain text format. AlgorithmName - if encryption is used
     *
     * @param {string} [managerExtendedInfo.etag] ETag of the Resource
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {string} ifMatch Pass the ETag of ExtendedInfo fetched from GET call
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagerExtendedInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateExtendedInfoWithHttpOperationResponse(managerExtendedInfo: models.ManagerExtendedInfo, resourceGroupName: string, managerName: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagerExtendedInfo>>;

    /**
     * Updates the extended info of the manager.
     *
     * @param {object} managerExtendedInfo The manager extended information.
     *
     * @param {string} [managerExtendedInfo.version] Represents the version of the
     * ExtendedInfo object being persisted
     *
     * @param {string} managerExtendedInfo.integrityKey Represents the CIK of the
     * resource
     *
     * @param {string} [managerExtendedInfo.encryptionKey] Represents the CEK of
     * the resource
     *
     * @param {string} [managerExtendedInfo.encryptionKeyThumbprint] Represents the
     * Cert thumbprint that was used to encrypt the CEK
     *
     * @param {string} [managerExtendedInfo.portalCertificateThumbprint] Represents
     * the portal thumbprint which can be used optionally to encrypt the entire
     * data before storing it.
     *
     * @param {string} managerExtendedInfo.algorithm Represents the encryption
     * algorithm used to encrypt the other keys. None - if EncryptionKey is saved
     * in plain text format. AlgorithmName - if encryption is used
     *
     * @param {string} [managerExtendedInfo.etag] ETag of the Resource
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {string} ifMatch Pass the ETag of ExtendedInfo fetched from GET call
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagerExtendedInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagerExtendedInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagerExtendedInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateExtendedInfo(managerExtendedInfo: models.ManagerExtendedInfo, resourceGroupName: string, managerName: string, ifMatch: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagerExtendedInfo>;
    updateExtendedInfo(managerExtendedInfo: models.ManagerExtendedInfo, resourceGroupName: string, managerName: string, ifMatch: string, callback: ServiceCallback<models.ManagerExtendedInfo>): void;
    updateExtendedInfo(managerExtendedInfo: models.ManagerExtendedInfo, resourceGroupName: string, managerName: string, ifMatch: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagerExtendedInfo>): void;


    /**
     * Returns the symmetric encryption key of the manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SymmetricEncryptedSecret>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEncryptionKeyWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SymmetricEncryptedSecret>>;

    /**
     * Returns the symmetric encryption key of the manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SymmetricEncryptedSecret} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SymmetricEncryptedSecret} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SymmetricEncryptedSecret} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEncryptionKey(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SymmetricEncryptedSecret>;
    getEncryptionKey(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.SymmetricEncryptedSecret>): void;
    getEncryptionKey(resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SymmetricEncryptedSecret>): void;


    /**
     * Gets the  manager metrics
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricList>>;

    /**
     * Gets the  manager metrics
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricList>;
    listMetrics(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.MetricList>): void;
    listMetrics(resourceGroupName: string, managerName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricList>): void;


    /**
     * Retrieves metric definition of all metrics aggregated at manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricDefinitionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricDefinitionWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricDefinitionList>>;

    /**
     * Retrieves metric definition of all metrics aggregated at manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricDefinitionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricDefinitionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricDefinitionList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetricDefinition(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricDefinitionList>;
    listMetricDefinition(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.MetricDefinitionList>): void;
    listMetricDefinition(resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinitionList>): void;
}

/**
 * @class
 * AvailableProviderOperationsOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimpleManagementClient.
 */
export interface AvailableProviderOperationsOperations {


    /**
     * List of AvailableProviderOperations
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AvailableProviderOperations>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AvailableProviderOperations>>;

    /**
     * List of AvailableProviderOperations
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AvailableProviderOperations} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AvailableProviderOperations} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AvailableProviderOperations} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AvailableProviderOperations>;
    list(callback: ServiceCallback<models.AvailableProviderOperations>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AvailableProviderOperations>): void;


    /**
     * List of AvailableProviderOperations
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AvailableProviderOperations>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AvailableProviderOperations>>;

    /**
     * List of AvailableProviderOperations
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AvailableProviderOperations} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AvailableProviderOperations} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AvailableProviderOperations} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AvailableProviderOperations>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.AvailableProviderOperations>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AvailableProviderOperations>): void;
}

/**
 * @class
 * AccessControlRecords
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimpleManagementClient.
 */
export interface AccessControlRecords {


    /**
     * Retrieves all the access control records in a manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AccessControlRecordList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByManagerWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AccessControlRecordList>>;

    /**
     * Retrieves all the access control records in a manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AccessControlRecordList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AccessControlRecordList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AccessControlRecordList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByManager(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AccessControlRecordList>;
    listByManager(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.AccessControlRecordList>): void;
    listByManager(resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AccessControlRecordList>): void;


    /**
     * Returns the properties of the specified access control record name.
     *
     * @param {string} accessControlRecordName Name of access control record to be
     * fetched.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AccessControlRecord>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(accessControlRecordName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AccessControlRecord>>;

    /**
     * Returns the properties of the specified access control record name.
     *
     * @param {string} accessControlRecordName Name of access control record to be
     * fetched.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AccessControlRecord} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AccessControlRecord} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AccessControlRecord} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(accessControlRecordName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AccessControlRecord>;
    get(accessControlRecordName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.AccessControlRecord>): void;
    get(accessControlRecordName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AccessControlRecord>): void;


    /**
     * Creates or Updates an access control record.
     *
     * @param {string} accessControlRecordName The name of the access control
     * record.
     *
     * @param {object} accessControlRecord The access control record to be added or
     * updated.
     *
     * @param {string} accessControlRecord.initiatorName The Iscsi initiator name
     * (IQN)
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AccessControlRecord>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(accessControlRecordName: string, accessControlRecord: models.AccessControlRecord, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AccessControlRecord>>;

    /**
     * Creates or Updates an access control record.
     *
     * @param {string} accessControlRecordName The name of the access control
     * record.
     *
     * @param {object} accessControlRecord The access control record to be added or
     * updated.
     *
     * @param {string} accessControlRecord.initiatorName The Iscsi initiator name
     * (IQN)
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AccessControlRecord} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AccessControlRecord} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AccessControlRecord} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(accessControlRecordName: string, accessControlRecord: models.AccessControlRecord, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AccessControlRecord>;
    createOrUpdate(accessControlRecordName: string, accessControlRecord: models.AccessControlRecord, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.AccessControlRecord>): void;
    createOrUpdate(accessControlRecordName: string, accessControlRecord: models.AccessControlRecord, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AccessControlRecord>): void;


    /**
     * Deletes the access control record.
     *
     * @param {string} accessControlRecordName The name of the access control
     * record to delete.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(accessControlRecordName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the access control record.
     *
     * @param {string} accessControlRecordName The name of the access control
     * record to delete.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(accessControlRecordName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(accessControlRecordName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(accessControlRecordName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or Updates an access control record.
     *
     * @param {string} accessControlRecordName The name of the access control
     * record.
     *
     * @param {object} accessControlRecord The access control record to be added or
     * updated.
     *
     * @param {string} accessControlRecord.initiatorName The Iscsi initiator name
     * (IQN)
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AccessControlRecord>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(accessControlRecordName: string, accessControlRecord: models.AccessControlRecord, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AccessControlRecord>>;

    /**
     * Creates or Updates an access control record.
     *
     * @param {string} accessControlRecordName The name of the access control
     * record.
     *
     * @param {object} accessControlRecord The access control record to be added or
     * updated.
     *
     * @param {string} accessControlRecord.initiatorName The Iscsi initiator name
     * (IQN)
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AccessControlRecord} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AccessControlRecord} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AccessControlRecord} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(accessControlRecordName: string, accessControlRecord: models.AccessControlRecord, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AccessControlRecord>;
    beginCreateOrUpdate(accessControlRecordName: string, accessControlRecord: models.AccessControlRecord, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.AccessControlRecord>): void;
    beginCreateOrUpdate(accessControlRecordName: string, accessControlRecord: models.AccessControlRecord, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AccessControlRecord>): void;


    /**
     * Deletes the access control record.
     *
     * @param {string} accessControlRecordName The name of the access control
     * record to delete.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(accessControlRecordName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the access control record.
     *
     * @param {string} accessControlRecordName The name of the access control
     * record to delete.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(accessControlRecordName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(accessControlRecordName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(accessControlRecordName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * Alerts
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimpleManagementClient.
 */
export interface Alerts {


    /**
     * Retrieves all the alerts in a manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AlertList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByManagerWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AlertList>>;

    /**
     * Retrieves all the alerts in a manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AlertList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AlertList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AlertList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByManager(resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.AlertList>;
    listByManager(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.AlertList>): void;
    listByManager(resourceGroupName: string, managerName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AlertList>): void;


    /**
     * Clear the alerts.
     *
     * @param {object} request The clear alert request.
     *
     * @param {string} [request.resolutionMessage] Resolution message while
     * clearing the request
     *
     * @param {array} request.alerts List of alert Ids to be cleared
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    clearWithHttpOperationResponse(request: models.ClearAlertRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Clear the alerts.
     *
     * @param {object} request The clear alert request.
     *
     * @param {string} [request.resolutionMessage] Resolution message while
     * clearing the request
     *
     * @param {array} request.alerts List of alert Ids to be cleared
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    clear(request: models.ClearAlertRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    clear(request: models.ClearAlertRequest, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    clear(request: models.ClearAlertRequest, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Sends a test alert email.
     *
     * @param {string} deviceName The device name.
     *
     * @param {object} request The send test alert email request.
     *
     * @param {array} request.emailList List of emails to send the test alerts
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    sendTestEmailWithHttpOperationResponse(deviceName: string, request: models.SendTestAlertEmailRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Sends a test alert email.
     *
     * @param {string} deviceName The device name.
     *
     * @param {object} request The send test alert email request.
     *
     * @param {array} request.emailList List of emails to send the test alerts
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    sendTestEmail(deviceName: string, request: models.SendTestAlertEmailRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    sendTestEmail(deviceName: string, request: models.SendTestAlertEmailRequest, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    sendTestEmail(deviceName: string, request: models.SendTestAlertEmailRequest, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Retrieves all the alerts in a manager.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AlertList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByManagerNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AlertList>>;

    /**
     * Retrieves all the alerts in a manager.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AlertList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AlertList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AlertList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByManagerNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AlertList>;
    listByManagerNext(nextPageLink: string, callback: ServiceCallback<models.AlertList>): void;
    listByManagerNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AlertList>): void;
}

/**
 * @class
 * Backups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimpleManagementClient.
 */
export interface Backups {


    /**
     * Retrieves all the backups in a manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByManagerWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupList>>;

    /**
     * Retrieves all the backups in a manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByManager(resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupList>;
    listByManager(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.BackupList>): void;
    listByManager(resourceGroupName: string, managerName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupList>): void;


    /**
     * Retrieves all the backups in a device. Can be used to get the backups for
     * failover also.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.forFailover] Set to true if you need backups which
     * can be used for failover.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDeviceWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { forFailover? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupList>>;

    /**
     * Retrieves all the backups in a device. Can be used to get the backups for
     * failover also.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.forFailover] Set to true if you need backups which
     * can be used for failover.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options?: { forFailover? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupList>;
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.BackupList>): void;
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options: { forFailover? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupList>): void;


    /**
     * Deletes the backup.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} backupName The backup name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(deviceName: string, backupName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the backup.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} backupName The backup name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(deviceName: string, backupName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(deviceName: string, backupName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(deviceName: string, backupName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Clones the given backup element to a new disk or share with given details.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} backupName The backup name.
     *
     * @param {string} elementName The backup element name.
     *
     * @param {object} cloneRequest The clone request.
     *
     * @param {string} cloneRequest.targetDeviceId DeviceId of the device which
     * will act as the Clone target
     *
     * @param {string} cloneRequest.targetAccessPointId Access point Id on which
     * clone job will performed.
     *
     * @param {string} cloneRequest.newEndpointName Name of new endpoint which will
     * created as part of clone job.
     *
     * @param {object} [cloneRequest.share] Share Object.
     *
     * @param {string} [cloneRequest.share.description] Description for file share
     *
     * @param {string} cloneRequest.share.shareStatus The Share Status. Possible
     * values include: 'Online', 'Offline'
     *
     * @param {string} cloneRequest.share.dataPolicy The data policy. Possible
     * values include: 'Invalid', 'Local', 'Tiered', 'Cloud'
     *
     * @param {string} cloneRequest.share.adminUser The user/group who will have
     * full permission in this share. Active directory email address. Example:
     * xyz@contoso.com or Contoso\xyz.
     *
     * @param {number} cloneRequest.share.provisionedCapacityInBytes The total
     * provisioned capacity in Bytes
     *
     * @param {string} cloneRequest.share.monitoringStatus The monitoring status.
     * Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [cloneRequest.disk] Disk Object
     *
     * @param {string} [cloneRequest.disk.description] The description.
     *
     * @param {string} cloneRequest.disk.diskStatus The disk status. Possible
     * values include: 'Online', 'Offline'
     *
     * @param {array} cloneRequest.disk.accessControlRecords The access control
     * records.
     *
     * @param {string} cloneRequest.disk.dataPolicy The data policy. Possible
     * values include: 'Invalid', 'Local', 'Tiered', 'Cloud'
     *
     * @param {number} cloneRequest.disk.provisionedCapacityInBytes The provisioned
     * capacity in bytes.
     *
     * @param {string} cloneRequest.disk.monitoringStatus The monitoring. Possible
     * values include: 'Enabled', 'Disabled'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    cloneWithHttpOperationResponse(deviceName: string, backupName: string, elementName: string, cloneRequest: models.CloneRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Clones the given backup element to a new disk or share with given details.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} backupName The backup name.
     *
     * @param {string} elementName The backup element name.
     *
     * @param {object} cloneRequest The clone request.
     *
     * @param {string} cloneRequest.targetDeviceId DeviceId of the device which
     * will act as the Clone target
     *
     * @param {string} cloneRequest.targetAccessPointId Access point Id on which
     * clone job will performed.
     *
     * @param {string} cloneRequest.newEndpointName Name of new endpoint which will
     * created as part of clone job.
     *
     * @param {object} [cloneRequest.share] Share Object.
     *
     * @param {string} [cloneRequest.share.description] Description for file share
     *
     * @param {string} cloneRequest.share.shareStatus The Share Status. Possible
     * values include: 'Online', 'Offline'
     *
     * @param {string} cloneRequest.share.dataPolicy The data policy. Possible
     * values include: 'Invalid', 'Local', 'Tiered', 'Cloud'
     *
     * @param {string} cloneRequest.share.adminUser The user/group who will have
     * full permission in this share. Active directory email address. Example:
     * xyz@contoso.com or Contoso\xyz.
     *
     * @param {number} cloneRequest.share.provisionedCapacityInBytes The total
     * provisioned capacity in Bytes
     *
     * @param {string} cloneRequest.share.monitoringStatus The monitoring status.
     * Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [cloneRequest.disk] Disk Object
     *
     * @param {string} [cloneRequest.disk.description] The description.
     *
     * @param {string} cloneRequest.disk.diskStatus The disk status. Possible
     * values include: 'Online', 'Offline'
     *
     * @param {array} cloneRequest.disk.accessControlRecords The access control
     * records.
     *
     * @param {string} cloneRequest.disk.dataPolicy The data policy. Possible
     * values include: 'Invalid', 'Local', 'Tiered', 'Cloud'
     *
     * @param {number} cloneRequest.disk.provisionedCapacityInBytes The provisioned
     * capacity in bytes.
     *
     * @param {string} cloneRequest.disk.monitoringStatus The monitoring. Possible
     * values include: 'Enabled', 'Disabled'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    clone(deviceName: string, backupName: string, elementName: string, cloneRequest: models.CloneRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    clone(deviceName: string, backupName: string, elementName: string, cloneRequest: models.CloneRequest, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    clone(deviceName: string, backupName: string, elementName: string, cloneRequest: models.CloneRequest, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Deletes the backup.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} backupName The backup name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(deviceName: string, backupName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the backup.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} backupName The backup name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(deviceName: string, backupName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(deviceName: string, backupName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(deviceName: string, backupName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Clones the given backup element to a new disk or share with given details.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} backupName The backup name.
     *
     * @param {string} elementName The backup element name.
     *
     * @param {object} cloneRequest The clone request.
     *
     * @param {string} cloneRequest.targetDeviceId DeviceId of the device which
     * will act as the Clone target
     *
     * @param {string} cloneRequest.targetAccessPointId Access point Id on which
     * clone job will performed.
     *
     * @param {string} cloneRequest.newEndpointName Name of new endpoint which will
     * created as part of clone job.
     *
     * @param {object} [cloneRequest.share] Share Object.
     *
     * @param {string} [cloneRequest.share.description] Description for file share
     *
     * @param {string} cloneRequest.share.shareStatus The Share Status. Possible
     * values include: 'Online', 'Offline'
     *
     * @param {string} cloneRequest.share.dataPolicy The data policy. Possible
     * values include: 'Invalid', 'Local', 'Tiered', 'Cloud'
     *
     * @param {string} cloneRequest.share.adminUser The user/group who will have
     * full permission in this share. Active directory email address. Example:
     * xyz@contoso.com or Contoso\xyz.
     *
     * @param {number} cloneRequest.share.provisionedCapacityInBytes The total
     * provisioned capacity in Bytes
     *
     * @param {string} cloneRequest.share.monitoringStatus The monitoring status.
     * Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [cloneRequest.disk] Disk Object
     *
     * @param {string} [cloneRequest.disk.description] The description.
     *
     * @param {string} cloneRequest.disk.diskStatus The disk status. Possible
     * values include: 'Online', 'Offline'
     *
     * @param {array} cloneRequest.disk.accessControlRecords The access control
     * records.
     *
     * @param {string} cloneRequest.disk.dataPolicy The data policy. Possible
     * values include: 'Invalid', 'Local', 'Tiered', 'Cloud'
     *
     * @param {number} cloneRequest.disk.provisionedCapacityInBytes The provisioned
     * capacity in bytes.
     *
     * @param {string} cloneRequest.disk.monitoringStatus The monitoring. Possible
     * values include: 'Enabled', 'Disabled'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCloneWithHttpOperationResponse(deviceName: string, backupName: string, elementName: string, cloneRequest: models.CloneRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Clones the given backup element to a new disk or share with given details.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} backupName The backup name.
     *
     * @param {string} elementName The backup element name.
     *
     * @param {object} cloneRequest The clone request.
     *
     * @param {string} cloneRequest.targetDeviceId DeviceId of the device which
     * will act as the Clone target
     *
     * @param {string} cloneRequest.targetAccessPointId Access point Id on which
     * clone job will performed.
     *
     * @param {string} cloneRequest.newEndpointName Name of new endpoint which will
     * created as part of clone job.
     *
     * @param {object} [cloneRequest.share] Share Object.
     *
     * @param {string} [cloneRequest.share.description] Description for file share
     *
     * @param {string} cloneRequest.share.shareStatus The Share Status. Possible
     * values include: 'Online', 'Offline'
     *
     * @param {string} cloneRequest.share.dataPolicy The data policy. Possible
     * values include: 'Invalid', 'Local', 'Tiered', 'Cloud'
     *
     * @param {string} cloneRequest.share.adminUser The user/group who will have
     * full permission in this share. Active directory email address. Example:
     * xyz@contoso.com or Contoso\xyz.
     *
     * @param {number} cloneRequest.share.provisionedCapacityInBytes The total
     * provisioned capacity in Bytes
     *
     * @param {string} cloneRequest.share.monitoringStatus The monitoring status.
     * Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [cloneRequest.disk] Disk Object
     *
     * @param {string} [cloneRequest.disk.description] The description.
     *
     * @param {string} cloneRequest.disk.diskStatus The disk status. Possible
     * values include: 'Online', 'Offline'
     *
     * @param {array} cloneRequest.disk.accessControlRecords The access control
     * records.
     *
     * @param {string} cloneRequest.disk.dataPolicy The data policy. Possible
     * values include: 'Invalid', 'Local', 'Tiered', 'Cloud'
     *
     * @param {number} cloneRequest.disk.provisionedCapacityInBytes The provisioned
     * capacity in bytes.
     *
     * @param {string} cloneRequest.disk.monitoringStatus The monitoring. Possible
     * values include: 'Enabled', 'Disabled'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginClone(deviceName: string, backupName: string, elementName: string, cloneRequest: models.CloneRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginClone(deviceName: string, backupName: string, elementName: string, cloneRequest: models.CloneRequest, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginClone(deviceName: string, backupName: string, elementName: string, cloneRequest: models.CloneRequest, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Retrieves all the backups in a manager.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByManagerNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupList>>;

    /**
     * Retrieves all the backups in a manager.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByManagerNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupList>;
    listByManagerNext(nextPageLink: string, callback: ServiceCallback<models.BackupList>): void;
    listByManagerNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupList>): void;


    /**
     * Retrieves all the backups in a device. Can be used to get the backups for
     * failover also.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDeviceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupList>>;

    /**
     * Retrieves all the backups in a device. Can be used to get the backups for
     * failover also.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDeviceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupList>;
    listByDeviceNext(nextPageLink: string, callback: ServiceCallback<models.BackupList>): void;
    listByDeviceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupList>): void;
}

/**
 * @class
 * Devices
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimpleManagementClient.
 */
export interface Devices {


    /**
     * Retrieves all the devices in a manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify $expand=details to populate
     * additional fields related to the device.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeviceList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByManagerWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeviceList>>;

    /**
     * Retrieves all the devices in a manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify $expand=details to populate
     * additional fields related to the device.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeviceList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeviceList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeviceList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByManager(resourceGroupName: string, managerName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DeviceList>;
    listByManager(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.DeviceList>): void;
    listByManager(resourceGroupName: string, managerName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeviceList>): void;


    /**
     * Returns the properties of the specified device name.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify $expand=details to populate
     * additional fields related to the device.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Device>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Device>>;

    /**
     * Returns the properties of the specified device name.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify $expand=details to populate
     * additional fields related to the device.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Device} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Device} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Device} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(deviceName: string, resourceGroupName: string, managerName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Device>;
    get(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.Device>): void;
    get(deviceName: string, resourceGroupName: string, managerName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Device>): void;


    /**
     * Deletes the device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Patches the device.
     *
     * @param {string} deviceName The device Name.
     *
     * @param {object} devicePatch Patch representation of the device.
     *
     * @param {string} [devicePatch.deviceDescription] Short description given for
     * the device
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Device>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    patchWithHttpOperationResponse(deviceName: string, devicePatch: models.DevicePatch, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Device>>;

    /**
     * Patches the device.
     *
     * @param {string} deviceName The device Name.
     *
     * @param {object} devicePatch Patch representation of the device.
     *
     * @param {string} [devicePatch.deviceDescription] Short description given for
     * the device
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Device} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Device} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Device} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    patch(deviceName: string, devicePatch: models.DevicePatch, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Device>;
    patch(deviceName: string, devicePatch: models.DevicePatch, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.Device>): void;
    patch(deviceName: string, devicePatch: models.DevicePatch, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Device>): void;


    /**
     * Returns the alert settings of the specified device name.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AlertSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAlertSettingsWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AlertSettings>>;

    /**
     * Returns the alert settings of the specified device name.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AlertSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AlertSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AlertSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAlertSettings(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AlertSettings>;
    getAlertSettings(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.AlertSettings>): void;
    getAlertSettings(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AlertSettings>): void;


    /**
     * Creates or updates the alert settings
     *
     * @param {string} deviceName The device name.
     *
     * @param {object} alertSettings The alert settings.
     *
     * @param {string} alertSettings.emailNotification Value indicating whether
     * user/admins will receive emails when an alert condition occurs on the
     * system. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} alertSettings.notificationToServiceOwners Value indicating
     * whether service owners will receive emails when an alert condition occurs on
     * the system. Applicable only if emailNotification flag is Enabled. Possible
     * values include: 'Enabled', 'Disabled'
     *
     * @param {string} alertSettings.alertNotificationCulture Culture setting to be
     * used while building alert emails. For eg: "en-US"
     *
     * @param {array} [alertSettings.additionalRecipientEmailList] List of email
     * addresses (apart from admin/co-admin of subscription) to whom the alert
     * emails need to be sent
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AlertSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateAlertSettingsWithHttpOperationResponse(deviceName: string, alertSettings: models.AlertSettings, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AlertSettings>>;

    /**
     * Creates or updates the alert settings
     *
     * @param {string} deviceName The device name.
     *
     * @param {object} alertSettings The alert settings.
     *
     * @param {string} alertSettings.emailNotification Value indicating whether
     * user/admins will receive emails when an alert condition occurs on the
     * system. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} alertSettings.notificationToServiceOwners Value indicating
     * whether service owners will receive emails when an alert condition occurs on
     * the system. Applicable only if emailNotification flag is Enabled. Possible
     * values include: 'Enabled', 'Disabled'
     *
     * @param {string} alertSettings.alertNotificationCulture Culture setting to be
     * used while building alert emails. For eg: "en-US"
     *
     * @param {array} [alertSettings.additionalRecipientEmailList] List of email
     * addresses (apart from admin/co-admin of subscription) to whom the alert
     * emails need to be sent
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AlertSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AlertSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AlertSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateAlertSettings(deviceName: string, alertSettings: models.AlertSettings, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AlertSettings>;
    createOrUpdateAlertSettings(deviceName: string, alertSettings: models.AlertSettings, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.AlertSettings>): void;
    createOrUpdateAlertSettings(deviceName: string, alertSettings: models.AlertSettings, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AlertSettings>): void;


    /**
     * Deactivates the device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deactivateWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deactivates the device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deactivate(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deactivate(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    deactivate(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Downloads updates on the device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    downloadUpdatesWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Downloads updates on the device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    downloadUpdates(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    downloadUpdates(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    downloadUpdates(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Fails over the device to another device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {object} failoverRequest The failover request.
     *
     * @param {array} [failoverRequest.accesspointIds]
     *
     * @param {string} [failoverRequest.targetDeviceId]
     *
     * @param {boolean} [failoverRequest.skipValidation]
     *
     * @param {boolean} [failoverRequest.keepSourceDevice]
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    failoverWithHttpOperationResponse(deviceName: string, failoverRequest: models.FailoverRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Fails over the device to another device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {object} failoverRequest The failover request.
     *
     * @param {array} [failoverRequest.accesspointIds]
     *
     * @param {string} [failoverRequest.targetDeviceId]
     *
     * @param {boolean} [failoverRequest.skipValidation]
     *
     * @param {boolean} [failoverRequest.keepSourceDevice]
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    failover(deviceName: string, failoverRequest: models.FailoverRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    failover(deviceName: string, failoverRequest: models.FailoverRequest, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    failover(deviceName: string, failoverRequest: models.FailoverRequest, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Retrieves all the devices which can be used as failover targets for the
     * given device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify $expand=details to populate
     * additional fields related to the device.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeviceList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listFailoverTargetWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeviceList>>;

    /**
     * Retrieves all the devices which can be used as failover targets for the
     * given device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify $expand=details to populate
     * additional fields related to the device.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeviceList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeviceList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeviceList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listFailoverTarget(deviceName: string, resourceGroupName: string, managerName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DeviceList>;
    listFailoverTarget(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.DeviceList>): void;
    listFailoverTarget(deviceName: string, resourceGroupName: string, managerName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeviceList>): void;


    /**
     * Installs the updates on the device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    installUpdatesWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Installs the updates on the device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    installUpdates(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    installUpdates(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    installUpdates(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Retrieves the device metrics.
     *
     * @param {string} deviceName The name of the appliance.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricList>>;

    /**
     * Retrieves the device metrics.
     *
     * @param {string} deviceName The name of the appliance.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(deviceName: string, resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricList>;
    listMetrics(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.MetricList>): void;
    listMetrics(deviceName: string, resourceGroupName: string, managerName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricList>): void;


    /**
     * Retrieves metric definition of all metrics aggregated at device.
     *
     * @param {string} deviceName The name of the appliance.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricDefinitionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricDefinitionWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricDefinitionList>>;

    /**
     * Retrieves metric definition of all metrics aggregated at device.
     *
     * @param {string} deviceName The name of the appliance.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricDefinitionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricDefinitionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricDefinitionList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetricDefinition(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricDefinitionList>;
    listMetricDefinition(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.MetricDefinitionList>): void;
    listMetricDefinition(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinitionList>): void;


    /**
     * Returns the network settings of the specified device name.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getNetworkSettingsWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkSettings>>;

    /**
     * Returns the network settings of the specified device name.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getNetworkSettings(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkSettings>;
    getNetworkSettings(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.NetworkSettings>): void;
    getNetworkSettings(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkSettings>): void;


    /**
     * Scans for updates on the device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    scanForUpdatesWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Scans for updates on the device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    scanForUpdates(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    scanForUpdates(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    scanForUpdates(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates the security settings.
     *
     * @param {string} deviceName The device name.
     *
     * @param {object} securitySettings The security settings.
     *
     * @param {object} securitySettings.deviceAdminPassword Device administrator
     * password as an encrypted string (encrypted using RSA PKCS #1) is used to log
     * into the  local web UI of the device. Actual password could have at least 8
     * characters that are a combination of  uppercase, lowercase, numeric, and
     * special characters
     *
     * @param {string} securitySettings.deviceAdminPassword.value The value of the
     * secret itself. If the secret is in plaintext then EncryptionAlgorithm will
     * be none and EncryptionCertThumbprint will be null.
     *
     * @param {string}
     * [securitySettings.deviceAdminPassword.encryptionCertificateThumbprint]
     * Thumbprint certificate that was used to encrypt "Value"
     *
     * @param {string} securitySettings.deviceAdminPassword.encryptionAlgorithm
     * Algorithm used to encrypt "Value". Possible values include: 'None',
     * 'AES256', 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateSecuritySettingsWithHttpOperationResponse(deviceName: string, securitySettings: models.SecuritySettings, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Creates or updates the security settings.
     *
     * @param {string} deviceName The device name.
     *
     * @param {object} securitySettings The security settings.
     *
     * @param {object} securitySettings.deviceAdminPassword Device administrator
     * password as an encrypted string (encrypted using RSA PKCS #1) is used to log
     * into the  local web UI of the device. Actual password could have at least 8
     * characters that are a combination of  uppercase, lowercase, numeric, and
     * special characters
     *
     * @param {string} securitySettings.deviceAdminPassword.value The value of the
     * secret itself. If the secret is in plaintext then EncryptionAlgorithm will
     * be none and EncryptionCertThumbprint will be null.
     *
     * @param {string}
     * [securitySettings.deviceAdminPassword.encryptionCertificateThumbprint]
     * Thumbprint certificate that was used to encrypt "Value"
     *
     * @param {string} securitySettings.deviceAdminPassword.encryptionAlgorithm
     * Algorithm used to encrypt "Value". Possible values include: 'None',
     * 'AES256', 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateSecuritySettings(deviceName: string, securitySettings: models.SecuritySettings, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    createOrUpdateSecuritySettings(deviceName: string, securitySettings: models.SecuritySettings, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    createOrUpdateSecuritySettings(deviceName: string, securitySettings: models.SecuritySettings, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns the time settings of the specified device name.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TimeSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getTimeSettingsWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TimeSettings>>;

    /**
     * Returns the time settings of the specified device name.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TimeSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TimeSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TimeSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getTimeSettings(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TimeSettings>;
    getTimeSettings(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.TimeSettings>): void;
    getTimeSettings(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TimeSettings>): void;


    /**
     * Returns the update summary of the specified device name.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Updates>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getUpdateSummaryWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Updates>>;

    /**
     * Returns the update summary of the specified device name.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Updates} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Updates} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Updates} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getUpdateSummary(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Updates>;
    getUpdateSummary(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.Updates>): void;
    getUpdateSummary(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Updates>): void;


    /**
     * Deletes the device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Patches the device.
     *
     * @param {string} deviceName The device Name.
     *
     * @param {object} devicePatch Patch representation of the device.
     *
     * @param {string} [devicePatch.deviceDescription] Short description given for
     * the device
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Device>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginPatchWithHttpOperationResponse(deviceName: string, devicePatch: models.DevicePatch, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Device>>;

    /**
     * Patches the device.
     *
     * @param {string} deviceName The device Name.
     *
     * @param {object} devicePatch Patch representation of the device.
     *
     * @param {string} [devicePatch.deviceDescription] Short description given for
     * the device
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Device} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Device} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Device} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginPatch(deviceName: string, devicePatch: models.DevicePatch, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Device>;
    beginPatch(deviceName: string, devicePatch: models.DevicePatch, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.Device>): void;
    beginPatch(deviceName: string, devicePatch: models.DevicePatch, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Device>): void;


    /**
     * Creates or updates the alert settings
     *
     * @param {string} deviceName The device name.
     *
     * @param {object} alertSettings The alert settings.
     *
     * @param {string} alertSettings.emailNotification Value indicating whether
     * user/admins will receive emails when an alert condition occurs on the
     * system. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} alertSettings.notificationToServiceOwners Value indicating
     * whether service owners will receive emails when an alert condition occurs on
     * the system. Applicable only if emailNotification flag is Enabled. Possible
     * values include: 'Enabled', 'Disabled'
     *
     * @param {string} alertSettings.alertNotificationCulture Culture setting to be
     * used while building alert emails. For eg: "en-US"
     *
     * @param {array} [alertSettings.additionalRecipientEmailList] List of email
     * addresses (apart from admin/co-admin of subscription) to whom the alert
     * emails need to be sent
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AlertSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateAlertSettingsWithHttpOperationResponse(deviceName: string, alertSettings: models.AlertSettings, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AlertSettings>>;

    /**
     * Creates or updates the alert settings
     *
     * @param {string} deviceName The device name.
     *
     * @param {object} alertSettings The alert settings.
     *
     * @param {string} alertSettings.emailNotification Value indicating whether
     * user/admins will receive emails when an alert condition occurs on the
     * system. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} alertSettings.notificationToServiceOwners Value indicating
     * whether service owners will receive emails when an alert condition occurs on
     * the system. Applicable only if emailNotification flag is Enabled. Possible
     * values include: 'Enabled', 'Disabled'
     *
     * @param {string} alertSettings.alertNotificationCulture Culture setting to be
     * used while building alert emails. For eg: "en-US"
     *
     * @param {array} [alertSettings.additionalRecipientEmailList] List of email
     * addresses (apart from admin/co-admin of subscription) to whom the alert
     * emails need to be sent
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AlertSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AlertSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AlertSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdateAlertSettings(deviceName: string, alertSettings: models.AlertSettings, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AlertSettings>;
    beginCreateOrUpdateAlertSettings(deviceName: string, alertSettings: models.AlertSettings, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.AlertSettings>): void;
    beginCreateOrUpdateAlertSettings(deviceName: string, alertSettings: models.AlertSettings, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AlertSettings>): void;


    /**
     * Deactivates the device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeactivateWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deactivates the device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeactivate(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeactivate(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginDeactivate(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Downloads updates on the device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDownloadUpdatesWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Downloads updates on the device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDownloadUpdates(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDownloadUpdates(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginDownloadUpdates(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Fails over the device to another device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {object} failoverRequest The failover request.
     *
     * @param {array} [failoverRequest.accesspointIds]
     *
     * @param {string} [failoverRequest.targetDeviceId]
     *
     * @param {boolean} [failoverRequest.skipValidation]
     *
     * @param {boolean} [failoverRequest.keepSourceDevice]
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginFailoverWithHttpOperationResponse(deviceName: string, failoverRequest: models.FailoverRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Fails over the device to another device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {object} failoverRequest The failover request.
     *
     * @param {array} [failoverRequest.accesspointIds]
     *
     * @param {string} [failoverRequest.targetDeviceId]
     *
     * @param {boolean} [failoverRequest.skipValidation]
     *
     * @param {boolean} [failoverRequest.keepSourceDevice]
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginFailover(deviceName: string, failoverRequest: models.FailoverRequest, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginFailover(deviceName: string, failoverRequest: models.FailoverRequest, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginFailover(deviceName: string, failoverRequest: models.FailoverRequest, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Installs the updates on the device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginInstallUpdatesWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Installs the updates on the device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginInstallUpdates(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginInstallUpdates(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginInstallUpdates(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Scans for updates on the device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginScanForUpdatesWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Scans for updates on the device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginScanForUpdates(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginScanForUpdates(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginScanForUpdates(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates the security settings.
     *
     * @param {string} deviceName The device name.
     *
     * @param {object} securitySettings The security settings.
     *
     * @param {object} securitySettings.deviceAdminPassword Device administrator
     * password as an encrypted string (encrypted using RSA PKCS #1) is used to log
     * into the  local web UI of the device. Actual password could have at least 8
     * characters that are a combination of  uppercase, lowercase, numeric, and
     * special characters
     *
     * @param {string} securitySettings.deviceAdminPassword.value The value of the
     * secret itself. If the secret is in plaintext then EncryptionAlgorithm will
     * be none and EncryptionCertThumbprint will be null.
     *
     * @param {string}
     * [securitySettings.deviceAdminPassword.encryptionCertificateThumbprint]
     * Thumbprint certificate that was used to encrypt "Value"
     *
     * @param {string} securitySettings.deviceAdminPassword.encryptionAlgorithm
     * Algorithm used to encrypt "Value". Possible values include: 'None',
     * 'AES256', 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateSecuritySettingsWithHttpOperationResponse(deviceName: string, securitySettings: models.SecuritySettings, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Creates or updates the security settings.
     *
     * @param {string} deviceName The device name.
     *
     * @param {object} securitySettings The security settings.
     *
     * @param {object} securitySettings.deviceAdminPassword Device administrator
     * password as an encrypted string (encrypted using RSA PKCS #1) is used to log
     * into the  local web UI of the device. Actual password could have at least 8
     * characters that are a combination of  uppercase, lowercase, numeric, and
     * special characters
     *
     * @param {string} securitySettings.deviceAdminPassword.value The value of the
     * secret itself. If the secret is in plaintext then EncryptionAlgorithm will
     * be none and EncryptionCertThumbprint will be null.
     *
     * @param {string}
     * [securitySettings.deviceAdminPassword.encryptionCertificateThumbprint]
     * Thumbprint certificate that was used to encrypt "Value"
     *
     * @param {string} securitySettings.deviceAdminPassword.encryptionAlgorithm
     * Algorithm used to encrypt "Value". Possible values include: 'None',
     * 'AES256', 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdateSecuritySettings(deviceName: string, securitySettings: models.SecuritySettings, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginCreateOrUpdateSecuritySettings(deviceName: string, securitySettings: models.SecuritySettings, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginCreateOrUpdateSecuritySettings(deviceName: string, securitySettings: models.SecuritySettings, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * BackupScheduleGroups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimpleManagementClient.
 */
export interface BackupScheduleGroups {


    /**
     * Retrieves all the backup schedule groups in a device.
     *
     * @param {string} deviceName The name of the device.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupScheduleGroupList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDeviceWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupScheduleGroupList>>;

    /**
     * Retrieves all the backup schedule groups in a device.
     *
     * @param {string} deviceName The name of the device.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupScheduleGroupList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupScheduleGroupList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupScheduleGroupList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupScheduleGroupList>;
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.BackupScheduleGroupList>): void;
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupScheduleGroupList>): void;


    /**
     * Returns the properties of the specified backup schedule group name.
     *
     * @param {string} deviceName The name of the device.
     *
     * @param {string} scheduleGroupName The name of the schedule group.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupScheduleGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(deviceName: string, scheduleGroupName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupScheduleGroup>>;

    /**
     * Returns the properties of the specified backup schedule group name.
     *
     * @param {string} deviceName The name of the device.
     *
     * @param {string} scheduleGroupName The name of the schedule group.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupScheduleGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupScheduleGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupScheduleGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(deviceName: string, scheduleGroupName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupScheduleGroup>;
    get(deviceName: string, scheduleGroupName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.BackupScheduleGroup>): void;
    get(deviceName: string, scheduleGroupName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupScheduleGroup>): void;


    /**
     * Creates or Updates the backup schedule Group.
     *
     * @param {string} deviceName The name of the device.
     *
     * @param {string} scheduleGroupName The name of the schedule group.
     *
     * @param {object} scheduleGroup The schedule group to be created
     *
     * @param {object} scheduleGroup.startTime The start time. When this field is
     * specified we will generate Default GrandFather Father Son Backup Schedules.
     *
     * @param {number} scheduleGroup.startTime.hour The hour.
     *
     * @param {number} scheduleGroup.startTime.minute The minute.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupScheduleGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(deviceName: string, scheduleGroupName: string, scheduleGroup: models.BackupScheduleGroup, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupScheduleGroup>>;

    /**
     * Creates or Updates the backup schedule Group.
     *
     * @param {string} deviceName The name of the device.
     *
     * @param {string} scheduleGroupName The name of the schedule group.
     *
     * @param {object} scheduleGroup The schedule group to be created
     *
     * @param {object} scheduleGroup.startTime The start time. When this field is
     * specified we will generate Default GrandFather Father Son Backup Schedules.
     *
     * @param {number} scheduleGroup.startTime.hour The hour.
     *
     * @param {number} scheduleGroup.startTime.minute The minute.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupScheduleGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupScheduleGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupScheduleGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(deviceName: string, scheduleGroupName: string, scheduleGroup: models.BackupScheduleGroup, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupScheduleGroup>;
    createOrUpdate(deviceName: string, scheduleGroupName: string, scheduleGroup: models.BackupScheduleGroup, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.BackupScheduleGroup>): void;
    createOrUpdate(deviceName: string, scheduleGroupName: string, scheduleGroup: models.BackupScheduleGroup, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupScheduleGroup>): void;


    /**
     * Deletes the backup schedule group.
     *
     * @param {string} deviceName The name of the device.
     *
     * @param {string} scheduleGroupName The name of the schedule group.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(deviceName: string, scheduleGroupName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the backup schedule group.
     *
     * @param {string} deviceName The name of the device.
     *
     * @param {string} scheduleGroupName The name of the schedule group.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(deviceName: string, scheduleGroupName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(deviceName: string, scheduleGroupName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(deviceName: string, scheduleGroupName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or Updates the backup schedule Group.
     *
     * @param {string} deviceName The name of the device.
     *
     * @param {string} scheduleGroupName The name of the schedule group.
     *
     * @param {object} scheduleGroup The schedule group to be created
     *
     * @param {object} scheduleGroup.startTime The start time. When this field is
     * specified we will generate Default GrandFather Father Son Backup Schedules.
     *
     * @param {number} scheduleGroup.startTime.hour The hour.
     *
     * @param {number} scheduleGroup.startTime.minute The minute.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupScheduleGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(deviceName: string, scheduleGroupName: string, scheduleGroup: models.BackupScheduleGroup, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupScheduleGroup>>;

    /**
     * Creates or Updates the backup schedule Group.
     *
     * @param {string} deviceName The name of the device.
     *
     * @param {string} scheduleGroupName The name of the schedule group.
     *
     * @param {object} scheduleGroup The schedule group to be created
     *
     * @param {object} scheduleGroup.startTime The start time. When this field is
     * specified we will generate Default GrandFather Father Son Backup Schedules.
     *
     * @param {number} scheduleGroup.startTime.hour The hour.
     *
     * @param {number} scheduleGroup.startTime.minute The minute.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupScheduleGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupScheduleGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupScheduleGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(deviceName: string, scheduleGroupName: string, scheduleGroup: models.BackupScheduleGroup, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupScheduleGroup>;
    beginCreateOrUpdate(deviceName: string, scheduleGroupName: string, scheduleGroup: models.BackupScheduleGroup, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.BackupScheduleGroup>): void;
    beginCreateOrUpdate(deviceName: string, scheduleGroupName: string, scheduleGroup: models.BackupScheduleGroup, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupScheduleGroup>): void;


    /**
     * Deletes the backup schedule group.
     *
     * @param {string} deviceName The name of the device.
     *
     * @param {string} scheduleGroupName The name of the schedule group.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(deviceName: string, scheduleGroupName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the backup schedule group.
     *
     * @param {string} deviceName The name of the device.
     *
     * @param {string} scheduleGroupName The name of the schedule group.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(deviceName: string, scheduleGroupName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(deviceName: string, scheduleGroupName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(deviceName: string, scheduleGroupName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * ChapSettingsOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimpleManagementClient.
 */
export interface ChapSettingsOperations {


    /**
     * Retrieves all the chap settings in a device.
     *
     * @param {string} deviceName The name of the device.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ChapSettingsList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDeviceWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ChapSettingsList>>;

    /**
     * Retrieves all the chap settings in a device.
     *
     * @param {string} deviceName The name of the device.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ChapSettingsList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ChapSettingsList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ChapSettingsList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ChapSettingsList>;
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.ChapSettingsList>): void;
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ChapSettingsList>): void;


    /**
     * Returns the properties of the specified chap setting name.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} chapUserName The user name of chap to be fetched.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ChapSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(deviceName: string, chapUserName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ChapSettings>>;

    /**
     * Returns the properties of the specified chap setting name.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} chapUserName The user name of chap to be fetched.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ChapSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ChapSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ChapSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(deviceName: string, chapUserName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ChapSettings>;
    get(deviceName: string, chapUserName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.ChapSettings>): void;
    get(deviceName: string, chapUserName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ChapSettings>): void;


    /**
     * Creates or updates the chap setting.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} chapUserName The chap user name.
     *
     * @param {object} chapSetting The chap setting to be added or updated.
     *
     * @param {object} chapSetting.password The chap password.
     *
     * @param {string} chapSetting.password.value The value of the secret itself.
     * If the secret is in plaintext then EncryptionAlgorithm will be none and
     * EncryptionCertThumbprint will be null.
     *
     * @param {string} [chapSetting.password.encryptionCertificateThumbprint]
     * Thumbprint certificate that was used to encrypt "Value"
     *
     * @param {string} chapSetting.password.encryptionAlgorithm Algorithm used to
     * encrypt "Value". Possible values include: 'None', 'AES256',
     * 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ChapSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(deviceName: string, chapUserName: string, chapSetting: models.ChapSettings, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ChapSettings>>;

    /**
     * Creates or updates the chap setting.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} chapUserName The chap user name.
     *
     * @param {object} chapSetting The chap setting to be added or updated.
     *
     * @param {object} chapSetting.password The chap password.
     *
     * @param {string} chapSetting.password.value The value of the secret itself.
     * If the secret is in plaintext then EncryptionAlgorithm will be none and
     * EncryptionCertThumbprint will be null.
     *
     * @param {string} [chapSetting.password.encryptionCertificateThumbprint]
     * Thumbprint certificate that was used to encrypt "Value"
     *
     * @param {string} chapSetting.password.encryptionAlgorithm Algorithm used to
     * encrypt "Value". Possible values include: 'None', 'AES256',
     * 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ChapSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ChapSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ChapSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(deviceName: string, chapUserName: string, chapSetting: models.ChapSettings, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ChapSettings>;
    createOrUpdate(deviceName: string, chapUserName: string, chapSetting: models.ChapSettings, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.ChapSettings>): void;
    createOrUpdate(deviceName: string, chapUserName: string, chapSetting: models.ChapSettings, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ChapSettings>): void;


    /**
     * Deletes the chap setting.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} chapUserName The chap user name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(deviceName: string, chapUserName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the chap setting.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} chapUserName The chap user name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(deviceName: string, chapUserName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(deviceName: string, chapUserName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(deviceName: string, chapUserName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates the chap setting.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} chapUserName The chap user name.
     *
     * @param {object} chapSetting The chap setting to be added or updated.
     *
     * @param {object} chapSetting.password The chap password.
     *
     * @param {string} chapSetting.password.value The value of the secret itself.
     * If the secret is in plaintext then EncryptionAlgorithm will be none and
     * EncryptionCertThumbprint will be null.
     *
     * @param {string} [chapSetting.password.encryptionCertificateThumbprint]
     * Thumbprint certificate that was used to encrypt "Value"
     *
     * @param {string} chapSetting.password.encryptionAlgorithm Algorithm used to
     * encrypt "Value". Possible values include: 'None', 'AES256',
     * 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ChapSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(deviceName: string, chapUserName: string, chapSetting: models.ChapSettings, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ChapSettings>>;

    /**
     * Creates or updates the chap setting.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} chapUserName The chap user name.
     *
     * @param {object} chapSetting The chap setting to be added or updated.
     *
     * @param {object} chapSetting.password The chap password.
     *
     * @param {string} chapSetting.password.value The value of the secret itself.
     * If the secret is in plaintext then EncryptionAlgorithm will be none and
     * EncryptionCertThumbprint will be null.
     *
     * @param {string} [chapSetting.password.encryptionCertificateThumbprint]
     * Thumbprint certificate that was used to encrypt "Value"
     *
     * @param {string} chapSetting.password.encryptionAlgorithm Algorithm used to
     * encrypt "Value". Possible values include: 'None', 'AES256',
     * 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ChapSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ChapSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ChapSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(deviceName: string, chapUserName: string, chapSetting: models.ChapSettings, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ChapSettings>;
    beginCreateOrUpdate(deviceName: string, chapUserName: string, chapSetting: models.ChapSettings, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.ChapSettings>): void;
    beginCreateOrUpdate(deviceName: string, chapUserName: string, chapSetting: models.ChapSettings, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ChapSettings>): void;


    /**
     * Deletes the chap setting.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} chapUserName The chap user name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(deviceName: string, chapUserName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the chap setting.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} chapUserName The chap user name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(deviceName: string, chapUserName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(deviceName: string, chapUserName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(deviceName: string, chapUserName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * IscsiDisks
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimpleManagementClient.
 */
export interface IscsiDisks {


    /**
     * Retrieves all the iSCSI disks in a device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ISCSIDiskList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDeviceWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ISCSIDiskList>>;

    /**
     * Retrieves all the iSCSI disks in a device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ISCSIDiskList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ISCSIDiskList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ISCSIDiskList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ISCSIDiskList>;
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.ISCSIDiskList>): void;
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ISCSIDiskList>): void;


    /**
     * Retrieves all the disks in a iSCSI server.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ISCSIDiskList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByIscsiServerWithHttpOperationResponse(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ISCSIDiskList>>;

    /**
     * Retrieves all the disks in a iSCSI server.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ISCSIDiskList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ISCSIDiskList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ISCSIDiskList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByIscsiServer(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ISCSIDiskList>;
    listByIscsiServer(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.ISCSIDiskList>): void;
    listByIscsiServer(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ISCSIDiskList>): void;


    /**
     * Returns the properties of the specified iSCSI disk name.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} diskName The disk name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ISCSIDisk>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ISCSIDisk>>;

    /**
     * Returns the properties of the specified iSCSI disk name.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} diskName The disk name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ISCSIDisk} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ISCSIDisk} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ISCSIDisk} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ISCSIDisk>;
    get(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.ISCSIDisk>): void;
    get(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ISCSIDisk>): void;


    /**
     * Creates or updates the iSCSI disk.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} diskName The disk name.
     *
     * @param {object} iscsiDisk The iSCSI disk.
     *
     * @param {string} [iscsiDisk.description] The description.
     *
     * @param {string} iscsiDisk.diskStatus The disk status. Possible values
     * include: 'Online', 'Offline'
     *
     * @param {array} iscsiDisk.accessControlRecords The access control records.
     *
     * @param {string} iscsiDisk.dataPolicy The data policy. Possible values
     * include: 'Invalid', 'Local', 'Tiered', 'Cloud'
     *
     * @param {number} iscsiDisk.provisionedCapacityInBytes The provisioned
     * capacity in bytes.
     *
     * @param {string} iscsiDisk.monitoringStatus The monitoring. Possible values
     * include: 'Enabled', 'Disabled'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ISCSIDisk>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(deviceName: string, iscsiServerName: string, diskName: string, iscsiDisk: models.ISCSIDisk, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ISCSIDisk>>;

    /**
     * Creates or updates the iSCSI disk.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} diskName The disk name.
     *
     * @param {object} iscsiDisk The iSCSI disk.
     *
     * @param {string} [iscsiDisk.description] The description.
     *
     * @param {string} iscsiDisk.diskStatus The disk status. Possible values
     * include: 'Online', 'Offline'
     *
     * @param {array} iscsiDisk.accessControlRecords The access control records.
     *
     * @param {string} iscsiDisk.dataPolicy The data policy. Possible values
     * include: 'Invalid', 'Local', 'Tiered', 'Cloud'
     *
     * @param {number} iscsiDisk.provisionedCapacityInBytes The provisioned
     * capacity in bytes.
     *
     * @param {string} iscsiDisk.monitoringStatus The monitoring. Possible values
     * include: 'Enabled', 'Disabled'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ISCSIDisk} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ISCSIDisk} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ISCSIDisk} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(deviceName: string, iscsiServerName: string, diskName: string, iscsiDisk: models.ISCSIDisk, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ISCSIDisk>;
    createOrUpdate(deviceName: string, iscsiServerName: string, diskName: string, iscsiDisk: models.ISCSIDisk, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.ISCSIDisk>): void;
    createOrUpdate(deviceName: string, iscsiServerName: string, diskName: string, iscsiDisk: models.ISCSIDisk, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ISCSIDisk>): void;


    /**
     * Deletes the iSCSI disk.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} diskName The disk name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the iSCSI disk.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} diskName The disk name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the iSCSI disk metrics
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} diskName The iSCSI disk name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricList>>;

    /**
     * Gets the iSCSI disk metrics
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} diskName The iSCSI disk name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricList>;
    listMetrics(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.MetricList>): void;
    listMetrics(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricList>): void;


    /**
     * Retrieves metric definitions for all metric aggregated at the iSCSI disk.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} diskName The iSCSI disk name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricDefinitionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricDefinitionWithHttpOperationResponse(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricDefinitionList>>;

    /**
     * Retrieves metric definitions for all metric aggregated at the iSCSI disk.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} diskName The iSCSI disk name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricDefinitionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricDefinitionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricDefinitionList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetricDefinition(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricDefinitionList>;
    listMetricDefinition(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.MetricDefinitionList>): void;
    listMetricDefinition(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinitionList>): void;


    /**
     * Creates or updates the iSCSI disk.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} diskName The disk name.
     *
     * @param {object} iscsiDisk The iSCSI disk.
     *
     * @param {string} [iscsiDisk.description] The description.
     *
     * @param {string} iscsiDisk.diskStatus The disk status. Possible values
     * include: 'Online', 'Offline'
     *
     * @param {array} iscsiDisk.accessControlRecords The access control records.
     *
     * @param {string} iscsiDisk.dataPolicy The data policy. Possible values
     * include: 'Invalid', 'Local', 'Tiered', 'Cloud'
     *
     * @param {number} iscsiDisk.provisionedCapacityInBytes The provisioned
     * capacity in bytes.
     *
     * @param {string} iscsiDisk.monitoringStatus The monitoring. Possible values
     * include: 'Enabled', 'Disabled'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ISCSIDisk>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(deviceName: string, iscsiServerName: string, diskName: string, iscsiDisk: models.ISCSIDisk, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ISCSIDisk>>;

    /**
     * Creates or updates the iSCSI disk.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} diskName The disk name.
     *
     * @param {object} iscsiDisk The iSCSI disk.
     *
     * @param {string} [iscsiDisk.description] The description.
     *
     * @param {string} iscsiDisk.diskStatus The disk status. Possible values
     * include: 'Online', 'Offline'
     *
     * @param {array} iscsiDisk.accessControlRecords The access control records.
     *
     * @param {string} iscsiDisk.dataPolicy The data policy. Possible values
     * include: 'Invalid', 'Local', 'Tiered', 'Cloud'
     *
     * @param {number} iscsiDisk.provisionedCapacityInBytes The provisioned
     * capacity in bytes.
     *
     * @param {string} iscsiDisk.monitoringStatus The monitoring. Possible values
     * include: 'Enabled', 'Disabled'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ISCSIDisk} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ISCSIDisk} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ISCSIDisk} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(deviceName: string, iscsiServerName: string, diskName: string, iscsiDisk: models.ISCSIDisk, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ISCSIDisk>;
    beginCreateOrUpdate(deviceName: string, iscsiServerName: string, diskName: string, iscsiDisk: models.ISCSIDisk, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.ISCSIDisk>): void;
    beginCreateOrUpdate(deviceName: string, iscsiServerName: string, diskName: string, iscsiDisk: models.ISCSIDisk, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ISCSIDisk>): void;


    /**
     * Deletes the iSCSI disk.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} diskName The disk name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the iSCSI disk.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} diskName The disk name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(deviceName: string, iscsiServerName: string, diskName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * FileServers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimpleManagementClient.
 */
export interface FileServers {


    /**
     * Retrieves all the file servers in a device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FileServerList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDeviceWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FileServerList>>;

    /**
     * Retrieves all the file servers in a device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FileServerList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FileServerList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FileServerList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FileServerList>;
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.FileServerList>): void;
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileServerList>): void;


    /**
     * Returns the properties of the specified file server name.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FileServer>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FileServer>>;

    /**
     * Returns the properties of the specified file server name.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FileServer} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FileServer} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FileServer} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FileServer>;
    get(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.FileServer>): void;
    get(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileServer>): void;


    /**
     * Creates or updates the file server.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {object} fileServer The file server.
     *
     * @param {string} fileServer.domainName Domain of the file server
     *
     * @param {string} fileServer.storageDomainId The storage domain id.
     *
     * @param {string} fileServer.backupScheduleGroupId The backup policy id.
     *
     * @param {string} [fileServer.description] The description of the file server
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FileServer>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(deviceName: string, fileServerName: string, fileServer: models.FileServer, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FileServer>>;

    /**
     * Creates or updates the file server.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {object} fileServer The file server.
     *
     * @param {string} fileServer.domainName Domain of the file server
     *
     * @param {string} fileServer.storageDomainId The storage domain id.
     *
     * @param {string} fileServer.backupScheduleGroupId The backup policy id.
     *
     * @param {string} [fileServer.description] The description of the file server
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FileServer} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FileServer} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FileServer} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(deviceName: string, fileServerName: string, fileServer: models.FileServer, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FileServer>;
    createOrUpdate(deviceName: string, fileServerName: string, fileServer: models.FileServer, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.FileServer>): void;
    createOrUpdate(deviceName: string, fileServerName: string, fileServer: models.FileServer, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileServer>): void;


    /**
     * Deletes the file server.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the file server.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Backup the file server now.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    backupNowWithHttpOperationResponse(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Backup the file server now.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    backupNow(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    backupNow(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    backupNow(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the file server metrics.
     *
     * @param {string} deviceName The name of the device.
     *
     * @param {string} fileServerName The name of the file server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricList>>;

    /**
     * Gets the file server metrics.
     *
     * @param {string} deviceName The name of the device.
     *
     * @param {string} fileServerName The name of the file server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricList>;
    listMetrics(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.MetricList>): void;
    listMetrics(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricList>): void;


    /**
     * Retrieves metric definitions of all metrics aggregated at the file server.
     *
     * @param {string} deviceName The name of the device.
     *
     * @param {string} fileServerName The name of the file server.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricDefinitionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricDefinitionWithHttpOperationResponse(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricDefinitionList>>;

    /**
     * Retrieves metric definitions of all metrics aggregated at the file server.
     *
     * @param {string} deviceName The name of the device.
     *
     * @param {string} fileServerName The name of the file server.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricDefinitionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricDefinitionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricDefinitionList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetricDefinition(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricDefinitionList>;
    listMetricDefinition(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.MetricDefinitionList>): void;
    listMetricDefinition(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinitionList>): void;


    /**
     * Retrieves all the file servers in a manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FileServerList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByManagerWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FileServerList>>;

    /**
     * Retrieves all the file servers in a manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FileServerList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FileServerList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FileServerList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByManager(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FileServerList>;
    listByManager(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.FileServerList>): void;
    listByManager(resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileServerList>): void;


    /**
     * Creates or updates the file server.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {object} fileServer The file server.
     *
     * @param {string} fileServer.domainName Domain of the file server
     *
     * @param {string} fileServer.storageDomainId The storage domain id.
     *
     * @param {string} fileServer.backupScheduleGroupId The backup policy id.
     *
     * @param {string} [fileServer.description] The description of the file server
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FileServer>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(deviceName: string, fileServerName: string, fileServer: models.FileServer, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FileServer>>;

    /**
     * Creates or updates the file server.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {object} fileServer The file server.
     *
     * @param {string} fileServer.domainName Domain of the file server
     *
     * @param {string} fileServer.storageDomainId The storage domain id.
     *
     * @param {string} fileServer.backupScheduleGroupId The backup policy id.
     *
     * @param {string} [fileServer.description] The description of the file server
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FileServer} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FileServer} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FileServer} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(deviceName: string, fileServerName: string, fileServer: models.FileServer, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FileServer>;
    beginCreateOrUpdate(deviceName: string, fileServerName: string, fileServer: models.FileServer, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.FileServer>): void;
    beginCreateOrUpdate(deviceName: string, fileServerName: string, fileServer: models.FileServer, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileServer>): void;


    /**
     * Deletes the file server.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the file server.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Backup the file server now.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginBackupNowWithHttpOperationResponse(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Backup the file server now.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginBackupNow(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginBackupNow(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginBackupNow(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * FileShares
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimpleManagementClient.
 */
export interface FileShares {


    /**
     * Retrieves all the file shares in a file server.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FileShareList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByFileServerWithHttpOperationResponse(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FileShareList>>;

    /**
     * Retrieves all the file shares in a file server.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FileShareList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FileShareList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FileShareList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByFileServer(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FileShareList>;
    listByFileServer(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.FileShareList>): void;
    listByFileServer(deviceName: string, fileServerName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileShareList>): void;


    /**
     * Returns the properties of the specified file share name.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {string} shareName The file share name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FileShare>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(deviceName: string, fileServerName: string, shareName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FileShare>>;

    /**
     * Returns the properties of the specified file share name.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {string} shareName The file share name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FileShare} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FileShare} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FileShare} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(deviceName: string, fileServerName: string, shareName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FileShare>;
    get(deviceName: string, fileServerName: string, shareName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.FileShare>): void;
    get(deviceName: string, fileServerName: string, shareName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileShare>): void;


    /**
     * Creates or updates the file share.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {string} shareName The file share name.
     *
     * @param {object} fileShare The file share.
     *
     * @param {string} [fileShare.description] Description for file share
     *
     * @param {string} fileShare.shareStatus The Share Status. Possible values
     * include: 'Online', 'Offline'
     *
     * @param {string} fileShare.dataPolicy The data policy. Possible values
     * include: 'Invalid', 'Local', 'Tiered', 'Cloud'
     *
     * @param {string} fileShare.adminUser The user/group who will have full
     * permission in this share. Active directory email address. Example:
     * xyz@contoso.com or Contoso\xyz.
     *
     * @param {number} fileShare.provisionedCapacityInBytes The total provisioned
     * capacity in Bytes
     *
     * @param {string} fileShare.monitoringStatus The monitoring status. Possible
     * values include: 'Enabled', 'Disabled'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FileShare>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(deviceName: string, fileServerName: string, shareName: string, fileShare: models.FileShare, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FileShare>>;

    /**
     * Creates or updates the file share.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {string} shareName The file share name.
     *
     * @param {object} fileShare The file share.
     *
     * @param {string} [fileShare.description] Description for file share
     *
     * @param {string} fileShare.shareStatus The Share Status. Possible values
     * include: 'Online', 'Offline'
     *
     * @param {string} fileShare.dataPolicy The data policy. Possible values
     * include: 'Invalid', 'Local', 'Tiered', 'Cloud'
     *
     * @param {string} fileShare.adminUser The user/group who will have full
     * permission in this share. Active directory email address. Example:
     * xyz@contoso.com or Contoso\xyz.
     *
     * @param {number} fileShare.provisionedCapacityInBytes The total provisioned
     * capacity in Bytes
     *
     * @param {string} fileShare.monitoringStatus The monitoring status. Possible
     * values include: 'Enabled', 'Disabled'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FileShare} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FileShare} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FileShare} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(deviceName: string, fileServerName: string, shareName: string, fileShare: models.FileShare, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FileShare>;
    createOrUpdate(deviceName: string, fileServerName: string, shareName: string, fileShare: models.FileShare, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.FileShare>): void;
    createOrUpdate(deviceName: string, fileServerName: string, shareName: string, fileShare: models.FileShare, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileShare>): void;


    /**
     * Deletes the file share.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {string} shareName The file share Name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(deviceName: string, fileServerName: string, shareName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the file share.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {string} shareName The file share Name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(deviceName: string, fileServerName: string, shareName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(deviceName: string, fileServerName: string, shareName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(deviceName: string, fileServerName: string, shareName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the file share metrics
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {string} shareName The file share name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(deviceName: string, fileServerName: string, shareName: string, resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricList>>;

    /**
     * Gets the file share metrics
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {string} shareName The file share name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(deviceName: string, fileServerName: string, shareName: string, resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricList>;
    listMetrics(deviceName: string, fileServerName: string, shareName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.MetricList>): void;
    listMetrics(deviceName: string, fileServerName: string, shareName: string, resourceGroupName: string, managerName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricList>): void;


    /**
     * Retrieves metric definitions of all metrics aggregated at the file share.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {string} shareName The file share name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricDefinitionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricDefinitionWithHttpOperationResponse(deviceName: string, fileServerName: string, shareName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricDefinitionList>>;

    /**
     * Retrieves metric definitions of all metrics aggregated at the file share.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {string} shareName The file share name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricDefinitionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricDefinitionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricDefinitionList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetricDefinition(deviceName: string, fileServerName: string, shareName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricDefinitionList>;
    listMetricDefinition(deviceName: string, fileServerName: string, shareName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.MetricDefinitionList>): void;
    listMetricDefinition(deviceName: string, fileServerName: string, shareName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinitionList>): void;


    /**
     * Retrieves all the file shares in a device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FileShareList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDeviceWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FileShareList>>;

    /**
     * Retrieves all the file shares in a device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FileShareList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FileShareList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FileShareList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FileShareList>;
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.FileShareList>): void;
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileShareList>): void;


    /**
     * Creates or updates the file share.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {string} shareName The file share name.
     *
     * @param {object} fileShare The file share.
     *
     * @param {string} [fileShare.description] Description for file share
     *
     * @param {string} fileShare.shareStatus The Share Status. Possible values
     * include: 'Online', 'Offline'
     *
     * @param {string} fileShare.dataPolicy The data policy. Possible values
     * include: 'Invalid', 'Local', 'Tiered', 'Cloud'
     *
     * @param {string} fileShare.adminUser The user/group who will have full
     * permission in this share. Active directory email address. Example:
     * xyz@contoso.com or Contoso\xyz.
     *
     * @param {number} fileShare.provisionedCapacityInBytes The total provisioned
     * capacity in Bytes
     *
     * @param {string} fileShare.monitoringStatus The monitoring status. Possible
     * values include: 'Enabled', 'Disabled'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FileShare>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(deviceName: string, fileServerName: string, shareName: string, fileShare: models.FileShare, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FileShare>>;

    /**
     * Creates or updates the file share.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {string} shareName The file share name.
     *
     * @param {object} fileShare The file share.
     *
     * @param {string} [fileShare.description] Description for file share
     *
     * @param {string} fileShare.shareStatus The Share Status. Possible values
     * include: 'Online', 'Offline'
     *
     * @param {string} fileShare.dataPolicy The data policy. Possible values
     * include: 'Invalid', 'Local', 'Tiered', 'Cloud'
     *
     * @param {string} fileShare.adminUser The user/group who will have full
     * permission in this share. Active directory email address. Example:
     * xyz@contoso.com or Contoso\xyz.
     *
     * @param {number} fileShare.provisionedCapacityInBytes The total provisioned
     * capacity in Bytes
     *
     * @param {string} fileShare.monitoringStatus The monitoring status. Possible
     * values include: 'Enabled', 'Disabled'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FileShare} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FileShare} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FileShare} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(deviceName: string, fileServerName: string, shareName: string, fileShare: models.FileShare, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FileShare>;
    beginCreateOrUpdate(deviceName: string, fileServerName: string, shareName: string, fileShare: models.FileShare, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.FileShare>): void;
    beginCreateOrUpdate(deviceName: string, fileServerName: string, shareName: string, fileShare: models.FileShare, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileShare>): void;


    /**
     * Deletes the file share.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {string} shareName The file share Name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(deviceName: string, fileServerName: string, shareName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the file share.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} fileServerName The file server name.
     *
     * @param {string} shareName The file share Name
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(deviceName: string, fileServerName: string, shareName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(deviceName: string, fileServerName: string, shareName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(deviceName: string, fileServerName: string, shareName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * IscsiServers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimpleManagementClient.
 */
export interface IscsiServers {


    /**
     * Retrieves all the iSCSI in a device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ISCSIServerList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDeviceWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ISCSIServerList>>;

    /**
     * Retrieves all the iSCSI in a device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ISCSIServerList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ISCSIServerList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ISCSIServerList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ISCSIServerList>;
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.ISCSIServerList>): void;
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ISCSIServerList>): void;


    /**
     * Returns the properties of the specified iSCSI server name.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ISCSIServer>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ISCSIServer>>;

    /**
     * Returns the properties of the specified iSCSI server name.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ISCSIServer} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ISCSIServer} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ISCSIServer} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ISCSIServer>;
    get(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.ISCSIServer>): void;
    get(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ISCSIServer>): void;


    /**
     * Creates or updates the iSCSI server.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {object} iscsiServer The iSCSI server.
     *
     * @param {string} iscsiServer.storageDomainId The storage domain id.
     *
     * @param {string} iscsiServer.backupScheduleGroupId The backup policy id.
     *
     * @param {string} [iscsiServer.description] The description.
     *
     * @param {string} [iscsiServer.chapId] The chap id.
     *
     * @param {string} [iscsiServer.reverseChapId] The reverse chap id.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ISCSIServer>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(deviceName: string, iscsiServerName: string, iscsiServer: models.ISCSIServer, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ISCSIServer>>;

    /**
     * Creates or updates the iSCSI server.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {object} iscsiServer The iSCSI server.
     *
     * @param {string} iscsiServer.storageDomainId The storage domain id.
     *
     * @param {string} iscsiServer.backupScheduleGroupId The backup policy id.
     *
     * @param {string} [iscsiServer.description] The description.
     *
     * @param {string} [iscsiServer.chapId] The chap id.
     *
     * @param {string} [iscsiServer.reverseChapId] The reverse chap id.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ISCSIServer} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ISCSIServer} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ISCSIServer} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(deviceName: string, iscsiServerName: string, iscsiServer: models.ISCSIServer, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ISCSIServer>;
    createOrUpdate(deviceName: string, iscsiServerName: string, iscsiServer: models.ISCSIServer, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.ISCSIServer>): void;
    createOrUpdate(deviceName: string, iscsiServerName: string, iscsiServer: models.ISCSIServer, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ISCSIServer>): void;


    /**
     * Deletes the iSCSI server.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the iSCSI server.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Backup the iSCSI server now.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    backupNowWithHttpOperationResponse(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Backup the iSCSI server now.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    backupNow(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    backupNow(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    backupNow(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the iSCSI server metrics
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricList>>;

    /**
     * Gets the iSCSI server metrics
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricList>;
    listMetrics(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.MetricList>): void;
    listMetrics(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricList>): void;


    /**
     * Retrieves metric definitions for all metrics aggregated at iSCSI server.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricDefinitionList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricDefinitionWithHttpOperationResponse(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricDefinitionList>>;

    /**
     * Retrieves metric definitions for all metrics aggregated at iSCSI server.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricDefinitionList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricDefinitionList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricDefinitionList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetricDefinition(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricDefinitionList>;
    listMetricDefinition(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.MetricDefinitionList>): void;
    listMetricDefinition(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinitionList>): void;


    /**
     * Retrieves all the iSCSI servers in a manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ISCSIServerList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByManagerWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ISCSIServerList>>;

    /**
     * Retrieves all the iSCSI servers in a manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ISCSIServerList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ISCSIServerList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ISCSIServerList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByManager(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ISCSIServerList>;
    listByManager(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.ISCSIServerList>): void;
    listByManager(resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ISCSIServerList>): void;


    /**
     * Creates or updates the iSCSI server.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {object} iscsiServer The iSCSI server.
     *
     * @param {string} iscsiServer.storageDomainId The storage domain id.
     *
     * @param {string} iscsiServer.backupScheduleGroupId The backup policy id.
     *
     * @param {string} [iscsiServer.description] The description.
     *
     * @param {string} [iscsiServer.chapId] The chap id.
     *
     * @param {string} [iscsiServer.reverseChapId] The reverse chap id.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ISCSIServer>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(deviceName: string, iscsiServerName: string, iscsiServer: models.ISCSIServer, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ISCSIServer>>;

    /**
     * Creates or updates the iSCSI server.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {object} iscsiServer The iSCSI server.
     *
     * @param {string} iscsiServer.storageDomainId The storage domain id.
     *
     * @param {string} iscsiServer.backupScheduleGroupId The backup policy id.
     *
     * @param {string} [iscsiServer.description] The description.
     *
     * @param {string} [iscsiServer.chapId] The chap id.
     *
     * @param {string} [iscsiServer.reverseChapId] The reverse chap id.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ISCSIServer} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ISCSIServer} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ISCSIServer} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(deviceName: string, iscsiServerName: string, iscsiServer: models.ISCSIServer, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ISCSIServer>;
    beginCreateOrUpdate(deviceName: string, iscsiServerName: string, iscsiServer: models.ISCSIServer, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.ISCSIServer>): void;
    beginCreateOrUpdate(deviceName: string, iscsiServerName: string, iscsiServer: models.ISCSIServer, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ISCSIServer>): void;


    /**
     * Deletes the iSCSI server.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the iSCSI server.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Backup the iSCSI server now.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginBackupNowWithHttpOperationResponse(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Backup the iSCSI server now.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} iscsiServerName The iSCSI server name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginBackupNow(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginBackupNow(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginBackupNow(deviceName: string, iscsiServerName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * Jobs
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimpleManagementClient.
 */
export interface Jobs {


    /**
     * Retrieves all the jobs in a device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDeviceWithHttpOperationResponse(deviceName: string, resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobList>>;

    /**
     * Retrieves all the jobs in a device.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.JobList>;
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.JobList>): void;
    listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobList>): void;


    /**
     * Returns the properties of the specified job name.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} jobName The job name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Job>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(deviceName: string, jobName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Job>>;

    /**
     * Returns the properties of the specified job name.
     *
     * @param {string} deviceName The device name.
     *
     * @param {string} jobName The job name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Job} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Job} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Job} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(deviceName: string, jobName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Job>;
    get(deviceName: string, jobName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.Job>): void;
    get(deviceName: string, jobName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Job>): void;


    /**
     * Retrieves all the jobs in a manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByManagerWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobList>>;

    /**
     * Retrieves all the jobs in a manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] OData Filter options
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByManager(resourceGroupName: string, managerName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.JobList>;
    listByManager(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.JobList>): void;
    listByManager(resourceGroupName: string, managerName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobList>): void;


    /**
     * Retrieves all the jobs in a device.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDeviceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobList>>;

    /**
     * Retrieves all the jobs in a device.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDeviceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobList>;
    listByDeviceNext(nextPageLink: string, callback: ServiceCallback<models.JobList>): void;
    listByDeviceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobList>): void;


    /**
     * Retrieves all the jobs in a manager.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByManagerNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobList>>;

    /**
     * Retrieves all the jobs in a manager.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByManagerNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobList>;
    listByManagerNext(nextPageLink: string, callback: ServiceCallback<models.JobList>): void;
    listByManagerNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobList>): void;
}

/**
 * @class
 * StorageAccountCredentials
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimpleManagementClient.
 */
export interface StorageAccountCredentials {


    /**
     * Retrieves all the storage account credentials in a manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StorageAccountCredentialList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByManagerWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageAccountCredentialList>>;

    /**
     * Retrieves all the storage account credentials in a manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StorageAccountCredentialList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StorageAccountCredentialList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StorageAccountCredentialList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByManager(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageAccountCredentialList>;
    listByManager(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.StorageAccountCredentialList>): void;
    listByManager(resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageAccountCredentialList>): void;


    /**
     * Returns the properties of the specified storage account credential name.
     *
     * @param {string} credentialName The name of storage account credential to be
     * fetched.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StorageAccountCredential>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(credentialName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageAccountCredential>>;

    /**
     * Returns the properties of the specified storage account credential name.
     *
     * @param {string} credentialName The name of storage account credential to be
     * fetched.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StorageAccountCredential} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StorageAccountCredential} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StorageAccountCredential} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(credentialName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageAccountCredential>;
    get(credentialName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.StorageAccountCredential>): void;
    get(credentialName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageAccountCredential>): void;


    /**
     * Creates or updates the storage account credential
     *
     * @param {string} credentialName The credential name.
     *
     * @param {object} storageAccount The storage account credential to be added or
     * updated.
     *
     * @param {string} storageAccount.cloudType The cloud service provider.
     * Possible values include: 'Azure', 'S3', 'S3_RRS', 'OpenStack', 'HP'
     *
     * @param {string} storageAccount.endPoint The storage endpoint
     *
     * @param {string} storageAccount.login The storage account login
     *
     * @param {string} [storageAccount.location] The storage account's geo location
     *
     * @param {string} storageAccount.enableSSL SSL needs to be enabled or not.
     * Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [storageAccount.accessKey] The details of the storage
     * account password
     *
     * @param {string} storageAccount.accessKey.value The value of the secret
     * itself. If the secret is in plaintext then EncryptionAlgorithm will be none
     * and EncryptionCertThumbprint will be null.
     *
     * @param {string} [storageAccount.accessKey.encryptionCertificateThumbprint]
     * Thumbprint certificate that was used to encrypt "Value"
     *
     * @param {string} storageAccount.accessKey.encryptionAlgorithm Algorithm used
     * to encrypt "Value". Possible values include: 'None', 'AES256',
     * 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StorageAccountCredential>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(credentialName: string, storageAccount: models.StorageAccountCredential, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageAccountCredential>>;

    /**
     * Creates or updates the storage account credential
     *
     * @param {string} credentialName The credential name.
     *
     * @param {object} storageAccount The storage account credential to be added or
     * updated.
     *
     * @param {string} storageAccount.cloudType The cloud service provider.
     * Possible values include: 'Azure', 'S3', 'S3_RRS', 'OpenStack', 'HP'
     *
     * @param {string} storageAccount.endPoint The storage endpoint
     *
     * @param {string} storageAccount.login The storage account login
     *
     * @param {string} [storageAccount.location] The storage account's geo location
     *
     * @param {string} storageAccount.enableSSL SSL needs to be enabled or not.
     * Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [storageAccount.accessKey] The details of the storage
     * account password
     *
     * @param {string} storageAccount.accessKey.value The value of the secret
     * itself. If the secret is in plaintext then EncryptionAlgorithm will be none
     * and EncryptionCertThumbprint will be null.
     *
     * @param {string} [storageAccount.accessKey.encryptionCertificateThumbprint]
     * Thumbprint certificate that was used to encrypt "Value"
     *
     * @param {string} storageAccount.accessKey.encryptionAlgorithm Algorithm used
     * to encrypt "Value". Possible values include: 'None', 'AES256',
     * 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StorageAccountCredential} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StorageAccountCredential} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StorageAccountCredential} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(credentialName: string, storageAccount: models.StorageAccountCredential, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageAccountCredential>;
    createOrUpdate(credentialName: string, storageAccount: models.StorageAccountCredential, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.StorageAccountCredential>): void;
    createOrUpdate(credentialName: string, storageAccount: models.StorageAccountCredential, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageAccountCredential>): void;


    /**
     * Deletes the storage account credential
     *
     * @param {string} credentialName The name of the storage account credential.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(credentialName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the storage account credential
     *
     * @param {string} credentialName The name of the storage account credential.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(credentialName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(credentialName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(credentialName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates the storage account credential
     *
     * @param {string} credentialName The credential name.
     *
     * @param {object} storageAccount The storage account credential to be added or
     * updated.
     *
     * @param {string} storageAccount.cloudType The cloud service provider.
     * Possible values include: 'Azure', 'S3', 'S3_RRS', 'OpenStack', 'HP'
     *
     * @param {string} storageAccount.endPoint The storage endpoint
     *
     * @param {string} storageAccount.login The storage account login
     *
     * @param {string} [storageAccount.location] The storage account's geo location
     *
     * @param {string} storageAccount.enableSSL SSL needs to be enabled or not.
     * Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [storageAccount.accessKey] The details of the storage
     * account password
     *
     * @param {string} storageAccount.accessKey.value The value of the secret
     * itself. If the secret is in plaintext then EncryptionAlgorithm will be none
     * and EncryptionCertThumbprint will be null.
     *
     * @param {string} [storageAccount.accessKey.encryptionCertificateThumbprint]
     * Thumbprint certificate that was used to encrypt "Value"
     *
     * @param {string} storageAccount.accessKey.encryptionAlgorithm Algorithm used
     * to encrypt "Value". Possible values include: 'None', 'AES256',
     * 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StorageAccountCredential>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(credentialName: string, storageAccount: models.StorageAccountCredential, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageAccountCredential>>;

    /**
     * Creates or updates the storage account credential
     *
     * @param {string} credentialName The credential name.
     *
     * @param {object} storageAccount The storage account credential to be added or
     * updated.
     *
     * @param {string} storageAccount.cloudType The cloud service provider.
     * Possible values include: 'Azure', 'S3', 'S3_RRS', 'OpenStack', 'HP'
     *
     * @param {string} storageAccount.endPoint The storage endpoint
     *
     * @param {string} storageAccount.login The storage account login
     *
     * @param {string} [storageAccount.location] The storage account's geo location
     *
     * @param {string} storageAccount.enableSSL SSL needs to be enabled or not.
     * Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [storageAccount.accessKey] The details of the storage
     * account password
     *
     * @param {string} storageAccount.accessKey.value The value of the secret
     * itself. If the secret is in plaintext then EncryptionAlgorithm will be none
     * and EncryptionCertThumbprint will be null.
     *
     * @param {string} [storageAccount.accessKey.encryptionCertificateThumbprint]
     * Thumbprint certificate that was used to encrypt "Value"
     *
     * @param {string} storageAccount.accessKey.encryptionAlgorithm Algorithm used
     * to encrypt "Value". Possible values include: 'None', 'AES256',
     * 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StorageAccountCredential} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StorageAccountCredential} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StorageAccountCredential} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(credentialName: string, storageAccount: models.StorageAccountCredential, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageAccountCredential>;
    beginCreateOrUpdate(credentialName: string, storageAccount: models.StorageAccountCredential, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.StorageAccountCredential>): void;
    beginCreateOrUpdate(credentialName: string, storageAccount: models.StorageAccountCredential, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageAccountCredential>): void;


    /**
     * Deletes the storage account credential
     *
     * @param {string} credentialName The name of the storage account credential.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(credentialName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the storage account credential
     *
     * @param {string} credentialName The name of the storage account credential.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(credentialName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(credentialName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(credentialName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * StorageDomains
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorSimpleManagementClient.
 */
export interface StorageDomains {


    /**
     * Retrieves all the storage domains in a manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StorageDomainList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByManagerWithHttpOperationResponse(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageDomainList>>;

    /**
     * Retrieves all the storage domains in a manager.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StorageDomainList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StorageDomainList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StorageDomainList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByManager(resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageDomainList>;
    listByManager(resourceGroupName: string, managerName: string, callback: ServiceCallback<models.StorageDomainList>): void;
    listByManager(resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageDomainList>): void;


    /**
     * Returns the properties of the specified storage domain name.
     *
     * @param {string} storageDomainName The storage domain name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StorageDomain>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(storageDomainName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageDomain>>;

    /**
     * Returns the properties of the specified storage domain name.
     *
     * @param {string} storageDomainName The storage domain name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StorageDomain} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StorageDomain} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StorageDomain} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(storageDomainName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageDomain>;
    get(storageDomainName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.StorageDomain>): void;
    get(storageDomainName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageDomain>): void;


    /**
     * Creates or updates the storage domain.
     *
     * @param {string} storageDomainName The storage domain name.
     *
     * @param {object} storageDomain The storageDomain.
     *
     * @param {array} storageDomain.storageAccountCredentialIds The storage account
     * credentials.
     *
     * @param {object} [storageDomain.encryptionKey] The encryption key used to
     * encrypt the data. This is a user secret.
     *
     * @param {string} storageDomain.encryptionKey.value The value of the secret
     * itself. If the secret is in plaintext then EncryptionAlgorithm will be none
     * and EncryptionCertThumbprint will be null.
     *
     * @param {string}
     * [storageDomain.encryptionKey.encryptionCertificateThumbprint] Thumbprint
     * certificate that was used to encrypt "Value"
     *
     * @param {string} storageDomain.encryptionKey.encryptionAlgorithm Algorithm
     * used to encrypt "Value". Possible values include: 'None', 'AES256',
     * 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} storageDomain.encryptionStatus The encryption status
     * "Enabled | Disabled". Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StorageDomain>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(storageDomainName: string, storageDomain: models.StorageDomain, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageDomain>>;

    /**
     * Creates or updates the storage domain.
     *
     * @param {string} storageDomainName The storage domain name.
     *
     * @param {object} storageDomain The storageDomain.
     *
     * @param {array} storageDomain.storageAccountCredentialIds The storage account
     * credentials.
     *
     * @param {object} [storageDomain.encryptionKey] The encryption key used to
     * encrypt the data. This is a user secret.
     *
     * @param {string} storageDomain.encryptionKey.value The value of the secret
     * itself. If the secret is in plaintext then EncryptionAlgorithm will be none
     * and EncryptionCertThumbprint will be null.
     *
     * @param {string}
     * [storageDomain.encryptionKey.encryptionCertificateThumbprint] Thumbprint
     * certificate that was used to encrypt "Value"
     *
     * @param {string} storageDomain.encryptionKey.encryptionAlgorithm Algorithm
     * used to encrypt "Value". Possible values include: 'None', 'AES256',
     * 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} storageDomain.encryptionStatus The encryption status
     * "Enabled | Disabled". Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StorageDomain} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StorageDomain} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StorageDomain} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(storageDomainName: string, storageDomain: models.StorageDomain, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageDomain>;
    createOrUpdate(storageDomainName: string, storageDomain: models.StorageDomain, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.StorageDomain>): void;
    createOrUpdate(storageDomainName: string, storageDomain: models.StorageDomain, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageDomain>): void;


    /**
     * Deletes the storage domain.
     *
     * @param {string} storageDomainName The storage domain name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(storageDomainName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the storage domain.
     *
     * @param {string} storageDomainName The storage domain name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(storageDomainName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(storageDomainName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(storageDomainName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates the storage domain.
     *
     * @param {string} storageDomainName The storage domain name.
     *
     * @param {object} storageDomain The storageDomain.
     *
     * @param {array} storageDomain.storageAccountCredentialIds The storage account
     * credentials.
     *
     * @param {object} [storageDomain.encryptionKey] The encryption key used to
     * encrypt the data. This is a user secret.
     *
     * @param {string} storageDomain.encryptionKey.value The value of the secret
     * itself. If the secret is in plaintext then EncryptionAlgorithm will be none
     * and EncryptionCertThumbprint will be null.
     *
     * @param {string}
     * [storageDomain.encryptionKey.encryptionCertificateThumbprint] Thumbprint
     * certificate that was used to encrypt "Value"
     *
     * @param {string} storageDomain.encryptionKey.encryptionAlgorithm Algorithm
     * used to encrypt "Value". Possible values include: 'None', 'AES256',
     * 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} storageDomain.encryptionStatus The encryption status
     * "Enabled | Disabled". Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StorageDomain>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(storageDomainName: string, storageDomain: models.StorageDomain, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageDomain>>;

    /**
     * Creates or updates the storage domain.
     *
     * @param {string} storageDomainName The storage domain name.
     *
     * @param {object} storageDomain The storageDomain.
     *
     * @param {array} storageDomain.storageAccountCredentialIds The storage account
     * credentials.
     *
     * @param {object} [storageDomain.encryptionKey] The encryption key used to
     * encrypt the data. This is a user secret.
     *
     * @param {string} storageDomain.encryptionKey.value The value of the secret
     * itself. If the secret is in plaintext then EncryptionAlgorithm will be none
     * and EncryptionCertThumbprint will be null.
     *
     * @param {string}
     * [storageDomain.encryptionKey.encryptionCertificateThumbprint] Thumbprint
     * certificate that was used to encrypt "Value"
     *
     * @param {string} storageDomain.encryptionKey.encryptionAlgorithm Algorithm
     * used to encrypt "Value". Possible values include: 'None', 'AES256',
     * 'RSAES_PKCS1_v_1_5'
     *
     * @param {string} storageDomain.encryptionStatus The encryption status
     * "Enabled | Disabled". Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StorageDomain} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StorageDomain} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StorageDomain} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(storageDomainName: string, storageDomain: models.StorageDomain, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageDomain>;
    beginCreateOrUpdate(storageDomainName: string, storageDomain: models.StorageDomain, resourceGroupName: string, managerName: string, callback: ServiceCallback<models.StorageDomain>): void;
    beginCreateOrUpdate(storageDomainName: string, storageDomain: models.StorageDomain, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageDomain>): void;


    /**
     * Deletes the storage domain.
     *
     * @param {string} storageDomainName The storage domain name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(storageDomainName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the storage domain.
     *
     * @param {string} storageDomainName The storage domain name.
     *
     * @param {string} resourceGroupName The resource group name
     *
     * @param {string} managerName The manager name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(storageDomainName: string, resourceGroupName: string, managerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(storageDomainName: string, resourceGroupName: string, managerName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(storageDomainName: string, resourceGroupName: string, managerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}
