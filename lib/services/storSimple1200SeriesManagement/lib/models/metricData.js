/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * The metric data.
 *
 */
class MetricData {
  /**
   * Create a MetricData.
   * @property {date} timeStamp The time when the metric data is fetched
   * @property {number} sum The sum of all the samples available in the given
   * instance of time for the specific metric data
   * @property {number} count The count of samples of the metric data available
   * for the given instance
   * @property {number} average The average of all sample for the given
   * instance
   * @property {number} minimum The minimum of all samples available
   * @property {number} maximum The maximum of all samples available
   */
  constructor() {
  }

  /**
   * Defines the metadata of MetricData
   *
   * @returns {object} metadata of MetricData
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'MetricData',
      type: {
        name: 'Composite',
        className: 'MetricData',
        modelProperties: {
          timeStamp: {
            required: true,
            serializedName: 'timeStamp',
            type: {
              name: 'DateTime'
            }
          },
          sum: {
            required: true,
            serializedName: 'sum',
            type: {
              name: 'Number'
            }
          },
          count: {
            required: true,
            serializedName: 'count',
            type: {
              name: 'Number'
            }
          },
          average: {
            required: true,
            serializedName: 'average',
            type: {
              name: 'Number'
            }
          },
          minimum: {
            required: true,
            serializedName: 'minimum',
            type: {
              name: 'Number'
            }
          },
          maximum: {
            required: true,
            serializedName: 'maximum',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = MetricData;
