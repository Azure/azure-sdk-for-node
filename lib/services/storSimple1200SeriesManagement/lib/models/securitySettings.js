/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The SecuritySettings of a device
 *
 * @extends models['BaseModel']
 */
class SecuritySettings extends models['BaseModel'] {
  /**
   * Create a SecuritySettings.
   * @property {object} deviceAdminPassword Device administrator password as an
   * encrypted string (encrypted using RSA PKCS #1) is used to log into the
   * local web UI of the device. Actual password could have at least 8
   * characters that are a combination of  uppercase, lowercase, numeric, and
   * special characters
   * @property {string} [deviceAdminPassword.value] The value of the secret
   * itself. If the secret is in plaintext then EncryptionAlgorithm will be
   * none and EncryptionCertThumbprint will be null.
   * @property {string} [deviceAdminPassword.encryptionCertificateThumbprint]
   * Thumbprint certificate that was used to encrypt "Value"
   * @property {string} [deviceAdminPassword.encryptionAlgorithm] Algorithm
   * used to encrypt "Value". Possible values include: 'None', 'AES256',
   * 'RSAES_PKCS1_v_1_5'
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of SecuritySettings
   *
   * @returns {object} metadata of SecuritySettings
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'SecuritySettings',
      type: {
        name: 'Composite',
        className: 'SecuritySettings',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          deviceAdminPassword: {
            required: true,
            serializedName: 'properties.deviceAdminPassword',
            type: {
              name: 'Composite',
              className: 'AsymmetricEncryptedSecret'
            }
          }
        }
      }
    };
  }
}

module.exports = SecuritySettings;
