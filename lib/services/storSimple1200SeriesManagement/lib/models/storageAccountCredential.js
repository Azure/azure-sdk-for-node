/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The storage account credential
 *
 * @extends models['BaseModel']
 */
class StorageAccountCredential extends models['BaseModel'] {
  /**
   * Create a StorageAccountCredential.
   * @property {string} cloudType The cloud service provider. Possible values
   * include: 'Azure', 'S3', 'S3_RRS', 'OpenStack', 'HP'
   * @property {string} endPoint The storage endpoint
   * @property {string} login The storage account login
   * @property {string} [location] The storage account's geo location
   * @property {string} enableSSL SSL needs to be enabled or not. Possible
   * values include: 'Enabled', 'Disabled'
   * @property {object} [accessKey] The details of the storage account password
   * @property {string} [accessKey.value] The value of the secret itself. If
   * the secret is in plaintext then EncryptionAlgorithm will be none and
   * EncryptionCertThumbprint will be null.
   * @property {string} [accessKey.encryptionCertificateThumbprint] Thumbprint
   * certificate that was used to encrypt "Value"
   * @property {string} [accessKey.encryptionAlgorithm] Algorithm used to
   * encrypt "Value". Possible values include: 'None', 'AES256',
   * 'RSAES_PKCS1_v_1_5'
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of StorageAccountCredential
   *
   * @returns {object} metadata of StorageAccountCredential
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'StorageAccountCredential',
      type: {
        name: 'Composite',
        className: 'StorageAccountCredential',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          cloudType: {
            required: true,
            serializedName: 'properties.cloudType',
            type: {
              name: 'Enum',
              allowedValues: [ 'Azure', 'S3', 'S3_RRS', 'OpenStack', 'HP' ]
            }
          },
          endPoint: {
            required: true,
            serializedName: 'properties.endPoint',
            type: {
              name: 'String'
            }
          },
          login: {
            required: true,
            serializedName: 'properties.login',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            serializedName: 'properties.location',
            type: {
              name: 'String'
            }
          },
          enableSSL: {
            required: true,
            serializedName: 'properties.enableSSL',
            type: {
              name: 'Enum',
              allowedValues: [ 'Enabled', 'Disabled' ]
            }
          },
          accessKey: {
            required: false,
            serializedName: 'properties.accessKey',
            type: {
              name: 'Composite',
              className: 'AsymmetricEncryptedSecret'
            }
          }
        }
      }
    };
  }
}

module.exports = StorageAccountCredential;
