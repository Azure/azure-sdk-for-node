/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Represents a networkAdapter in a particular node.
 *
 */
class NetworkAdapter {
  /**
   * Create a NetworkAdapter.
   * @property {string} networkAdapterName The name of the network adapter.
   * @property {object} [iPv4Info] The ipv4 configuration of the network
   * adapter.
   * @property {string} [iPv4Info.ipAddress] The IP address of the network
   * adapter, either ipv4 or ipv6.
   * @property {number} [iPv4Info.prefixLength] The prefix length of the
   * network adapter.
   * @property {string} [iPv4Info.gateway] The gateway of the network adapter.
   * @property {object} [iPv6Info] The ipv6 configuration of the network
   * adapter.
   * @property {string} [iPv6Info.ipAddress] The IP address of the network
   * adapter, either ipv4 or ipv6.
   * @property {number} [iPv6Info.prefixLength] The prefix length of the
   * network adapter.
   * @property {string} [iPv6Info.gateway] The gateway of the network adapter.
   * @property {string} dhcpStatus Represents state of DHCP. Possible values
   * include: 'Enabled', 'Disabled'
   * @property {number} [linkSpeed] The speed of the network adapter.
   */
  constructor() {
  }

  /**
   * Defines the metadata of NetworkAdapter
   *
   * @returns {object} metadata of NetworkAdapter
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'NetworkAdapter',
      type: {
        name: 'Composite',
        className: 'NetworkAdapter',
        modelProperties: {
          networkAdapterName: {
            required: true,
            serializedName: 'networkAdapterName',
            type: {
              name: 'String'
            }
          },
          iPv4Info: {
            required: false,
            serializedName: 'iPv4Info',
            type: {
              name: 'Composite',
              className: 'IPConfig'
            }
          },
          iPv6Info: {
            required: false,
            serializedName: 'iPv6Info',
            type: {
              name: 'Composite',
              className: 'IPConfig'
            }
          },
          dhcpStatus: {
            required: true,
            serializedName: 'dhcpStatus',
            type: {
              name: 'Enum',
              allowedValues: [ 'Enabled', 'Disabled' ]
            }
          },
          linkSpeed: {
            required: false,
            serializedName: 'linkSpeed',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = NetworkAdapter;
