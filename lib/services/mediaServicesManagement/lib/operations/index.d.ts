/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MediaServicesManagementClient.
 */
export interface Operations {


    /**
     * Lists all of the available Media Services REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available Media Services REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(callback: ServiceCallback<models.OperationListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}

/**
 * @class
 * MediaServiceOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MediaServicesManagementClient.
 */
export interface MediaServiceOperations {


    /**
     * Checks whether the Media Service resource name is available. The name must
     * be globally unique.
     *
     * @param {object} parameters Properties needed to check the availability of a
     * name.
     *
     * @param {string} parameters.name The name of the resource. A name must be
     * globally unique.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CheckNameAvailabilityOutput>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkNameAvailabilityWithHttpOperationResponse(parameters: models.CheckNameAvailabilityInput, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CheckNameAvailabilityOutput>>;

    /**
     * Checks whether the Media Service resource name is available. The name must
     * be globally unique.
     *
     * @param {object} parameters Properties needed to check the availability of a
     * name.
     *
     * @param {string} parameters.name The name of the resource. A name must be
     * globally unique.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CheckNameAvailabilityOutput} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CheckNameAvailabilityOutput} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CheckNameAvailabilityOutput} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkNameAvailability(parameters: models.CheckNameAvailabilityInput, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CheckNameAvailabilityOutput>;
    checkNameAvailability(parameters: models.CheckNameAvailabilityInput, callback: ServiceCallback<models.CheckNameAvailabilityOutput>): void;
    checkNameAvailability(parameters: models.CheckNameAvailabilityInput, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CheckNameAvailabilityOutput>): void;


    /**
     * Lists all of the Media Services in a resource group.
     *
     * @param {string} resourceGroupName Name of the resource group within the
     * Azure subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MediaServiceCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MediaServiceCollection>>;

    /**
     * Lists all of the Media Services in a resource group.
     *
     * @param {string} resourceGroupName Name of the resource group within the
     * Azure subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MediaServiceCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MediaServiceCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MediaServiceCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MediaServiceCollection>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.MediaServiceCollection>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MediaServiceCollection>): void;


    /**
     * Gets a Media Service.
     *
     * @param {string} resourceGroupName Name of the resource group within the
     * Azure subscription.
     *
     * @param {string} mediaServiceName Name of the Media Service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MediaService>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, mediaServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MediaService>>;

    /**
     * Gets a Media Service.
     *
     * @param {string} resourceGroupName Name of the resource group within the
     * Azure subscription.
     *
     * @param {string} mediaServiceName Name of the Media Service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MediaService} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MediaService} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MediaService} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, mediaServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MediaService>;
    get(resourceGroupName: string, mediaServiceName: string, callback: ServiceCallback<models.MediaService>): void;
    get(resourceGroupName: string, mediaServiceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MediaService>): void;


    /**
     * Creates a Media Service.
     *
     * @param {string} resourceGroupName Name of the resource group within the
     * Azure subscription.
     *
     * @param {string} mediaServiceName Name of the Media Service.
     *
     * @param {object} parameters Media Service properties needed for creation.
     *
     * @param {array} [parameters.storageAccounts] The storage accounts for this
     * resource.
     *
     * @param {string} [parameters.location] The geographic location of the
     * resource. This must be one of the supported and registered Azure Geo Regions
     * (for example, West US, East US, Southeast Asia, and so forth).
     *
     * @param {object} [parameters.tags] Tags to help categorize the resource in
     * the Azure portal.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MediaService>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, mediaServiceName: string, parameters: models.MediaService, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MediaService>>;

    /**
     * Creates a Media Service.
     *
     * @param {string} resourceGroupName Name of the resource group within the
     * Azure subscription.
     *
     * @param {string} mediaServiceName Name of the Media Service.
     *
     * @param {object} parameters Media Service properties needed for creation.
     *
     * @param {array} [parameters.storageAccounts] The storage accounts for this
     * resource.
     *
     * @param {string} [parameters.location] The geographic location of the
     * resource. This must be one of the supported and registered Azure Geo Regions
     * (for example, West US, East US, Southeast Asia, and so forth).
     *
     * @param {object} [parameters.tags] Tags to help categorize the resource in
     * the Azure portal.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MediaService} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MediaService} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MediaService} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, mediaServiceName: string, parameters: models.MediaService, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MediaService>;
    create(resourceGroupName: string, mediaServiceName: string, parameters: models.MediaService, callback: ServiceCallback<models.MediaService>): void;
    create(resourceGroupName: string, mediaServiceName: string, parameters: models.MediaService, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MediaService>): void;


    /**
     * Deletes a Media Service.
     *
     * @param {string} resourceGroupName Name of the resource group within the
     * Azure subscription.
     *
     * @param {string} mediaServiceName Name of the Media Service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, mediaServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a Media Service.
     *
     * @param {string} resourceGroupName Name of the resource group within the
     * Azure subscription.
     *
     * @param {string} mediaServiceName Name of the Media Service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, mediaServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, mediaServiceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, mediaServiceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a Media Service.
     *
     * @param {string} resourceGroupName Name of the resource group within the
     * Azure subscription.
     *
     * @param {string} mediaServiceName Name of the Media Service.
     *
     * @param {object} parameters Media Service properties needed for update.
     *
     * @param {array} [parameters.storageAccounts] The storage accounts for this
     * resource.
     *
     * @param {string} [parameters.location] The geographic location of the
     * resource. This must be one of the supported and registered Azure Geo Regions
     * (for example, West US, East US, Southeast Asia, and so forth).
     *
     * @param {object} [parameters.tags] Tags to help categorize the resource in
     * the Azure portal.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MediaService>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, mediaServiceName: string, parameters: models.MediaService, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MediaService>>;

    /**
     * Updates a Media Service.
     *
     * @param {string} resourceGroupName Name of the resource group within the
     * Azure subscription.
     *
     * @param {string} mediaServiceName Name of the Media Service.
     *
     * @param {object} parameters Media Service properties needed for update.
     *
     * @param {array} [parameters.storageAccounts] The storage accounts for this
     * resource.
     *
     * @param {string} [parameters.location] The geographic location of the
     * resource. This must be one of the supported and registered Azure Geo Regions
     * (for example, West US, East US, Southeast Asia, and so forth).
     *
     * @param {object} [parameters.tags] Tags to help categorize the resource in
     * the Azure portal.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MediaService} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MediaService} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MediaService} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, mediaServiceName: string, parameters: models.MediaService, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MediaService>;
    update(resourceGroupName: string, mediaServiceName: string, parameters: models.MediaService, callback: ServiceCallback<models.MediaService>): void;
    update(resourceGroupName: string, mediaServiceName: string, parameters: models.MediaService, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MediaService>): void;


    /**
     * Regenerates a primary or secondary key for a Media Service.
     *
     * @param {string} resourceGroupName Name of the resource group within the
     * Azure subscription.
     *
     * @param {string} mediaServiceName Name of the Media Service.
     *
     * @param {object} parameters Properties needed to regenerate the Media Service
     * key.
     *
     * @param {string} parameters.keyType The keyType indicating which key you want
     * to regenerate, Primary or Secondary. Possible values include: 'Primary',
     * 'Secondary'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RegenerateKeyOutput>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regenerateKeyWithHttpOperationResponse(resourceGroupName: string, mediaServiceName: string, parameters: models.RegenerateKeyInput, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RegenerateKeyOutput>>;

    /**
     * Regenerates a primary or secondary key for a Media Service.
     *
     * @param {string} resourceGroupName Name of the resource group within the
     * Azure subscription.
     *
     * @param {string} mediaServiceName Name of the Media Service.
     *
     * @param {object} parameters Properties needed to regenerate the Media Service
     * key.
     *
     * @param {string} parameters.keyType The keyType indicating which key you want
     * to regenerate, Primary or Secondary. Possible values include: 'Primary',
     * 'Secondary'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RegenerateKeyOutput} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RegenerateKeyOutput} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RegenerateKeyOutput} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regenerateKey(resourceGroupName: string, mediaServiceName: string, parameters: models.RegenerateKeyInput, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RegenerateKeyOutput>;
    regenerateKey(resourceGroupName: string, mediaServiceName: string, parameters: models.RegenerateKeyInput, callback: ServiceCallback<models.RegenerateKeyOutput>): void;
    regenerateKey(resourceGroupName: string, mediaServiceName: string, parameters: models.RegenerateKeyInput, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RegenerateKeyOutput>): void;


    /**
     * Lists the keys for a Media Service.
     *
     * @param {string} resourceGroupName Name of the resource group within the
     * Azure subscription.
     *
     * @param {string} mediaServiceName Name of the Media Service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceKeys>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listKeysWithHttpOperationResponse(resourceGroupName: string, mediaServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceKeys>>;

    /**
     * Lists the keys for a Media Service.
     *
     * @param {string} resourceGroupName Name of the resource group within the
     * Azure subscription.
     *
     * @param {string} mediaServiceName Name of the Media Service.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceKeys} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceKeys} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceKeys} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listKeys(resourceGroupName: string, mediaServiceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceKeys>;
    listKeys(resourceGroupName: string, mediaServiceName: string, callback: ServiceCallback<models.ServiceKeys>): void;
    listKeys(resourceGroupName: string, mediaServiceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceKeys>): void;


    /**
     * Synchronizes storage account keys for a storage account associated with the
     * Media Service account.
     *
     * @param {string} resourceGroupName Name of the resource group within the
     * Azure subscription.
     *
     * @param {string} mediaServiceName Name of the Media Service.
     *
     * @param {object} parameters Properties needed to synchronize the keys for a
     * storage account to the Media Service.
     *
     * @param {string} parameters.id The id of the storage account resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    syncStorageKeysWithHttpOperationResponse(resourceGroupName: string, mediaServiceName: string, parameters: models.SyncStorageKeysInput, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Synchronizes storage account keys for a storage account associated with the
     * Media Service account.
     *
     * @param {string} resourceGroupName Name of the resource group within the
     * Azure subscription.
     *
     * @param {string} mediaServiceName Name of the Media Service.
     *
     * @param {object} parameters Properties needed to synchronize the keys for a
     * storage account to the Media Service.
     *
     * @param {string} parameters.id The id of the storage account resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    syncStorageKeys(resourceGroupName: string, mediaServiceName: string, parameters: models.SyncStorageKeysInput, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    syncStorageKeys(resourceGroupName: string, mediaServiceName: string, parameters: models.SyncStorageKeysInput, callback: ServiceCallback<void>): void;
    syncStorageKeys(resourceGroupName: string, mediaServiceName: string, parameters: models.SyncStorageKeysInput, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}
