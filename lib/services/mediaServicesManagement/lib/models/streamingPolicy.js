/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * A Streaming Policy resource
 *
 * @extends models['ProxyResource']
 */
class StreamingPolicy extends models['ProxyResource'] {
  /**
   * Create a StreamingPolicy.
   * @property {date} [created] Creation time of Streaming Policy
   * @property {string} [defaultContentKeyPolicyName] Default ContentKey used
   * by current Streaming Policy
   * @property {object} [envelopeEncryption] Configuration of
   * EnvelopeEncryption
   * @property {object} [envelopeEncryption.enabledProtocols] Representing
   * supported protocols
   * @property {boolean} [envelopeEncryption.enabledProtocols.download] Enable
   * Download protocol or not
   * @property {boolean} [envelopeEncryption.enabledProtocols.dash] Enable DASH
   * protocol or not
   * @property {boolean} [envelopeEncryption.enabledProtocols.hls] Enable HLS
   * protocol or not
   * @property {boolean} [envelopeEncryption.enabledProtocols.smoothStreaming]
   * Enable SmoothStreaming protocol or not
   * @property {array} [envelopeEncryption.clearTracks] Representing which
   * tracks should not be encrypted
   * @property {object} [envelopeEncryption.contentKeys] Representing default
   * content key for each encryption scheme and separate content keys for
   * specific tracks
   * @property {object} [envelopeEncryption.contentKeys.defaultKey] Default
   * content key for an encryption scheme
   * @property {string} [envelopeEncryption.contentKeys.defaultKey.label] Label
   * can be used to specify Content Key when creating a Streaming Locator
   * @property {string} [envelopeEncryption.contentKeys.defaultKey.policyName]
   * Policy used by Default Key
   * @property {array} [envelopeEncryption.contentKeys.keyToTrackMappings]
   * Representing tracks needs separate content key
   * @property {string} [envelopeEncryption.customKeyAcquisitionUrlTemplate]
   * Template for the URL of the custom service delivering keys to end user
   * players.  Not required when using Azure Media Services for issuing keys.
   * The template supports replaceable tokens that the service will update at
   * runtime with the value specific to the request.  The currently supported
   * token values are {AlternativeMediaId}, which is replaced with the value of
   * StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is
   * replaced with the value of identifier of the key being requested.
   * @property {object} [commonEncryptionCenc] Configuration of
   * CommonEncryptionCenc
   * @property {object} [commonEncryptionCenc.enabledProtocols] Representing
   * supported protocols
   * @property {boolean} [commonEncryptionCenc.enabledProtocols.download]
   * Enable Download protocol or not
   * @property {boolean} [commonEncryptionCenc.enabledProtocols.dash] Enable
   * DASH protocol or not
   * @property {boolean} [commonEncryptionCenc.enabledProtocols.hls] Enable HLS
   * protocol or not
   * @property {boolean}
   * [commonEncryptionCenc.enabledProtocols.smoothStreaming] Enable
   * SmoothStreaming protocol or not
   * @property {array} [commonEncryptionCenc.clearTracks] Representing which
   * tracks should not be encrypted
   * @property {object} [commonEncryptionCenc.contentKeys] Representing default
   * content key for each encryption scheme and separate content keys for
   * specific tracks
   * @property {object} [commonEncryptionCenc.contentKeys.defaultKey] Default
   * content key for an encryption scheme
   * @property {string} [commonEncryptionCenc.contentKeys.defaultKey.label]
   * Label can be used to specify Content Key when creating a Streaming Locator
   * @property {string}
   * [commonEncryptionCenc.contentKeys.defaultKey.policyName] Policy used by
   * Default Key
   * @property {array} [commonEncryptionCenc.contentKeys.keyToTrackMappings]
   * Representing tracks needs separate content key
   * @property {object} [commonEncryptionCenc.drm] Configuration of DRMs for
   * CommonEncryptionCenc encryption scheme
   * @property {object} [commonEncryptionCenc.drm.playReady] PlayReady
   * configurations
   * @property {string}
   * [commonEncryptionCenc.drm.playReady.customLicenseAcquisitionUrlTemplate]
   * Template for the URL of the custom service delivering licenses to end user
   * players.  Not required when using Azure Media Services for issuing
   * licenses.  The template supports replaceable tokens that the service will
   * update at runtime with the value specific to the request.  The currently
   * supported token values are {AlternativeMediaId}, which is replaced with
   * the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId},
   * which is replaced with the value of identifier of the key being requested.
   * @property {string}
   * [commonEncryptionCenc.drm.playReady.playReadyCustomAttributes] Custom
   * attributes for PlayReady
   * @property {object} [commonEncryptionCenc.drm.widevine] Widevine
   * configurations
   * @property {string}
   * [commonEncryptionCenc.drm.widevine.customLicenseAcquisitionUrlTemplate]
   * Template for the URL of the custom service delivering licenses to end user
   * players.  Not required when using Azure Media Services for issuing
   * licenses.  The template supports replaceable tokens that the service will
   * update at runtime with the value specific to the request.  The currently
   * supported token values are {AlternativeMediaId}, which is replaced with
   * the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId},
   * which is replaced with the value of identifier of the key being requested.
   * @property {object} [commonEncryptionCbcs] Configuration of
   * CommonEncryptionCbcs
   * @property {object} [commonEncryptionCbcs.enabledProtocols] Representing
   * supported protocols
   * @property {boolean} [commonEncryptionCbcs.enabledProtocols.download]
   * Enable Download protocol or not
   * @property {boolean} [commonEncryptionCbcs.enabledProtocols.dash] Enable
   * DASH protocol or not
   * @property {boolean} [commonEncryptionCbcs.enabledProtocols.hls] Enable HLS
   * protocol or not
   * @property {boolean}
   * [commonEncryptionCbcs.enabledProtocols.smoothStreaming] Enable
   * SmoothStreaming protocol or not
   * @property {array} [commonEncryptionCbcs.clearTracks] Representing which
   * tracks should not be encrypted
   * @property {object} [commonEncryptionCbcs.contentKeys] Representing default
   * content key for each encryption scheme and separate content keys for
   * specific tracks
   * @property {object} [commonEncryptionCbcs.contentKeys.defaultKey] Default
   * content key for an encryption scheme
   * @property {string} [commonEncryptionCbcs.contentKeys.defaultKey.label]
   * Label can be used to specify Content Key when creating a Streaming Locator
   * @property {string}
   * [commonEncryptionCbcs.contentKeys.defaultKey.policyName] Policy used by
   * Default Key
   * @property {array} [commonEncryptionCbcs.contentKeys.keyToTrackMappings]
   * Representing tracks needs separate content key
   * @property {object} [commonEncryptionCbcs.drm] Configuration of DRMs for
   * current encryption scheme
   * @property {object} [commonEncryptionCbcs.drm.fairPlay] FairPlay
   * configurations
   * @property {string}
   * [commonEncryptionCbcs.drm.fairPlay.customLicenseAcquisitionUrlTemplate]
   * Template for the URL of the custom service delivering licenses to end user
   * players.  Not required when using Azure Media Services for issuing
   * licenses.  The template supports replaceable tokens that the service will
   * update at runtime with the value specific to the request.  The currently
   * supported token values are {AlternativeMediaId}, which is replaced with
   * the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId},
   * which is replaced with the value of identifier of the key being requested.
   * @property {boolean}
   * [commonEncryptionCbcs.drm.fairPlay.allowPersistentLicense] All license to
   * be persistent or not
   * @property {object} [commonEncryptionCbcs.drm.playReady] PlayReady
   * configurations
   * @property {string}
   * [commonEncryptionCbcs.drm.playReady.customLicenseAcquisitionUrlTemplate]
   * Template for the URL of the custom service delivering licenses to end user
   * players.  Not required when using Azure Media Services for issuing
   * licenses.  The template supports replaceable tokens that the service will
   * update at runtime with the value specific to the request.  The currently
   * supported token values are {AlternativeMediaId}, which is replaced with
   * the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId},
   * which is replaced with the value of identifier of the key being requested.
   * @property {string}
   * [commonEncryptionCbcs.drm.playReady.playReadyCustomAttributes] Custom
   * attributes for PlayReady
   * @property {object} [commonEncryptionCbcs.drm.widevine] Widevine
   * configurations
   * @property {string}
   * [commonEncryptionCbcs.drm.widevine.customLicenseAcquisitionUrlTemplate]
   * Template for the URL of the custom service delivering licenses to end user
   * players.  Not required when using Azure Media Services for issuing
   * licenses.  The template supports replaceable tokens that the service will
   * update at runtime with the value specific to the request.  The currently
   * supported token values are {AlternativeMediaId}, which is replaced with
   * the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId},
   * which is replaced with the value of identifier of the key being requested.
   * @property {object} [noEncryption] Configurations of NoEncryption
   * @property {object} [noEncryption.enabledProtocols] Representing supported
   * protocols
   * @property {boolean} [noEncryption.enabledProtocols.download] Enable
   * Download protocol or not
   * @property {boolean} [noEncryption.enabledProtocols.dash] Enable DASH
   * protocol or not
   * @property {boolean} [noEncryption.enabledProtocols.hls] Enable HLS
   * protocol or not
   * @property {boolean} [noEncryption.enabledProtocols.smoothStreaming] Enable
   * SmoothStreaming protocol or not
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of StreamingPolicy
   *
   * @returns {object} metadata of StreamingPolicy
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'StreamingPolicy',
      type: {
        name: 'Composite',
        className: 'StreamingPolicy',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          created: {
            required: false,
            nullable: false,
            readOnly: true,
            serializedName: 'properties.created',
            type: {
              name: 'DateTime'
            }
          },
          defaultContentKeyPolicyName: {
            required: false,
            serializedName: 'properties.defaultContentKeyPolicyName',
            type: {
              name: 'String'
            }
          },
          envelopeEncryption: {
            required: false,
            serializedName: 'properties.envelopeEncryption',
            type: {
              name: 'Composite',
              className: 'EnvelopeEncryption'
            }
          },
          commonEncryptionCenc: {
            required: false,
            serializedName: 'properties.commonEncryptionCenc',
            type: {
              name: 'Composite',
              className: 'CommonEncryptionCenc'
            }
          },
          commonEncryptionCbcs: {
            required: false,
            serializedName: 'properties.commonEncryptionCbcs',
            type: {
              name: 'Composite',
              className: 'CommonEncryptionCbcs'
            }
          },
          noEncryption: {
            required: false,
            serializedName: 'properties.noEncryption',
            type: {
              name: 'Composite',
              className: 'NoEncryption'
            }
          }
        }
      }
    };
  }
}

module.exports = StreamingPolicy;
