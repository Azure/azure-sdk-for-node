/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * An Asset.
 *
 * @extends models['ProxyResource']
 */
class Asset extends models['ProxyResource'] {
  /**
   * Create a Asset.
   * @property {uuid} [assetId] The Asset ID.
   * @property {date} [created] The creation date of the Asset.
   * @property {date} [lastModified] The last modified date of the Asset.
   * @property {string} [alternateId] The alternate ID of the Asset.
   * @property {string} [description] The Asset description.
   * @property {string} [container] The name of the asset blob container.
   * @property {string} [storageAccountName] The name of the storage account.
   * @property {string} [storageEncryptionFormat] The Asset encryption format.
   * One of None or MediaStorageEncryption. Possible values include: 'None',
   * 'MediaStorageClientEncryption'
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Asset
   *
   * @returns {object} metadata of Asset
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Asset',
      type: {
        name: 'Composite',
        className: 'Asset',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          assetId: {
            required: false,
            nullable: false,
            readOnly: true,
            serializedName: 'properties.assetId',
            type: {
              name: 'String'
            }
          },
          created: {
            required: false,
            nullable: false,
            readOnly: true,
            serializedName: 'properties.created',
            type: {
              name: 'DateTime'
            }
          },
          lastModified: {
            required: false,
            nullable: false,
            readOnly: true,
            serializedName: 'properties.lastModified',
            type: {
              name: 'DateTime'
            }
          },
          alternateId: {
            required: false,
            serializedName: 'properties.alternateId',
            type: {
              name: 'String'
            }
          },
          description: {
            required: false,
            serializedName: 'properties.description',
            type: {
              name: 'String'
            }
          },
          container: {
            required: false,
            serializedName: 'properties.container',
            type: {
              name: 'String'
            }
          },
          storageAccountName: {
            required: false,
            serializedName: 'properties.storageAccountName',
            type: {
              name: 'String'
            }
          },
          storageEncryptionFormat: {
            required: false,
            nullable: false,
            readOnly: true,
            serializedName: 'properties.storageEncryptionFormat',
            type: {
              name: 'Enum',
              allowedValues: [ 'None', 'MediaStorageClientEncryption' ]
            }
          }
        }
      }
    };
  }
}

module.exports = Asset;
