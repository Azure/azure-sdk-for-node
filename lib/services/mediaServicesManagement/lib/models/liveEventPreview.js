/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * The Live Event preview.
 *
 */
class LiveEventPreview {
  /**
   * Create a LiveEventPreview.
   * @property {array} [endpoints] The endpoints for preview.
   * @property {object} [accessControl] The access control for LiveEvent
   * preview.
   * @property {object} [accessControl.ip] The IP access control properties.
   * @property {array} [accessControl.ip.allow] The IP allow list.
   * @property {string} [previewLocator] The identifier of the preview locator
   * in Guid format.  Specifying this at creation time allows the caller to
   * know the preview locator url before the event is created.  If omitted, the
   * service will generate a random identifier.  This value cannot be updated
   * once the live event is created.
   * @property {string} [streamingPolicyName] The name of streaming policy used
   * for the LiveEvent preview.  This value is specified at creation time and
   * cannot be updated.
   * @property {string} [alternativeMediaId] An Alternative Media Identifier
   * associated with the StreamingLocator created for the preview.  This value
   * is specified at creation time and cannot be updated.  The identifier can
   * be used in the CustomLicenseAcquisitionUrlTemplate or the
   * CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the
   * StreamingPolicyName field.
   */
  constructor() {
  }

  /**
   * Defines the metadata of LiveEventPreview
   *
   * @returns {object} metadata of LiveEventPreview
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'LiveEventPreview',
      type: {
        name: 'Composite',
        className: 'LiveEventPreview',
        modelProperties: {
          endpoints: {
            required: false,
            serializedName: 'endpoints',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'LiveEventEndpointElementType',
                  type: {
                    name: 'Composite',
                    className: 'LiveEventEndpoint'
                  }
              }
            }
          },
          accessControl: {
            required: false,
            serializedName: 'accessControl',
            type: {
              name: 'Composite',
              className: 'LiveEventPreviewAccessControl'
            }
          },
          previewLocator: {
            required: false,
            serializedName: 'previewLocator',
            type: {
              name: 'String'
            }
          },
          streamingPolicyName: {
            required: false,
            serializedName: 'streamingPolicyName',
            type: {
              name: 'String'
            }
          },
          alternativeMediaId: {
            required: false,
            serializedName: 'alternativeMediaId',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = LiveEventPreview;
