/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Describes the basic properties for generating thumbnails from the input
 * video
 *
 * @extends models['Video']
 */
class Image extends models['Video'] {
  /**
   * Create a Image.
   * @member {string} [start] The position in the input video from where to
   * start generating thumbnails. The value can be in absolute timestamp (ISO
   * 8601, e.g: PT05S), or a frame count (For example, 10 for the 10th frame),
   * or a relative value (For example, 1%). Also supports a macro {Best}, which
   * tells the encoder to select the best thumbnail from the first few seconds
   * of the video.
   * @member {string} [step] The intervals at which thumbnails are generated.
   * The value can be in absolute timestamp (ISO 8601, e.g: PT05S for one image
   * every 5 seconds), or a frame count (For example, 30 for every 30 frames),
   * or a relative value (For example, 1%).
   * @member {string} [range] The position in the input video at which to stop
   * generating thumbnails. The value can be in absolute timestamp (ISO 8601,
   * e.g: PT5M30S to stop at 5 minutes and 30 seconds), or a frame count (For
   * example, 300 to stop at the 300th frame), or a relative value (For
   * example, 100%).
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Image
   *
   * @returns {object} metadata of Image
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: '#Microsoft.Media.Image',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: '@odata.type',
          clientName: 'odatatype'
        },
        uberParent: 'Codec',
        className: 'Image',
        modelProperties: {
          label: {
            required: false,
            serializedName: 'label',
            type: {
              name: 'String'
            }
          },
          odatatype: {
            required: true,
            serializedName: '@odata\\.type',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          keyFrameInterval: {
            required: false,
            serializedName: 'keyFrameInterval',
            type: {
              name: 'TimeSpan'
            }
          },
          stretchMode: {
            required: false,
            serializedName: 'stretchMode',
            type: {
              name: 'String'
            }
          },
          start: {
            required: false,
            serializedName: 'start',
            type: {
              name: 'String'
            }
          },
          step: {
            required: false,
            serializedName: 'step',
            type: {
              name: 'String'
            }
          },
          range: {
            required: false,
            serializedName: 'range',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = Image;
