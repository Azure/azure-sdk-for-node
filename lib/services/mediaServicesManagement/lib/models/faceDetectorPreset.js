/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Describes all the settings to be used when analyzing a video in order to
 * detect all the faces present.
 *
 * @extends models['Preset']
 */
class FaceDetectorPreset extends models['Preset'] {
  /**
   * Create a FaceDetectorPreset.
   * @property {string} [resolution] Specifies the maximum resolution at which
   * your video is analyzed. The default behavior is "SourceResolution," which
   * will keep the input video at its original resolution when analyzed. Using
   * "StandardDefinition" will resize input videos to standard definition while
   * preserving the appropriate aspect ratio. It will only resize if the video
   * is of higher resolution. For example, a 1920x1080 input would be scaled to
   * 640x360 before processing. Switching to "StandardDefinition" will reduce
   * the time it takes to process high resolution video. It may also reduce the
   * cost of using this component (see
   * https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics
   * for details). However, faces that end up being too small in the resized
   * video may not be detected. Possible values include: 'SourceResolution',
   * 'StandardDefinition'
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of FaceDetectorPreset
   *
   * @returns {object} metadata of FaceDetectorPreset
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: '#Microsoft.Media.FaceDetectorPreset',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: '@odata.type',
          clientName: 'odatatype'
        },
        uberParent: 'Preset',
        className: 'FaceDetectorPreset',
        modelProperties: {
          odatatype: {
            required: true,
            serializedName: '@odata\\.type',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          resolution: {
            required: false,
            serializedName: 'resolution',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = FaceDetectorPreset;
