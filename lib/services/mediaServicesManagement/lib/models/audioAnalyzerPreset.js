/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The Audio Analyzer preset applies a pre-defined set of AI-based analysis
 * operations, including speech transcription. Currently, the preset supports
 * processing of content with a single audio track.
 *
 * @extends models['Preset']
 */
class AudioAnalyzerPreset extends models['Preset'] {
  /**
   * Create a AudioAnalyzerPreset.
   * @property {string} [audioLanguage] The language for the audio payload in
   * the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US').
   * The list of supported languages are, 'en-US', 'en-GB', 'es-ES', 'es-MX',
   * 'fr-FR', 'it-IT', 'ja-JP', 'pt-BR', 'zh-CN', 'de-DE', 'ar-EG', 'ru-RU',
   * 'hi-IN'. If not specified, automatic language detection would be employed.
   * This feature currently supports English, Chinese, French, German, Italian,
   * Japanese, Spanish, Russian, and Portuguese. The automatic detection works
   * best with audio recordings with clearly discernable speech. If automatic
   * detection fails to find the language, transcription would fallback to
   * English.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of AudioAnalyzerPreset
   *
   * @returns {object} metadata of AudioAnalyzerPreset
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: '#Microsoft.Media.AudioAnalyzerPreset',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: '@odata.type',
          clientName: 'odatatype'
        },
        uberParent: 'Preset',
        className: 'AudioAnalyzerPreset',
        modelProperties: {
          odatatype: {
            required: true,
            serializedName: '@odata\\.type',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          audioLanguage: {
            required: false,
            serializedName: 'audioLanguage',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = AudioAnalyzerPreset;
