/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Class for EnvelopeEncryption encryption scheme
 *
 */
class EnvelopeEncryption {
  /**
   * Create a EnvelopeEncryption.
   * @property {object} [enabledProtocols] Representing supported protocols
   * @property {boolean} [enabledProtocols.download] Enable Download protocol
   * or not
   * @property {boolean} [enabledProtocols.dash] Enable DASH protocol or not
   * @property {boolean} [enabledProtocols.hls] Enable HLS protocol or not
   * @property {boolean} [enabledProtocols.smoothStreaming] Enable
   * SmoothStreaming protocol or not
   * @property {array} [clearTracks] Representing which tracks should not be
   * encrypted
   * @property {object} [contentKeys] Representing default content key for each
   * encryption scheme and separate content keys for specific tracks
   * @property {object} [contentKeys.defaultKey] Default content key for an
   * encryption scheme
   * @property {string} [contentKeys.defaultKey.label] Label can be used to
   * specify Content Key when creating a Streaming Locator
   * @property {string} [contentKeys.defaultKey.policyName] Policy used by
   * Default Key
   * @property {array} [contentKeys.keyToTrackMappings] Representing tracks
   * needs separate content key
   * @property {string} [customKeyAcquisitionUrlTemplate]
   * KeyAcquistionUrlTemplate is used to point to user specified service to
   * delivery content keys
   */
  constructor() {
  }

  /**
   * Defines the metadata of EnvelopeEncryption
   *
   * @returns {object} metadata of EnvelopeEncryption
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'EnvelopeEncryption',
      type: {
        name: 'Composite',
        className: 'EnvelopeEncryption',
        modelProperties: {
          enabledProtocols: {
            required: false,
            serializedName: 'enabledProtocols',
            type: {
              name: 'Composite',
              className: 'EnabledProtocols'
            }
          },
          clearTracks: {
            required: false,
            serializedName: 'clearTracks',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'TrackSelectionElementType',
                  type: {
                    name: 'Composite',
                    className: 'TrackSelection'
                  }
              }
            }
          },
          contentKeys: {
            required: false,
            serializedName: 'contentKeys',
            type: {
              name: 'Composite',
              className: 'StreamingPolicyContentKeys'
            }
          },
          customKeyAcquisitionUrlTemplate: {
            required: false,
            serializedName: 'customKeyAcquisitionUrlTemplate',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = EnvelopeEncryption;
