/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The StreamingEndpoint.
 *
 * @extends models['TrackedResource']
 */
class StreamingEndpoint extends models['TrackedResource'] {
  /**
   * Create a StreamingEndpoint.
   * @property {string} [description] The StreamingEndpoint description.
   * @property {number} scaleUnits The number of scale units.  Use the Scale
   * operation to adjust this value.
   * @property {string} [availabilitySetName] The name of the AvailabilitySet
   * used with this StreamingEndpoint for high availability streaming.  This
   * value can only be set at creation time.
   * @property {object} [accessControl] The access control definition of the
   * StreamingEndpoint.
   * @property {object} [accessControl.akamai] The access control of Akamai
   * @property {array}
   * [accessControl.akamai.akamaiSignatureHeaderAuthenticationKeyList]
   * authentication key list
   * @property {object} [accessControl.ip] The IP access control of the
   * StreamingEndpoint.
   * @property {array} [accessControl.ip.allow] The IP allow list.
   * @property {number} [maxCacheAge] Max cache age
   * @property {array} [customHostNames] The custom host names of the
   * StreamingEndpoint
   * @property {string} [hostName] The StreamingEndpoint host name.
   * @property {boolean} [cdnEnabled] The CDN enabled flag.
   * @property {string} [cdnProvider] The CDN provider name.
   * @property {string} [cdnProfile] The CDN profile name.
   * @property {string} [provisioningState] The provisioning state of the
   * StreamingEndpoint.
   * @property {string} [resourceState] The resource state of the
   * StreamingEndpoint. Possible values include: 'Stopped', 'Starting',
   * 'Running', 'Stopping', 'Deleting', 'Scaling'
   * @property {object} [crossSiteAccessPolicies] The StreamingEndpoint access
   * policies.
   * @property {string} [crossSiteAccessPolicies.clientAccessPolicy] The
   * content of clientaccesspolicy.xml used by Silverlight.
   * @property {string} [crossSiteAccessPolicies.crossDomainPolicy] The content
   * of crossdomain.xml used by Silverlight.
   * @property {date} [freeTrialEndTime] The free trial expiration time.
   * @property {date} [created] The exact time the StreamingEndpoint was
   * created.
   * @property {date} [lastModified] The exact time the StreamingEndpoint was
   * last modified.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of StreamingEndpoint
   *
   * @returns {object} metadata of StreamingEndpoint
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'StreamingEndpoint',
      type: {
        name: 'Composite',
        className: 'StreamingEndpoint',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          description: {
            required: false,
            serializedName: 'properties.description',
            type: {
              name: 'String'
            }
          },
          scaleUnits: {
            required: true,
            serializedName: 'properties.scaleUnits',
            type: {
              name: 'Number'
            }
          },
          availabilitySetName: {
            required: false,
            serializedName: 'properties.availabilitySetName',
            type: {
              name: 'String'
            }
          },
          accessControl: {
            required: false,
            serializedName: 'properties.accessControl',
            type: {
              name: 'Composite',
              className: 'StreamingEndpointAccessControl'
            }
          },
          maxCacheAge: {
            required: false,
            serializedName: 'properties.maxCacheAge',
            type: {
              name: 'Number'
            }
          },
          customHostNames: {
            required: false,
            serializedName: 'properties.customHostNames',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          hostName: {
            required: false,
            readOnly: true,
            serializedName: 'properties.hostName',
            type: {
              name: 'String'
            }
          },
          cdnEnabled: {
            required: false,
            serializedName: 'properties.cdnEnabled',
            type: {
              name: 'Boolean'
            }
          },
          cdnProvider: {
            required: false,
            serializedName: 'properties.cdnProvider',
            type: {
              name: 'String'
            }
          },
          cdnProfile: {
            required: false,
            serializedName: 'properties.cdnProfile',
            type: {
              name: 'String'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          resourceState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.resourceState',
            type: {
              name: 'Enum',
              allowedValues: [ 'Stopped', 'Starting', 'Running', 'Stopping', 'Deleting', 'Scaling' ]
            }
          },
          crossSiteAccessPolicies: {
            required: false,
            serializedName: 'properties.crossSiteAccessPolicies',
            type: {
              name: 'Composite',
              className: 'CrossSiteAccessPolicies'
            }
          },
          freeTrialEndTime: {
            required: false,
            readOnly: true,
            serializedName: 'properties.freeTrialEndTime',
            type: {
              name: 'DateTime'
            }
          },
          created: {
            required: false,
            readOnly: true,
            serializedName: 'properties.created',
            type: {
              name: 'DateTime'
            }
          },
          lastModified: {
            required: false,
            readOnly: true,
            serializedName: 'properties.lastModified',
            type: {
              name: 'DateTime'
            }
          }
        }
      }
    };
  }
}

module.exports = StreamingEndpoint;
