/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * An Account Filter.
 *
 * @extends models['ProxyResource']
 */
class AccountFilter extends models['ProxyResource'] {
  /**
   * Create a AccountFilter.
   * @property {object} [presentationTimeRange] The presentation time range.
   * @property {number} [presentationTimeRange.startTimestamp] The absolute
   * start time boundary.
   * @property {number} [presentationTimeRange.endTimestamp] The absolute end
   * time boundary.
   * @property {number} [presentationTimeRange.presentationWindowDuration] The
   * relative to end sliding window.
   * @property {number} [presentationTimeRange.liveBackoffDuration] The
   * relative to end right edge.
   * @property {number} [presentationTimeRange.timescale] The time scale of
   * time stamps.
   * @property {boolean} [presentationTimeRange.forceEndTimestamp] The
   * indicator of forcing exsiting of end time stamp.
   * @property {object} [firstQuality] The first quality.
   * @property {number} [firstQuality.bitrate] The first quality bitrate.
   * @property {array} [tracks] The tracks selection conditions.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of AccountFilter
   *
   * @returns {object} metadata of AccountFilter
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'AccountFilter',
      type: {
        name: 'Composite',
        className: 'AccountFilter',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          presentationTimeRange: {
            required: false,
            serializedName: 'properties.presentationTimeRange',
            type: {
              name: 'Composite',
              className: 'PresentationTimeRange'
            }
          },
          firstQuality: {
            required: false,
            serializedName: 'properties.firstQuality',
            type: {
              name: 'Composite',
              className: 'FirstQuality'
            }
          },
          tracks: {
            required: false,
            serializedName: 'properties.tracks',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'FilterTrackSelectionElementType',
                  type: {
                    name: 'Composite',
                    className: 'FilterTrackSelection'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = AccountFilter;
