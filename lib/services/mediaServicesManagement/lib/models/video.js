/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Describes the basic properties for encoding the input video.
 *
 * @extends models['Codec']
 */
class Video extends models['Codec'] {
  /**
   * Create a Video.
   * @property {moment.duration} [keyFrameInterval] The distance between two
   * key frames, thereby defining a group of pictures (GOP). The value should
   * be a non-zero integer in the range [1, 30] seconds, specified in ISO 8601
   * format. The default is 2 seconds (PT2S).
   * @property {string} [stretchMode] The resizing mode - how the input video
   * will be resized to fit the desired output resolution(s). Default is
   * AutoSize. Possible values include: 'None', 'AutoSize', 'AutoFit'
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Video
   *
   * @returns {object} metadata of Video
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: '#Microsoft.Media.Video',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: '@odata.type',
          clientName: 'odatatype'
        },
        uberParent: 'Codec',
        className: 'Video',
        modelProperties: {
          label: {
            required: false,
            serializedName: 'label',
            type: {
              name: 'String'
            }
          },
          odatatype: {
            required: true,
            serializedName: '@odata\\.type',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          keyFrameInterval: {
            required: false,
            serializedName: 'keyFrameInterval',
            type: {
              name: 'TimeSpan'
            }
          },
          stretchMode: {
            required: false,
            serializedName: 'stretchMode',
            type: {
              name: 'Enum',
              allowedValues: [ 'None', 'AutoSize', 'AutoFit' ]
            }
          }
        }
      }
    };
  }
}

module.exports = Video;
