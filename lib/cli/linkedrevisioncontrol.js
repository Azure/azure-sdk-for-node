/*** Generated by streamline 0.4.5 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch,__forIn=__rt.__forIn; var url = require("url");















var fs = require("fs");
var util = require("util");
var child_process = require("child_process");
var GitHubApi = require("github");

var utils = require("./utils");

exports.createClient = function(cli, name) {
  switch (name) {
  case "github": return new GithubClient(cli);
    break;
  case "git":
    return new GitClient(cli);
    break;
    default:
    throw new Error("Invalid client");
  };};



exports.LinkedRevisionControlClient = LinkedRevisionControlClient;
exports.GithubClient = GithubClient;
exports.GitClient = GitClient;

function LinkedRevisionControlClient(cli) {
  this.cli = cli;
  this.log = cli.output;};









LinkedRevisionControlClient._getRepository = function(repositories, remoteFullName) {
  return repositories.filter(function(repository) {
    return (repository.full_name === remoteFullName);
  })[0];};









LinkedRevisionControlClient._getRepositoryCloneUrl = function(repositories, remoteUri) {
  return repositories.filter(function(repository) {
    return repositoryMatchUri(repository, remoteUri);
  })[0];};


function repositoryMatchUri(repository, remoteUri) {
  var cleanUri = url.parse(remoteUri);

  delete cleanUri.auth;
  cleanUri = url.format(cleanUri);

  return (((repository.clone_url.toLowerCase() === cleanUri.toLowerCase()) || (repository.html_url.toLowerCase() === cleanUri.toLowerCase())) || (repository.git_url.toLowerCase() === cleanUri.toLowerCase()));};







LinkedRevisionControlClient.prototype.determineIfCurrentDirectoryIsGitWorkingTree = function LinkedRevisionControlClient_prototype_determineIfCurrentDirectoryIsGitWorkingTree__1(context, _) { var isInsideWorkTree, lines, __this = this; var __frame = { name: "LinkedRevisionControlClient_prototype_determineIfCurrentDirectoryIsGitWorkingTree__1", line: 86 }; return __func(_, this, arguments, LinkedRevisionControlClient_prototype_determineIfCurrentDirectoryIsGitWorkingTree__1, 1, __frame, function __$LinkedRevisionControlClient_prototype_determineIfCurrentDirectoryIsGitWorkingTree__1() {
    __this.log.silly("determineIfCurrentDirectoryIsGitWorkingTree"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$LinkedRevisionControlClient_prototype_determineIfCurrentDirectoryIsGitWorkingTree__1() {


          return __this._exec("git rev-parse --git-dir", __cb(_, __frame, 4, 27, function ___(__0, __1) { isInsideWorkTree = __1;
            lines = (isInsideWorkTree.stdout + isInsideWorkTree.stderr);
            if (!context.flags) {
              context.flags = { }; } ;


            context.flags.isGitWorkingTree = lines.split("\n").some(function(line) {
              return (line === ".git"); }); __then(); }, true)); }); })(function ___(err, __result) { __tryCatch(_, function __$LinkedRevisionControlClient_prototype_determineIfCurrentDirectoryIsGitWorkingTree__1() { if (err) {


            context.flags.isGitWorkingTree = false; __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, _); }); });};






LinkedRevisionControlClient.prototype.initGitOnCurrentDirectory = function LinkedRevisionControlClient_prototype_initGitOnCurrentDirectory__2(context, scaffold, _) { var __this = this; var __frame = { name: "LinkedRevisionControlClient_prototype_initGitOnCurrentDirectory__2", line: 107 }; return __func(_, this, arguments, LinkedRevisionControlClient_prototype_initGitOnCurrentDirectory__2, 2, __frame, function __$LinkedRevisionControlClient_prototype_initGitOnCurrentDirectory__2() {
    __this.log.silly("initGitOnCurrentDirectoryIfNeeded");
    if (context.flags.isGitWorkingTree) { return _(null); } ;



    __this.log.info("Executing `git init`");
    return __this._exec("git init", __cb(_, __frame, 7, 2, function __$LinkedRevisionControlClient_prototype_initGitOnCurrentDirectory__2() { return (function __$LinkedRevisionControlClient_prototype_initGitOnCurrentDirectory__2(__then) {

        if ((scaffold && !utils.pathExistsSync(".gitignore"))) {
          __this.log.info("Creating default .gitignore file");
          return fs.writeFile(".gitignore", "node_modules\nazure_error", __cb(_, __frame, 11, 4, __then, true)); } else { __then(); } ; })(function __$LinkedRevisionControlClient_prototype_initGitOnCurrentDirectory__2() {


        context.flags.isGitWorkingTree = true; _(); }); }, true)); });};


LinkedRevisionControlClient.prototype._exec = function(cmd, cb) {
  child_process.exec(cmd, function(err, stdout, stderr) {
    cb(err, {
      stdout: stdout,
      stderr: stderr }); });};




function GitClient(cli) {
  GitClient.super_.call(this, cli);};


util.inherits(GitClient, LinkedRevisionControlClient);

GitClient.prototype.init = function GitClient_prototype_init__3(context, _) { var __this = this; var __frame = { name: "GitClient_prototype_init__3", line: 139 }; return __func(_, this, arguments, GitClient_prototype_init__3, 1, __frame, function __$GitClient_prototype_init__3() {
    return __this.determineIfCurrentDirectoryIsGitWorkingTree(context, __cb(_, __frame, 1, 2, function __$GitClient_prototype_init__3() {
      return __this.initGitOnCurrentDirectory(context, true, __cb(_, __frame, 2, 2, _, true)); }, true)); });};


GitClient.prototype.deploy = function GitClient_prototype_deploy__4(context, _) { var __frame = { name: "GitClient_prototype_deploy__4", line: 144 }; return __func(_, this, arguments, GitClient_prototype_deploy__4, 1, __frame, _);};



function GithubClient(cli) {
  GithubClient.super_.call(this, cli);

  this.client = new GitHubApi({ version: "3.0.0" });};


util.inherits(GithubClient, LinkedRevisionControlClient);

GithubClient.prototype.authenticate = function GithubClient_prototype_authenticate__5(context, _) { var __this = this; var __frame = { name: "GithubClient_prototype_authenticate__5", line: 156 }; return __func(_, this, arguments, GithubClient_prototype_authenticate__5, 1, __frame, function __$GithubClient_prototype_authenticate__5() {
    return __this.ensureCredentials(context, __cb(_, __frame, 1, 2, function __$GithubClient_prototype_authenticate__5() {

      __this.client.authenticate({
        type: "basic",
        username: context.github.username,
        password: context.github.password }); _(); }, true)); });};



GithubClient.prototype.authenticateAuth = function GithubClient_prototype_authenticateAuth__6(context, _) { var oauthToken, __this = this; var __frame = { name: "GithubClient_prototype_authenticateAuth__6", line: 166 }; return __func(_, this, arguments, GithubClient_prototype_authenticateAuth__6, 1, __frame, function __$GithubClient_prototype_authenticateAuth__6() {
    return __this.ensureCredentials(context, __cb(_, __frame, 1, 2, function __$GithubClient_prototype_authenticateAuth__6() {

      __this.client.authenticate({
        type: "basic",
        username: context.github.username,
        password: context.github.password });



      return __this.client.oauth.createAuthorization({ user: context.github.username }, __cb(_, __frame, 10, 19, function ___(__0, __1) { oauthToken = __1;
        __this.client.authenticate({
          type: "oauth",
          token: oauthToken.token }); _(); }, true)); }, true)); });};



GithubClient.prototype.ensureCredentials = function GithubClient_prototype_ensureCredentials__7(context, _) { var __this = this; var __frame = { name: "GithubClient_prototype_ensureCredentials__7", line: 183 }; return __func(_, this, arguments, GithubClient_prototype_ensureCredentials__7, 1, __frame, function __$GithubClient_prototype_ensureCredentials__7() {
    if (!context.github) {
      context.github = { }; } ;


    if ((!context.github.username || !context.github.password)) {
      __this.log.help("Enter your github credentials"); } ; return (function __$GithubClient_prototype_ensureCredentials__7(__then) {


      if (!context.github.username) {
        return prompt(__this.cli, "Username: ", __cb(_, __frame, 10, 30, function ___(__0, __1) { context.github.username = __1; __then(); }, true)); } else { __then(); } ; })(function __$GithubClient_prototype_ensureCredentials__7() { return (function __$GithubClient_prototype_ensureCredentials__7(__then) {


        if (!context.github.password) {
          return promptPassword(__this.cli, "Password: ", __cb(_, __frame, 14, 30, function ___(__0, __2) { context.github.password = __2; __then(); }, true)); } else { __then(); } ; })(_); }); });};



GithubClient.prototype.init = function GithubClient_prototype_init__8(context, _) { var repositories, remoteUris, __this = this; var __frame = { name: "GithubClient_prototype_init__8", line: 201 }; return __func(_, this, arguments, GithubClient_prototype_init__8, 1, __frame, function __$GithubClient_prototype_init__8() {
    return __this.authenticate(context, __cb(_, __frame, 1, 2, function __$GithubClient_prototype_init__8() {


      return __this.determineIfCurrentDirectoryIsGitWorkingTree(context, __cb(_, __frame, 4, 2, function __$GithubClient_prototype_init__8() {
        return __this.initGitOnCurrentDirectory(context, false, __cb(_, __frame, 5, 2, function __$GithubClient_prototype_init__8() {


          return __this.getRepositories(context.github.username, __cb(_, __frame, 8, 21, function ___(__0, __1) { repositories = __1; return (function __$GithubClient_prototype_init__8(__then) {
              if (context.github.repositoryFullName) {


                context.github.repository = LinkedRevisionControlClient._getRepository(repositories, context.github.repositoryFullName);
                if (!context.github.repository) {
                  __this.log.info(("Invalid repository " + context.github.repositoryFullName)); } ; __then(); } else { return (function __$GithubClient_prototype_init__8(__then) {

                  if (!((context.flags && context.flags.forceRepositorySelection))) {



                    return __this._getRemoteUris(__cb(_, __frame, 20, 21, function ___(__0, __2) { remoteUris = __2;

                      if ((remoteUris.length === 1)) {
                        context.github.repository = LinkedRevisionControlClient._getRepositoryCloneUrl(repositories, remoteUris[0]); } else {
                        if ((remoteUris.length > 0)) {

                          repositories = repositories.filter(function(repository) {
                            return remoteUris.some(function(remoteUri) {
                              return repositoryMatchUri(repository, remoteUri); }); }); } ; } ; __then(); }, true)); } else { __then(); } ; })(__then); } ; })(function __$GithubClient_prototype_init__8() { return (function __$GithubClient_prototype_init__8(__then) {





                if (!context.github.repository) {

                  __this.log.help("Choose a repository (or hit ctrl-c to exit)");
                  return choose(__this.cli, repositories.map(function(repository) {
                    return repository.full_name; }), __cb(_, __frame, 37, 45, function ___(__0, __3) { context.github.repository = repositories[__3]; __then(); }, true)); } else { __then(); } ; })(_); }); }, true)); }, true)); }, true)); }, true)); });};




GithubClient.prototype.deploy = function GithubClient_prototype_deploy__9(context, _) { var __frame = { name: "GithubClient_prototype_deploy__9", line: 244 }; return __func(_, this, arguments, GithubClient_prototype_deploy__9, 1, __frame, function __$GithubClient_prototype_deploy__9() {

    return context.lvcClient.createOrUpdateHook(context.github.repository.owner.login, context.github.repository.name, context.repositoryUri, context.repositoryAuth, __cb(_, __frame, 2, 2, _, true)); });};






GithubClient.prototype.getRepositories = function GithubClient_prototype_getRepositories__10(username, _) { var progress, userRepos, orgs, orgRepos, i, org, repos, __this = this;



  function sortByFullName(repositoryA, repositoryB) {
    return repositoryA.full_name.toLowerCase().localeCompare(repositoryB.full_name.toLowerCase()); };



  function filterPrivate(repository) {
    return (repository["private"] !== true); }; var __frame = { name: "GithubClient_prototype_getRepositories__10", line: 253 }; return __func(_, this, arguments, GithubClient_prototype_getRepositories__10, 1, __frame, function __$GithubClient_prototype_getRepositories__10() { progress = __this.cli.progress("Retrieving repositories"); userRepos = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$GithubClient_prototype_getRepositories__10() {



          return __this.client.repos.getFromUser({ user: username }, __cb(_, __frame, 14, 16, function ___(__0, __3) { userRepos = __3.filter(filterPrivate).sort(sortByFullName);



            return __this.client.orgs.getFromUser({ user: username }, __cb(_, __frame, 18, 15, function ___(__0, __4) { orgs = __4; return (function __$GithubClient_prototype_getRepositories__10(__then) {
                if (orgs) {
                  orgRepos = [];
                  var __1 = __forIn(orgs); var __2 = 0; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$GithubClient_prototype_getRepositories__10() { __more = false; var __8 = (__2 < __1.length); if (__8) { i = __1[__2++]; return (function __$GithubClient_prototype_getRepositories__10(__then) {
                          if (orgs.hasOwnProperty(i)) {
                            org = orgs[i]; return (function __$GithubClient_prototype_getRepositories__10(__then) {
                              if (org.login) {
                                return __this.client.repos.getFromOrg({ org: org.login, sort: "updated", desc: "desc" }, __cb(_, __frame, 25, 24, function ___(__0, __5) { repos = __5;

                                  orgRepos = orgRepos.concat(repos); __then(); }, true)); } else { __then(); } ; })(__then); } else { __then(); } ; })(function __$GithubClient_prototype_getRepositories__10() { while (__more) { __loop(); }; __more = true; }); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(__then); } else { __then(); } ; })(function __$GithubClient_prototype_getRepositories__10() {




                orgRepos = orgRepos.filter(filterPrivate).sort(sortByFullName);

                userRepos = userRepos.concat(orgRepos); _(null, null, true); }); }, true)); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$GithubClient_prototype_getRepositories__10() {

            progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$GithubClient_prototype_getRepositories__10() {


        return _(null, userRepos); }); }); });};


GithubClient.prototype.createOrUpdateHook = function GithubClient_prototype_createOrUpdateHook__11(username, repository, websitesRepositoryUri, websitesRepositoryAuth, _) { var parsedRepositoryUri, deployUri, hooks, existingHook, newHook, __this = this; var __frame = { name: "GithubClient_prototype_createOrUpdateHook__11", line: 295 }; return __func(_, this, arguments, GithubClient_prototype_createOrUpdateHook__11, 4, __frame, function __$GithubClient_prototype_createOrUpdateHook__11() {

    parsedRepositoryUri = url.parse(websitesRepositoryUri);
    parsedRepositoryUri.auth = websitesRepositoryAuth;
    parsedRepositoryUri.pathname = "/deploy";




    deployUri = url.format(parsedRepositoryUri).replace("https://%24", "https://$");


    return __this.getHooks(username, repository, __cb(_, __frame, 12, 14, function ___(__0, __1) { hooks = __1;







      existingHook = hooks.filter(function(hook) { if (hook.config) { return ((hook.name === "web") && (url.parse(hook.config.url).hostname.toLowerCase() === parsedRepositoryUri.hostname.toLowerCase())); } ; return false; })[0]; return (function __$GithubClient_prototype_createOrUpdateHook__11(__then) {

        if (existingHook) { return (function __$GithubClient_prototype_createOrUpdateHook__11(__then) {

            if ((existingHook.config.url.toLowerCase() !== deployUri.toLowerCase())) {
              existingHook.config.url = deployUri;
              existingHook.user = username;
              existingHook.repo = repository;
              return __this.updateHook(existingHook, __cb(_, __frame, 28, 21, function ___(__0, __2) { existingHook = __2;
                existingHook.user = username;
                existingHook.repo = repository;
                return __this.testHook(existingHook, __cb(_, __frame, 31, 6, __then, true)); }, true)); } else {

              __this.log.info("Link already established"); __then(); } ; })(__then); } else {



          newHook = {
            name: "web",
            user: username,
            repo: repository,
            active: true,
            events: ["push",],
            config: {
              url: deployUri,
              insecure_ssl: "1",
              content_type: "form" } };



          return __this.createHook(newHook, __cb(_, __frame, 50, 14, function ___(__0, __3) { newHook = __3;
            newHook.user = username;
            newHook.repo = repository;
            return __this.testHook(newHook, __cb(_, __frame, 53, 4, __then, true)); }, true)); } ; })(_); }, true)); });};



GithubClient.prototype.createHook = function GithubClient_prototype_createHook__12(hook, _) { var progress, __this = this; var __frame = { name: "GithubClient_prototype_createHook__12", line: 352 }; return __func(_, this, arguments, GithubClient_prototype_createHook__12, 1, __frame, function __$GithubClient_prototype_createHook__12() {
    progress = __this.cli.progress("Creating new hook"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$GithubClient_prototype_createHook__12() {


          return __this.client.repos.createHook(hook, __cb(_, __frame, 4, 11, _, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$GithubClient_prototype_createHook__12() {

            progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, _); }); });};



GithubClient.prototype.updateHook = function GithubClient_prototype_updateHook__13(hook, _) { var progress, __this = this; var __frame = { name: "GithubClient_prototype_updateHook__13", line: 362 }; return __func(_, this, arguments, GithubClient_prototype_updateHook__13, 1, __frame, function __$GithubClient_prototype_updateHook__13() {
    progress = __this.cli.progress("Updating hook"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$GithubClient_prototype_updateHook__13() {


          return __this.client.repos.updateHook(hook, __cb(_, __frame, 4, 11, _, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$GithubClient_prototype_updateHook__13() {

            progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, _); }); });};



GithubClient.prototype.testHook = function GithubClient_prototype_testHook__14(hook, _) { var progress, __this = this; var __frame = { name: "GithubClient_prototype_testHook__14", line: 372 }; return __func(_, this, arguments, GithubClient_prototype_testHook__14, 1, __frame, function __$GithubClient_prototype_testHook__14() {
    progress = __this.cli.progress("Testing hook"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$GithubClient_prototype_testHook__14() {


          return __this.client.repos.testHook(hook, __cb(_, __frame, 4, 4, function __$GithubClient_prototype_testHook__14() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$GithubClient_prototype_testHook__14() {

            progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, _); }); });};



GithubClient.prototype.getHooks = function GithubClient_prototype_getHooks__15(username, repository, _) { var progress, __this = this; var __frame = { name: "GithubClient_prototype_getHooks__15", line: 382 }; return __func(_, this, arguments, GithubClient_prototype_getHooks__15, 2, __frame, function __$GithubClient_prototype_getHooks__15() {
    progress = __this.cli.progress("Retrieving website hooks"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$GithubClient_prototype_getHooks__15() {


          return __this.client.repos.getHooks({
            user: username,
            repo: repository }, __cb(_, __frame, 4, 11, _, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$GithubClient_prototype_getHooks__15() {


            progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, _); }); });};



GithubClient.prototype._getRemoteUris = function GithubClient_prototype__getRemoteUris__16(_) { var progress, remoteUris, remotes, __this = this; var __frame = { name: "GithubClient_prototype__getRemoteUris__16", line: 395 }; return __func(_, this, arguments, GithubClient_prototype__getRemoteUris__16, 0, __frame, function __$GithubClient_prototype__getRemoteUris__16() {
    progress = __this.cli.progress("Retrieving local git repositories");
    remoteUris = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$GithubClient_prototype__getRemoteUris__16() {

          return __this._exec("git remote -v", __cb(_, __frame, 4, 18, function ___(__0, __1) { remotes = __1;
            remoteUris = ((remotes.stdout + remotes.stderr)).split("\n").filter(function(line) {

              return (line.length > 0);

            }).map(function(item) {
              return item.split("	")[1].split(" ")[0]; });


            remoteUris = removeDuplicates(remoteUris); _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$GithubClient_prototype__getRemoteUris__16() {

            progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$GithubClient_prototype__getRemoteUris__16() {


        return _(null, remoteUris); }); }); });};


function removeDuplicates(array) {
  return array.filter(function(elem, pos) {
    return (array.indexOf(elem) === pos); });};



function choose(cli, data, callback) {
  cli.choose(data, function(x) { callback(undefined, x); });};


function prompt(cli, label, callback) {
  cli.prompt(label, function(x) { callback(undefined, x); });};


function promptPassword(cli, label, callback) {
  cli.passwordOnce(label, function(x) { callback(undefined, x); });};