/*** Generated by streamline 0.4.5 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch; var common = require("../common");















var fs = require("fs");
var path = require("path");
var url = require("url");
var crypto = require("crypto");
var pfx2pem = require("../../util/certificates/pkcs").pfx2pem;
var Channel = require("../channel");
var async = require("async");
var utils = require("../utils");
var constants = require("../constants");
var cacheUtils = require("../cacheUtils");

var linkedRevisionControl = require("../linkedrevisioncontrol");

exports.init = function(cli) {

  var log = cli.output;
  var site = cli.category("site");
  var scm = site.category("deployment").description("Commands to manage your git deployments");


  function getScmChannel(context) {
    var parts = url.parse(context.repositoryUri);
    var channel = new Channel({
      host: parts.hostname,
      port: (((parts.port && parseInt(parts.port, 10))) || ((/https/i.test(parts.protocol) ? 443 : 80))),
      auth: context.repositoryAuth });


    var proxyString = (((process.env.HTTPS_PROXY || process.env.https_proxy) || process.env.ALL_PROXY) || process.env.all_proxy);





    if ((proxyString !== undefined)) {
      var proxyUrl = url.parse(proxyString);
      if (((proxyUrl.protocol !== "http:") && (proxyUrl.protocol !== "https:"))) {


        proxyUrl = url.parse(("http://" + proxyString)); } ;


      channel = channel.add({ proxy: proxyUrl }); } ;


    return channel; };

  scm.getScmChannel = getScmChannel;

  scm.command("list [name]").whiteListPowershell().usage("[options] [name]").description("List your git deployments").option("-s, --subscription <id>", "use the subscription id").option("-m, --max <count>", "limit the maximum number of results").execute(function __1(name, options, _) { var context, repositoryUri; var __frame = { name: "__1", line: 72 }; return __func(_, this, arguments, __1, 2, __frame, function __$__1() {






      context = {
        subscription: cli.category("account").lookupSubscriptionId(options.subscription),
        maxItems: options.max,
        site: {
          name: name } };



      return site.ensureRepositoryUri(context, __cb(_, __frame, 9, 26, function ___(__0, __1) { repositoryUri = __1; return (function __$__1(__then) {
          if (repositoryUri) {
            return listDeployments(context, __cb(_, __frame, 11, 8, __then, true)); } else {

            log.error("Repository is not setup"); __then(); } ; })(_); }, true)); }); });



  scm.command("show <commitId> [name]").whiteListPowershell().usage("[options] <commitId> [name]").description("Show your git deployment").option("-s, --subscription <id>", "use the subscription id").option("-d, --details", "display log details").execute(function __2(commitId, name, options, _) { var context, repositoryUri, deployment, data, logs, i, details, j; var __frame = { name: "__2", line: 95 }; return __func(_, this, arguments, __2, 3, __frame, function __$__2() {






      context = {
        subscription: cli.category("account").lookupSubscriptionId(options.subscription),
        shortId: commitId,
        site: {
          name: name } };



      return cacheUtils.readCommitId(context, __cb(_, __frame, 9, 25, function ___(__0, __2) { var __1 = !(context.id = __2); return (function __$__2(__then) { if (__1) {
            return _(null, log.error((("deployment with " + commitId) + " does not exist"))); } else { __then(); } ; })(function __$__2() {


          return site.ensureRepositoryUri(context, __cb(_, __frame, 13, 26, function ___(__0, __3) { repositoryUri = __3; return (function __$__2(__then) {
              if (repositoryUri) {
                return scm.doDeploymentGet(context, __cb(_, __frame, 15, 25, function ___(__0, __4) { deployment = __4; return (function __$__2(__then) {

                    if (log.format().json) {
                      data = deployment; return (function __$__2(__then) {
                        if (options.details) {
                          return getLogDetails(context, __cb(_, __frame, 20, 24, function ___(__0, __5) { data.logs = __5; __then(); }, true)); } else { __then(); } ; })(function __$__2() {


                        log.json(data); __then(); }); } else {

                      site.logEachData("info", deployment); return (function __$__2(__then) {
                        if (options.details) {
                          return getLogDetails(context, __cb(_, __frame, 27, 23, function ___(__0, __6) { logs = __6;
                            for (i = 0; (i < logs.length); ++i) {
                              displayLog(logs[i]);
                              if (logs[i].details) {
                                details = logs[i].details;
                                for (j = 0; (j < details.length); ++j) {
                                  displayLog(details[j]); }; } ; }; __then(); }, true)); } else {




                          log.help("To see more details, specify -d or --details option"); __then(); } ; })(__then); } ; })(__then); }, true)); } else {



                log.error("Repository is not setup"); __then(); } ; })(_); }, true)); }); }, true)); }); });



  scm.command("redeploy <commitId> [name]").whiteListPowershell().usage("[options] <commitId> [name]").description("Redeploy your git deployment").option("-s, --subscription <id>", "use the subscription id").option("-q, --quiet", "quiet mode, do not ask for redeploy confirmation").execute(function __3(commitId, name, options, _) { var context, repositoryUri; var __frame = { name: "__3", line: 147 }; return __func(_, this, arguments, __3, 3, __frame, function __$__3() {






      context = {
        subscription: cli.category("account").lookupSubscriptionId(options.subscription),
        shortId: commitId,
        site: {
          name: name } };



      return cacheUtils.readCommitId(context, __cb(_, __frame, 9, 25, function ___(__0, __3) { var __2 = !(context.id = __3); return (function __$__3(__then) { if (__2) {
            return _(null, log.error((("deployment with " + commitId) + " does not exist"))); } else { __then(); } ; })(function __$__3() {


          return site.ensureRepositoryUri(context, __cb(_, __frame, 13, 26, function ___(__0, __4) { repositoryUri = __4; return (function __$__3(__then) {
              if (repositoryUri) { return (function __$__3(_) {
                  var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return site.confirm((("Reploy deployment with " + context.shortId) + " id?  (y/n) "), __cb(_, __frame, 15, 31, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -146, 17, function ___(__0, __5) { return (function __$__3(__then) { if (__5) { return _(null); } else { __then(); } ; })(function __$__3() {


                    return scm.doDeploymentPut(context, __cb(_, __frame, 18, 8, function __$__3() {
                      return listDeployments(context, __cb(_, __frame, 19, 8, __then, true)); }, true)); }); }, true)); } else {

                log.error("Repository is not setup"); __then(); } ; })(_); }, true)); }); }, true)); }); });



  scm.command("github [name]").whiteListPowershell().usage("[options] [name]").description("Links a website to a github account for deployment").option("-s, --subscription <id>", "use the subscription id").option("--githubusername <username>", "The github username").option("--githubpassword <password>", "The github password").option("--githubrepository <repository>", "The github repository full name (i.e. user/repository)").execute(function __4(name, options, _) { var context;






































    function initializeRemoteRepo(_) { var __frame = { name: "initializeRemoteRepo", line: 211 }; return __func(_, this, arguments, initializeRemoteRepo, 0, __frame, function __$initializeRemoteRepo() {
        log.silly("InitializeRemoteRepo");
        return site.doRepositoryPost(context, __cb(_, __frame, 2, 8, function __$initializeRemoteRepo() {
          return site.ensureRepositoryUri(context, __cb(_, __frame, 3, 8, _, true)); }, true)); }); }; var __frame = { name: "__4", line: 180 }; return __func(_, this, arguments, __4, 2, __frame, function __$__4() { context = { subscription: cli.category("account").lookupSubscriptionId(options.subscription), site: { name: name }, github: { username: options.githubusername, password: options.githubpassword, repositoryFullName: options.githubrepository }, flags: { } }; if (!context.github.repositoryFullName) { context.flags = { forceRepositorySelection: true }; } ; return site.ensureRepositoryUri(context, __cb(_, __frame, 21, 6, function __$__4() { return (function __$__4(__then) { if (!context.repositoryUri) { return initializeRemoteRepo(__cb(_, __frame, 24, 8, __then, true)); } else { __then(); } ; })(function __$__4() { context.lvcClient = linkedRevisionControl.createClient(cli, "github"); return context.lvcClient.init(context, __cb(_, __frame, 28, 6, function __$__4() { return context.lvcClient.deploy(context, __cb(_, __frame, 29, 6, _, true)); }, true)); }); }, true)); }); });



  scm.doDeploymentsGet = function scm_doDeploymentsGet__5(context, _) { var maxItems, channel, progress, deployments; var __frame = { name: "scm_doDeploymentsGet__5", line: 218 }; return __func(_, this, arguments, scm_doDeploymentsGet__5, 1, __frame, function __$scm_doDeploymentsGet__5() {
      maxItems = parseInt(context.maxItems, 10);
      if ((!maxItems || (maxItems <= 0))) {
        maxItems = 20; } ;





      channel = getScmChannel(context).path("deployments").query("$orderby", "ReceivedTime desc").query("$top", maxItems);

      progress = cli.progress("Enumerating deployments"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$scm_doDeploymentsGet__5() {

            return channel.GET(__cb(_, __frame, 13, 44, function ___(__0, __1) { deployments = ensureShortCommitId(__1);
              return cacheUtils.saveCommitIds(context, deployments, __cb(_, __frame, 14, 6, function __$scm_doDeploymentsGet__5() {
                return _(null, deployments.map(formatDeployment)); }, true)); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$scm_doDeploymentsGet__5() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, _); }); }); };



  scm.doDeploymentGet = function scm_doDeploymentGet__6(context, _) { var channel, progress; var __frame = { name: "scm_doDeploymentGet__6", line: 239 }; return __func(_, this, arguments, scm_doDeploymentGet__6, 1, __frame, function __$scm_doDeploymentGet__6() {


      channel = getScmChannel(context).path("deployments").path(context.id);
      progress = cli.progress("Retrieving deployment info"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$scm_doDeploymentGet__6() {

            return channel.GET(__cb(_, __frame, 6, 30, function ___(__0, __2) { var __1 = formatDeployment(__2); return _(null, __1); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$scm_doDeploymentGet__6() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, _); }); }); };



  scm.doDeploymentPut = function scm_doDeploymentPut__7(context, _) { var channel, progress; var __frame = { name: "scm_doDeploymentPut__7", line: 251 }; return __func(_, this, arguments, scm_doDeploymentPut__7, 1, __frame, function __$scm_doDeploymentPut__7() {


      channel = getScmChannel(context).path("deployments").path(context.id);
      progress = cli.progress("Redeploying deployment"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$scm_doDeploymentPut__7() {

            return channel.PUT(null, __cb(_, __frame, 6, 13, _, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$scm_doDeploymentPut__7() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, _); }); }); };



  scm.doLogGet = function scm_doLogGet__8(context, _) { var channel, progress, logs; var __frame = { name: "scm_doLogGet__8", line: 263 }; return __func(_, this, arguments, scm_doLogGet__8, 1, __frame, function __$scm_doLogGet__8() {



      channel = getScmChannel(context).path("deployments").path(context.id).path("log");
      progress = cli.progress("Retrieving deployment log info"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$scm_doLogGet__8() {

            return channel.GET(__cb(_, __frame, 7, 17, function ___(__0, __1) { logs = __1;
              return _(null, logs.map(formatLog)); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$scm_doLogGet__8() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, _); }); }); };



  function listDeployments(context, _) { var deployments, authorLength, messageLength; var __frame = { name: "listDeployments", line: 277 }; return __func(_, this, arguments, listDeployments, 1, __frame, function __$listDeployments() {
      return scm.doDeploymentsGet(context, __cb(_, __frame, 1, 22, function ___(__0, __1) { deployments = __1;
        authorLength = 0; messageLength = 0;
        if ((deployments && deployments.length)) {
          log.table(deployments, function(row, deployment) {
            row.cell("Time", deployment.start_time);
            row.cell("Commit id", deployment.shortId);
            row.cell("Status", deployment.status);
            authorLength = Math.max(deployment.author.length, authorLength);
            row.cell("Author", deployment.author, null, Math.min(authorLength, 15));
            messageLength = Math.max(deployment.message.length, messageLength);
            row.cell("Message", deployment.message, null, Math.min(messageLength, 40)); }); }

         else {
          log.info("No git deployment found"); } ; _(); }, true)); }); };



  function getLogDetails(context, _) { var results, logs, progress, i; var __frame = { name: "getLogDetails", line: 295 }; return __func(_, this, arguments, getLogDetails, 1, __frame, function __$getLogDetails() {

      return scm.doLogGet(context, __cb(_, __frame, 2, 15, function ___(__0, __2) { logs = __2; return (function __$getLogDetails(__then) {
          if ((logs && logs.length)) {
            progress = cli.progress("Retrieving log details"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$getLogDetails() {

                  return async.map(logs, function __1(log, _) { var details; var __frame = { name: "__1", line: 301 }; return __func(_, this, arguments, __1, 1, __frame, function __$__1() { return (function __$__1(__then) {
                        if (log.hasDetails) {





                          return getScmChannel(context).path("deployments").path(context.id).path("log").path(log.id).GET(__cb(_, __frame, 7, 26, function ___(__0, __1) { details = __1;
                            return _(null, details.map(formatLog)); }, true)); } else { __then(); } ; })(_); }); }, __cb(_, __frame, 6, 18, function ___(__0, __3) { results = __3; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$getLogDetails() {



                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$getLogDetails() {


                for (i = 0; (i < logs.length); ++i) {
                  if (results[i]) {
                    logs[i].details = results[i]; } ; };



                return _(null, logs); }); }); } else {

            log.info("deployment has no detail");
            return _(null, []); } ; })(_); }, true)); }); };



  function displayLog(item) {
    if ((item.type === "Warning")) {
      log.warn(((item.short_time + " ") + item.message)); }
     else if ((item.type === "Error")) {
      log.error(((item.short_time + " ") + item.message)); }
     else {
      log.data(((item.short_time + " ") + item.message)); }  ; };



  function fromJsonDate(str) {
    return new Date(str); };


  function formatDate(dt) {
    var date = dt.getDate(), month = (dt.getMonth() + 1);

    date = ((((date < 10) ? "0" : "")) + date);
    month = ((((month < 10) ? "0" : "")) + month);
    return ((((((dt.getFullYear() + "-") + month) + "-") + date) + " ") + dt.toLocaleTimeString()); };


  function dateTimeText(str) {
    return formatDate(fromJsonDate(str)); };


  function deploymentStatusText(status) {
    switch (status) {
    case 0: return "Pending"; case 1:
      return "Building"; case 2:
      return "Deploying"; case 3:
      return "Failed"; case 4:
      return "Success"; default:
      return "Unknown"; }; };



  function logTypeText(type) {
    switch (type) {
    case 0: return "Message"; case 1:
      return "Warning"; case 2:
      return "Error"; default:
      return "Unknown"; }; };



  function ensureShortCommitId(deployments) {
    return deployments.map(function(deployment) {
      deployment.shortId = deployment.id.substr(0, 10);
      return deployment; }); };



  function formatDeployment(deployment) {
    var timeProperties = ["end_time","last_success_end_time","received_time","start_time",];
    for (var i = 0; (i < timeProperties.length); ++i) {
      if (deployment[timeProperties[i]]) {
        deployment[timeProperties[i]] = dateTimeText(deployment[timeProperties[i]]); } ; };


    deployment.complete = (!!deployment.complete).toString();
    deployment.status = (deployment.active ? "Active" : deploymentStatusText(deployment.status));
    deployment.message = deployment.message.replace(/\s*(.*)\s*?/g, "$1");
    delete deployment.active;
    delete deployment.status_text;
    delete deployment.url;
    delete deployment.log_url;
    return deployment; };


  function formatLog(log) {
    log.hasDetails = !!log.details_url;
    log.log_time = (log.log_time && dateTimeText(log.log_time));
    log.short_time = (log.log_time && log.log_time.replace(/.* +(.*)/g, "$1"));
    log.type = logTypeText(log.type);
    log.shortId = log.id.substr(0, 10);
    delete log.details_url;
    return log; };};