/*** Generated by streamline 0.3.6 (callbacks) - DO NOT EDIT ***/
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch,__propagate=__rt.__propagate,__trap=__rt.__trap,__future=__rt.__future,__setEF=__rt.__setEF,__g=__rt.__g;
/*     1 */ var common = require("../common");
/*    20 */ var fs = require("fs");
/*    21 */ var path = require("path");
/*    22 */ var url = require("url");
/*    23 */ var crypto = require("crypto");
/*    24 */ var pfx2pem = require("../../util/certificates/pkcs").pfx2pem;
/*    25 */ var Channel = require("../channel");
/*    26 */ var async = require("async");
/*    27 */ var child_process = require("child_process");
/*    28 */ var utils = require("../utils");
/*    29 */ var constants = require("../constants");
/*    30 */ var cacheUtils = require("../cacheUtils");
/*    32 */ exports.init = function(cli) {
/*    34 */   var log = cli.output;
/*    35 */   var site = cli.category("site");
/*    36 */   var scm = site.category("deployment");
/*    37 */   var diagnostic = site.category("log").description("Commands to download diagnostic log");
/*    40 */   diagnostic.command("download [name]").whiteListPowershell().description("Download diagnostic log").option("-s, --subscription <id>", "use the subscription id").option("-o, --output <path>", "output path, default is local folder").execute(function __1(name, options, _) {
                var context, repositoryUri, buf;
                var __frame = {
                  name: "__1",
                  line: 45
                };
                return __func(_, this, arguments, __1, 2, __frame, function __$__1() {
/*    46 */       context = {
/*    47 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*    48 */         path: (options.output || ""),
/*    49 */         site: {
/*    50 */           name: name
                    }
                  };
/*    54 */       if (!(/[.]zip$/i.test(context.path))) {
/*    55 */         context.path = path.join(context.path, "diagnostics.zip");
                  }
                ;
                  return (function __$__1(__then) {
/*    58 */         if (utils.pathExistsSync(context.path)) {
/*    59 */           return site.confirm((("Replace existing " + context.path) + "?  (y/n) "), __cb(_, __frame, 14, 13, function ___(__0, __2) {
/*    59 */             var __1 = !__2;
                        return (function __$__1(__then) {
                          if (__1) {
                            return _(null);
                          }
                           else {
                            __then();
                          }
                        ;
                        })(__then);
                      }, true));
                    }
                     else {
                      __then();
                    }
                  ;
                  })(function __$__1() {
/*    64 */         return scm.ensureRepositoryUri(context, __cb(_, __frame, 19, 26, function ___(__0, __3) {
                      repositoryUri = __3;
                      return (function __$__1(__then) {
/*    65 */             if (repositoryUri) {
/*    66 */               return doDownloadDiagnostic(context, __cb(_, __frame, 21, 18, function ___(__0, __4) {
                            buf = __4;
/*    67 */                 log.info(("Writing to " + context.path));
/*    68 */                 return fs.writeFile(context.path, buf, __cb(_, __frame, 23, 8, __then, true));
                          }, true));
                        }
                         else {
/*    70 */               log.error("Repository is not setup");
                          __then();
                        }
                      ;
                      })(_);
                    }, true));
                  });
                });
              });
/*    74 */   function doDownloadDiagnostic(context, _) {
                var channel, progress;
                var __frame = {
                  name: "doDownloadDiagnostic",
                  line: 74
                };
                return __func(_, this, arguments, doDownloadDiagnostic, 1, __frame, function __$doDownloadDiagnostic() {
/*    76 */       channel = scm.getScmChannel(context).path("dump");
/*    77 */       progress = cli.progress("Downloading diagnostic log");
                  return (function ___(__then) {
                    (function ___(_) {
                      __tryCatch(_, function __$doDownloadDiagnostic() {
/*    79 */             return channel.GET(__cb(_, __frame, 5, 13, _, true));
                      });
                    })(function ___(__e, __r, __cont) {
                      (function ___(__then) {
                        __tryCatch(_, function __$doDownloadDiagnostic() {
/*    81 */               progress.end();
                          __then();
                        });
                      })(function ___() {
                        __tryCatch(_, function ___() {
                          if (__cont) {
                            __then();
                          } else {
                            _(__e, __r);
                          };
                        });
                      });
                    });
                  })(function ___() {
                    __tryCatch(_, _);
                  });
                });
              };
            };
