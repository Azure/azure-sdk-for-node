/*** Generated by streamline 0.4.5 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch; var common = require("../common");


















var fs = require("fs");
var path = require("path");
var url = require("url");
var crypto = require("crypto");
var pfx2pem = require("../../util/certificates/pkcs").pfx2pem;
var Channel = require("../channel");
var async = require("async");
var child_process = require("child_process");
var utils = require("../utils");
var constants = require("../constants");
var cacheUtils = require("../cacheUtils");

exports.init = function(cli) {

  var log = cli.output;
  var site = cli.category("site");
  var scm = site.category("deployment");
  var diagnostic = site.category("log").description("Commands to download diagnostic log");


  diagnostic.command("download [name]").whiteListPowershell().description("Download diagnostic log").option("-s, --subscription <id>", "use the subscription id").option("-o, --output <path>", "output path, default is local folder").execute(function __1(name, options, _) { var context, repositoryUri, buf; var __frame = { name: "__1", line: 45 }; return __func(_, this, arguments, __1, 2, __frame, function __$__1() {





      context = {
        subscription: cli.category("account").lookupSubscriptionId(options.subscription),
        path: (options.output || ""),
        site: {
          name: name } };



      if (!(/[.]zip$/i.test(context.path))) {
        context.path = path.join(context.path, "diagnostics.zip"); } ; return (function __$__1(__then) {


        if (utils.pathExistsSync(context.path)) {
          return site.confirm((("Replace existing " + context.path) + "?  (y/n) "), __cb(_, __frame, 14, 13, function ___(__0, __2) { var __1 = !__2; return (function __$__1(__then) { if (__1) { return _(null); } else { __then(); } ; })(__then); }, true)); } else { __then(); } ; })(function __$__1() {




        return site.ensureRepositoryUri(context, __cb(_, __frame, 19, 26, function ___(__0, __3) { repositoryUri = __3; return (function __$__1(__then) {
            if (repositoryUri) {
              return doDownloadDiagnostic(context, __cb(_, __frame, 21, 18, function ___(__0, __4) { buf = __4;
                log.info(("Writing to " + context.path));
                return fs.writeFile(context.path, buf, __cb(_, __frame, 23, 8, __then, true)); }, true)); } else {

              log.error("Repository is not setup"); __then(); } ; })(_); }, true)); }); }); });



  function doDownloadDiagnostic(context, _) { var channel, progress; var __frame = { name: "doDownloadDiagnostic", line: 74 }; return __func(_, this, arguments, doDownloadDiagnostic, 1, __frame, function __$doDownloadDiagnostic() {

      channel = scm.getScmChannel(context).path("dump");
      progress = cli.progress("Downloading diagnostic log"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$doDownloadDiagnostic() {

            return channel.GET(__cb(_, __frame, 5, 13, _, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$doDownloadDiagnostic() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, _); }); }); };};