/*** Generated by streamline 0.4.5 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch; var common = require("../common");















var fs = require("fs");
var path = require("path");
var url = require("url");
var util = require("util");
var crypto = require("crypto");
var pfx2pem = require("../../util/certificates/pkcs").pfx2pem;
var Channel = require("../channel");
var async = require("async");
var child_process = require("child_process");
var utils = require("../utils");
var constants = require("../constants");
var cacheUtils = require("../cacheUtils");
var js2xml = require("../../util/js2xml");

var linkedRevisionControl = require("../linkedrevisioncontrol");

exports.init = function(cli) {

  var log = cli.output;

  function getChannel() {
    var account = cli.category("account");
    var managementEndpoint = url.parse(utils.getManagementEndpointUrl(account.managementEndpointUrl()));
    var pem = account.managementCertificate();
    var host = managementEndpoint.hostname;
    var port = managementEndpoint.port;

    var channel = new Channel({
      host: host,
      port: port,
      key: pem.key,
      cert: pem.cert
    }).header("x-ms-version", "2011-02-25");

    var proxyString = (((process.env.HTTPS_PROXY || process.env.https_proxy) || process.env.ALL_PROXY) || process.env.all_proxy);





    if ((proxyString !== undefined)) {
      var proxyUrl = url.parse(proxyString);
      if (((proxyUrl.protocol !== "http:") && (proxyUrl.protocol !== "https:"))) {


        proxyUrl = url.parse(("http://" + proxyString)); } ;


      channel = channel.add({ proxy: proxyUrl }); } ;


    return channel; };


  var site = cli.category("site").description("Commands to manage your web sites");


  site.command("list").whiteListPowershell().description("List your web sites").option("-s, --subscription <id>", "use the subscription id").execute(function __1(options, _) { var parameters, sites, s; var __frame = { name: "__1", line: 78 }; return __func(_, this, arguments, __1, 1, __frame, function __$__1() {




      parameters = {
        subscription: cli.category("account").lookupSubscriptionId(options.subscription) };


      return site.doSitesGet(parameters, __cb(_, __frame, 5, 22, function ___(__0, __1) { sites = __1;

        if ((sites && (sites.length > 0))) {
          for (s in sites) {
            sites[s] = clean(sites[s]); };


          log.table(sites, function(row, s) {
            row.cell("Name", s.Name);
            row.cell("State", s.State);
            row.cell("Host names", s.HostNames); }); }

         else {
          log.info("No sites created yet. You can create new sites using \"azure site create\" or through the portal."); } ; _(); }, true)); }); });



  function choose(data, callback) {
    cli.choose(data, function(x) { callback(undefined, x); }); };

  function prompt(label, callback) {
    cli.prompt(label, function(x) { callback(undefined, x); }); };

  function confirm(label, callback) {
    cli.confirm(label, function(x) {
      if (!x) {
        log.warn("The operation was cancelled by the user"); } ;

      callback(undefined, x); }); };


  site.confirm = confirm;

  site.command("create [name]").whiteListPowershell().description("Create a new web site").option("-s, --subscription <id>", "use the subscription id").option("--location <location>", "the geographic region to create the website").option("--hostname <hostname>", "custom host name to use").option("--git", "configure git on web site and local folder").option("-pu, --publishingUsername <publishingUsername>", "The publishing username for git").option("--github", "configure github on web site and local folder").option("-u, --username <user>", "The github username").option("-up, --pass <pass>", "The github password").option("-r, --repository <repository>", "The github repository").execute(function __2(nameArg, options, _) { var context;






























































    function promptForSiteName(_) { var __frame = { name: "promptForSiteName", line: 179 }; return __func(_, this, arguments, promptForSiteName, 0, __frame, function __$promptForSiteName() {
        log.silly("promptForSiteName"); return (function __$promptForSiteName(__then) {
          if ((context.site.name === undefined)) {
            log.help("Need a site name");
            return prompt("Name: ", __cb(_, __frame, 4, 34, function ___(__0, __1) { context.site.name = __1; __then(); }, true)); } else { __then(); } ; })(_); }); };



    function determineIfSiteExists(_) { var sites, hits, displayNameMatches; var __frame = { name: "determineIfSiteExists", line: 187 }; return __func(_, this, arguments, determineIfSiteExists, 0, __frame, function __$determineIfSiteExists() {
        log.silly("determineIfSiteExists");
        return site.doSitesGet(context, __cb(_, __frame, 2, 24, function ___(__0, __1) { sites = __1;
          hits = sites.filter(function(item) {
            return utils.ignoreCaseEquals(item.Name, context.site.name); }); return (function __$determineIfSiteExists(__then) {


            if ((hits.length === 1)) {
              log.info("Updating existing site");
              context.flags.siteExists = true; return (function __$determineIfSiteExists(__then) {
                if ((context.site.webspace === undefined)) {
                  context.site.webspace = hits[0].WebSpace;
                  log.verbose("Existing site location is ", context.site.webspace); __then(); } else {

                  return ensureSpaces(context, __cb(_, __frame, 14, 16, function __$determineIfSiteExists() {


                    displayNameMatches = context.spaces.filter(function(space) { return (space.GeoRegion === context.site.webspace); })[0];

                    if ((displayNameMatches && (displayNameMatches.Name !== hits[0].WebSpace))) {
                      return _(new Error(((("Expected location " + context.site.webspace) + " but was ") + displayNameMatches.GeoRegion))); } ; __then(); }, true)); } ; })(__then); } else { __then(); } ; })(_); }, true)); }); };





    function promptForLocation(_) { var displayNameMatches; var __frame = { name: "promptForLocation", line: 213 }; return __func(_, this, arguments, promptForLocation, 0, __frame, function __$promptForLocation() {
        log.silly("promptForLocation");
        return ensureSpaces(context, __cb(_, __frame, 2, 12, function __$promptForLocation() {

          if ((context.site.webspace !== undefined)) {

            displayNameMatches = context.spaces.filter(function(space) {
              return (space.GeoRegion === context.site.webspace); });


            if ((displayNameMatches.length === 1)) {
              context.site.webspace = displayNameMatches[0].Name; } ; } ;



          if ((context.site.webspace !== undefined)) { return _(null); } ; return (function __$promptForLocation(__then) {




            if ((context.spaces.length === 0)) {
              return portalCreateSiteInstruction(context, __cb(_, __frame, 21, 14, function __$promptForLocation() {
                return _(new Error("First site must be created on portal")); }, true)); } else { return (function __$promptForLocation(__then) {
                if ((context.spaces.length == 1)) {
                  context.site.webspace = context.spaces[0].Name;
                  log.info("Using location", context.spaces[0].GeoRegion); __then(); } else {

                  log.help("Choose a region");
                  return choose(context.spaces.map(function(space) {
                    return space.GeoRegion; }), __cb(_, __frame, 28, 53, function ___(__0, __1) { context.site.webspace = context.spaces[__1].Name; __then(); }, true)); } ; })(__then); } ; })(_); }, true)); }); };




    function copyIisNodeWhenServerJsPresent(_) { var sourcePath; var __frame = { name: "copyIisNodeWhenServerJsPresent", line: 247 }; return __func(_, this, arguments, copyIisNodeWhenServerJsPresent, 0, __frame, function __$copyIisNodeWhenServerJsPresent() {
        log.silly("copyWebConfigWhenServerJsPresent"); return (function __$copyIisNodeWhenServerJsPresent(__then) {
          if ((!utils.pathExistsSync("iisnode.yml") && ((utils.pathExistsSync("server.js") || utils.pathExistsSync("app.js"))))) {
            log.info("Creating default iisnode.yml file");
            sourcePath = path.join(__dirname, "../templates/node/iisnode.yml");
            return fs.readFile(sourcePath, __cb(_, __frame, 5, 42, function ___(__0, __1) { return fs.writeFile("iisnode.yml", __1, __cb(_, __frame, 5, 14, __then, true)); }, true)); } else { __then(); } ; })(_); }); };



    function updateLocalConfigWithSiteName(_) { var cfg; var __frame = { name: "updateLocalConfigWithSiteName", line: 256 }; return __func(_, this, arguments, updateLocalConfigWithSiteName, 0, __frame, function __$updateLocalConfigWithSiteName() {
        log.silly("updateLocalConfigWithSiteName"); return (function __$updateLocalConfigWithSiteName(__then) {
          if (context.flags.isGitWorkingTree) {
            return site.readConfig(__cb(_, __frame, 3, 24, function ___(__0, __1) { cfg = __1;
              cfg.name = context.site.name;
              cfg.webspace = context.site.webspace;
              return site.writeConfig(cfg, __cb(_, __frame, 6, 14, __then, true)); }, true)); } else { __then(); } ; })(_); }); };



    function createSite(_) { var __frame = { name: "createSite", line: 266 }; return __func(_, this, arguments, createSite, 0, __frame, function __$createSite() {
        log.silly("createSite"); return (function __$createSite(__then) {
          if (!context.flags.siteExists) {
            return site.doSitesPost(context, __cb(_, __frame, 3, 14, __then, true)); } else { __then(); } ; })(_); }); };



    function initializeRemoteRepo(_) { var __frame = { name: "initializeRemoteRepo", line: 273 }; return __func(_, this, arguments, initializeRemoteRepo, 0, __frame, function __$initializeRemoteRepo() {
        log.silly("InitializeRemoteRepo"); return (function __$initializeRemoteRepo(__then) {
          if (!context.flags.siteExists) {
            return site.doRepositoryPost(context, __cb(_, __frame, 3, 14, function __$initializeRemoteRepo() {
              return site.doRepositoryGet(context, __cb(_, __frame, 4, 29, function ___(__0, __1) { context.repo = __1; __then(); }, true)); }, true)); } else {

            return site.doRepositoryGet(context, __cb(_, __frame, 6, 29, function ___(__0, __2) { context.repo = __2; return (function __$initializeRemoteRepo(__then) {
                if (!context.repo) {
                  return site.doRepositoryPost(context, __cb(_, __frame, 8, 16, function __$initializeRemoteRepo() {
                    return site.doRepositoryGet(context, __cb(_, __frame, 9, 31, function ___(__0, __3) { context.repo = __3; __then(); }, true)); }, true)); } else { __then(); } ; })(__then); }, true)); } ; })(function __$initializeRemoteRepo() {



          log.silly("context.repo", context.repo); _(); }); }); };


    function addRemoteToLocalGitRepo(_) { var remotes, azureExists, gitUri; var __frame = { name: "addRemoteToLocalGitRepo", line: 289 }; return __func(_, this, arguments, addRemoteToLocalGitRepo, 0, __frame, function __$addRemoteToLocalGitRepo() {
        log.silly("addRemoteToLocalGitRepo");
        if (!context.flags.isGitWorkingTree) {
          log.info((("To create a local git repository to publish to the remote site, please rerun this command with the --git flag: \"azure site create " + ((((context.site && context.site.name)) || "{site name}"))) + " --git\".")); return _(null); } ; return (function __$addRemoteToLocalGitRepo(__then) {



          if (!context.publishingUser) {
            return site.doPublishingUsersGet(context, __cb(_, __frame, 8, 40, function ___(__0, __1) { context.publishingUsers = __1;
              return getPublishingUser(context, __cb(_, __frame, 9, 39, function ___(__0, __2) { context.publishingUser = __2; __then(); }, true)); }, true)); } else { __then(); } ; })(function __$addRemoteToLocalGitRepo() {


          log.verbose("Detecting git and local git folder");
          return exec("git remote", __cb(_, __frame, 13, 26, function ___(__0, __3) { remotes = __3;
            azureExists = ((remotes.stdout + remotes.stderr)).split("\n").some(function(item) {
              return (item === "azure"); }); return (function __$addRemoteToLocalGitRepo(__then) {


              if (azureExists) {
                log.verbose("Removing existing azure remote alias");
                return exec("git remote rm azure", __cb(_, __frame, 20, 14, __then, true)); } else { __then(); } ; })(function __$addRemoteToLocalGitRepo() {


              gitUri = getGitUri(context.repo, context.site.name, context.publishingUser);
              log.info((("Executing `git remote add azure " + gitUri) + "`"));
              return exec(("git remote add azure " + gitUri), __cb(_, __frame, 25, 12, _, true)); }); }, true)); }); }); };


    function ensureSpaces(context, _) { var __frame = { name: "ensureSpaces", line: 317 }; return __func(_, this, arguments, ensureSpaces, 1, __frame, function __$ensureSpaces() { return (function __$ensureSpaces(__then) {
          if (!context.spaces) {
            return cacheUtils.readSpaces(context, __cb(_, __frame, 2, 31, function ___(__0, __1) { context.spaces = __1; return (function __$ensureSpaces(__then) {
                if ((!context.spaces || !context.spaces.length)) {
                  return context.site.doSpacesGet(context, __cb(_, __frame, 4, 33, function ___(__0, __2) { context.spaces = __2; __then(); }, true)); } else { __then(); } ; })(__then); }, true)); } else { __then(); } ; })(_); }); }; var __frame = { name: "__2", line: 128 }; return __func(_, this, arguments, __2, 2, __frame, function __$__2() { context = { subscription: cli.category("account").lookupSubscriptionId(options.subscription), git: options.git, site: { name: nameArg, webspace: options.location, hostname: options.hostname }, publishingUser: options.publishingUsername, username: options.username, password: options.pass, remoteUri: options.repository, flags: { } }; if ((options.git && options.github)) { return _(new Error("Please run the command with either --git or --github options. Not both.")); } ; return promptForSiteName(__cb(_, __frame, 21, 10, function __$__2() { return determineIfSiteExists(__cb(_, __frame, 22, 10, function __$__2() { return promptForLocation(__cb(_, __frame, 23, 10, function __$__2() { return createSite(__cb(_, __frame, 24, 10, function __$__2() { return (function __$__2(__then) { if ((options.git || options.github)) { if (options.github) { context.lvcClient = linkedRevisionControl.createClient(cli, "github"); } else { if (options.git) { context.lvcClient = linkedRevisionControl.createClient(cli, "git"); } ; } ; return context.lvcClient.init(context, __cb(_, __frame, 34, 12, function __$__2() { return copyIisNodeWhenServerJsPresent(__cb(_, __frame, 37, 12, function __$__2() { return updateLocalConfigWithSiteName(__cb(_, __frame, 38, 12, function __$__2() { return initializeRemoteRepo(__cb(_, __frame, 40, 12, function __$__2() { return (function __$__2(__then) { if (options.git) { return addRemoteToLocalGitRepo(__cb(_, __frame, 43, 14, __then, true)); } else { return (function __$__2(__then) { if (options.github) { return site.ensureRepositoryUri(context, __cb(_, __frame, 45, 14, __then, true)); } else { __then(); } ; })(__then); } ; })(function __$__2() { return context.lvcClient.deploy(context, __cb(_, __frame, 48, 12, __then, true)); }); }, true)); }, true)); }, true)); }, true)); } else { __then(); } ; })(_); }, true)); }, true)); }, true)); }, true)); }); });





  function portalCreateSiteInstruction(context, _) { var href; var __frame = { name: "portalCreateSiteInstruction", line: 327 }; return __func(_, this, arguments, portalCreateSiteInstruction, 1, __frame, function __$portalCreateSiteInstruction() {
      log.help("You must create your first web site using the Windows Azure portal.");
      log.help("Please follow these steps in the portal:");
      log.help("1. At the bottom of the page, click on New > Web Site > Quick Create");
      log.help((("2. Type \"" + ((((context.site && context.site.name)) || "{site name}"))) + "\" in the URL field"));
      log.help("3. Click on \"Create Web Site\"");
      log.help("4. Once the site has been created, click on the site name");
      log.help("5. Click on \"Set up Git publishing\" or \"Reset deployment credentials\" and setup a publishing username and password. Use those credentials for all new websites you create.");
      if (context.git) {
        log.help("6. Back in the console window, rerun this command by typing \"azure site create {site name} --git\""); } ;


      return confirm("Launch browser to portal now? (y/n) ", __cb(_, __frame, 12, 8, function ___(__0, __1) { return (function __$portalCreateSiteInstruction(__then) { if (__1) {
            log.help("Launching portal.");
            href = utils.getPortalUrl();
            common.launchBrowser(href); __then(); } else { __then(); } ; })(_); }, true)); }); };



  function getPublishingUser(context, _) { var publishingUsers, filters; var __frame = { name: "getPublishingUser", line: 346 }; return __func(_, this, arguments, getPublishingUser, 1, __frame, function __$getPublishingUser() {
      publishingUsers = toArray(context.publishingUsers);
      filters = publishingUsers.filter(function(item) {
        return ((typeof item === "string") && (item.length <= 64)); }); return (function __$getPublishingUser(__then) {


        if ((filters.length === 0)) {
          return portalGitInitInstruction(context, __cb(_, __frame, 7, 6, function __$getPublishingUser() {
            return _(new Error("Git credentials needs to be setup on the portal")); }, true)); } else {
          if (((publishingUsers.length === 1) && (filters.length === 1))) {
            return _(null, filters[0]); } ; __then(); } ; })(function __$getPublishingUser() {


        log.help("Please provide the username for Git deployment.");
        log.help("If you don't have one, please configure it in the management portal.");
        return prompt("Publishing username: ", __cb(_, __frame, 15, 11, _, true)); }); }); };


  function portalGitInitInstruction(context, _) { var href; var __frame = { name: "portalGitInitInstruction", line: 364 }; return __func(_, this, arguments, portalGitInitInstruction, 1, __frame, function __$portalGitInitInstruction() {
      log.help("You must create your git publishing credentials using the Windows Azure portal.");
      log.help("Please follow these steps in the portal:");
      log.help("1. In the menu on the left select \"Web Sites\"");
      log.help((("2. Click on the site named \"" + ((((context.site && context.site.name)) || "{site name}"))) + "\" or any other site"));
      log.help("3. Click on \"Set up Git publishing\" or \"Reset deployment credentials\" and setup a publishing username and password. Use those credentials for all new websites you create.");
      if (context.git) {
        log.help("4. Back in the console window, rerun this command by typing \"azure site create {site name} --git\""); } ;


      return confirm("Launch browser to portal now? (y/n) ", __cb(_, __frame, 10, 8, function ___(__0, __1) { return (function __$portalGitInitInstruction(__then) { if (__1) {
            log.help("Launching portal.");
            href = utils.getPortalUrl();
            common.launchBrowser(href); __then(); } else { __then(); } ; })(_); }, true)); }); };



  var location = site.category("location").description("Commands to manage your Azure locations");


  location.command("list").whiteListPowershell().description("List locations available for your account").execute(function __3(options, _) { var context, spaces, s; var __frame = { name: "__3", line: 387 }; return __func(_, this, arguments, __3, 1, __frame, function __$__3() {



      context = {
        subscription: cli.category("account").lookupSubscriptionId(options.subscription) };


      return site.doSpacesGet(context, __cb(_, __frame, 5, 23, function ___(__0, __1) { spaces = __1; return (function __$__3(__then) {
          if ((spaces && spaces.length)) {
            for (s in spaces) {
              spaces[s] = clean(spaces[s]); };


            log.table(spaces, function(row, item) {
              row.cell("Name", item.GeoRegion); }); __then(); } else {


            return portalCreateSiteInstruction(context, __cb(_, __frame, 15, 12, __then, true)); } ; })(_); }, true)); }); });



  site.command("portal [name]").whiteListPowershell().description("Opens the portal in a browser to manage your web sites").option("-r, --realm <realm>", "specifies organization used for login").execute(function __4(name, options, _) { var href; var __frame = { name: "__4", line: 410 }; return __func(_, this, arguments, __4, 2, __frame, function __$__4() {





      href = url.parse(utils.getPortalUrl(), true);
      delete href.search;
      delete href.path;
      if (name) {
        href.hash = (("#Workspaces/WebsiteExtension/Website/" + name) + "/dashboard"); } ;


      if ((options && options.realm)) {
        href.query.whr = options.realm; } ;

      targetUrl = url.format(href);
      common.launchBrowser(targetUrl); _(); }); });


  site.command("browse [name]").whiteListPowershell().description("Open your web site in a browser.").option("-s, --subscription <id>", "use the subscription id").execute(function __5(name, options, _) { var context, cache, siteData, href; var __frame = { name: "__5", line: 430 }; return __func(_, this, arguments, __5, 2, __frame, function __$__5() {





      context = {
        subscription: cli.category("account").lookupSubscriptionId(options.subscription),
        site: {
          name: name } };



      return lookupSiteNameAndWebSpace(context, __cb(_, __frame, 9, 22, function ___(__0, __2) { cache = __2; return (function __$__5(_) {
          var __1 = cache; if (__1) { return _(null, __1); } ; return site.doSiteGet(context, __cb(_, __frame, 10, 40, _, true)); })(__cb(_, __frame, -429, 17, function ___(__0, __3) { siteData = clean(__3);

          href = ("http://" + toArray(siteData.HostNames)[0]);

          common.launchBrowser(href); _(); }, true)); }, true)); }); });


  site.command("show [name]").whiteListPowershell().description("Show details for a web site").option("-s, --subscription <id>", "use the subscription id").execute(function __6(name, options, _) { var context, result, repositoryUri, gitUri, settings, data, index; var __frame = { name: "__6", line: 451 }; return __func(_, this, arguments, __6, 2, __frame, function __$__6() {




      context = {
        subscription: cli.category("account").lookupSubscriptionId(options.subscription),
        site: {
          name: name } };



      return lookupSiteNameAndWebSpace(context, __cb(_, __frame, 8, 10, function __$__6() {

        log.info("Showing details for site");
        log.verbose("Parameters", context);

        return async.parallel([function __1(_) { var __frame = { name: "__1", line: 465 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
            return site.doSiteGet(context, __cb(_, __frame, 0, 34, _, true)); });
        },function __2(_) { var __frame = { name: "__2", line: 466 }; return __func(_, this, arguments, __2, 0, __frame, function __$__2() { return site.doSiteConfigGet(context, __cb(_, __frame, 0, 34, _, true)); }); },], __cb(_, __frame, 13, 23, function ___(__0, __3) { result = __3;



          repositoryUri = getRepositoryUri(result[0]);
          gitUri = (repositoryUri ? getGitUri(repositoryUri, context.site.name) : "none");
          settings = []; return (function __$__6(__then) {
            if (repositoryUri) {
              return site.ensureRepositoryUri(context, __cb(_, __frame, 23, 12, function __$__6() {
                return site.category("repository").doSettingsGet(context, __cb(_, __frame, 24, 23, function ___(__0, __4) { settings = __4; __then(); }, true)); }, true)); } else { __then(); } ; })(function __$__6() {


            if (log.format().json) {
              data = {
                site: clean(result[0]),
                config: clean(result[1]),
                gitRepositoryUri: gitUri,
                settings: settings };


              log.json(data); }
             else {
              logEachData("Site", result[0]);
              logEachData("Config", result[1]);

              log.data("GitRepositoryUri", gitUri);
              for (index in settings) {
                log.data((("Settings" + " ") + settings[index].Key), settings[index].Value); }; } ; _(); }); }, true)); }, true)); }); });




  function lookupSiteName(context, _) { var cfg; var __frame = { name: "lookupSiteName", line: 498 }; return __func(_, this, arguments, lookupSiteName, 1, __frame, function __$lookupSiteName() {
      if ((context.site.name !== undefined)) { return _(null); } ;




      return site.readConfig(__cb(_, __frame, 6, 14, function ___(__0, __1) { cfg = __1;
        if ((cfg && cfg.name)) {

          context.site.name = cfg.name;
          context.site.webspace = cfg.webspace; return _(null); } ;



        return prompt("Web site name: ", __cb(_, __frame, 14, 24, function ___(__0, __2) { context.site.name = __2;

          if (!context.site.name) {
            return _(new Error("Invalid site name")); } ; _(); }, true)); }, true)); }); };



  function lookupSiteWebSpace(context, _) { var sites, index; var __frame = { name: "lookupSiteWebSpace", line: 519 }; return __func(_, this, arguments, lookupSiteWebSpace, 1, __frame, function __$lookupSiteWebSpace() {
      log.verbose("Attempting to locate site ", context.site.name);
      return site.doSitesGet(context, __cb(_, __frame, 2, 16, function ___(__0, __1) { sites = __1;
        for (index in sites) {
          if (utils.ignoreCaseEquals(sites[index].Name, context.site.name)) {
            log.verbose("Site located at ", sites[index].WebSpace);
            context.site.webspace = sites[index].WebSpace; } ; };


        if ((context.site.webspace === undefined)) {
          return _(new Error(("Unable to locate site named " + context.site.name))); } ; _(); }, true)); }); };



  function lookupSiteNameAndWebSpace(context, _) { var cache; var __frame = { name: "lookupSiteNameAndWebSpace", line: 533 }; return __func(_, this, arguments, lookupSiteNameAndWebSpace, 1, __frame, function __$lookupSiteNameAndWebSpace() {
      return lookupSiteName(context, __cb(_, __frame, 1, 4, function __$lookupSiteNameAndWebSpace() {
        return cacheUtils.readSite(context, __cb(_, __frame, 2, 16, function ___(__0, __1) { cache = __1;
          if ((cache || context.site.webspace)) {
            context.site.webspace = (((cache && cache.WebSpace)) || context.site.webspace);
            return _(null, cache); } ;

          return lookupSiteWebSpace(context, __cb(_, __frame, 7, 4, _, true)); }, true)); }, true)); }); };


  site.lookupSiteNameAndWebSpace = lookupSiteNameAndWebSpace;

  function getRepositoryUri(siteData) {
    if (siteData.SiteProperties.Properties) {
      for (var i = 0; (i < siteData.SiteProperties.Properties.NameValuePair.length); ++i) {
        var pair = siteData.SiteProperties.Properties.NameValuePair[i];
        if (utils.ignoreCaseEquals(pair.Name, "RepositoryUri")) {
          if ((typeof pair.Value === "string")) {
            if (!endsWith(pair.Value, "/")) {

              pair.Value += "/"; } ;


            return pair.Value; }
           else {
            return null; } ; } ; }; } ;





    return null; };


  site.getRepositoryUri = getRepositoryUri;

  function getGitUri(repositoryUri, siteName, auth) {
    var repoUrl = url.parse(repositoryUri);

    if (auth) {
      repoUrl.auth = auth; } ;


    var sitePath = (siteName + ".git");

    if (!endsWith(repoUrl.path, "/")) {

      repoUrl.path += "/"; } ;

    repoUrl.path += sitePath;

    if (!endsWith(repoUrl.pathname, "/")) {

      repoUrl.pathname += "/"; } ;

    repoUrl.pathname += sitePath;

    return url.format(repoUrl); };


  function getRepositoryAuth(siteData) {
    var userName, password;
    for (var i = 0; (i < siteData.SiteProperties.Properties.NameValuePair.length); ++i) {
      var pair = siteData.SiteProperties.Properties.NameValuePair[i];
      if (utils.ignoreCaseEquals(pair.Name, "PublishingUsername")) {
        userName = pair.Value; }
       else if (utils.ignoreCaseEquals(pair.Name, "PublishingPassword")) {
        password = pair.Value; }  ; };


    return (userName && (((userName + ":") + password))); };

  site.getRepositoryAuth = getRepositoryAuth;

  function ensureRepositoryUri(context, _) { var siteData, repositoryUri; var __frame = { name: "ensureRepositoryUri", line: 607 }; return __func(_, this, arguments, ensureRepositoryUri, 1, __frame, function __$ensureRepositoryUri() {
      return site.lookupSiteNameAndWebSpace(context, __cb(_, __frame, 1, 19, function ___(__0, __1) { siteData = __1;
        repositoryUri = (siteData && site.getRepositoryUri(siteData)); return (function __$ensureRepositoryUri(__then) {
          if (!repositoryUri) {
            return site.doSiteGet(context, __cb(_, __frame, 4, 17, function ___(__0, __2) { siteData = __2;
              repositoryUri = site.getRepositoryUri(siteData); __then(); }, true)); } else { __then(); } ; })(function __$ensureRepositoryUri() {

          if (repositoryUri) {
            context.repositoryAuth = site.getRepositoryAuth(siteData);
            return _(null, context.repositoryUri = repositoryUri); } ; _(); }); }, true)); }); };


  site.ensureRepositoryUri = ensureRepositoryUri;

  site.command("delete [name]").whiteListPowershell().description("Delete a web site").option("-s, --subscription <id>", "use the subscription id").option("-q, --quiet", "quiet mode, do not ask for delete confirmation").execute(function __7(name, options, _) { var context, progress, result; var __frame = { name: "__7", line: 626 }; return __func(_, this, arguments, __7, 2, __frame, function __$__7() {





      context = {
        subscription: cli.category("account").lookupSubscriptionId(options.subscription),
        site: {
          name: name } };



      return lookupSiteNameAndWebSpace(context, __cb(_, __frame, 8, 10, function __$__7() {

        log.info("Deleting site", context.site.name); return (function __$__7(_) {
          var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return confirm((("Delete " + context.site.name) + " site?  (y/n) "), __cb(_, __frame, 11, 33, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -625, 17, function ___(__0, __2) { return (function __$__7(__then) { if (__2) { return _(null); } else { __then(); } ; })(function __$__7() {



            progress = cli.progress("Deleting site"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__7() {








                  return getChannel().path(context.subscription).path("services").path("webspaces").path(context.site.webspace).path("sites").path(context.site.name).DELETE(__cb(_, __frame, 24, 25, function ___(__0, __3) { result = __3;
                    return cacheUtils.deleteSite(context, __cb(_, __frame, 25, 12, function __$__7() { _(null, null, true); }, true)); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__7() {


                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__7() {

                log.info((("Site " + context.site.name) + " has been deleted")); _(); }); }); }); }, true)); }, true)); }); });



  site.command("start [name]").whiteListPowershell().description("Start a web site").option("-s, --subscription <id>", "use the subscription id").execute(function __8(name, options, _) { var context, progress, result; var __frame = { name: "__8", line: 664 }; return __func(_, this, arguments, __8, 2, __frame, function __$__8() {




      context = {
        subscription: cli.category("account").lookupSubscriptionId(options.subscription),
        site: {
          name: name } };



      return lookupSiteNameAndWebSpace(context, __cb(_, __frame, 8, 10, function __$__8() {

        log.info("Starting site", context.site.name);

        progress = cli.progress("Updating site state"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__8() {









              return getChannel().path(context.subscription).path("services").path("webspaces").path(context.site.webspace).path("sites").path(context.site.name).header("Content-Type", "application/xml").PUT(function(req) {
                req.write("<Site xmlns=\"http://schemas.microsoft.com/windowsazure\">");
                req.write("<HostNames>");
                req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
                req.write((context.site.name + utils.getHostNameSuffix()));
                req.write("</string>");
                req.write("</HostNames>");
                req.write("<Name>");
                req.write(context.site.name);
                req.write("</Name>");
                req.write("<State>");
                req.write("Running");
                req.write("</State>");
                req.write("</Site>");

                req.end(); }, __cb(_, __frame, 22, 25, function ___(__0, __1) { result = __1; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__8() {



                progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__8() {


            log.info((("Site " + context.site.name) + " has been started")); _(); }); }); }, true)); }); });


  site.command("stop [name]").whiteListPowershell().description("Stop a web site").option("-s, --subscription <id>", "use the subscription id").execute(function __9(name, options, _) { var context, progress, result; var __frame = { name: "__9", line: 715 }; return __func(_, this, arguments, __9, 2, __frame, function __$__9() {




      context = {
        subscription: cli.category("account").lookupSubscriptionId(options.subscription),
        site: {
          name: name } };



      return lookupSiteNameAndWebSpace(context, __cb(_, __frame, 8, 10, function __$__9() {

        log.info("Stopping site", context.site.name);

        progress = cli.progress("Updating site state"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__9() {









              return getChannel().path(context.subscription).path("services").path("webspaces").path(context.site.webspace).path("sites").path(context.site.name).header("Content-Type", "application/xml").PUT(function(req) {
                req.write("<Site xmlns=\"http://schemas.microsoft.com/windowsazure\">");
                req.write("<HostNames>");
                req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
                req.write((context.site.name + utils.getHostNameSuffix()));
                req.write("</string>");
                req.write("</HostNames>");
                req.write("<Name>");
                req.write(context.site.name);
                req.write("</Name>");
                req.write("<State>");
                req.write("Stopped");
                req.write("</State>");
                req.write("</Site>");

                req.end(); }, __cb(_, __frame, 22, 25, function ___(__0, __1) { result = __1; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__9() {



                progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__9() {


            log.info((("Site " + context.site.name) + " has been stopped")); _(); }); }); }, true)); }); });






  site.readConfig = function site_readConfig__10(_) { var __frame = { name: "site_readConfig__10", line: 766 }; return __func(_, this, arguments, site_readConfig__10, 0, __frame, function __$site_readConfig__10() {

      return site.readConfigValue("azure.site.name", __cb(_, __frame, 2, 12, function ___(__0, __2) {
        return site.readConfigValue("azure.site.webspace", __cb(_, __frame, 3, 16, function ___(__0, __3) { var __1 = { name: __2, webspace: __3 }; return _(null, __1); }, true)); }, true)); }); };



  site.writeConfig = function site_writeConfig__11(cfg, _) { var __frame = { name: "site_writeConfig__11", line: 773 }; return __func(_, this, arguments, site_writeConfig__11, 1, __frame, function __$site_writeConfig__11() {
      return site.writeConfigValue("azure.site.name", cfg.name, __cb(_, __frame, 1, 4, function __$site_writeConfig__11() {
        return site.writeConfigValue("azure.site.webspace", cfg.webspace, __cb(_, __frame, 2, 4, _, true)); }, true)); }); };


  site.readConfigValue = function site_readConfigValue__12(name, _) { var result; var __frame = { name: "site_readConfigValue__12", line: 778 }; return __func(_, this, arguments, site_readConfigValue__12, 1, __frame, function __$site_readConfigValue__12() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$site_readConfigValue__12() {

            return exec(("git config --get " + name), __cb(_, __frame, 2, 19, function ___(__0, __1) { result = __1;
              return _(null, ((result.stdout + result.stderr)).trim()); }, true)); }); })(function ___(err, __result) { __tryCatch(_, function __$site_readConfigValue__12() { if (err) {


              log.silly("Unable to read config", err);
              return _(null, ""); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, _); }); }); };



  site.writeConfigValue = function site_writeConfigValue__13(name, value, _) { var __frame = { name: "site_writeConfigValue__13", line: 789 }; return __func(_, this, arguments, site_writeConfigValue__13, 2, __frame, function __$site_writeConfigValue__13() {
      return exec(((("git config " + name) + " ") + value), __cb(_, __frame, 1, 4, _, true)); }); };






  site.doSitesPost = function(options, callback) {
    log.info((("Creating a new web site at " + options.site.name) + utils.getHostNameSuffix()));
    log.verbose("Subscription", options.subscription);
    log.verbose("Webspace", options.site.webspace);
    log.verbose("Site", options.site.name);

    var progress = cli.progress("Sending site information");
    getChannel().path(options.subscription).path("services").path("webspaces").path(options.site.webspace).path("sites").header("Content-Type", "application/xml").POST(writers.Site.xml(options.site), function(err, result) {









      progress.end();
      if (err) {
        logError("Failed to create site", err); }
       else {
        return cacheUtils.saveSite(options, result, function(err) {
          log.info(("Created website at " + clean(result).HostNames));
          log.verbose("Site", clean(result));
          return callback(err, result); }); } ;



      if ((err && (typeof err.Message !== "string"))) {
        return callback("Invalid service request", result); }
       else {
        return callback(err, result); } ; }); };




  site.doRepositoryPost = function(options, callback) {
    log.info("Initializing remote Azure repository");
    log.verbose("Subscription", options.subscription);
    log.verbose("Webspace", options.site.webspace);
    log.verbose("Site", options.site.name);

    var progress = cli.progress("Updating site information");
    getChannel().path(options.subscription).path("services").path("webspaces").path(options.site.webspace).path("sites").path(options.site.name).path("repository").POST("", function(err, result) {










      progress.end();
      if (err) {
        logError("Failed to initialize repository", err); }
       else {
        log.info("Remote azure repository initialized"); } ;

      return callback(err, result); }); };



  site.doRepositoryDelete = function(options, callback) {
    log.verbose("Subscription", options.subscription);
    log.verbose("Webspace", options.site.webspace);
    log.verbose("Site", options.site.name);

    var progress = cli.progress("Updating site information");
    getChannel().path(options.subscription).path("services").path("webspaces").path(options.site.webspace).path("sites").path(options.site.name).path("repository").DELETE(function(err, result) {









      progress.end();
      if (err) {
        logError("Failed to delete repository", err); }
       else {
        log.info("Repository deleted"); } ;

      return callback(err, result); }); };



  site.doSpacesGet = function site_doSpacesGet__14(options, _) { var progress, result, spaces; var __frame = { name: "site_doSpacesGet__14", line: 887 }; return __func(_, this, arguments, site_doSpacesGet__14, 1, __frame, function __$site_doSpacesGet__14() {
      log.verbose("Subscription", options.subscription);

      progress = cli.progress("Enumerating locations"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$site_doSpacesGet__14() {






            return getChannel().path(options.subscription).path("services").path("webspaces").path("").GET(__cb(_, __frame, 10, 19, function ___(__0, __1) { result = __1;

              log.json("silly", result);
              spaces = toArray(result.WebSpace);
              return cacheUtils.saveSpaces(options, spaces, __cb(_, __frame, 14, 6, function __$site_doSpacesGet__14() {
                return _(null, spaces); }, true)); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$site_doSpacesGet__14() {


              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, _); }); }); };



  site.doSitesGet = function site_doSitesGet__15(options, _) { var spaces, channel, progress, result, sites; var __frame = { name: "site_doSitesGet__15", line: 909 }; return __func(_, this, arguments, site_doSitesGet__15, 1, __frame, function __$site_doSitesGet__15() {
      log.verbose("Subscription", options.subscription);

      return site.doSpacesGet(options, __cb(_, __frame, 3, 17, function ___(__0, __2) { spaces = __2;




        channel = getChannel().path(options.subscription).path("services").path("webspaces");

        progress = cli.progress("Enumerating sites"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$site_doSitesGet__15() {

              return async.map(spaces, function __1(webspace, _) { var __frame = { name: "__1", line: 923 }; return __func(_, this, arguments, __1, 1, __frame, function __$__1() {







                  return channel.path(webspace.Name).path("sites").path("").query("propertiesToInclude", "repositoryuri,publishingpassword,publishingusername").GET(__cb(_, __frame, 6, 25, _, true)); }); }, __cb(_, __frame, 12, 19, function ___(__0, __3) { result = __3;



                sites = [];
                result.forEach(function(item) {
                  sites = sites.concat(toArray(item.Site)); });

                result = sites;

                log.json("verbose", sites);
                return cacheUtils.saveSites(options, result, __cb(_, __frame, 31, 6, function __$site_doSitesGet__15() {
                  return _(null, sites); }, true)); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$site_doSitesGet__15() {


                progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, _); }); }, true)); }); };



  site.doSiteGet = function(options, callback) {
    var progress = cli.progress("Retrieving site information");
    getChannel().path(options.subscription).path("services").path("webspaces").path(options.site.webspace).path("sites").path(options.site.name).query("propertiesToInclude", "repositoryuri,publishingpassword,publishingusername").GET(function(err, result) {









      progress.end();
      if (err) {
        logError("Failed to get site info", err);
        if ((err.Code === "NotFound")) {
          return cacheUtils.deleteSite(options, function() {
            return callback(err, result); }); } ; }


       else {
        return cacheUtils.saveSite(options, result, function(err) {
          log.verbose("Site", clean(result));
          return callback(err, result); }); } ;


      return callback(err, result); }); };



  site.doSiteConfigGet = function(options, callback) {
    var progress = cli.progress("Retrieving site config information");
    getChannel().path(options.subscription).path("services").path("webspaces").path(options.site.webspace).path("sites").path(options.site.name).path("config").GET(function(err, result) {









      progress.end();
      if (err) {
        logError("Failed to get site config info", err); }
       else {
        log.verbose("SiteConfig", clean(result)); } ;

      return callback(err, result); }); };



  site.doSiteConfigPUT = function site_doSiteConfigPUT__16(config, options, _) { var progress, xmlConfig; var __frame = { name: "site_doSiteConfigPUT__16", line: 1000 }; return __func(_, this, arguments, site_doSiteConfigPUT__16, 2, __frame, function __$site_doSiteConfigPUT__16() {
      progress = cli.progress("Updating site config information");

      if (!config.SiteConfig) {
        config = { SiteConfig: config }; } ;


      xmlConfig = js2xml.serialize(config);








      return getChannel().path(options.subscription).path("services").path("webspaces").path(options.site.webspace).path("sites").path(options.site.name).path("config").PUT(function(req) {
        req.write(xmlConfig);
        req.end(); }, __cb(_, __frame, 16, 4, _, true)); }); };



  site.doRepositoryGet = function site_doRepositoryGet__17(options, _) { var siteData; var __frame = { name: "site_doRepositoryGet__17", line: 1022 }; return __func(_, this, arguments, site_doRepositoryGet__17, 1, __frame, function __$site_doRepositoryGet__17() {
      return site.doSiteGet(options, __cb(_, __frame, 1, 19, function ___(__0, __1) { siteData = __1;
        return _(null, getRepositoryUri(siteData)); }, true)); }); };


  site.doPublishingUsersGet = function site_doPublishingUsersGet__18(options, _) { var progress, publishingUsers; var __frame = { name: "site_doPublishingUsersGet__18", line: 1027 }; return __func(_, this, arguments, site_doPublishingUsersGet__18, 1, __frame, function __$site_doPublishingUsersGet__18() {
      progress = cli.progress("Retrieving user information"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$site_doPublishingUsersGet__18() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$site_doPublishingUsersGet__18() {








                  return getChannel().path(options.subscription).path("services").path("webspaces").path("").query("properties", "publishingUsers").GET(__cb(_, __frame, 10, 36, function ___(__0, __1) { publishingUsers = clean(__1);

                    log.verbose("PublishingUsers", publishingUsers);
                    return _(null, publishingUsers); }, true)); }); })(function ___(e, __result) { __tryCatch(_, function __$site_doPublishingUsersGet__18() { if (e) {


                    return _(null, ["","",]); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$site_doPublishingUsersGet__18() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$site_doPublishingUsersGet__18() {



              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, _); }); }); };







  var writers = {
    Site: {
      xml: function(site) {
        return function(req) {
          req.write("<Site xmlns=\"http://schemas.microsoft.com/windowsazure\">");
          req.write("<HostNames>");
          req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
          req.write((site.name + utils.getHostNameSuffix()));
          req.write("</string>");

          if (site.hostname) {
            req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
            req.write(site.hostname);
            req.write("</string>"); } ;

          req.write("</HostNames>");
          req.write("<Name>");
          req.write(site.name);
          req.write("</Name>");
          req.write("</Site>");

          req.end(); }; } } };





  function clean(source) {
    if ((typeof (source) === "string")) {
      return source; } ;


    var target = { };
    var hasString = false;
    var hasNonString = false;
    var stringValue = "";

    for (var prop in source) {
      if ((prop == "@")) {
        continue; }
       else {
        if ((((prop === "#") || (prop === "string")) || (prop.substring((prop.length - 7)) === ":string"))) {
          hasString = true;
          stringValue = source[prop]; }
         else {
          hasNonString = true; } ;

        target[prop] = clean(source[prop]); } ; };


    if ((hasString && !hasNonString)) {
      return stringValue; } ;

    return target; };


  function logEachData(title, data) {
    var cleaned = clean(data);
    for (var property in cleaned) {
      log.data(((title + " ") + property), cleaned[property]); }; };


  site.logEachData = logEachData;

  function logError(message, err) {
    if ((arguments.length == 1)) {
      err = message;
      message = undefined; }
     else {
      log.error(message); } ;


    if (err) {
      if (err.message) {

        log.verbose("stack", err.stack);
        log.json("silly", err); }

       else if (err.Message) {

        log.json("verbose", clean(err)); }

       else {  }  ; } ; };





  function isArray(testObject) {
    return (((testObject && !(testObject.propertyIsEnumerable("length"))) && (typeof testObject === "object")) && (typeof testObject.length === "number")); };


  function toArray(testObject) {
    return (isArray(testObject) ? testObject : ((typeof testObject === "undefined") ? [] : [testObject,])); };


  function endsWith(str, suffix) {
    return (str.indexOf(suffix, (str.length - suffix.length)) !== -1); };


  function exec(cmd, cb) {
    child_process.exec(cmd, function(err, stdout, stderr) {
      cb(err, {
        stdout: stdout,
        stderr: stderr }); }); };};