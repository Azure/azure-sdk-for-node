/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

var util = require('util');
var azureCommon = require('azure-common');
var xml = azureCommon.xml2js;
var js2xml = azureCommon.js2xml;
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;

var TestSerializationClient = ( /** @lends TestSerializationClient */ function() {
  /**
   * @class
   * Initializes a new instance of the TestSerializationClient class.
   * @constructor
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets or sets
   * subscription credentials which uniquely identify Windows  Azure
   * subscription. The subscription ID forms part of the URI for  every call
   * that you make to the Service Management API.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [baseUri] The URI used as the base for all cloud service
   * management requests.
   * 
   * @param {Array} filters
   */
  function TestSerializationClient(credentials, baseUri, filters) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    TestSerializationClient['super_'].call(this, credentials, filters);
    
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://TBD';
    }
    /**
     * Provides an instance of the
     * [ComplexDeserializationOperations](-ComplexDeserializationOperations.html)
     * object.
     * @type {object}
     */
    this.complexDeserialization = new ComplexDeserializationOperations(this);
    /**
     * Provides an instance of the
     * [DeserializationOperations](-DeserializationOperations.html) object.
     * @type {object}
     */
    this.deserialization = new DeserializationOperations(this);
    /**
     * Provides an instance of the
     * [HeaderDeserializationOperations](-HeaderDeserializationOperations.html)
     * object.
     * @type {object}
     */
    this.headerDeserialization = new HeaderDeserializationOperations(this);
  }
  
  util.inherits(TestSerializationClient, Service);
  
  
  return TestSerializationClient;
})();
exports.TestSerializationClient = TestSerializationClient;

var ComplexDeserializationOperations = ( /** @lends ComplexDeserializationOperations */ function() {
  /**
   * @class
   * Operations for testing collection and constructed type deserialization.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [TestSerializationClient] {@link
   * TestSerializationClient~TestSerializationClient}.
   * See [complexDeserialization] {@link
   * TestSerializationClient~TestSerializationClient#complexDeserialization}.
   * Initializes a new instance of the ComplexDeserializationOperations class.
   * @constructor
   * 
   * @param {TestSerializationClient} client Reference to the service client.
   */
  function ComplexDeserializationOperations(client) {
    this.client = client;
  }
  
  /**
   * Test deserialiation of complex data type (composed types)
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ComplexDeserializationOperations.prototype.deleteComplexType = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/DeleteComplexType';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var deleteComplexTypeResultElement = js2xml.getElement(responseDoc, responseDoc, 'DELETECOMPLEXTYPERESULT', '');
        if (deleteComplexTypeResultElement) {
          var isNil = false;
          var nilAttribute = js2xml.getAttribute(responseDoc, deleteComplexTypeResultElement, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
          if (nilAttribute) {
            isNil = nilAttribute === 'true';
          }
          if (isNil === false) {
            var child1Element = js2xml.getElement(responseDoc, deleteComplexTypeResultElement, 'CHILD1', '');
            if (child1Element) {
              var isNil2 = false;
              var nilAttribute2 = js2xml.getAttribute(responseDoc, child1Element, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
              if (nilAttribute2) {
                isNil2 = nilAttribute2 === 'true';
              }
              if (isNil2 === false) {
                var child1Instance = {};
                result.child1 = child1Instance;
                
                var grandChild1Element = js2xml.getElement(responseDoc, child1Element, 'GRANDCHILD1', '');
                if (grandChild1Element) {
                  var isNil3 = false;
                  var nilAttribute3 = js2xml.getAttribute(responseDoc, grandChild1Element, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
                  if (nilAttribute3) {
                    isNil3 = nilAttribute3 === 'true';
                  }
                  if (isNil3 === false) {
                    var grandChild1Instance = {};
                    child1Instance.grandChild1 = grandChild1Instance;
                    
                    var greatGrandChild1Element = js2xml.getElement(responseDoc, grandChild1Element, 'GREATGRANDCHILD1', '');
                    if (greatGrandChild1Element) {
                      var isNil4 = false;
                      var nilAttribute4 = js2xml.getAttribute(responseDoc, greatGrandChild1Element, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
                      if (nilAttribute4) {
                        isNil4 = nilAttribute4 === 'true';
                      }
                      if (isNil4 === false) {
                        var greatGrandChild1Instance = greatGrandChild1Element;
                        grandChild1Instance.greatGrandChild1 = greatGrandChild1Instance;
                      }
                    }
                    
                    var greatGrandChild2Element = js2xml.getElement(responseDoc, grandChild1Element, 'GREATGRANDCHILD2', '');
                    if (greatGrandChild2Element) {
                      var isNil5 = false;
                      var nilAttribute5 = js2xml.getAttribute(responseDoc, greatGrandChild2Element, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
                      if (nilAttribute5) {
                        isNil5 = nilAttribute5 === 'true';
                      }
                      if (isNil5 === false) {
                        var greatGrandChild2Instance = greatGrandChild2Element;
                        grandChild1Instance.greatGrandChild2 = greatGrandChild2Instance;
                      }
                    }
                  }
                }
                
                var grandChild2Element = js2xml.getElement(responseDoc, child1Element, 'GRANDCHILD2', '');
                if (grandChild2Element) {
                  var isNil6 = false;
                  var nilAttribute6 = js2xml.getAttribute(responseDoc, grandChild2Element, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
                  if (nilAttribute6) {
                    isNil6 = nilAttribute6 === 'true';
                  }
                  if (isNil6 === false) {
                    var grandChild2Instance = {};
                    child1Instance.grandChild2 = grandChild2Instance;
                    
                    var greatGrandChild1Element2 = js2xml.getElement(responseDoc, grandChild2Element, 'GREATGRANDCHILD1', '');
                    if (greatGrandChild1Element2) {
                      var isNil7 = false;
                      var nilAttribute7 = js2xml.getAttribute(responseDoc, greatGrandChild1Element2, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
                      if (nilAttribute7) {
                        isNil7 = nilAttribute7 === 'true';
                      }
                      if (isNil7 === false) {
                        var greatGrandChild1Instance2 = greatGrandChild1Element2;
                        grandChild2Instance.greatGrandChild1 = greatGrandChild1Instance2;
                      }
                    }
                    
                    var greatGrandChild2Element2 = js2xml.getElement(responseDoc, grandChild2Element, 'GREATGRANDCHILD2', '');
                    if (greatGrandChild2Element2) {
                      var isNil8 = false;
                      var nilAttribute8 = js2xml.getAttribute(responseDoc, greatGrandChild2Element2, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
                      if (nilAttribute8) {
                        isNil8 = nilAttribute8 === 'true';
                      }
                      if (isNil8 === false) {
                        var greatGrandChild2Instance2 = greatGrandChild2Element2;
                        grandChild2Instance.greatGrandChild2 = greatGrandChild2Instance2;
                      }
                    }
                  }
                }
              }
            }
            
            var child2Element = js2xml.getElement(responseDoc, deleteComplexTypeResultElement, 'CHILD2', '');
            if (child2Element) {
              var isNil9 = false;
              var nilAttribute9 = js2xml.getAttribute(responseDoc, child2Element, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
              if (nilAttribute9) {
                isNil9 = nilAttribute9 === 'true';
              }
              if (isNil9 === false) {
                var child2Instance = {};
                result.child2 = child2Instance;
                
                var grandChild1Element2 = js2xml.getElement(responseDoc, child2Element, 'GRANDCHILD1', '');
                if (grandChild1Element2) {
                  var isNil10 = false;
                  var nilAttribute10 = js2xml.getAttribute(responseDoc, grandChild1Element2, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
                  if (nilAttribute10) {
                    isNil10 = nilAttribute10 === 'true';
                  }
                  if (isNil10 === false) {
                    var grandChild1Instance2 = {};
                    child2Instance.grandChild1 = grandChild1Instance2;
                    
                    var greatGrandChild1Element3 = js2xml.getElement(responseDoc, grandChild1Element2, 'GREATGRANDCHILD1', '');
                    if (greatGrandChild1Element3) {
                      var isNil11 = false;
                      var nilAttribute11 = js2xml.getAttribute(responseDoc, greatGrandChild1Element3, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
                      if (nilAttribute11) {
                        isNil11 = nilAttribute11 === 'true';
                      }
                      if (isNil11 === false) {
                        var greatGrandChild1Instance3 = greatGrandChild1Element3;
                        grandChild1Instance2.greatGrandChild1 = greatGrandChild1Instance3;
                      }
                    }
                    
                    var greatGrandChild2Element3 = js2xml.getElement(responseDoc, grandChild1Element2, 'GREATGRANDCHILD2', '');
                    if (greatGrandChild2Element3) {
                      var isNil12 = false;
                      var nilAttribute12 = js2xml.getAttribute(responseDoc, greatGrandChild2Element3, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
                      if (nilAttribute12) {
                        isNil12 = nilAttribute12 === 'true';
                      }
                      if (isNil12 === false) {
                        var greatGrandChild2Instance3 = greatGrandChild2Element3;
                        grandChild1Instance2.greatGrandChild2 = greatGrandChild2Instance3;
                      }
                    }
                  }
                }
                
                var grandChild2Element2 = js2xml.getElement(responseDoc, child2Element, 'GRANDCHILD2', '');
                if (grandChild2Element2) {
                  var isNil13 = false;
                  var nilAttribute13 = js2xml.getAttribute(responseDoc, grandChild2Element2, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
                  if (nilAttribute13) {
                    isNil13 = nilAttribute13 === 'true';
                  }
                  if (isNil13 === false) {
                    var grandChild2Instance2 = {};
                    child2Instance.grandChild2 = grandChild2Instance2;
                    
                    var greatGrandChild1Element4 = js2xml.getElement(responseDoc, grandChild2Element2, 'GREATGRANDCHILD1', '');
                    if (greatGrandChild1Element4) {
                      var isNil14 = false;
                      var nilAttribute14 = js2xml.getAttribute(responseDoc, greatGrandChild1Element4, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
                      if (nilAttribute14) {
                        isNil14 = nilAttribute14 === 'true';
                      }
                      if (isNil14 === false) {
                        var greatGrandChild1Instance4 = greatGrandChild1Element4;
                        grandChild2Instance2.greatGrandChild1 = greatGrandChild1Instance4;
                      }
                    }
                    
                    var greatGrandChild2Element4 = js2xml.getElement(responseDoc, grandChild2Element2, 'GREATGRANDCHILD2', '');
                    if (greatGrandChild2Element4) {
                      var isNil15 = false;
                      var nilAttribute15 = js2xml.getAttribute(responseDoc, greatGrandChild2Element4, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
                      if (nilAttribute15) {
                        isNil15 = nilAttribute15 === 'true';
                      }
                      if (isNil15 === false) {
                        var greatGrandChild2Instance4 = greatGrandChild2Element4;
                        grandChild2Instance2.greatGrandChild2 = greatGrandChild2Instance4;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of complex data type (enum)
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ComplexDeserializationOperations.prototype.getEnum = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetEnum';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var sizeElement = js2xml.getElement(responseDoc, responseDoc, 'SIZE', '');
        if (sizeElement) {
          var sizeInstance = sizeElement;
          result.size = sizeInstance;
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of complex data type (enum)
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ComplexDeserializationOperations.prototype.getEnumNilable = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetEnumNilable';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var statusElement = js2xml.getElement(responseDoc, responseDoc, 'STATUS', '');
        if (statusElement && (statusElement === null || statusElement === undefined || statusElement.length === 0) === false) {
          var isNil = false;
          var nilAttribute = js2xml.getAttribute(responseDoc, statusElement, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
          if (nilAttribute) {
            isNil = nilAttribute === 'true';
          }
          if (isNil === false) {
            var statusInstance = statusElement;
            result.status = statusInstance;
          }
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of complex data type (primitive dictionary)
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ComplexDeserializationOperations.prototype.getPrimitiveDictionaryNilable = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetPrimitiveDictionaryNilable';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { pairs: {} };
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var pairsSequenceElement = js2xml.getElement(responseDoc, responseDoc, 'PAIRS', 'HTTP://WWW.MICROSOFT.COM/AZURE/TEST/PARENT');
        if (pairsSequenceElement) {
          var isNil = false;
          var nilAttribute = js2xml.getAttribute(responseDoc, pairsSequenceElement, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
          if (nilAttribute) {
            isNil = nilAttribute === 'true';
          }
          if (isNil === false) {
            for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, pairsSequenceElement, 'PAIR', 'HTTP://WWW.MICROSOFT.COM/AZURE/TEST/CHILD').length; loweredIndex1 = loweredIndex1 + 1) {
              var pairsElement = js2xml.getElements(responseDoc, pairsSequenceElement, 'PAIR', 'HTTP://WWW.MICROSOFT.COM/AZURE/TEST/CHILD')[loweredIndex1];
              var pairsKey = js2xml.getElement(responseDoc, pairsElement, 'KEY', 'HTTP://WWW.MICROSOFT.COM/AZURE/TEST/KEY');
              var pairsValue = js2xml.getElement(responseDoc, pairsElement, 'VALUE', 'HTTP://WWW.MICROSOFT.COM/AZURE/TEST/VALUE');
              result.pairs[pairsKey] = pairsValue;
            }
          }
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of complex data type (primitive sequence)
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ComplexDeserializationOperations.prototype.getPrimitiveSequence = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetPrimitiveSequence';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { list: [] };
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var listSequenceElement = js2xml.getElement(responseDoc, responseDoc, 'LIST', 'HTTP://MICROSOSOFT.COM/WINDOWSAZURE/TEST');
        if (listSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, listSequenceElement, 'STRING', 'HTTP://MICROSOSOFT.COM/WINDOWSAZURE/TEST').length; loweredIndex1 = loweredIndex1 + 1) {
            var listElement = js2xml.getElements(responseDoc, listSequenceElement, 'STRING', 'HTTP://MICROSOSOFT.COM/WINDOWSAZURE/TEST')[loweredIndex1];
            result.list.push(listElement);
          }
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of complex data type (primitive sequence)
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ComplexDeserializationOperations.prototype.getPrimitiveSequenceNilable = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetPrimitiveSequenceNilable';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { list: [] };
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var listSequenceElement = js2xml.getElement(responseDoc, responseDoc, 'LIST', 'HTTP://MICROSOSOFT.COM/WINDOWSAZURE/TEST/PARENT');
        if (listSequenceElement) {
          var isNil = false;
          var nilAttribute = js2xml.getAttribute(responseDoc, listSequenceElement, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
          if (nilAttribute) {
            isNil = nilAttribute === 'true';
          }
          if (isNil === false) {
            for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, listSequenceElement, 'STRING', 'HTTP://MICROSOSOFT.COM/WINDOWSAZURE/TEST/CHILD').length; loweredIndex1 = loweredIndex1 + 1) {
              var listElement = js2xml.getElements(responseDoc, listSequenceElement, 'STRING', 'HTTP://MICROSOSOFT.COM/WINDOWSAZURE/TEST/CHILD')[loweredIndex1];
              result.list.push(listElement);
            }
          }
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of complex data type (sequence)
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ComplexDeserializationOperations.prototype.patchSequenceNilable = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/PatchSequenceNilable';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PATCH';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { list: [] };
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var listSequenceElement = js2xml.getElement(responseDoc, responseDoc, 'LIST', '');
        if (listSequenceElement) {
          var isNil = false;
          var nilAttribute = js2xml.getAttribute(responseDoc, listSequenceElement, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
          if (nilAttribute) {
            isNil = nilAttribute === 'true';
          }
          if (isNil === false) {
            for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, listSequenceElement, 'ITEM', '').length; loweredIndex1 = loweredIndex1 + 1) {
              var listElement = js2xml.getElements(responseDoc, listSequenceElement, 'ITEM', '')[loweredIndex1];
              var itemInstance = {};
              result.list.push(itemInstance);
              
              var nameElement = js2xml.getElement(responseDoc, listElement, 'NAME', '');
              if (nameElement) {
                var nameInstance = nameElement;
                itemInstance.name = nameInstance;
              }
            }
          }
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of complex data type (primitive dictionary)
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ComplexDeserializationOperations.prototype.postPrimitiveDictionary = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/PostPrimitiveDictionary';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { pairs: {} };
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var pairsSequenceElement = js2xml.getElement(responseDoc, responseDoc, 'PAIRS', '');
        if (pairsSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, pairsSequenceElement, 'PAIR', '').length; loweredIndex1 = loweredIndex1 + 1) {
            var pairsElement = js2xml.getElements(responseDoc, pairsSequenceElement, 'PAIR', '')[loweredIndex1];
            var pairsKey = js2xml.getElement(responseDoc, pairsElement, 'KEY', '');
            var pairsValue = js2xml.getElement(responseDoc, pairsElement, 'VALUE', '');
            result.pairs[pairsKey] = pairsValue;
          }
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of complex data type (sequence)
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ComplexDeserializationOperations.prototype.putSequence = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/PutSequence';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { list: [] };
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var listSequenceElement = js2xml.getElement(responseDoc, responseDoc, 'LIST', '');
        if (listSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < js2xml.getElements(responseDoc, listSequenceElement, 'ITEM', '').length; loweredIndex1 = loweredIndex1 + 1) {
            var listElement = js2xml.getElements(responseDoc, listSequenceElement, 'ITEM', '')[loweredIndex1];
            var itemInstance = {};
            result.list.push(itemInstance);
            
            var nameElement = js2xml.getElement(responseDoc, listElement, 'NAME', '');
            if (nameElement) {
              var nameInstance = nameElement;
              itemInstance.name = nameInstance;
            }
          }
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  return ComplexDeserializationOperations;
})();

var DeserializationOperations = ( /** @lends DeserializationOperations */ function() {
  /**
   * @class
   * Operations for testing deserialization.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [TestSerializationClient] {@link
   * TestSerializationClient~TestSerializationClient}.
   * See [deserialization] {@link
   * TestSerializationClient~TestSerializationClient#deserialization}.
   * Initializes a new instance of the DeserializationOperations class.
   * @constructor
   * 
   * @param {TestSerializationClient} client Reference to the service client.
   */
  function DeserializationOperations(client) {
    this.client = client;
  }
  
  /**
   * Test deserialiation of base data type (bool)
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeserializationOperations.prototype.getBool = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetBool';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var boolValueElement = js2xml.getElement(responseDoc, responseDoc, 'BOOLVALUE', '');
        if (boolValueElement) {
          var boolValueInstance = boolValueElement === 'true';
          result.boolValue = boolValueInstance;
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of base data type (bool) nilable nullable
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeserializationOperations.prototype.getBoolNilableNullable = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetBoolNilableNullable';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var boolValueElement = js2xml.getElement(responseDoc, responseDoc, 'BOOLVALUE', '');
        if (boolValueElement && (boolValueElement === null || boolValueElement === undefined || boolValueElement.length === 0) === false) {
          var isNil = false;
          var nilAttribute = js2xml.getAttribute(responseDoc, boolValueElement, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
          if (nilAttribute) {
            isNil = nilAttribute === 'true';
          }
          if (isNil === false) {
            var boolValueInstance = boolValueElement === 'true';
            result.boolValue = boolValueInstance;
          }
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of base data type (bool) nullable
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeserializationOperations.prototype.getBoolNullable = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetBoolNullable';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var boolValueElement = js2xml.getElement(responseDoc, responseDoc, 'BOOLVALUE', '');
        if (boolValueElement && (boolValueElement === null || boolValueElement === undefined || boolValueElement.length === 0) === false) {
          var boolValueInstance = boolValueElement === 'true';
          result.boolValue = boolValueInstance;
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of data type (byte[])
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeserializationOperations.prototype.getByteArray = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetByteArray';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var byteArrayValueElement = js2xml.getElement(responseDoc, responseDoc, 'BYTEARRAYVALUE', '');
        if (byteArrayValueElement) {
          var byteArrayValueInstance = byteArrayValueElement;
          result.byteArrayValue = byteArrayValueInstance;
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of data type (byte[]) nilable
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeserializationOperations.prototype.getByteArrayNilable = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetByteArrayNilable';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var byteArrayValueElement = js2xml.getElement(responseDoc, responseDoc, 'BYTEARRAYVALUE', '');
        if (byteArrayValueElement) {
          var isNil = false;
          var nilAttribute = js2xml.getAttribute(responseDoc, byteArrayValueElement, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
          if (nilAttribute) {
            isNil = nilAttribute === 'true';
          }
          if (isNil === false) {
            var byteArrayValueInstance = byteArrayValueElement;
            result.byteArrayValue = byteArrayValueInstance;
          }
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of data type (DateTime)
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeserializationOperations.prototype.getDateTime = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetDateTime';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var dateTimeValueElement = js2xml.getElement(responseDoc, responseDoc, 'DATETIMEVALUE', '');
        if (dateTimeValueElement) {
          var dateTimeValueInstance = new Date(dateTimeValueElement);
          result.dateTimeValue = dateTimeValueInstance;
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of data type (DateTime) nilable
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeserializationOperations.prototype.getDateTimeNilableNullable = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetDateTimeNilableNullable';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var dateTimeValueElement = js2xml.getElement(responseDoc, responseDoc, 'DATETIMEVALUE', '');
        if (dateTimeValueElement && (dateTimeValueElement === null || dateTimeValueElement === undefined || dateTimeValueElement.length === 0) === false) {
          var isNil = false;
          var nilAttribute = js2xml.getAttribute(responseDoc, dateTimeValueElement, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
          if (nilAttribute) {
            isNil = nilAttribute === 'true';
          }
          if (isNil === false) {
            var dateTimeValueInstance = new Date(dateTimeValueElement);
            result.dateTimeValue = dateTimeValueInstance;
          }
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of data type (DateTime)
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeserializationOperations.prototype.getDateTimeNullable = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetDateTimeNullable';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var dateTimeValueElement = js2xml.getElement(responseDoc, responseDoc, 'DATETIMEVALUE', '');
        if (dateTimeValueElement && (dateTimeValueElement === null || dateTimeValueElement === undefined || dateTimeValueElement.length === 0) === false) {
          var dateTimeValueInstance = new Date(dateTimeValueElement);
          result.dateTimeValue = dateTimeValueInstance;
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of base data type (double)
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeserializationOperations.prototype.getDouble = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetDouble';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var doubleValueElement = js2xml.getElement(responseDoc, responseDoc, 'DOUBLEVALUE', '');
        if (doubleValueElement) {
          var doubleValueInstance = parseFloat(doubleValueElement, 10);
          result.doubleValue = doubleValueInstance;
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of base data type (double) nilable nullable
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeserializationOperations.prototype.getDoubleNilableNullable = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetDoubleNilableNullable';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var doubleValueElement = js2xml.getElement(responseDoc, responseDoc, 'DOUBLEVALUE', '');
        if (doubleValueElement && (doubleValueElement === null || doubleValueElement === undefined || doubleValueElement.length === 0) === false) {
          var isNil = false;
          var nilAttribute = js2xml.getAttribute(responseDoc, doubleValueElement, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
          if (nilAttribute) {
            isNil = nilAttribute === 'true';
          }
          if (isNil === false) {
            var doubleValueInstance = parseFloat(doubleValueElement, 10);
            result.doubleValue = doubleValueInstance;
          }
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of base data type (double) nullable
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeserializationOperations.prototype.getDoubleNullable = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetDoubleNullable';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var doubleValueElement = js2xml.getElement(responseDoc, responseDoc, 'DOUBLEVALUE', '');
        if (doubleValueElement && (doubleValueElement === null || doubleValueElement === undefined || doubleValueElement.length === 0) === false) {
          var doubleValueInstance = parseFloat(doubleValueElement, 10);
          result.doubleValue = doubleValueInstance;
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of base data type (float)
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeserializationOperations.prototype.getFloat = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetFloat';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var floatValueElement = js2xml.getElement(responseDoc, responseDoc, 'FLOATVALUE', '');
        if (floatValueElement) {
          var floatValueInstance = parseFloat(floatValueElement, 10);
          result.floatValue = floatValueInstance;
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of base data type (float) nilable nullable
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeserializationOperations.prototype.getFloatNilableNullable = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetFloatNilableNullable';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var floatValueElement = js2xml.getElement(responseDoc, responseDoc, 'FLOATVALUE', '');
        if (floatValueElement && (floatValueElement === null || floatValueElement === undefined || floatValueElement.length === 0) === false) {
          var isNil = false;
          var nilAttribute = js2xml.getAttribute(responseDoc, floatValueElement, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
          if (nilAttribute) {
            isNil = nilAttribute === 'true';
          }
          if (isNil === false) {
            var floatValueInstance = parseFloat(floatValueElement, 10);
            result.floatValue = floatValueInstance;
          }
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of base data type (float) nullable
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeserializationOperations.prototype.getFloatNullable = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetFloatNullable';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var floatValueElement = js2xml.getElement(responseDoc, responseDoc, 'FLOATVALUE', '');
        if (floatValueElement && (floatValueElement === null || floatValueElement === undefined || floatValueElement.length === 0) === false) {
          var floatValueInstance = parseFloat(floatValueElement, 10);
          result.floatValue = floatValueInstance;
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of base data type (int)
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeserializationOperations.prototype.getInt = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetInt';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var intValueElement = js2xml.getElement(responseDoc, responseDoc, 'INTVALUE', '');
        if (intValueElement) {
          var intValueInstance = parseInt(intValueElement, 10);
          result.intValue = intValueInstance;
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of base data type (int) nilable nullable
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeserializationOperations.prototype.getIntNilableNullable = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetIntNilableNullable';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var intValueElement = js2xml.getElement(responseDoc, responseDoc, 'INTVALUE', '');
        if (intValueElement && (intValueElement === null || intValueElement === undefined || intValueElement.length === 0) === false) {
          var isNil = false;
          var nilAttribute = js2xml.getAttribute(responseDoc, intValueElement, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
          if (nilAttribute) {
            isNil = nilAttribute === 'true';
          }
          if (isNil === false) {
            var intValueInstance = parseInt(intValueElement, 10);
            result.intValue = intValueInstance;
          }
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of base data type (int) nullable
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeserializationOperations.prototype.getIntNullable = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetIntNullable';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var intValueElement = js2xml.getElement(responseDoc, responseDoc, 'INTVALUE', '');
        if (intValueElement && (intValueElement === null || intValueElement === undefined || intValueElement.length === 0) === false) {
          var intValueInstance = parseInt(intValueElement, 10);
          result.intValue = intValueInstance;
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of base data type (long)
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeserializationOperations.prototype.getLong = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetLong';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var longValueElement = js2xml.getElement(responseDoc, responseDoc, 'LONGVALUE', '');
        if (longValueElement) {
          var longValueInstance = parseInt(longValueElement, 10);
          result.longValue = longValueInstance;
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of base data type (long) nilable nullable
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeserializationOperations.prototype.getLongNilableNullable = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetLongNilableNullable';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var longValueElement = js2xml.getElement(responseDoc, responseDoc, 'LONGVALUE', '');
        if (longValueElement && (longValueElement === null || longValueElement === undefined || longValueElement.length === 0) === false) {
          var isNil = false;
          var nilAttribute = js2xml.getAttribute(responseDoc, longValueElement, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
          if (nilAttribute) {
            isNil = nilAttribute === 'true';
          }
          if (isNil === false) {
            var longValueInstance = parseInt(longValueElement, 10);
            result.longValue = longValueInstance;
          }
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of base data type (long) nullable
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeserializationOperations.prototype.getLongNullable = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetLongNullable';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var longValueElement = js2xml.getElement(responseDoc, responseDoc, 'LONGVALUE', '');
        if (longValueElement && (longValueElement === null || longValueElement === undefined || longValueElement.length === 0) === false) {
          var longValueInstance = parseInt(longValueElement, 10);
          result.longValue = longValueInstance;
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of data type (object)
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeserializationOperations.prototype.getObject = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetObject';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var objectValueElement = js2xml.getElement(responseDoc, responseDoc, 'OBJECTVALUE', '');
        if (objectValueElement) {
          var objectValueInstance = objectValueElement;
          result.objectValue = objectValueInstance;
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of data type (object) nilable
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeserializationOperations.prototype.getObjectNilable = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetObjectNilable';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var objectValueElement = js2xml.getElement(responseDoc, responseDoc, 'OBJECTVALUE', '');
        if (objectValueElement) {
          var isNil = false;
          var nilAttribute = js2xml.getAttribute(responseDoc, objectValueElement, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
          if (nilAttribute) {
            isNil = nilAttribute === 'true';
          }
          if (isNil === false) {
            var objectValueInstance = objectValueElement;
            result.objectValue = objectValueInstance;
          }
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of data type (string)
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeserializationOperations.prototype.getString = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetString';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var stringValueElement = js2xml.getElement(responseDoc, responseDoc, 'STRINGVALUE', '');
        if (stringValueElement) {
          var stringValueInstance = stringValueElement;
          result.stringValue = stringValueInstance;
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of data type (string) Base64Encoded
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeserializationOperations.prototype.getStringBase64Encoded = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetStringBase64Encoded';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var stringBase64EncodedValueElement = js2xml.getElement(responseDoc, responseDoc, 'STRINGBASE64ENCODEDVALUE', '');
        if (stringBase64EncodedValueElement) {
          var isNil = false;
          var nilAttribute = js2xml.getAttribute(responseDoc, stringBase64EncodedValueElement, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
          if (nilAttribute) {
            isNil = nilAttribute === 'true';
          }
          if (isNil === false) {
            var stringBase64EncodedValueInstance = new Buffer(stringBase64EncodedValueElement, 'base64').toString('ascii');
            result.stringBase64EncodedValue = stringBase64EncodedValueInstance;
          }
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of data type (string) nilable
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeserializationOperations.prototype.getStringNilable = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/GetStringNilable';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var stringValueElement = js2xml.getElement(responseDoc, responseDoc, 'STRINGVALUE', '');
        if (stringValueElement) {
          var isNil = false;
          var nilAttribute = js2xml.getAttribute(responseDoc, stringValueElement, 'NIL', 'HTTP://WWW.W3.ORG/2001/XMLSCHEMA-INSTANCE');
          if (nilAttribute) {
            isNil = nilAttribute === 'true';
          }
          if (isNil === false) {
            var stringValueInstance = stringValueElement;
            result.stringValue = stringValueInstance;
          }
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  return DeserializationOperations;
})();

var HeaderDeserializationOperations = ( /** @lends HeaderDeserializationOperations */ function() {
  /**
   * @class
   * Operations for testing response header and ststus code deserialization.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [TestSerializationClient] {@link
   * TestSerializationClient~TestSerializationClient}.
   * See [headerDeserialization] {@link
   * TestSerializationClient~TestSerializationClient#headerDeserialization}.
   * Initializes a new instance of the HeaderDeserializationOperations class.
   * @constructor
   * 
   * @param {TestSerializationClient} client Reference to the service client.
   */
  function HeaderDeserializationOperations(client) {
    this.client = client;
  }
  
  /**
   * Test response status codes
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  HeaderDeserializationOperations.prototype.getStatus = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/Headers/GetStatus';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201 && statusCode !== 202 && statusCode !== 203 && statusCode !== 204 && statusCode !== 205 && statusCode !== 206 && statusCode !== 304) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var options = {};
      options.trim = true;
      options.strict = false;
      return xml.parseString(responseContent, options, function (err2, responseDoc) {
        if (err2) {
          return callback(err2);
        }
        
        var sentStatusElement = js2xml.getElement(responseDoc, responseDoc, 'SENTSTATUS', '');
        if (sentStatusElement) {
          var sentStatusInstance = sentStatusElement;
          result.sentStatus = sentStatusInstance;
        }
        
        result.statusCode = statusCode;
        
        return callback(null, result);
      });
    });
  };
  
  /**
   * Test deserialiation of headers
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  HeaderDeserializationOperations.prototype.head = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/Headers/Head';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'HEAD';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.optionalValue1 = response.headers['x-ms-test-optional1'];
      result.optionalValue2 = response.headers['x-ms-test-optional2'] === 'true';
      result.requiredValue1 = response.headers['x-ms-test-required1'];
      result.requiredValue2 = response.headers['x-ms-test-required2'];
      
      return callback(null, result);
    });
  };
  
  return HeaderDeserializationOperations;
})();
